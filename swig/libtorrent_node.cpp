/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



#ifndef SWIG_V8_VERSION
#define SWIG_V8_VERSION 0x040685
#endif


#include <node.h>


#include <v8.h>

#include <errno.h>
#include <limits.h>
#include <stdlib.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* ---------------------------------------------------------------------------
 * These typedefs and defines are used to deal with v8 API changes
 *
 * ---------------------------------------------------------------------------*/

// First v8 version that uses "SetWeak" and not "MakeWeak"

#define SWIGV8_SETWEAK_VERSION 0x032224

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031803)
#define SWIGV8_STRING_NEW2(cstr, len) v8::String::New(cstr, len)
#else
#define SWIGV8_STRING_NEW2(cstr, len) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), cstr, v8::String::kNormalString, len)
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
typedef v8::Handle<v8::Value> SwigV8ReturnValue;
typedef v8::Arguments SwigV8Arguments;
typedef v8::AccessorInfo SwigV8PropertyCallbackInfo;
#define SWIGV8_RETURN(val) return scope.Close(val)
#define SWIGV8_RETURN_INFO(val, info) return scope.Close(val)
#else
typedef void SwigV8ReturnValue;
typedef v8::FunctionCallbackInfo<v8::Value> SwigV8Arguments;
typedef v8::PropertyCallbackInfo<v8::Value> SwigV8PropertyCallbackInfo;
#define SWIGV8_RETURN(val) args.GetReturnValue().Set(val); return
#define SWIGV8_RETURN_INFO(val, info) info.GetReturnValue().Set(val); return
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032117)
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope
#define SWIGV8_HANDLESCOPE_ESC() v8::HandleScope scope
#define SWIGV8_ESCAPE(val) return scope.Close(val)
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032224)
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_HANDLESCOPE_ESC() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_ESCAPE(val) return scope.Close(val)
#else
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_HANDLESCOPE_ESC() v8::EscapableHandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_ESCAPE(val) return scope.Escape(val)
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032224)
#define SWIGV8_ADJUST_MEMORY(size) v8::V8::AdjustAmountOfExternalAllocatedMemory(size)
#define SWIGV8_CURRENT_CONTEXT() v8::Context::GetCurrent()
#define SWIGV8_THROW_EXCEPTION(err) v8::ThrowException(err)
#define SWIGV8_STRING_NEW(str) v8::String::New(str)
#define SWIGV8_SYMBOL_NEW(sym) v8::String::NewSymbol(sym)
#else
#define SWIGV8_ADJUST_MEMORY(size) v8::Isolate::GetCurrent()->AdjustAmountOfExternalAllocatedMemory(size)
#define SWIGV8_CURRENT_CONTEXT() v8::Isolate::GetCurrent()->GetCurrentContext()
#define SWIGV8_THROW_EXCEPTION(err) v8::Isolate::GetCurrent()->ThrowException(err)
#define SWIGV8_STRING_NEW(str) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), str)
#define SWIGV8_SYMBOL_NEW(sym) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), sym)
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032318)
#define SWIGV8_ARRAY_NEW() v8::Array::New()
#define SWIGV8_BOOLEAN_NEW(bool) v8::Boolean::New(bool)
#define SWIGV8_EXTERNAL_NEW(val) v8::External::New(val)
#define SWIGV8_FUNCTEMPLATE_NEW(func) v8::FunctionTemplate::New(func)
#define SWIGV8_FUNCTEMPLATE_NEW_VOID() v8::FunctionTemplate::New()
#define SWIGV8_INT32_NEW(num) v8::Int32::New(num)
#define SWIGV8_INTEGER_NEW(num) v8::Integer::New(num)
#define SWIGV8_INTEGER_NEW_UNS(num) v8::Integer::NewFromUnsigned(num)
#define SWIGV8_NUMBER_NEW(num) v8::Number::New(num)
#define SWIGV8_OBJECT_NEW() v8::Object::New()
#define SWIGV8_UNDEFINED() v8::Undefined()
#define SWIGV8_NULL() v8::Null()
#else
#define SWIGV8_ARRAY_NEW() v8::Array::New(v8::Isolate::GetCurrent())
#define SWIGV8_BOOLEAN_NEW(bool) v8::Boolean::New(v8::Isolate::GetCurrent(), bool)
#define SWIGV8_EXTERNAL_NEW(val) v8::External::New(v8::Isolate::GetCurrent(), val)
#define SWIGV8_FUNCTEMPLATE_NEW(func) v8::FunctionTemplate::New(v8::Isolate::GetCurrent(), func)
#define SWIGV8_FUNCTEMPLATE_NEW_VOID() v8::FunctionTemplate::New(v8::Isolate::GetCurrent())
#define SWIGV8_INT32_NEW(num) v8::Int32::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_INTEGER_NEW(num) v8::Integer::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_INTEGER_NEW_UNS(num) v8::Integer::NewFromUnsigned(v8::Isolate::GetCurrent(), num)
#define SWIGV8_NUMBER_NEW(num) v8::Number::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_OBJECT_NEW() v8::Object::New(v8::Isolate::GetCurrent())
#define SWIGV8_UNDEFINED() v8::Undefined(v8::Isolate::GetCurrent())
#define SWIGV8_NULL() v8::Null(v8::Isolate::GetCurrent())
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ = v8::Persistent<v8::FunctionTemplate>::New(class);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ = v8::Persistent<v8::FunctionTemplate>::New(v8::Isolate::GetCurrent(), class);
#else
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ.Reset(v8::Isolate::GetCurrent(), class);
#endif

/* ---------------------------------------------------------------------------
 * Error handling
 *
 * ---------------------------------------------------------------------------*/

#define SWIG_Error(code, msg)     SWIGV8_ErrorHandler.error(code, msg)
#define SWIG_exception(code, msg) SWIGV8_ErrorHandler.error(code, msg)
#define SWIG_fail                 goto fail
#define SWIGV8_OVERLOAD false

SWIGINTERN void SWIG_V8_Raise(const char *msg) {
  SWIGV8_THROW_EXCEPTION(v8::Exception::Error(SWIGV8_STRING_NEW(msg)));
}

/*
  Note: There are two contexts for handling errors.
  A static V8ErrorHandler is used in not overloaded methods.
  For overloaded methods the throwing type checking mechanism is used
  during dispatching. As V8 exceptions can not be resetted properly
  the trick is to use a dynamic ErrorHandler with same local name as the global
  one.

  - See defintion of SWIG_Error above.
  - See code templates 'JS_function_dispatcher', 'JS_functionwrapper_overload',
    and 'JS_function_dispatch_case' in javascriptcode.swg

*/
class V8ErrorHandler {
public:
  virtual ~V8ErrorHandler() {}
  virtual void error(int code, const char *msg) {
    SWIG_V8_Raise(msg);
  }
};
// this is used in usually
SWIGRUNTIME V8ErrorHandler SWIGV8_ErrorHandler;

// instances of this are used in overloaded functions
class OverloadErrorHandler: public V8ErrorHandler {
public:
  virtual void error(int code, const char *msg) {
    err = v8::Exception::Error(SWIGV8_STRING_NEW(msg));
    if(code != SWIG_TypeError) {
        SWIGV8_THROW_EXCEPTION(err);
    }
  }
  v8::Handle<v8::Value> err;
};

/* ---------------------------------------------------------------------------
 * Basic Proxy object
 *
 * ---------------------------------------------------------------------------*/

// Note: to trigger the v8 gc more often one can tell v8 about the memory consumption
// TODO: we could add a v8 specific parameter to control this value
#define SWIGV8_AVG_OBJ_SIZE 1000

class SWIGV8_Proxy {
public:
  SWIGV8_Proxy(): swigCMemOwn(false), swigCObject(0), info(0) {
    SWIGV8_ADJUST_MEMORY(SWIGV8_AVG_OBJ_SIZE);
  };

  ~SWIGV8_Proxy() {
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
    handle.ClearWeak();
    handle.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
    handle.ClearWeak(v8::Isolate::GetCurrent());
    handle.Dispose(v8::Isolate::GetCurrent());
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    handle.ClearWeak();
    handle.Dispose();
#else    
    handle.ClearWeak();
    handle.Reset();
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    handle.Clear();
#endif

    SWIGV8_ADJUST_MEMORY(-SWIGV8_AVG_OBJ_SIZE);
  }

  bool swigCMemOwn;
  void *swigCObject;
  swig_type_info *info;
  v8::Persistent<v8::Object> handle;
};

class SWIGV8_ClientData {
public:
  v8::Persistent<v8::FunctionTemplate> class_templ;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  void (*dtor) (v8::Persistent< v8::Value> object, void *parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  void (*dtor) (v8::Isolate *isolate, v8::Persistent< v8::Value> object, void *parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  void (*dtor) (v8::Isolate *isolate, v8::Persistent< v8::Object > *object, SWIGV8_Proxy *proxy);
#else
  void (*dtor) (const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data);
#endif
};

SWIGRUNTIME v8::Persistent<v8::FunctionTemplate> SWIGV8_SWIGTYPE_Proxy_class_templ;

SWIGRUNTIME int SWIG_V8_ConvertInstancePtr(v8::Handle<v8::Object> objRef, void **ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE();

  if(objRef->InternalFieldCount() < 1) return SWIG_ERROR;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(v8::External::Unwrap(cdataRef));
#else
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(objRef->GetAlignedPointerFromInternalField(0));
#endif

  if(cdata == NULL) {
    return SWIG_ERROR;
  }
  if(cdata->info != info) {
    swig_cast_info *tc = SWIG_TypeCheckStruct(cdata->info, info);
    if (!tc && cdata->info->name) {
      tc = SWIG_TypeCheck(cdata->info->name, info);
    }
    bool type_valid = tc != 0;
    if(!type_valid) {
      return SWIG_TypeError;
    }
  }
  *ptr = cdata->swigCObject;
  if(flags & SWIG_POINTER_DISOWN) {
    cdata->swigCMemOwn = false;
  }
  return SWIG_OK;
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Persistent< v8::Value > object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Isolate *, v8::Persistent< v8::Value > object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Isolate *, v8::Persistent< v8::Object > *object, SWIGV8_Proxy *proxy) {
#else
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
  SWIGV8_Proxy *proxy = data.GetParameter();
#endif

  delete proxy;
}

SWIGRUNTIME int SWIG_V8_GetInstancePtr(v8::Handle<v8::Value> valRef, void **ptr) {
  if(!valRef->IsObject()) {
    return SWIG_TypeError;
  }
  v8::Handle<v8::Object> objRef = valRef->ToObject();

  if(objRef->InternalFieldCount() < 1) return SWIG_ERROR;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(v8::External::Unwrap(cdataRef));
#else
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(objRef->GetAlignedPointerFromInternalField(0));
#endif

  if(cdata == NULL) {
    return SWIG_ERROR;
  }

  *ptr = cdata->swigCObject;

  return SWIG_OK;
}

SWIGRUNTIME void SWIGV8_SetPrivateData(v8::Handle<v8::Object> obj, void *ptr, swig_type_info *info, int flags) {
  SWIGV8_Proxy *cdata = new SWIGV8_Proxy();
  cdata->swigCObject = ptr;
  cdata->swigCMemOwn = (flags & SWIG_POINTER_OWN) ? 1 : 0;
  cdata->info = info;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  obj->SetPointerInInternalField(0, cdata);
#else
  obj->SetAlignedPointerInInternalField(0, cdata);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle = v8::Persistent<v8::Object>::New(obj);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  cdata->handle = v8::Persistent<v8::Object>::New(v8::Isolate::GetCurrent(), obj);
#else
  cdata->handle.Reset(v8::Isolate::GetCurrent(), obj);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  // clientdata must be set for owned data as we need to register the dtor
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031918)
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, SWIGV8_Proxy_DefaultDtor);
  }
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#else
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.SetWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.SetWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MarkIndependent();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
  cdata->handle.MarkIndependent(v8::Isolate::GetCurrent());
#else
  cdata->handle.MarkIndependent();
#endif

}

SWIGRUNTIME int SWIG_V8_ConvertPtr(v8::Handle<v8::Value> valRef, void **ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE();
  
  /* special case: JavaScript null => C NULL pointer */
  if(valRef->IsNull()) {
    *ptr=0;
    return SWIG_OK;
  }
  if(!valRef->IsObject()) {
    return SWIG_TypeError;
  }
  v8::Handle<v8::Object> objRef = valRef->ToObject();
  return SWIG_V8_ConvertInstancePtr(objRef, ptr, info, flags);
}

SWIGRUNTIME v8::Handle<v8::Value> SWIG_V8_NewPointerObj(void *ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE_ESC();
  
  v8::Handle<v8::FunctionTemplate> class_templ;

  if (ptr == NULL) {
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    SWIGV8_ESCAPE(SWIGV8_NULL());
#else    
    v8::Local<v8::Primitive> result = SWIGV8_NULL();
    SWIGV8_ESCAPE(result);
#endif
  }

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  if(info->clientdata != 0) {
    class_templ = ((SWIGV8_ClientData*) info->clientdata)->class_templ;
  } else {
    class_templ = SWIGV8_SWIGTYPE_Proxy_class_templ;
  }
#else
  v8::Isolate *isolate = v8::Isolate::GetCurrent();

  if(info->clientdata != 0) {
    class_templ = v8::Local<v8::FunctionTemplate>::New(isolate, ((SWIGV8_ClientData*) info->clientdata)->class_templ);
  } else {
    class_templ = v8::Local<v8::FunctionTemplate>::New(isolate, SWIGV8_SWIGTYPE_Proxy_class_templ);
  }
#endif

//  v8::Handle<v8::Object> result = class_templ->InstanceTemplate()->NewInstance();
  v8::Local<v8::Object> result = class_templ->InstanceTemplate()->NewInstance();
  SWIGV8_SetPrivateData(result, ptr, info, flags);

  SWIGV8_ESCAPE(result);
}

#define SWIG_ConvertPtr(obj, ptr, info, flags)    SWIG_V8_ConvertPtr(obj, ptr, info, flags)
#define SWIG_NewPointerObj(ptr, info, flags)      SWIG_V8_NewPointerObj(ptr, info, flags)

#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_V8_ConvertInstancePtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_V8_NewPointerObj(thisvalue, type, flags)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_V8_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_V8_NewPointerObj(ptr, type, 0)

#define SWIG_GetInstancePtr(obj, ptr)    SWIG_V8_GetInstancePtr(obj, ptr)

SWIGRUNTIME SwigV8ReturnValue _SWIGV8_wrap_equals(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  bool result;
  int res1;
  int res2;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for equals.");

  res1 = SWIG_GetInstancePtr(args.Holder(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ERROR, "Could not get pointer from 'this' object for equals.");
  }
  res2 = SWIG_GetInstancePtr(args[0], &arg2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "equals" "', argument " "1"" of type '" "void *""'");
  }

  result = (bool)(arg1 == arg2);
  jsresult =  SWIGV8_BOOLEAN_NEW(result);

  SWIGV8_RETURN(jsresult);
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}

SWIGRUNTIME SwigV8ReturnValue _wrap_getCPtr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  void *arg1 = (void *) 0 ;
  long result;
  int res1;

  res1 = SWIG_GetInstancePtr(args.Holder(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getCPtr" "', argument " "1"" of type '" "void *""'");
  }

  result = (long)arg1;
  jsresult = SWIGV8_NUMBER_NEW(result);

  SWIGV8_RETURN(jsresult);
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}

/* ---------------------------------------------------------------------------
 * PackedData object
 *
 * ---------------------------------------------------------------------------*/

class SwigV8PackedData {
public:
  SwigV8PackedData(void *data, size_t size, swig_type_info *type): data(data), size(size), type(type) {};

  ~SwigV8PackedData() {
  };

  void *data;
  size_t size;
  swig_type_info *type;

  v8::Persistent<v8::Object> handle;
};

SWIGRUNTIMEINLINE
int SwigV8Packed_Check(v8::Handle<v8::Value> valRef) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> objRef = valRef->ToObject();
  if(objRef->InternalFieldCount() < 1) return false;
  v8::Handle<v8::Value> flag = objRef->GetHiddenValue(SWIGV8_STRING_NEW("__swig__packed_data__"));
  return (flag->IsBoolean() && flag->BooleanValue());
}

SWIGRUNTIME
swig_type_info *SwigV8Packed_UnpackData(v8::Handle<v8::Value> valRef, void *ptr, size_t size) {
  if (SwigV8Packed_Check(valRef)) {
    SWIGV8_HANDLESCOPE();
    
    SwigV8PackedData *sobj;

    v8::Handle<v8::Object> objRef = valRef->ToObject();

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
    v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
    sobj = static_cast<SwigV8PackedData*>(v8::External::Unwrap(cdataRef));
#else
    sobj = static_cast<SwigV8PackedData*>(objRef->GetAlignedPointerFromInternalField(0));
#endif
    if (sobj == NULL || sobj->size != size) return 0;
    memcpy(ptr, sobj->data, size);
    return sobj->type;
  } else {
    return 0;
  }
}

SWIGRUNTIME
int SWIGV8_ConvertPacked(v8::Handle<v8::Value> valRef, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigV8Packed_UnpackData(valRef, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Persistent< v8::Value > object, void *parameter) {
  SwigV8PackedData *cdata = static_cast<SwigV8PackedData *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
  SwigV8PackedData *cdata = static_cast<SwigV8PackedData *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Isolate *isolate, v8::Persistent<v8::Object> *object, SwigV8PackedData *cdata) {
#else
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(const v8::WeakCallbackData<v8::Object, SwigV8PackedData> &data) {
  v8::Local<v8::Object> object = data.GetValue();
  SwigV8PackedData *cdata = data.GetParameter();
#endif

  delete cdata;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  object.Clear();
  object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  object.Clear();
  object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
  object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  object->Dispose();
#else
  object.Clear();
#endif
}

SWIGRUNTIME
v8::Handle<v8::Value> SWIGV8_NewPackedObj(void *data, size_t size, swig_type_info *type) {
  SWIGV8_HANDLESCOPE_ESC();

  SwigV8PackedData *cdata = new SwigV8PackedData(data, size, type);
//  v8::Handle<v8::Object> obj = SWIGV8_OBJECT_NEW();
  v8::Local<v8::Object> obj = SWIGV8_OBJECT_NEW();

  obj->SetHiddenValue(SWIGV8_STRING_NEW("__swig__packed_data__"), SWIGV8_BOOLEAN_NEW(true));

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  obj->SetPointerInInternalField(0, cdata);
#else
  obj->SetAlignedPointerInInternalField(0, cdata);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle = v8::Persistent<v8::Object>::New(obj);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  cdata->handle = v8::Persistent<v8::Object>::New(v8::Isolate::GetCurrent(), obj);
#else
  cdata->handle.Reset(v8::Isolate::GetCurrent(), obj);
#endif


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MakeWeak(cdata, _wrap_SwigV8PackedData_delete);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031918)
  cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, _wrap_SwigV8PackedData_delete);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  cdata->handle.MakeWeak(cdata, _wrap_SwigV8PackedData_delete);
#else
  cdata->handle.SetWeak(cdata, _wrap_SwigV8PackedData_delete);
//  v8::V8::SetWeak(&cdata->handle, cdata, _wrap_SwigV8PackedData_delete);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MarkIndependent();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
  cdata->handle.MarkIndependent(v8::Isolate::GetCurrent());
#else
  cdata->handle.MarkIndependent();
#endif

  SWIGV8_ESCAPE(obj);
}

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIGV8_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIGV8_NewPackedObj(ptr, sz, type)


/* ---------------------------------------------------------------------------
 * Support for IN/OUTPUT typemaps (see Lib/typemaps/inoutlist.swg)
 *
 * ---------------------------------------------------------------------------*/

SWIGRUNTIME

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
v8::Handle<v8::Value> SWIGV8_AppendOutput(v8::Handle<v8::Value> result, v8::Handle<v8::Value> obj) {
#else
v8::Handle<v8::Value> SWIGV8_AppendOutput(v8::Local<v8::Value> result, v8::Handle<v8::Value> obj) {
#endif
  SWIGV8_HANDLESCOPE_ESC();
  
  if (result->IsUndefined()) {
    result = SWIGV8_ARRAY_NEW();
  }
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  v8::Handle<v8::Array> arr = v8::Handle<v8::Array>::Cast(result);
#else  
  v8::Local<v8::Array> arr = v8::Local<v8::Array>::Cast(result);
#endif
  arr->Set(arr->Length(), obj);

  SWIGV8_ESCAPE(arr);
}



// Note: since 3.19 there are new CallBack types, since 03.21.9 the old ones have been removed
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
typedef v8::InvocationCallback  SwigV8FunctionCallback;
typedef v8::AccessorGetter      SwigV8AccessorGetterCallback;
typedef v8::AccessorSetter      SwigV8AccessorSetterCallback;
typedef v8::AccessorInfo        SwigV8PropertyCallbackInfoVoid;
#else
typedef v8::FunctionCallback            SwigV8FunctionCallback;
typedef v8::AccessorGetterCallback      SwigV8AccessorGetterCallback;
typedef v8::AccessorSetterCallback      SwigV8AccessorSetterCallback;
typedef v8::PropertyCallbackInfo<void>  SwigV8PropertyCallbackInfoVoid;
#endif

/**
 * Creates a class template for a class with specified initialization function.
 */
SWIGRUNTIME v8::Handle<v8::FunctionTemplate> SWIGV8_CreateClassTemplate(const char* symbol) {
    SWIGV8_HANDLESCOPE_ESC();
    
    v8::Local<v8::FunctionTemplate> class_templ = SWIGV8_FUNCTEMPLATE_NEW_VOID();
    class_templ->SetClassName(SWIGV8_SYMBOL_NEW(symbol));

    v8::Handle<v8::ObjectTemplate> inst_templ = class_templ->InstanceTemplate();
    inst_templ->SetInternalFieldCount(1);

    v8::Handle<v8::ObjectTemplate> equals_templ = class_templ->PrototypeTemplate();
    equals_templ->Set(SWIGV8_SYMBOL_NEW("equals"), SWIGV8_FUNCTEMPLATE_NEW(_SWIGV8_wrap_equals));

    v8::Handle<v8::ObjectTemplate> cptr_templ = class_templ->PrototypeTemplate();
    cptr_templ->Set(SWIGV8_SYMBOL_NEW("getCPtr"), SWIGV8_FUNCTEMPLATE_NEW(_wrap_getCPtr));

    SWIGV8_ESCAPE(class_templ);
}

/**
 * Registers a class method with given name for a given class template.
 */
SWIGRUNTIME void SWIGV8_AddMemberFunction(v8::Handle<v8::FunctionTemplate> class_templ, const char* symbol,
  SwigV8FunctionCallback _func) {
    v8::Handle<v8::ObjectTemplate> proto_templ = class_templ->PrototypeTemplate();
    proto_templ->Set(SWIGV8_SYMBOL_NEW(symbol), SWIGV8_FUNCTEMPLATE_NEW(_func));
}

/**
 * Registers a class property with given name for a given class template.
 */
SWIGRUNTIME void SWIGV8_AddMemberVariable(v8::Handle<v8::FunctionTemplate> class_templ, const char* symbol,
  SwigV8AccessorGetterCallback getter, SwigV8AccessorSetterCallback setter) {
  v8::Handle<v8::ObjectTemplate> proto_templ = class_templ->InstanceTemplate();
  proto_templ->SetAccessor(SWIGV8_SYMBOL_NEW(symbol), getter, setter);
}

/**
 * Registers a class method with given name for a given object.
 */
SWIGRUNTIME void SWIGV8_AddStaticFunction(v8::Handle<v8::Object> obj, const char* symbol,
  const SwigV8FunctionCallback& _func) {
  obj->Set(SWIGV8_SYMBOL_NEW(symbol), SWIGV8_FUNCTEMPLATE_NEW(_func)->GetFunction());
}

/**
 * Registers a class method with given name for a given object.
 */
SWIGRUNTIME void SWIGV8_AddStaticVariable(v8::Handle<v8::Object> obj, const char* symbol,
  SwigV8AccessorGetterCallback getter, SwigV8AccessorSetterCallback setter) {
  obj->SetAccessor(SWIGV8_SYMBOL_NEW(symbol), getter, setter);
}

SWIGRUNTIME void JS_veto_set_variable(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info)
{
    char buffer[256];
    char msg[512];
    int res;

    property->WriteUtf8(buffer, 256);
    res = sprintf(msg, "Tried to write read-only variable: %s.", buffer);

    if(res<0) {
      SWIG_exception(SWIG_ERROR, "Tried to write read-only variable.");
    } else {
      SWIG_exception(SWIG_ERROR, msg);
    }
}



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_add_files_listener swig_types[0]
#define SWIGTYPE_p_alert_notify_callback swig_types[1]
#define SWIGTYPE_p_boost__system__error_category swig_types[2]
#define SWIGTYPE_p_boost__system__error_code swig_types[3]
#define SWIGTYPE_p_boost__system__error_condition swig_types[4]
#define SWIGTYPE_p_char swig_types[5]
#define SWIGTYPE_p_const_reference swig_types[6]
#define SWIGTYPE_p_dictionary_type swig_types[7]
#define SWIGTYPE_p_difference_type swig_types[8]
#define SWIGTYPE_p_headers_t swig_types[9]
#define SWIGTYPE_p_int swig_types[10]
#define SWIGTYPE_p_integer_type swig_types[11]
#define SWIGTYPE_p_key_type swig_types[12]
#define SWIGTYPE_p_libtorrent__add_torrent_alert swig_types[13]
#define SWIGTYPE_p_libtorrent__add_torrent_params swig_types[14]
#define SWIGTYPE_p_libtorrent__address swig_types[15]
#define SWIGTYPE_p_libtorrent__alert swig_types[16]
#define SWIGTYPE_p_libtorrent__announce_entry swig_types[17]
#define SWIGTYPE_p_libtorrent__anonymous_mode_alert swig_types[18]
#define SWIGTYPE_p_libtorrent__bdecode_node swig_types[19]
#define SWIGTYPE_p_libtorrent__bitfield swig_types[20]
#define SWIGTYPE_p_libtorrent__block_downloading_alert swig_types[21]
#define SWIGTYPE_p_libtorrent__block_finished_alert swig_types[22]
#define SWIGTYPE_p_libtorrent__block_info swig_types[23]
#define SWIGTYPE_p_libtorrent__block_timeout_alert swig_types[24]
#define SWIGTYPE_p_libtorrent__bloom_filterT_128_t swig_types[25]
#define SWIGTYPE_p_libtorrent__bloom_filterT_256_t swig_types[26]
#define SWIGTYPE_p_libtorrent__bt_peer_connection_handle swig_types[27]
#define SWIGTYPE_p_libtorrent__cache_flushed_alert swig_types[28]
#define SWIGTYPE_p_libtorrent__create_torrent swig_types[29]
#define SWIGTYPE_p_libtorrent__dht__dht_state swig_types[30]
#define SWIGTYPE_p_libtorrent__dht_announce_alert swig_types[31]
#define SWIGTYPE_p_libtorrent__dht_bootstrap_alert swig_types[32]
#define SWIGTYPE_p_libtorrent__dht_direct_response_alert swig_types[33]
#define SWIGTYPE_p_libtorrent__dht_error_alert swig_types[34]
#define SWIGTYPE_p_libtorrent__dht_get_peers_alert swig_types[35]
#define SWIGTYPE_p_libtorrent__dht_get_peers_reply_alert swig_types[36]
#define SWIGTYPE_p_libtorrent__dht_immutable_item_alert swig_types[37]
#define SWIGTYPE_p_libtorrent__dht_log_alert swig_types[38]
#define SWIGTYPE_p_libtorrent__dht_lookup swig_types[39]
#define SWIGTYPE_p_libtorrent__dht_mutable_item_alert swig_types[40]
#define SWIGTYPE_p_libtorrent__dht_outgoing_get_peers_alert swig_types[41]
#define SWIGTYPE_p_libtorrent__dht_pkt_alert swig_types[42]
#define SWIGTYPE_p_libtorrent__dht_put_alert swig_types[43]
#define SWIGTYPE_p_libtorrent__dht_reply_alert swig_types[44]
#define SWIGTYPE_p_libtorrent__dht_routing_bucket swig_types[45]
#define SWIGTYPE_p_libtorrent__dht_settings swig_types[46]
#define SWIGTYPE_p_libtorrent__dht_stats_alert swig_types[47]
#define SWIGTYPE_p_libtorrent__entry swig_types[48]
#define SWIGTYPE_p_libtorrent__external_ip_alert swig_types[49]
#define SWIGTYPE_p_libtorrent__fastresume_rejected_alert swig_types[50]
#define SWIGTYPE_p_libtorrent__file__iovec_t swig_types[51]
#define SWIGTYPE_p_libtorrent__file_completed_alert swig_types[52]
#define SWIGTYPE_p_libtorrent__file_error_alert swig_types[53]
#define SWIGTYPE_p_libtorrent__file_rename_failed_alert swig_types[54]
#define SWIGTYPE_p_libtorrent__file_renamed_alert swig_types[55]
#define SWIGTYPE_p_libtorrent__file_slice swig_types[56]
#define SWIGTYPE_p_libtorrent__file_storage swig_types[57]
#define SWIGTYPE_p_libtorrent__hash_failed_alert swig_types[58]
#define SWIGTYPE_p_libtorrent__i2p_alert swig_types[59]
#define SWIGTYPE_p_libtorrent__incoming_connection_alert swig_types[60]
#define SWIGTYPE_p_libtorrent__incoming_request_alert swig_types[61]
#define SWIGTYPE_p_libtorrent__invalid_request_alert swig_types[62]
#define SWIGTYPE_p_libtorrent__ip_filter swig_types[63]
#define SWIGTYPE_p_libtorrent__listen_failed_alert swig_types[64]
#define SWIGTYPE_p_libtorrent__listen_succeeded_alert swig_types[65]
#define SWIGTYPE_p_libtorrent__log_alert swig_types[66]
#define SWIGTYPE_p_libtorrent__lsd_error_alert swig_types[67]
#define SWIGTYPE_p_libtorrent__lsd_peer_alert swig_types[68]
#define SWIGTYPE_p_libtorrent__metadata_failed_alert swig_types[69]
#define SWIGTYPE_p_libtorrent__metadata_received_alert swig_types[70]
#define SWIGTYPE_p_libtorrent__mmap_cache_alert swig_types[71]
#define SWIGTYPE_p_libtorrent__partial_piece_info swig_types[72]
#define SWIGTYPE_p_libtorrent__peer_alert swig_types[73]
#define SWIGTYPE_p_libtorrent__peer_ban_alert swig_types[74]
#define SWIGTYPE_p_libtorrent__peer_blocked_alert swig_types[75]
#define SWIGTYPE_p_libtorrent__peer_class_info swig_types[76]
#define SWIGTYPE_p_libtorrent__peer_class_type_filter swig_types[77]
#define SWIGTYPE_p_libtorrent__peer_connect_alert swig_types[78]
#define SWIGTYPE_p_libtorrent__peer_connection_handle swig_types[79]
#define SWIGTYPE_p_libtorrent__peer_disconnected_alert swig_types[80]
#define SWIGTYPE_p_libtorrent__peer_error_alert swig_types[81]
#define SWIGTYPE_p_libtorrent__peer_info swig_types[82]
#define SWIGTYPE_p_libtorrent__peer_log_alert swig_types[83]
#define SWIGTYPE_p_libtorrent__peer_request swig_types[84]
#define SWIGTYPE_p_libtorrent__peer_snubbed_alert swig_types[85]
#define SWIGTYPE_p_libtorrent__peer_unsnubbed_alert swig_types[86]
#define SWIGTYPE_p_libtorrent__performance_alert swig_types[87]
#define SWIGTYPE_p_libtorrent__picker_log_alert swig_types[88]
#define SWIGTYPE_p_libtorrent__piece_finished_alert swig_types[89]
#define SWIGTYPE_p_libtorrent__port_filter swig_types[90]
#define SWIGTYPE_p_libtorrent__portmap_alert swig_types[91]
#define SWIGTYPE_p_libtorrent__portmap_error_alert swig_types[92]
#define SWIGTYPE_p_libtorrent__portmap_log_alert swig_types[93]
#define SWIGTYPE_p_libtorrent__read_piece_alert swig_types[94]
#define SWIGTYPE_p_libtorrent__request_dropped_alert swig_types[95]
#define SWIGTYPE_p_libtorrent__save_resume_data_alert swig_types[96]
#define SWIGTYPE_p_libtorrent__save_resume_data_failed_alert swig_types[97]
#define SWIGTYPE_p_libtorrent__scrape_failed_alert swig_types[98]
#define SWIGTYPE_p_libtorrent__scrape_reply_alert swig_types[99]
#define SWIGTYPE_p_libtorrent__session swig_types[100]
#define SWIGTYPE_p_libtorrent__session_handle swig_types[101]
#define SWIGTYPE_p_libtorrent__session_params swig_types[102]
#define SWIGTYPE_p_libtorrent__session_proxy swig_types[103]
#define SWIGTYPE_p_libtorrent__session_stats_alert swig_types[104]
#define SWIGTYPE_p_libtorrent__settings_pack swig_types[105]
#define SWIGTYPE_p_libtorrent__sha1_hash swig_types[106]
#define SWIGTYPE_p_libtorrent__spanT_char_const_t swig_types[107]
#define SWIGTYPE_p_libtorrent__spanT_char_t swig_types[108]
#define SWIGTYPE_p_libtorrent__spanT_libtorrent__file__iovec_t_const_t swig_types[109]
#define SWIGTYPE_p_libtorrent__state_changed_alert swig_types[110]
#define SWIGTYPE_p_libtorrent__state_update_alert swig_types[111]
#define SWIGTYPE_p_libtorrent__stats_alert swig_types[112]
#define SWIGTYPE_p_libtorrent__stats_metric swig_types[113]
#define SWIGTYPE_p_libtorrent__storage_moved_alert swig_types[114]
#define SWIGTYPE_p_libtorrent__storage_moved_failed_alert swig_types[115]
#define SWIGTYPE_p_libtorrent__string_view swig_types[116]
#define SWIGTYPE_p_libtorrent__tcp__endpoint swig_types[117]
#define SWIGTYPE_p_libtorrent__torrent_added_alert swig_types[118]
#define SWIGTYPE_p_libtorrent__torrent_alert swig_types[119]
#define SWIGTYPE_p_libtorrent__torrent_checked_alert swig_types[120]
#define SWIGTYPE_p_libtorrent__torrent_delete_failed_alert swig_types[121]
#define SWIGTYPE_p_libtorrent__torrent_deleted_alert swig_types[122]
#define SWIGTYPE_p_libtorrent__torrent_error_alert swig_types[123]
#define SWIGTYPE_p_libtorrent__torrent_finished_alert swig_types[124]
#define SWIGTYPE_p_libtorrent__torrent_handle swig_types[125]
#define SWIGTYPE_p_libtorrent__torrent_info swig_types[126]
#define SWIGTYPE_p_libtorrent__torrent_log_alert swig_types[127]
#define SWIGTYPE_p_libtorrent__torrent_need_cert_alert swig_types[128]
#define SWIGTYPE_p_libtorrent__torrent_paused_alert swig_types[129]
#define SWIGTYPE_p_libtorrent__torrent_removed_alert swig_types[130]
#define SWIGTYPE_p_libtorrent__torrent_resumed_alert swig_types[131]
#define SWIGTYPE_p_libtorrent__torrent_status swig_types[132]
#define SWIGTYPE_p_libtorrent__tracker_alert swig_types[133]
#define SWIGTYPE_p_libtorrent__tracker_announce_alert swig_types[134]
#define SWIGTYPE_p_libtorrent__tracker_error_alert swig_types[135]
#define SWIGTYPE_p_libtorrent__tracker_reply_alert swig_types[136]
#define SWIGTYPE_p_libtorrent__tracker_warning_alert swig_types[137]
#define SWIGTYPE_p_libtorrent__trackerid_alert swig_types[138]
#define SWIGTYPE_p_libtorrent__udp__endpoint swig_types[139]
#define SWIGTYPE_p_libtorrent__udp_error_alert swig_types[140]
#define SWIGTYPE_p_libtorrent__unwanted_block_alert swig_types[141]
#define SWIGTYPE_p_libtorrent__url_seed_alert swig_types[142]
#define SWIGTYPE_p_libtorrent__web_seed_entry swig_types[143]
#define SWIGTYPE_p_list_type swig_types[144]
#define SWIGTYPE_p_long swig_types[145]
#define SWIGTYPE_p_long_long swig_types[146]
#define SWIGTYPE_p_mapped_type swig_types[147]
#define SWIGTYPE_p_posix_stat_t swig_types[148]
#define SWIGTYPE_p_posix_wrapper swig_types[149]
#define SWIGTYPE_p_preformatted_type swig_types[150]
#define SWIGTYPE_p_set_piece_hashes_listener swig_types[151]
#define SWIGTYPE_p_short swig_types[152]
#define SWIGTYPE_p_signed_char swig_types[153]
#define SWIGTYPE_p_size_type swig_types[154]
#define SWIGTYPE_p_std__functionT_void_flibtorrent__sha1_hash_const_R_std__vectorT_char_t_R_boost__system__error_code_RF_t swig_types[155]
#define SWIGTYPE_p_std__mapT_int_libtorrent__bitfield_t swig_types[156]
#define SWIGTYPE_p_std__mapT_int_std__string_t swig_types[157]
#define SWIGTYPE_p_std__mapT_std__string_libtorrent__entry_t swig_types[158]
#define SWIGTYPE_p_std__mapT_std__string_long_t swig_types[159]
#define SWIGTYPE_p_std__pairT_int_int_t swig_types[160]
#define SWIGTYPE_p_std__pairT_libtorrent__string_view_libtorrent__bdecode_node_t swig_types[161]
#define SWIGTYPE_p_std__pairT_std__string_int_t swig_types[162]
#define SWIGTYPE_p_std__pairT_std__string_std__string_t swig_types[163]
#define SWIGTYPE_p_std__pairT_std__vectorT_int8_t_t_std__vectorT_int8_t_t_t swig_types[164]
#define SWIGTYPE_p_std__vectorT_int_t swig_types[165]
#define SWIGTYPE_p_std__vectorT_libtorrent__alert_p_t swig_types[166]
#define SWIGTYPE_p_std__vectorT_libtorrent__announce_entry_t swig_types[167]
#define SWIGTYPE_p_std__vectorT_libtorrent__block_info_t swig_types[168]
#define SWIGTYPE_p_std__vectorT_libtorrent__dht_lookup_t swig_types[169]
#define SWIGTYPE_p_std__vectorT_libtorrent__dht_routing_bucket_t swig_types[170]
#define SWIGTYPE_p_std__vectorT_libtorrent__entry_t swig_types[171]
#define SWIGTYPE_p_std__vectorT_libtorrent__file_slice_t swig_types[172]
#define SWIGTYPE_p_std__vectorT_libtorrent__partial_piece_info_t swig_types[173]
#define SWIGTYPE_p_std__vectorT_libtorrent__peer_info_t swig_types[174]
#define SWIGTYPE_p_std__vectorT_libtorrent__sha1_hash_t swig_types[175]
#define SWIGTYPE_p_std__vectorT_libtorrent__stats_metric_t swig_types[176]
#define SWIGTYPE_p_std__vectorT_libtorrent__tcp__endpoint_t swig_types[177]
#define SWIGTYPE_p_std__vectorT_libtorrent__torrent_handle_t swig_types[178]
#define SWIGTYPE_p_std__vectorT_libtorrent__torrent_status_t swig_types[179]
#define SWIGTYPE_p_std__vectorT_libtorrent__udp__endpoint_t swig_types[180]
#define SWIGTYPE_p_std__vectorT_libtorrent__web_seed_entry_t swig_types[181]
#define SWIGTYPE_p_std__vectorT_long_long_t swig_types[182]
#define SWIGTYPE_p_std__vectorT_signed_char_t swig_types[183]
#define SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_t swig_types[184]
#define SWIGTYPE_p_std__vectorT_std__pairT_std__string_int_t_t swig_types[185]
#define SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_t swig_types[186]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[187]
#define SWIGTYPE_p_string_type swig_types[188]
#define SWIGTYPE_p_swig_plugin swig_types[189]
#define SWIGTYPE_p_unsigned_char swig_types[190]
#define SWIGTYPE_p_unsigned_int swig_types[191]
#define SWIGTYPE_p_unsigned_long_long swig_types[192]
#define SWIGTYPE_p_unsigned_short swig_types[193]
#define SWIGTYPE_p_value_type swig_types[194]
static swig_type_info *swig_types[196];
static swig_module_info swig_module = {swig_types, 195, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */



#define SWIGVERSION 0x030010 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) (void *)((const void *)(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),(void**)(a)) 


#include <stdexcept>


// BEGIN common set include ------------------------------------------------------

#include <boost/system/error_code.hpp>

#include "libtorrent/version.hpp"
#include "libtorrent/error_code.hpp"
#include "libtorrent/bitfield.hpp"
#include "libtorrent/peer_request.hpp"
#include "libtorrent/entry.hpp"
#include "libtorrent/file_storage.hpp"
#include "libtorrent/torrent_info.hpp"
#include "libtorrent/torrent_handle.hpp"
#include "libtorrent/add_torrent_params.hpp"
#include "libtorrent/operations.hpp"
#include "libtorrent/session_stats.hpp"
#include "libtorrent/close_reason.hpp"
#include "libtorrent/alert.hpp"
#include "libtorrent/alert_types.hpp"
#include "libtorrent/peer_info.hpp"
#include "libtorrent/session_settings.hpp"
#include "libtorrent/settings_pack.hpp"
#include "libtorrent/peer_class.hpp"
#include "libtorrent/peer_class_type_filter.hpp"
#include "libtorrent/session_handle.hpp"
#include "libtorrent/kademlia/dht_state.hpp"
#include "libtorrent/session.hpp"
#include "libtorrent/peer_connection_handle.hpp"
#include "libtorrent/ip_filter.hpp"
#include "libtorrent/bdecode.hpp"
#include "libtorrent/bencode.hpp"
#include "libtorrent/magnet_uri.hpp"
#include "libtorrent/create_torrent.hpp"
#include "libtorrent/announce_entry.hpp"
#include "libtorrent/torrent_status.hpp"

#include "libtorrent.h"

// END common set include ------------------------------------------------------


#include <stdint.h>		// Use the C99 official header


#include <stdexcept>


#include <string>


#include <utility>


SWIGINTERN
int SWIG_AsVal_int (v8::Handle<v8::Value> valRef, int* val)
{
  if (!valRef->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = valRef->IntegerValue();

  return SWIG_OK;
}


SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_int  (int value)
{
  return SWIGV8_INT32_NEW(value);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(v8::Handle<v8::Value> valRef, char** cptr, size_t* psize, int *alloc)
{
  if(valRef->IsString()) {
    v8::Handle<v8::String> js_str = valRef->ToString();

    size_t len = js_str->Utf8Length() + 1;
    char* cstr = new char[len];
    js_str->WriteUtf8(cstr, len);
    
    if(alloc) *alloc = SWIG_NEWOBJ;
    if(psize) *psize = len;
    if(cptr) *cptr = cstr;
    
    return SWIG_OK;
  } else {
    if(valRef->IsObject()) {
      v8::Handle<v8::Object> obj = valRef->ToObject();
      // try if the object is a wrapped char[]
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      if (pchar_descriptor) {
        void* vptr = 0;
        if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
          if (cptr) *cptr = (char *) vptr;
          if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
          if (alloc) *alloc = SWIG_OLDOBJ;
          return SWIG_OK;
        }
      }
      return SWIG_TypeError;
    } else {
      return SWIG_TypeError;
    }
  }
}


SWIGINTERN int
SWIG_AsPtr_std_string (v8::Handle<v8::Value> obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      // TODO: handle extra long strings
      return SWIGV8_UNDEFINED();
    } else {
      v8::Handle<v8::String> js_str = SWIGV8_STRING_NEW2(carray, size);
      return js_str;
    }
  } else {
    return SWIGV8_UNDEFINED();
  }
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_long  (long value)
{
  return SWIGV8_NUMBER_NEW(value);
}


SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    SWIGV8_INTEGER_NEW_UNS(value) : SWIGV8_INTEGER_NEW((long)(value));
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_long_SS_long  (long long value)
{
  return SWIGV8_NUMBER_NEW(value);
}
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    SWIGV8_INTEGER_NEW_UNS(value) : SWIGV8_INTEGER_NEW((long)(value));
}
#endif


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  ((unsigned long)(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  ((unsigned long long)(value));
  }
#endif
}


SWIGINTERN
int SWIG_AsVal_double (v8::Handle<v8::Value> obj, double *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = obj->NumberValue();

  return SWIG_OK;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN
int SWIG_AsVal_unsigned_SS_long (v8::Handle<v8::Value> obj, unsigned long *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }

  long longVal = (long) obj->NumberValue();

  if(longVal < 0) {
      return SWIG_OverflowError;
  }

  if(val) *val = longVal;

  return SWIG_OK;
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN
int SWIG_AsVal_unsigned_SS_long_SS_long (v8::Handle<v8::Value> obj, unsigned long long *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }

  long long longVal = (long long) obj->NumberValue();

  if(longVal < 0) {
      return SWIG_OverflowError;
  }

  if(val) *val = longVal;

  return SWIG_OK;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (v8::Handle<v8::Value> obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = (size_t)(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = (size_t)(v);
  }
#endif
  return res;
}


SWIGINTERNINLINE
v8::Handle<v8::Value>
SWIG_From_bool  (bool value)
{
  return SWIGV8_BOOLEAN_NEW(value);
}


SWIGINTERN
int SWIG_AsVal_long (v8::Handle<v8::Value> obj, long* val)
{
  if (!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = (long) obj->IntegerValue();

  return SWIG_OK;
}


SWIGINTERN int
SWIG_AsVal_signed_SS_char (v8::Handle<v8::Value> obj, signed char *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SCHAR_MIN || v > SCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (signed char)(v);
    }
  }  
  return res;
}

SWIGINTERN int8_t std_vector_Sl_int8_t_Sg__get(std::vector< int8_t > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }

SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_signed_SS_char  (signed char value)
{    
  return SWIG_From_long  (value);
}

SWIGINTERN void std_vector_Sl_int8_t_Sg__set(std::vector< int8_t > *self,int i,std::vector< signed char >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::pair< std::string,int > >::const_reference std_vector_Sl_std_pair_Sl_std_string_Sc_int_Sg__Sg__get(std::vector< std::pair< std::string,int > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_pair_Sl_std_string_Sc_int_Sg__Sg__set(std::vector< std::pair< std::string,int > > *self,int i,std::vector< std::pair< std::string,int > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::pair< std::string,std::string > >::const_reference std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__get(std::vector< std::pair< std::string,std::string > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__set(std::vector< std::pair< std::string,std::string > > *self,int i,std::vector< std::pair< std::string,std::string > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::pair< int,int > >::const_reference std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__get(std::vector< std::pair< int,int > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__set(std::vector< std::pair< int,int > > *self,int i,std::vector< std::pair< int,int > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< int >::const_reference std_vector_Sl_int_Sg__get(std::vector< int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,int i,std::vector< int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN
int SWIG_AsVal_long_SS_long (v8::Handle<v8::Value> obj, long long* val)
{
  if (!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = (long long) obj->IntegerValue();

  return SWIG_OK;
}
#endif

SWIGINTERN std::vector< long long >::const_reference std_vector_Sl_long_SS_long_Sg__get(std::vector< long long > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_long_SS_long_Sg__set(std::vector< long long > *self,int i,std::vector< long long >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::sha1_hash >::const_reference std_vector_Sl_libtorrent_sha1_hash_Sg__get(std::vector< libtorrent::sha1_hash > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libtorrent_sha1_hash_Sg__set(std::vector< libtorrent::sha1_hash > *self,int i,std::vector< libtorrent::sha1_hash >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::torrent_status >::const_reference std_vector_Sl_libtorrent_torrent_status_Sg__get(std::vector< libtorrent::torrent_status > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libtorrent_torrent_status_Sg__set(std::vector< libtorrent::torrent_status > *self,int i,std::vector< libtorrent::torrent_status >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::torrent_handle >::const_reference std_vector_Sl_libtorrent_torrent_handle_Sg__get(std::vector< libtorrent::torrent_handle > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libtorrent_torrent_handle_Sg__set(std::vector< libtorrent::torrent_handle > *self,int i,std::vector< libtorrent::torrent_handle >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::file_slice >::const_reference std_vector_Sl_libtorrent_file_slice_Sg__get(std::vector< libtorrent::file_slice > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libtorrent_file_slice_Sg__set(std::vector< libtorrent::file_slice > *self,int i,std::vector< libtorrent::file_slice >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::dht_routing_bucket >::const_reference std_vector_Sl_libtorrent_dht_routing_bucket_Sg__get(std::vector< libtorrent::dht_routing_bucket > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libtorrent_dht_routing_bucket_Sg__set(std::vector< libtorrent::dht_routing_bucket > *self,int i,std::vector< libtorrent::dht_routing_bucket >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::dht_lookup >::const_reference std_vector_Sl_libtorrent_dht_lookup_Sg__get(std::vector< libtorrent::dht_lookup > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libtorrent_dht_lookup_Sg__set(std::vector< libtorrent::dht_lookup > *self,int i,std::vector< libtorrent::dht_lookup >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::block_info >::const_reference std_vector_Sl_libtorrent_block_info_Sg__get(std::vector< libtorrent::block_info > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libtorrent_block_info_Sg__set(std::vector< libtorrent::block_info > *self,int i,std::vector< libtorrent::block_info >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::partial_piece_info >::const_reference std_vector_Sl_libtorrent_partial_piece_info_Sg__get(std::vector< libtorrent::partial_piece_info > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libtorrent_partial_piece_info_Sg__set(std::vector< libtorrent::partial_piece_info > *self,int i,std::vector< libtorrent::partial_piece_info >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::peer_info >::const_reference std_vector_Sl_libtorrent_peer_info_Sg__get(std::vector< libtorrent::peer_info > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libtorrent_peer_info_Sg__set(std::vector< libtorrent::peer_info > *self,int i,std::vector< libtorrent::peer_info >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::stats_metric >::const_reference std_vector_Sl_libtorrent_stats_metric_Sg__get(std::vector< libtorrent::stats_metric > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libtorrent_stats_metric_Sg__set(std::vector< libtorrent::stats_metric > *self,int i,std::vector< libtorrent::stats_metric >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::entry >::const_reference std_vector_Sl_libtorrent_entry_Sg__get(std::vector< libtorrent::entry > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libtorrent_entry_Sg__set(std::vector< libtorrent::entry > *self,int i,std::vector< libtorrent::entry >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::web_seed_entry >::const_reference std_vector_Sl_libtorrent_web_seed_entry_Sg__get(std::vector< libtorrent::web_seed_entry > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libtorrent_web_seed_entry_Sg__set(std::vector< libtorrent::web_seed_entry > *self,int i,std::vector< libtorrent::web_seed_entry >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::announce_entry >::const_reference std_vector_Sl_libtorrent_announce_entry_Sg__get(std::vector< libtorrent::announce_entry > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libtorrent_announce_entry_Sg__set(std::vector< libtorrent::announce_entry > *self,int i,std::vector< libtorrent::announce_entry >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::tcp::endpoint >::const_reference std_vector_Sl_libtorrent_tcp_endpoint_Sg__get(std::vector< libtorrent::tcp::endpoint > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libtorrent_tcp_endpoint_Sg__set(std::vector< libtorrent::tcp::endpoint > *self,int i,std::vector< libtorrent::tcp::endpoint >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::udp::endpoint >::const_reference std_vector_Sl_libtorrent_udp_endpoint_Sg__get(std::vector< libtorrent::udp::endpoint > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libtorrent_udp_endpoint_Sg__set(std::vector< libtorrent::udp::endpoint > *self,int i,std::vector< libtorrent::udp::endpoint >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}

SWIGINTERN std::string const &std_map_Sl_int_Sc_std_string_Sg__get(std::map< int,std::string > *self,int const &key){
                std::map<int,std::string >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_int_Sc_std_string_Sg__set(std::map< int,std::string > *self,int const &key,std::string const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_int_Sc_std_string_Sg__erase(std::map< int,std::string > *self,int const &key){
                std::map<int,std::string >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_int_Sc_std_string_Sg__has_key(std::map< int,std::string > *self,int const &key){
                std::map<int,std::string >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN std::vector< int > std_map_Sl_int_Sc_std_string_Sg__keys(std::map< int,std::string > *self){
                std::vector<int> v;
                for(std::map<int, std::string>::iterator it = self->begin(),
                    end(self->end()); it != end; ++it) {
                    v.push_back(it->first);
                }
                return v;
            }
SWIGINTERN long const &std_map_Sl_std_string_Sc_long_Sg__get(std::map< std::string,long > *self,std::string const &key){
                std::map<std::string,long >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_long_Sg__set(std::map< std::string,long > *self,std::string const &key,long const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_long_Sg__erase(std::map< std::string,long > *self,std::string const &key){
                std::map<std::string,long >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_long_Sg__has_key(std::map< std::string,long > *self,std::string const &key){
                std::map<std::string,long >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN std::vector< std::string > std_map_Sl_std_string_Sc_long_Sg__keys(std::map< std::string,long > *self){
                std::vector<std::string> v;
                for(std::map<std::string, long>::iterator it = self->begin(),
                    end(self->end()); it != end; ++it) {
                    v.push_back(it->first);
                }
                return v;
            }
SWIGINTERN libtorrent::entry const &std_map_Sl_std_string_Sc_libtorrent_entry_Sg__get(std::map< std::string,libtorrent::entry > *self,std::string const &key){
                std::map<std::string,libtorrent::entry >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_libtorrent_entry_Sg__set(std::map< std::string,libtorrent::entry > *self,std::string const &key,libtorrent::entry const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_libtorrent_entry_Sg__erase(std::map< std::string,libtorrent::entry > *self,std::string const &key){
                std::map<std::string,libtorrent::entry >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_libtorrent_entry_Sg__has_key(std::map< std::string,libtorrent::entry > *self,std::string const &key){
                std::map<std::string,libtorrent::entry >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN std::vector< std::string > std_map_Sl_std_string_Sc_libtorrent_entry_Sg__keys(std::map< std::string,libtorrent::entry > *self){
                std::vector<std::string> v;
                for(std::map<std::string, libtorrent::entry>::iterator it = self->begin(),
                    end(self->end()); it != end; ++it) {
                    v.push_back(it->first);
                }
                return v;
            }
SWIGINTERN libtorrent::bitfield const &std_map_Sl_int_Sc_libtorrent_bitfield_Sg__get(std::map< int,libtorrent::bitfield > *self,int const &key){
                std::map<int,libtorrent::bitfield >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_int_Sc_libtorrent_bitfield_Sg__set(std::map< int,libtorrent::bitfield > *self,int const &key,libtorrent::bitfield const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_int_Sc_libtorrent_bitfield_Sg__erase(std::map< int,libtorrent::bitfield > *self,int const &key){
                std::map<int,libtorrent::bitfield >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_int_Sc_libtorrent_bitfield_Sg__has_key(std::map< int,libtorrent::bitfield > *self,int const &key){
                std::map<int,libtorrent::bitfield >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN std::vector< int > std_map_Sl_int_Sc_libtorrent_bitfield_Sg__keys(std::map< int,libtorrent::bitfield > *self){
                std::vector<int> v;
                for(std::map<int, libtorrent::bitfield>::iterator it = self->begin(),
                    end(self->end()); it != end; ++it) {
                    v.push_back(it->first);
                }
                return v;
            }
SWIGINTERN std::vector< libtorrent::alert * >::const_reference std_vector_Sl_libtorrent_alert_Sm__Sg__get(std::vector< libtorrent::alert * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libtorrent_alert_Sm__Sg__set(std::vector< libtorrent::alert * > *self,int i,std::vector< libtorrent::alert * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN int8_t libtorrent_span_Sl_char_Sg__get(libtorrent::span< char > *self,size_t const idx){
                return (*self)[idx];
            }
SWIGINTERN int8_t libtorrent_span_Sl_char_SS_const_Sg__get(libtorrent::span< char const > *self,size_t const idx){
                return (*self)[idx];
            }
SWIGINTERN libtorrent::file::iovec_t const libtorrent_span_Sl_libtorrent_file_iovec_t_SS_const_Sg__get(libtorrent::span< libtorrent::file::iovec_t const > *self,size_t const idx){
                return (*self)[idx];
            }
SWIGINTERN libtorrent::sha1_hash *new_libtorrent_sha1_hash__SWIG_2(std::vector< int8_t > const &s){
                return new libtorrent::sha1_hash({reinterpret_cast<char const*>(s.data()), s.size()});
            }
SWIGINTERN void libtorrent_sha1_hash_assign(libtorrent::sha1_hash *self,std::vector< int8_t > const &s){
                self->assign({reinterpret_cast<char const*>(s.data()), s.size()});
            }
SWIGINTERN int8_t libtorrent_sha1_hash_get(libtorrent::sha1_hash *self,size_t const idx){
                return (int8_t)(*self)[idx];
            }
SWIGINTERN int libtorrent_sha1_hash_hash_code(libtorrent::sha1_hash *self){
                char const* data = self->data();
                int result = 1;
                for (int i = 0; i < int(self->size()); i++) {
                    result = 31 * result + data[i];
                }
                return result;
            }
SWIGINTERN std::vector< int8_t > libtorrent_sha1_hash_to_bytes(libtorrent::sha1_hash *self){
                std::string s = self->to_string();
                return std::vector<int8_t>(s.begin(), s.end());
            }
SWIGINTERN std::string libtorrent_sha1_hash_to_hex(libtorrent::sha1_hash *self){
                return libtorrent::aux::to_hex(*self);
            }
SWIGINTERN bool libtorrent_sha1_hash_op_eq(libtorrent::sha1_hash const *self,libtorrent::sha1_hash const &n){
                return *self == n;
            }
SWIGINTERN bool libtorrent_sha1_hash_op_ne(libtorrent::sha1_hash const *self,libtorrent::sha1_hash const &n){
                return *self != n;
            }
SWIGINTERN bool libtorrent_sha1_hash_op_lt(libtorrent::sha1_hash const *self,libtorrent::sha1_hash const &n){
                return *self < n;
            }
SWIGINTERN int libtorrent_sha1_hash_compare(libtorrent::sha1_hash const &h1,libtorrent::sha1_hash const &h2){
                return h1 == h2 ? 0 : (h1 < h2 ? -1 : 1);
            }

SWIGINTERN
v8::Handle<v8::Value> SWIG_From_double   (double val)
{
  return SWIGV8_NUMBER_NEW(val);
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}

SWIGINTERN std::vector< int8_t > libtorrent_bloom_filter_Sl_128_Sg__to_bytes(libtorrent::bloom_filter< 128 > const *self){
                std::string s = self->to_string();
                return std::vector<int8_t>(s.begin(), s.end());
            }
SWIGINTERN void libtorrent_bloom_filter_Sl_128_Sg__from_bytes(libtorrent::bloom_filter< 128 > *self,std::vector< int8_t > const &v){
                self->from_string(reinterpret_cast<char const*>(&v[0]));
            }
SWIGINTERN std::vector< int8_t > libtorrent_bloom_filter_Sl_256_Sg__to_bytes(libtorrent::bloom_filter< 256 > const *self){
                std::string s = self->to_string();
                return std::vector<int8_t>(s.begin(), s.end());
            }
SWIGINTERN void libtorrent_bloom_filter_Sl_256_Sg__from_bytes(libtorrent::bloom_filter< 256 > *self,std::vector< int8_t > const &v){
                self->from_string(reinterpret_cast<char const*>(&v[0]));
            }
SWIGINTERN bool libtorrent_address_op_lt(libtorrent::address *self,libtorrent::address const &a2){
                return *self < a2;
            }
SWIGINTERN int libtorrent_address_compare(libtorrent::address const &a1,libtorrent::address const &a2){
                return a1 == a2 ? 0 : (a1 < a2 ? -1 : 1);
            }

SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (v8::Handle<v8::Value> obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (unsigned short)(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_unsigned_SS_short  (unsigned short value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERNINLINE v8::Handle<v8::Value> 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERN
int SWIG_AsVal_bool (v8::Handle<v8::Value> obj, bool *val)
{
  if(!obj->IsBoolean()) {
    return SWIG_ERROR;
  }

  if (val) *val = obj->BooleanValue();
  return SWIG_OK;
}




SWIGINTERN libtorrent::entry *new_libtorrent_entry__SWIG_8(std::string const &s){
        return new libtorrent::entry(s);
    }
SWIGINTERN libtorrent::entry &libtorrent_entry_get(libtorrent::entry *self,std::string const &key){
        return self->operator[](key);
    }
SWIGINTERN void libtorrent_entry_set__SWIG_0(libtorrent::entry *self,std::string const &key,std::string const &value){
        self->operator[](key) = value;
    }
SWIGINTERN void libtorrent_entry_set__SWIG_1(libtorrent::entry *self,std::string const &key,std::vector< int8_t > const &value){
         self->operator[](key) = std::string(value.begin(), value.end());
    }
SWIGINTERN void libtorrent_entry_set__SWIG_2(libtorrent::entry *self,std::string const &key,long long const &value){
        self->operator[](key) = value;
    }
SWIGINTERN void libtorrent_entry_set__SWIG_3(libtorrent::entry *self,std::string const &key,libtorrent::entry const &value){
        self->operator[](key) = value;
    }
SWIGINTERN std::vector< int8_t > libtorrent_entry_string_bytes(libtorrent::entry *self){
        std::string s = self->string();
        return std::vector<int8_t>(s.begin(), s.end());
    }
SWIGINTERN std::vector< int8_t > libtorrent_entry_preformatted_bytes(libtorrent::entry *self){
        std::vector<char> v = self->preformatted();
        return std::vector<int8_t>(v.begin(), v.end());
    }
SWIGINTERN std::vector< int8_t > libtorrent_entry_bencode(libtorrent::entry *self){
        std::vector<int8_t> buffer;
        libtorrent::bencode(std::back_inserter(buffer), *self);
        return buffer;
    }
SWIGINTERN libtorrent::entry libtorrent_entry_from_string_bytes(std::vector< int8_t > const &string_bytes){
        return libtorrent::entry(std::string(string_bytes.begin(), string_bytes.end()));
    }
SWIGINTERN libtorrent::entry libtorrent_entry_from_preformatted_bytes(std::vector< int8_t > const &preformatted_bytes){
        return libtorrent::entry(std::vector<char>(preformatted_bytes.begin(), preformatted_bytes.end()));
    }
SWIGINTERN libtorrent::entry libtorrent_entry_bdecode(std::vector< int8_t > &buffer){
        return libtorrent::bdecode(buffer.begin(), buffer.end());
    }

SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (v8::Handle<v8::Value> obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (unsigned int)(v);
    }
  }  
  return res;
}

SWIGINTERN libtorrent::torrent_info *new_libtorrent_torrent_info__SWIG_7(int64_t buffer_ptr,int size,libtorrent::error_code &ec,int flags=0){
        return new libtorrent::torrent_info(reinterpret_cast<char const*>(buffer_ptr), size, ec, flags);
    }
SWIGINTERN std::vector< libtorrent::block_info > libtorrent_partial_piece_info_get_blocks(libtorrent::partial_piece_info *self){
        return std::vector<libtorrent::block_info>(self->blocks, self->blocks + self->blocks_in_piece);
    }
SWIGINTERN void libtorrent_torrent_handle_add_piece_bytes__SWIG_0(libtorrent::torrent_handle *self,int piece,std::vector< int8_t > const &data,int flags=0){
        self->add_piece(piece, (char const*)&data[0], flags);
    }
SWIGINTERN libtorrent::torrent_info const *libtorrent_torrent_handle_torrent_file_ptr(libtorrent::torrent_handle *self){
        return self->torrent_file().get();
    }
SWIGINTERN libtorrent::torrent_info const *libtorrent_add_torrent_params_ti_ptr(libtorrent::add_torrent_params *self){
        return self->ti.get();
    }
SWIGINTERN void libtorrent_add_torrent_params_set_ti(libtorrent::add_torrent_params *self,libtorrent::torrent_info const &ti){
        self->ti = std::make_shared<libtorrent::torrent_info>(ti);
    }
SWIGINTERN libtorrent::add_torrent_params libtorrent_add_torrent_params_create_instance(){
        return libtorrent::add_torrent_params();
    }
SWIGINTERN libtorrent::add_torrent_params libtorrent_add_torrent_params_create_instance_disabled_storage(){
        return libtorrent::add_torrent_params(libtorrent::disabled_storage_constructor);
    }
SWIGINTERN libtorrent::add_torrent_params libtorrent_add_torrent_params_create_instance_zero_storage(){
        return libtorrent::add_torrent_params(libtorrent::zero_storage_constructor);
    }
SWIGINTERN libtorrent::add_torrent_params libtorrent_add_torrent_params_read_resume_data__SWIG_0(libtorrent::bdecode_node const &rd,libtorrent::error_code &ec){
        return libtorrent::read_resume_data(rd, ec);
    }
SWIGINTERN libtorrent::add_torrent_params libtorrent_add_torrent_params_read_resume_data__SWIG_1(std::vector< int8_t > const &buffer,libtorrent::error_code &ec){
        return libtorrent::read_resume_data((char const*)&buffer[0], buffer.size(), ec);
    }
SWIGINTERN std::string libtorrent_stats_metric_get_name(libtorrent::stats_metric *self){
        return std::string(self->name);
    }
SWIGINTERN libtorrent::torrent_alert const *libtorrent_alert_cast_to_torrent_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::torrent_alert>(a);      }
SWIGINTERN libtorrent::peer_alert const *libtorrent_alert_cast_to_peer_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::peer_alert>(a);      }
SWIGINTERN libtorrent::tracker_alert const *libtorrent_alert_cast_to_tracker_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::tracker_alert>(a);      }
SWIGINTERN libtorrent::torrent_added_alert const *libtorrent_alert_cast_to_torrent_added_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::torrent_added_alert>(a);      }
SWIGINTERN libtorrent::torrent_removed_alert const *libtorrent_alert_cast_to_torrent_removed_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::torrent_removed_alert>(a);      }
SWIGINTERN libtorrent::read_piece_alert const *libtorrent_alert_cast_to_read_piece_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::read_piece_alert>(a);      }
SWIGINTERN libtorrent::file_completed_alert const *libtorrent_alert_cast_to_file_completed_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::file_completed_alert>(a);      }
SWIGINTERN libtorrent::file_renamed_alert const *libtorrent_alert_cast_to_file_renamed_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::file_renamed_alert>(a);      }
SWIGINTERN libtorrent::file_rename_failed_alert const *libtorrent_alert_cast_to_file_rename_failed_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::file_rename_failed_alert>(a);      }
SWIGINTERN libtorrent::performance_alert const *libtorrent_alert_cast_to_performance_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::performance_alert>(a);      }
SWIGINTERN libtorrent::state_changed_alert const *libtorrent_alert_cast_to_state_changed_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::state_changed_alert>(a);      }
SWIGINTERN libtorrent::tracker_error_alert const *libtorrent_alert_cast_to_tracker_error_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::tracker_error_alert>(a);      }
SWIGINTERN libtorrent::tracker_warning_alert const *libtorrent_alert_cast_to_tracker_warning_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::tracker_warning_alert>(a);      }
SWIGINTERN libtorrent::scrape_reply_alert const *libtorrent_alert_cast_to_scrape_reply_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::scrape_reply_alert>(a);      }
SWIGINTERN libtorrent::scrape_failed_alert const *libtorrent_alert_cast_to_scrape_failed_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::scrape_failed_alert>(a);      }
SWIGINTERN libtorrent::tracker_reply_alert const *libtorrent_alert_cast_to_tracker_reply_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::tracker_reply_alert>(a);      }
SWIGINTERN libtorrent::dht_reply_alert const *libtorrent_alert_cast_to_dht_reply_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::dht_reply_alert>(a);      }
SWIGINTERN libtorrent::tracker_announce_alert const *libtorrent_alert_cast_to_tracker_announce_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::tracker_announce_alert>(a);      }
SWIGINTERN libtorrent::hash_failed_alert const *libtorrent_alert_cast_to_hash_failed_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::hash_failed_alert>(a);      }
SWIGINTERN libtorrent::peer_ban_alert const *libtorrent_alert_cast_to_peer_ban_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::peer_ban_alert>(a);      }
SWIGINTERN libtorrent::peer_unsnubbed_alert const *libtorrent_alert_cast_to_peer_unsnubbed_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::peer_unsnubbed_alert>(a);      }
SWIGINTERN libtorrent::peer_snubbed_alert const *libtorrent_alert_cast_to_peer_snubbed_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::peer_snubbed_alert>(a);      }
SWIGINTERN libtorrent::peer_error_alert const *libtorrent_alert_cast_to_peer_error_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::peer_error_alert>(a);      }
SWIGINTERN libtorrent::peer_connect_alert const *libtorrent_alert_cast_to_peer_connect_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::peer_connect_alert>(a);      }
SWIGINTERN libtorrent::peer_disconnected_alert const *libtorrent_alert_cast_to_peer_disconnected_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::peer_disconnected_alert>(a);      }
SWIGINTERN libtorrent::invalid_request_alert const *libtorrent_alert_cast_to_invalid_request_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::invalid_request_alert>(a);      }
SWIGINTERN libtorrent::torrent_finished_alert const *libtorrent_alert_cast_to_torrent_finished_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::torrent_finished_alert>(a);      }
SWIGINTERN libtorrent::piece_finished_alert const *libtorrent_alert_cast_to_piece_finished_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::piece_finished_alert>(a);      }
SWIGINTERN libtorrent::request_dropped_alert const *libtorrent_alert_cast_to_request_dropped_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::request_dropped_alert>(a);      }
SWIGINTERN libtorrent::block_timeout_alert const *libtorrent_alert_cast_to_block_timeout_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::block_timeout_alert>(a);      }
SWIGINTERN libtorrent::block_finished_alert const *libtorrent_alert_cast_to_block_finished_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::block_finished_alert>(a);      }
SWIGINTERN libtorrent::block_downloading_alert const *libtorrent_alert_cast_to_block_downloading_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::block_downloading_alert>(a);      }
SWIGINTERN libtorrent::unwanted_block_alert const *libtorrent_alert_cast_to_unwanted_block_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::unwanted_block_alert>(a);      }
SWIGINTERN libtorrent::storage_moved_alert const *libtorrent_alert_cast_to_storage_moved_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::storage_moved_alert>(a);      }
SWIGINTERN libtorrent::storage_moved_failed_alert const *libtorrent_alert_cast_to_storage_moved_failed_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::storage_moved_failed_alert>(a);      }
SWIGINTERN libtorrent::torrent_deleted_alert const *libtorrent_alert_cast_to_torrent_deleted_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::torrent_deleted_alert>(a);      }
SWIGINTERN libtorrent::torrent_delete_failed_alert const *libtorrent_alert_cast_to_torrent_delete_failed_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::torrent_delete_failed_alert>(a);      }
SWIGINTERN libtorrent::save_resume_data_alert const *libtorrent_alert_cast_to_save_resume_data_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::save_resume_data_alert>(a);      }
SWIGINTERN libtorrent::save_resume_data_failed_alert const *libtorrent_alert_cast_to_save_resume_data_failed_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::save_resume_data_failed_alert>(a);      }
SWIGINTERN libtorrent::torrent_paused_alert const *libtorrent_alert_cast_to_torrent_paused_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::torrent_paused_alert>(a);      }
SWIGINTERN libtorrent::torrent_resumed_alert const *libtorrent_alert_cast_to_torrent_resumed_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::torrent_resumed_alert>(a);      }
SWIGINTERN libtorrent::torrent_checked_alert const *libtorrent_alert_cast_to_torrent_checked_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::torrent_checked_alert>(a);      }
SWIGINTERN libtorrent::url_seed_alert const *libtorrent_alert_cast_to_url_seed_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::url_seed_alert>(a);      }
SWIGINTERN libtorrent::file_error_alert const *libtorrent_alert_cast_to_file_error_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::file_error_alert>(a);      }
SWIGINTERN libtorrent::metadata_failed_alert const *libtorrent_alert_cast_to_metadata_failed_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::metadata_failed_alert>(a);      }
SWIGINTERN libtorrent::metadata_received_alert const *libtorrent_alert_cast_to_metadata_received_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::metadata_received_alert>(a);      }
SWIGINTERN libtorrent::udp_error_alert const *libtorrent_alert_cast_to_udp_error_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::udp_error_alert>(a);      }
SWIGINTERN libtorrent::external_ip_alert const *libtorrent_alert_cast_to_external_ip_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::external_ip_alert>(a);      }
SWIGINTERN libtorrent::listen_failed_alert const *libtorrent_alert_cast_to_listen_failed_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::listen_failed_alert>(a);      }
SWIGINTERN libtorrent::listen_succeeded_alert const *libtorrent_alert_cast_to_listen_succeeded_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::listen_succeeded_alert>(a);      }
SWIGINTERN libtorrent::portmap_error_alert const *libtorrent_alert_cast_to_portmap_error_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::portmap_error_alert>(a);      }
SWIGINTERN libtorrent::portmap_alert const *libtorrent_alert_cast_to_portmap_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::portmap_alert>(a);      }
SWIGINTERN libtorrent::portmap_log_alert const *libtorrent_alert_cast_to_portmap_log_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::portmap_log_alert>(a);      }
SWIGINTERN libtorrent::fastresume_rejected_alert const *libtorrent_alert_cast_to_fastresume_rejected_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::fastresume_rejected_alert>(a);      }
SWIGINTERN libtorrent::peer_blocked_alert const *libtorrent_alert_cast_to_peer_blocked_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::peer_blocked_alert>(a);      }
SWIGINTERN libtorrent::dht_announce_alert const *libtorrent_alert_cast_to_dht_announce_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::dht_announce_alert>(a);      }
SWIGINTERN libtorrent::dht_get_peers_alert const *libtorrent_alert_cast_to_dht_get_peers_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::dht_get_peers_alert>(a);      }
SWIGINTERN libtorrent::stats_alert const *libtorrent_alert_cast_to_stats_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::stats_alert>(a);      }
SWIGINTERN libtorrent::cache_flushed_alert const *libtorrent_alert_cast_to_cache_flushed_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::cache_flushed_alert>(a);      }
SWIGINTERN libtorrent::anonymous_mode_alert const *libtorrent_alert_cast_to_anonymous_mode_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::anonymous_mode_alert>(a);      }
SWIGINTERN libtorrent::lsd_peer_alert const *libtorrent_alert_cast_to_lsd_peer_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::lsd_peer_alert>(a);      }
SWIGINTERN libtorrent::trackerid_alert const *libtorrent_alert_cast_to_trackerid_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::trackerid_alert>(a);      }
SWIGINTERN libtorrent::dht_bootstrap_alert const *libtorrent_alert_cast_to_dht_bootstrap_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::dht_bootstrap_alert>(a);      }
SWIGINTERN libtorrent::torrent_error_alert const *libtorrent_alert_cast_to_torrent_error_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::torrent_error_alert>(a);      }
SWIGINTERN libtorrent::torrent_need_cert_alert const *libtorrent_alert_cast_to_torrent_need_cert_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::torrent_need_cert_alert>(a);      }
SWIGINTERN libtorrent::incoming_connection_alert const *libtorrent_alert_cast_to_incoming_connection_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::incoming_connection_alert>(a);      }
SWIGINTERN libtorrent::add_torrent_alert const *libtorrent_alert_cast_to_add_torrent_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::add_torrent_alert>(a);      }
SWIGINTERN libtorrent::state_update_alert const *libtorrent_alert_cast_to_state_update_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::state_update_alert>(a);      }
SWIGINTERN libtorrent::mmap_cache_alert const *libtorrent_alert_cast_to_mmap_cache_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::mmap_cache_alert>(a);      }
SWIGINTERN libtorrent::session_stats_alert const *libtorrent_alert_cast_to_session_stats_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::session_stats_alert>(a);      }
SWIGINTERN libtorrent::dht_error_alert const *libtorrent_alert_cast_to_dht_error_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::dht_error_alert>(a);      }
SWIGINTERN libtorrent::dht_immutable_item_alert const *libtorrent_alert_cast_to_dht_immutable_item_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::dht_immutable_item_alert>(a);      }
SWIGINTERN libtorrent::dht_mutable_item_alert const *libtorrent_alert_cast_to_dht_mutable_item_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::dht_mutable_item_alert>(a);      }
SWIGINTERN libtorrent::dht_put_alert const *libtorrent_alert_cast_to_dht_put_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::dht_put_alert>(a);      }
SWIGINTERN libtorrent::i2p_alert const *libtorrent_alert_cast_to_i2p_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::i2p_alert>(a);      }
SWIGINTERN libtorrent::dht_outgoing_get_peers_alert const *libtorrent_alert_cast_to_dht_outgoing_get_peers_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::dht_outgoing_get_peers_alert>(a);      }
SWIGINTERN libtorrent::log_alert const *libtorrent_alert_cast_to_log_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::log_alert>(a);      }
SWIGINTERN libtorrent::torrent_log_alert const *libtorrent_alert_cast_to_torrent_log_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::torrent_log_alert>(a);      }
SWIGINTERN libtorrent::peer_log_alert const *libtorrent_alert_cast_to_peer_log_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::peer_log_alert>(a);      }
SWIGINTERN libtorrent::lsd_error_alert const *libtorrent_alert_cast_to_lsd_error_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::lsd_error_alert>(a);      }
SWIGINTERN libtorrent::dht_stats_alert const *libtorrent_alert_cast_to_dht_stats_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::dht_stats_alert>(a);      }
SWIGINTERN libtorrent::incoming_request_alert const *libtorrent_alert_cast_to_incoming_request_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::incoming_request_alert>(a);      }
SWIGINTERN libtorrent::dht_log_alert const *libtorrent_alert_cast_to_dht_log_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::dht_log_alert>(a);      }
SWIGINTERN libtorrent::dht_pkt_alert const *libtorrent_alert_cast_to_dht_pkt_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::dht_pkt_alert>(a);      }
SWIGINTERN libtorrent::dht_get_peers_reply_alert const *libtorrent_alert_cast_to_dht_get_peers_reply_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::dht_get_peers_reply_alert>(a);      }
SWIGINTERN libtorrent::dht_direct_response_alert const *libtorrent_alert_cast_to_dht_direct_response_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::dht_direct_response_alert>(a);      }
SWIGINTERN libtorrent::picker_log_alert const *libtorrent_alert_cast_to_picker_log_alert(libtorrent::alert const *a){          return libtorrent::alert_cast<libtorrent::picker_log_alert>(a);      }
SWIGINTERN int64_t libtorrent_alert_get_timestamp(libtorrent::alert *self){
        return libtorrent::total_milliseconds(self->timestamp().time_since_epoch());
    }
SWIGINTERN int64_t libtorrent_read_piece_alert_buffer_ptr(libtorrent::read_piece_alert *self){
        return reinterpret_cast<int64_t>(self->buffer.get());
    }
SWIGINTERN std::string libtorrent_storage_moved_failed_alert_get_operation(libtorrent::storage_moved_failed_alert *self){
        return std::string(self->operation);
    }
SWIGINTERN libtorrent::entry libtorrent_save_resume_data_alert_get_resume_data(libtorrent::save_resume_data_alert *self){
        return *(self->resume_data);
    }
SWIGINTERN std::string libtorrent_file_error_alert_get_operation(libtorrent::file_error_alert *self){
        return std::string(self->operation);
    }
SWIGINTERN std::string libtorrent_fastresume_rejected_alert_get_operation(libtorrent::fastresume_rejected_alert *self){
        return std::string(self->operation);
    }
SWIGINTERN int libtorrent_stats_alert_get_transferred(libtorrent::stats_alert *self,int index){
        return self->transferred[index];
    }
SWIGINTERN long long libtorrent_session_stats_alert_get_value(libtorrent::session_stats_alert *self,int index){
        return self->values[index];
    }
SWIGINTERN std::vector< int8_t > libtorrent_dht_mutable_item_alert_get_key(libtorrent::dht_mutable_item_alert *self){
        std::array<char, 32> arr = self->key;
        return std::vector<int8_t>(arr.begin(), arr.end());
    }
SWIGINTERN std::vector< int8_t > libtorrent_dht_mutable_item_alert_get_signature(libtorrent::dht_mutable_item_alert *self){
        std::array<char, 64> arr = self->signature;
        return std::vector<int8_t>(arr.begin(), arr.end());
    }
SWIGINTERN int64_t libtorrent_dht_mutable_item_alert_get_seq(libtorrent::dht_mutable_item_alert *self){
        return int64_t(self->seq);
    }
SWIGINTERN std::vector< int8_t > libtorrent_dht_mutable_item_alert_get_salt(libtorrent::dht_mutable_item_alert *self){
        std::string s = self->salt;
        return std::vector<int8_t>(s.begin(), s.end());
    }
SWIGINTERN std::vector< int8_t > libtorrent_dht_put_alert_get_public_key(libtorrent::dht_put_alert *self){
        std::array<char, 32> arr = self->public_key;
        return std::vector<int8_t>(arr.begin(), arr.end());
    }
SWIGINTERN std::vector< int8_t > libtorrent_dht_put_alert_get_signature(libtorrent::dht_put_alert *self){
        std::array<char, 64> arr = self->signature;
        return std::vector<int8_t>(arr.begin(), arr.end());
    }
SWIGINTERN std::vector< int8_t > libtorrent_dht_put_alert_get_salt(libtorrent::dht_put_alert *self){
        std::string s = self->salt;
        return std::vector<int8_t>(s.begin(), s.end());
    }
SWIGINTERN int64_t libtorrent_dht_put_alert_get_seq(libtorrent::dht_put_alert *self){
        return int64_t(self->seq);
    }
SWIGINTERN std::string libtorrent_peer_log_alert_get_event_type(libtorrent::peer_log_alert *self){
        return std::string(self->event_type);
    }
SWIGINTERN std::string libtorrent_dht_lookup_get_type(libtorrent::dht_lookup *self){
        return std::string(self->type);
    }
SWIGINTERN int64_t libtorrent_dht_direct_response_alert_get_userdata(libtorrent::dht_direct_response_alert *self){
        return (int64_t)self->userdata;
    }

/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
/* isfinite() is a macro for C99, but a function in namespace std for C++11. */
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined __cplusplus && __cplusplus >= 201103L
#  define SWIG_isfinite(X) (std::isfinite(X))
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN int
SWIG_AsVal_float (v8::Handle<v8::Value> obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (float)(v);
    }
  }  
  return res;
}

SWIGINTERN int64_t libtorrent_peer_info_get_last_request(libtorrent::peer_info *self){
        return libtorrent::total_milliseconds(self->last_request);
    }
SWIGINTERN int64_t libtorrent_peer_info_get_last_active(libtorrent::peer_info *self){
        return libtorrent::total_milliseconds(self->last_active);
    }
SWIGINTERN int64_t libtorrent_peer_info_get_download_queue_time(libtorrent::peer_info *self){
        return libtorrent::total_milliseconds(self->download_queue_time);
    }
SWIGINTERN void libtorrent_session_handle_dht_get_item__SWIG_1(libtorrent::session_handle *self,std::vector< int8_t > &key,std::vector< int8_t > &salt){
        if (key.size() != 32) {
            throw std::invalid_argument("Public key must be of size 32");
        }
        std::array<char, 32> pk;
        std::copy_n(key.begin(), 32, pk.begin());

        self->dht_get_item(pk, std::string(salt.begin(), salt.end()));
    }
SWIGINTERN void libtorrent_session_handle_dht_put_item__SWIG_1(libtorrent::session_handle *self,std::vector< int8_t > &key,std::vector< int8_t > &sk,libtorrent::entry &data,std::vector< int8_t > &salt){
        if (key.size() != 32) {
            throw std::invalid_argument("Public key must be of size 32");
        }
        if (sk.size() != 64) {
            throw std::invalid_argument("Private key must be of size 64");
        }
        std::array<char, 32> pk;
        std::copy_n(key.begin(), 32, pk.begin());

        using namespace std::placeholders;
        using namespace libtorrent::dht;

        self->dht_put_item(pk, std::bind(&dht_put_item_cb, _1, _2, _3, _4,
            public_key((char*)key.data()), secret_key((char*)sk.data()), data),
            std::string(salt.begin(), salt.end()));
    }
SWIGINTERN void libtorrent_session_handle_dht_direct_request__SWIG_1(libtorrent::session_handle *self,libtorrent::udp::endpoint ep,libtorrent::entry const &e,int64_t userdata){
        self->dht_direct_request(ep, e, (void*)userdata);
    }
SWIGINTERN libtorrent::alert *libtorrent_session_handle_wait_for_alert_ms(libtorrent::session_handle *self,int64_t max_wait){
        return self->wait_for_alert(libtorrent::milliseconds(max_wait));
    }
SWIGINTERN void libtorrent_session_handle_set_alert_notify_callback(libtorrent::session_handle *self,alert_notify_callback *cb){
        self->set_alert_notify(std::bind(&alert_notify_callback::on_alert, cb));
    }
SWIGINTERN void libtorrent_session_handle_add_extension(libtorrent::session_handle *self,swig_plugin *ext){
        self->add_extension(std::shared_ptr<libtorrent::plugin>(ext));
    }
SWIGINTERN int64_t libtorrent_peer_connection_handle_get_time_of_last_unchoke(libtorrent::peer_connection_handle *self){
        return libtorrent::total_milliseconds(self->time_of_last_unchoke() - libtorrent::clock_type::now());
    }
SWIGINTERN std::string libtorrent_bdecode_node_to_string(libtorrent::bdecode_node const &e,bool single_line,int indent){
        return libtorrent::print_entry(e, single_line, indent);
    }
SWIGINTERN int libtorrent_bdecode_node_bdecode(std::vector< int8_t > &buffer,libtorrent::bdecode_node &ret,libtorrent::error_code &ec){
        return libtorrent::bdecode((char const*)&buffer[0], (char const*)&buffer[0] + buffer.size(), ret, ec);
    }
SWIGINTERN libtorrent::torrent_info const *libtorrent_torrent_status_torrent_file_ptr(libtorrent::torrent_status *self){
        return self->torrent_file.lock().get();
    }
SWIGINTERN int64_t libtorrent_torrent_status_get_next_announce(libtorrent::torrent_status *self){
        return libtorrent::total_milliseconds(self->next_announce);
    }

#define SWIGV8_INIT libtorrent_initialize


SWIGV8_ClientData _exports_int_int_pair_clientData;
SWIGV8_ClientData _exports_string_int_pair_clientData;
SWIGV8_ClientData _exports_string_string_pair_clientData;
SWIGV8_ClientData _exports_string_view_bdecode_node_pair_clientData;
SWIGV8_ClientData _exports_byte_vectors_pair_clientData;
SWIGV8_ClientData _exports_byte_vector_clientData;
SWIGV8_ClientData _exports_string_vector_clientData;
SWIGV8_ClientData _exports_string_int_pair_vector_clientData;
SWIGV8_ClientData _exports_string_string_pair_vector_clientData;
SWIGV8_ClientData _exports_int_int_pair_vector_clientData;
SWIGV8_ClientData _exports_int_vector_clientData;
SWIGV8_ClientData _exports_int64_vector_clientData;
SWIGV8_ClientData _exports_sha1_hash_vector_clientData;
SWIGV8_ClientData _exports_torrent_status_vector_clientData;
SWIGV8_ClientData _exports_torrent_handle_vector_clientData;
SWIGV8_ClientData _exports_file_slice_vector_clientData;
SWIGV8_ClientData _exports_dht_routing_bucket_vector_clientData;
SWIGV8_ClientData _exports_dht_lookup_vector_clientData;
SWIGV8_ClientData _exports_block_info_vector_clientData;
SWIGV8_ClientData _exports_partial_piece_info_vector_clientData;
SWIGV8_ClientData _exports_peer_info_vector_clientData;
SWIGV8_ClientData _exports_stats_metric_vector_clientData;
SWIGV8_ClientData _exports_entry_vector_clientData;
SWIGV8_ClientData _exports_web_seed_entry_vector_clientData;
SWIGV8_ClientData _exports_announce_entry_vector_clientData;
SWIGV8_ClientData _exports_tcp_endpoint_vector_clientData;
SWIGV8_ClientData _exports_udp_endpoint_vector_clientData;
SWIGV8_ClientData _exports_int_string_map_clientData;
SWIGV8_ClientData _exports_string_long_map_clientData;
SWIGV8_ClientData _exports_string_entry_map_clientData;
SWIGV8_ClientData _exports_int_bitfield_map_clientData;
SWIGV8_ClientData _exports_alert_ptr_vector_clientData;
SWIGV8_ClientData _exports_iovec_t_clientData;
SWIGV8_ClientData _exports_byte_span_clientData;
SWIGV8_ClientData _exports_byte_const_span_clientData;
SWIGV8_ClientData _exports_iovec_span_clientData;
SWIGV8_ClientData _exports_sha1_hash_clientData;
SWIGV8_ClientData _exports_bloom_filter_128_clientData;
SWIGV8_ClientData _exports_bloom_filter_256_clientData;
SWIGV8_ClientData _exports_string_view_clientData;
SWIGV8_ClientData _exports_address_clientData;
SWIGV8_ClientData _exports_tcp_endpoint_clientData;
SWIGV8_ClientData _exports_udp_endpoint_clientData;
SWIGV8_ClientData _exports_error_category_clientData;
SWIGV8_ClientData _exports_error_condition_clientData;
SWIGV8_ClientData _exports_error_code_clientData;
SWIGV8_ClientData _exports_bitfield_clientData;
SWIGV8_ClientData _exports_peer_request_clientData;
SWIGV8_ClientData _exports_entry_clientData;
SWIGV8_ClientData _exports_file_slice_clientData;
SWIGV8_ClientData _exports_file_storage_clientData;
SWIGV8_ClientData _exports_web_seed_entry_clientData;
SWIGV8_ClientData _exports_torrent_info_clientData;
SWIGV8_ClientData _exports_block_info_clientData;
SWIGV8_ClientData _exports_partial_piece_info_clientData;
SWIGV8_ClientData _exports_torrent_handle_clientData;
SWIGV8_ClientData _exports_add_torrent_params_clientData;
SWIGV8_ClientData _exports_stats_metric_clientData;
SWIGV8_ClientData _exports_alert_clientData;
SWIGV8_ClientData _exports_torrent_alert_clientData;
SWIGV8_ClientData _exports_peer_alert_clientData;
SWIGV8_ClientData _exports_tracker_alert_clientData;
SWIGV8_ClientData _exports_torrent_added_alert_clientData;
SWIGV8_ClientData _exports_torrent_removed_alert_clientData;
SWIGV8_ClientData _exports_read_piece_alert_clientData;
SWIGV8_ClientData _exports_file_completed_alert_clientData;
SWIGV8_ClientData _exports_file_renamed_alert_clientData;
SWIGV8_ClientData _exports_file_rename_failed_alert_clientData;
SWIGV8_ClientData _exports_performance_alert_clientData;
SWIGV8_ClientData _exports_state_changed_alert_clientData;
SWIGV8_ClientData _exports_tracker_error_alert_clientData;
SWIGV8_ClientData _exports_tracker_warning_alert_clientData;
SWIGV8_ClientData _exports_scrape_reply_alert_clientData;
SWIGV8_ClientData _exports_scrape_failed_alert_clientData;
SWIGV8_ClientData _exports_tracker_reply_alert_clientData;
SWIGV8_ClientData _exports_dht_reply_alert_clientData;
SWIGV8_ClientData _exports_tracker_announce_alert_clientData;
SWIGV8_ClientData _exports_hash_failed_alert_clientData;
SWIGV8_ClientData _exports_peer_ban_alert_clientData;
SWIGV8_ClientData _exports_peer_unsnubbed_alert_clientData;
SWIGV8_ClientData _exports_peer_snubbed_alert_clientData;
SWIGV8_ClientData _exports_peer_error_alert_clientData;
SWIGV8_ClientData _exports_peer_connect_alert_clientData;
SWIGV8_ClientData _exports_peer_disconnected_alert_clientData;
SWIGV8_ClientData _exports_invalid_request_alert_clientData;
SWIGV8_ClientData _exports_torrent_finished_alert_clientData;
SWIGV8_ClientData _exports_piece_finished_alert_clientData;
SWIGV8_ClientData _exports_request_dropped_alert_clientData;
SWIGV8_ClientData _exports_block_timeout_alert_clientData;
SWIGV8_ClientData _exports_block_finished_alert_clientData;
SWIGV8_ClientData _exports_block_downloading_alert_clientData;
SWIGV8_ClientData _exports_unwanted_block_alert_clientData;
SWIGV8_ClientData _exports_storage_moved_alert_clientData;
SWIGV8_ClientData _exports_storage_moved_failed_alert_clientData;
SWIGV8_ClientData _exports_torrent_deleted_alert_clientData;
SWIGV8_ClientData _exports_torrent_delete_failed_alert_clientData;
SWIGV8_ClientData _exports_save_resume_data_alert_clientData;
SWIGV8_ClientData _exports_save_resume_data_failed_alert_clientData;
SWIGV8_ClientData _exports_torrent_paused_alert_clientData;
SWIGV8_ClientData _exports_torrent_resumed_alert_clientData;
SWIGV8_ClientData _exports_torrent_checked_alert_clientData;
SWIGV8_ClientData _exports_url_seed_alert_clientData;
SWIGV8_ClientData _exports_file_error_alert_clientData;
SWIGV8_ClientData _exports_metadata_failed_alert_clientData;
SWIGV8_ClientData _exports_metadata_received_alert_clientData;
SWIGV8_ClientData _exports_udp_error_alert_clientData;
SWIGV8_ClientData _exports_external_ip_alert_clientData;
SWIGV8_ClientData _exports_listen_failed_alert_clientData;
SWIGV8_ClientData _exports_listen_succeeded_alert_clientData;
SWIGV8_ClientData _exports_portmap_error_alert_clientData;
SWIGV8_ClientData _exports_portmap_alert_clientData;
SWIGV8_ClientData _exports_portmap_log_alert_clientData;
SWIGV8_ClientData _exports_fastresume_rejected_alert_clientData;
SWIGV8_ClientData _exports_peer_blocked_alert_clientData;
SWIGV8_ClientData _exports_dht_announce_alert_clientData;
SWIGV8_ClientData _exports_dht_get_peers_alert_clientData;
SWIGV8_ClientData _exports_stats_alert_clientData;
SWIGV8_ClientData _exports_cache_flushed_alert_clientData;
SWIGV8_ClientData _exports_anonymous_mode_alert_clientData;
SWIGV8_ClientData _exports_lsd_peer_alert_clientData;
SWIGV8_ClientData _exports_trackerid_alert_clientData;
SWIGV8_ClientData _exports_dht_bootstrap_alert_clientData;
SWIGV8_ClientData _exports_torrent_error_alert_clientData;
SWIGV8_ClientData _exports_torrent_need_cert_alert_clientData;
SWIGV8_ClientData _exports_incoming_connection_alert_clientData;
SWIGV8_ClientData _exports_add_torrent_alert_clientData;
SWIGV8_ClientData _exports_state_update_alert_clientData;
SWIGV8_ClientData _exports_mmap_cache_alert_clientData;
SWIGV8_ClientData _exports_session_stats_alert_clientData;
SWIGV8_ClientData _exports_dht_error_alert_clientData;
SWIGV8_ClientData _exports_dht_immutable_item_alert_clientData;
SWIGV8_ClientData _exports_dht_mutable_item_alert_clientData;
SWIGV8_ClientData _exports_dht_put_alert_clientData;
SWIGV8_ClientData _exports_i2p_alert_clientData;
SWIGV8_ClientData _exports_dht_outgoing_get_peers_alert_clientData;
SWIGV8_ClientData _exports_log_alert_clientData;
SWIGV8_ClientData _exports_torrent_log_alert_clientData;
SWIGV8_ClientData _exports_peer_log_alert_clientData;
SWIGV8_ClientData _exports_lsd_error_alert_clientData;
SWIGV8_ClientData _exports_dht_lookup_clientData;
SWIGV8_ClientData _exports_dht_routing_bucket_clientData;
SWIGV8_ClientData _exports_dht_stats_alert_clientData;
SWIGV8_ClientData _exports_incoming_request_alert_clientData;
SWIGV8_ClientData _exports_dht_log_alert_clientData;
SWIGV8_ClientData _exports_dht_pkt_alert_clientData;
SWIGV8_ClientData _exports_dht_get_peers_reply_alert_clientData;
SWIGV8_ClientData _exports_dht_direct_response_alert_clientData;
SWIGV8_ClientData _exports_picker_log_alert_clientData;
SWIGV8_ClientData _exports_peer_info_clientData;
SWIGV8_ClientData _exports_dht_settings_clientData;
SWIGV8_ClientData _exports_settings_pack_clientData;
SWIGV8_ClientData _exports_peer_class_info_clientData;
SWIGV8_ClientData _exports_peer_class_type_filter_clientData;
SWIGV8_ClientData _exports_session_handle_clientData;
SWIGV8_ClientData _exports_dht_state_clientData;
SWIGV8_ClientData _exports_session_proxy_clientData;
SWIGV8_ClientData _exports_session_params_clientData;
SWIGV8_ClientData _exports_session_clientData;
SWIGV8_ClientData _exports_peer_connection_handle_clientData;
SWIGV8_ClientData _exports_bt_peer_connection_handle_clientData;
SWIGV8_ClientData _exports_ip_filter_clientData;
SWIGV8_ClientData _exports_port_filter_clientData;
SWIGV8_ClientData _exports_bdecode_node_clientData;
SWIGV8_ClientData _exports_create_torrent_clientData;
SWIGV8_ClientData _exports_announce_entry_clientData;
SWIGV8_ClientData _exports_torrent_status_clientData;
SWIGV8_ClientData _exports_alert_notify_callback_clientData;
SWIGV8_ClientData _exports_add_files_listener_clientData;
SWIGV8_ClientData _exports_set_piece_hashes_listener_clientData;
SWIGV8_ClientData _exports_swig_plugin_clientData;
SWIGV8_ClientData _exports_posix_stat_t_clientData;
SWIGV8_ClientData _exports_posix_wrapper_clientData;


static SwigV8ReturnValue _wrap_new_int_int_pair__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::pair< int,int > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_int_int_pair__SWIG_0.");
  result = (std::pair< int,int > *)new std::pair< int,int >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__pairT_int_int_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_int_int_pair__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::pair< int,int > *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_int_int_pair__SWIG_1.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_int_int_pair" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_int_int_pair" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (std::pair< int,int > *)new std::pair< int,int >(arg1,arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__pairT_int_int_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_int_int_pair__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::pair< int,int > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::pair< int,int > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_int_int_pair__SWIG_2.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__pairT_int_int_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_int_int_pair" "', argument " "1"" of type '" "std::pair< int,int > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_int_int_pair" "', argument " "1"" of type '" "std::pair< int,int > const &""'"); 
  }
  arg1 = (std::pair< int,int > *)(argp1);
  result = (std::pair< int,int > *)new std::pair< int,int >((std::pair< int,int > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__pairT_int_int_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_int_int_pair(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_int_int_pair__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_int_int_pair__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_int_int_pair__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_int_int_pair__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_int_int_pair__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_int_int_pair__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_int_int_pair");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_int_int_pair_first_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_std__pairT_int_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_int_pair_first_set" "', argument " "1"" of type '" "std::pair< int,int > *""'"); 
  }
  arg1 = (std::pair< int,int > *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "int_int_pair_first_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->first = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_int_int_pair_first_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_std__pairT_int_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_int_pair_first_get" "', argument " "1"" of type '" "std::pair< int,int > *""'"); 
  }
  arg1 = (std::pair< int,int > *)(argp1);
  result = (int) ((arg1)->first);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_int_int_pair_second_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_std__pairT_int_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_int_pair_second_set" "', argument " "1"" of type '" "std::pair< int,int > *""'"); 
  }
  arg1 = (std::pair< int,int > *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "int_int_pair_second_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->second = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_int_int_pair_second_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_std__pairT_int_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_int_pair_second_get" "', argument " "1"" of type '" "std::pair< int,int > *""'"); 
  }
  arg1 = (std::pair< int,int > *)(argp1);
  result = (int) ((arg1)->second);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_int_int_pair(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_int_int_pair(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_int_int_pair(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_int_int_pair(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          std::pair< int,int > * arg1 = (std::pair< int,int > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_string_int_pair__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::pair< std::string,int > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_string_int_pair__SWIG_0.");
  result = (std::pair< std::string,int > *)new std::pair< std::string,int >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__pairT_std__string_int_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_string_int_pair__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::string arg1 ;
  int arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  std::pair< std::string,int > *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_string_int_pair__SWIG_1.");
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_string_int_pair" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_string_int_pair" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (std::pair< std::string,int > *)new std::pair< std::string,int >(arg1,arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__pairT_std__string_int_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_string_int_pair__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::pair< std::string,int > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::pair< std::string,int > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_string_int_pair__SWIG_2.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__pairT_std__string_int_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_string_int_pair" "', argument " "1"" of type '" "std::pair< std::string,int > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_string_int_pair" "', argument " "1"" of type '" "std::pair< std::string,int > const &""'"); 
  }
  arg1 = (std::pair< std::string,int > *)(argp1);
  result = (std::pair< std::string,int > *)new std::pair< std::string,int >((std::pair< std::string,int > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__pairT_std__string_int_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_string_int_pair(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_string_int_pair__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_string_int_pair__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_string_int_pair__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_string_int_pair__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_string_int_pair__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_string_int_pair__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_string_int_pair");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_string_int_pair_first_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  std::pair< std::string,int > *arg1 = (std::pair< std::string,int > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_std__pairT_std__string_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_int_pair_first_set" "', argument " "1"" of type '" "std::pair< std::string,int > *""'"); 
  }
  arg1 = (std::pair< std::string,int > *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(value, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_int_pair_first_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_int_pair_first_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->first = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_string_int_pair_first_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::pair< std::string,int > *arg1 = (std::pair< std::string,int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_std__pairT_std__string_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_int_pair_first_get" "', argument " "1"" of type '" "std::pair< std::string,int > *""'"); 
  }
  arg1 = (std::pair< std::string,int > *)(argp1);
  result = (std::string *) & ((arg1)->first);
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_string_int_pair_second_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  std::pair< std::string,int > *arg1 = (std::pair< std::string,int > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_std__pairT_std__string_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_int_pair_second_set" "', argument " "1"" of type '" "std::pair< std::string,int > *""'"); 
  }
  arg1 = (std::pair< std::string,int > *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_int_pair_second_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->second = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_string_int_pair_second_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::pair< std::string,int > *arg1 = (std::pair< std::string,int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_std__pairT_std__string_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_int_pair_second_get" "', argument " "1"" of type '" "std::pair< std::string,int > *""'"); 
  }
  arg1 = (std::pair< std::string,int > *)(argp1);
  result = (int) ((arg1)->second);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_string_int_pair(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_string_int_pair(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_string_int_pair(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_string_int_pair(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          std::pair< std::string,int > * arg1 = (std::pair< std::string,int > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_string_string_pair__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::pair< std::string,std::string > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_string_string_pair__SWIG_0.");
  result = (std::pair< std::string,std::string > *)new std::pair< std::string,std::string >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__pairT_std__string_std__string_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_string_string_pair__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::string arg1 ;
  std::string arg2 ;
  std::pair< std::string,std::string > *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_string_string_pair__SWIG_1.");
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_string_string_pair" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_string_string_pair" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (std::pair< std::string,std::string > *)new std::pair< std::string,std::string >(arg1,arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__pairT_std__string_std__string_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_string_string_pair__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::pair< std::string,std::string > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::pair< std::string,std::string > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_string_string_pair__SWIG_2.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__pairT_std__string_std__string_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_string_string_pair" "', argument " "1"" of type '" "std::pair< std::string,std::string > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_string_string_pair" "', argument " "1"" of type '" "std::pair< std::string,std::string > const &""'"); 
  }
  arg1 = (std::pair< std::string,std::string > *)(argp1);
  result = (std::pair< std::string,std::string > *)new std::pair< std::string,std::string >((std::pair< std::string,std::string > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__pairT_std__string_std__string_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_string_string_pair(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_string_string_pair__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_string_string_pair__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_string_string_pair__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_string_string_pair__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_string_string_pair__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_string_string_pair__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_string_string_pair");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_string_string_pair_first_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_std__pairT_std__string_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_string_pair_first_set" "', argument " "1"" of type '" "std::pair< std::string,std::string > *""'"); 
  }
  arg1 = (std::pair< std::string,std::string > *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(value, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_string_pair_first_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_string_pair_first_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->first = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_string_string_pair_first_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_std__pairT_std__string_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_string_pair_first_get" "', argument " "1"" of type '" "std::pair< std::string,std::string > *""'"); 
  }
  arg1 = (std::pair< std::string,std::string > *)(argp1);
  result = (std::string *) & ((arg1)->first);
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_string_string_pair_second_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_std__pairT_std__string_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_string_pair_second_set" "', argument " "1"" of type '" "std::pair< std::string,std::string > *""'"); 
  }
  arg1 = (std::pair< std::string,std::string > *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(value, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_string_pair_second_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_string_pair_second_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->second = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_string_string_pair_second_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_std__pairT_std__string_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_string_pair_second_get" "', argument " "1"" of type '" "std::pair< std::string,std::string > *""'"); 
  }
  arg1 = (std::pair< std::string,std::string > *)(argp1);
  result = (std::string *) & ((arg1)->second);
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_string_string_pair(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_string_string_pair(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_string_string_pair(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_string_string_pair(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          std::pair< std::string,std::string > * arg1 = (std::pair< std::string,std::string > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_string_view_bdecode_node_pair__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::pair< libtorrent::string_view,libtorrent::bdecode_node > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_string_view_bdecode_node_pair__SWIG_0.");
  result = (std::pair< libtorrent::string_view,libtorrent::bdecode_node > *)new std::pair< libtorrent::string_view,libtorrent::bdecode_node >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__pairT_libtorrent__string_view_libtorrent__bdecode_node_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_string_view_bdecode_node_pair__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  SwigValueWrapper< libtorrent::string_view > arg1 ;
  libtorrent::bdecode_node arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::pair< libtorrent::string_view,libtorrent::bdecode_node > *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_string_view_bdecode_node_pair__SWIG_1.");
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__string_view,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_string_view_bdecode_node_pair" "', argument " "1"" of type '" "libtorrent::string_view""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_string_view_bdecode_node_pair" "', argument " "1"" of type '" "libtorrent::string_view""'");
    } else {
      arg1 = *((libtorrent::string_view *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_libtorrent__bdecode_node,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_string_view_bdecode_node_pair" "', argument " "2"" of type '" "libtorrent::bdecode_node""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_string_view_bdecode_node_pair" "', argument " "2"" of type '" "libtorrent::bdecode_node""'");
    } else {
      arg2 = *((libtorrent::bdecode_node *)(argp2));
    }
  }
  result = (std::pair< libtorrent::string_view,libtorrent::bdecode_node > *)new std::pair< libtorrent::string_view,libtorrent::bdecode_node >(arg1,arg2);
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__pairT_libtorrent__string_view_libtorrent__bdecode_node_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_string_view_bdecode_node_pair__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::pair< libtorrent::string_view,libtorrent::bdecode_node > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::pair< libtorrent::string_view,libtorrent::bdecode_node > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_string_view_bdecode_node_pair__SWIG_2.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__pairT_libtorrent__string_view_libtorrent__bdecode_node_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_string_view_bdecode_node_pair" "', argument " "1"" of type '" "std::pair< libtorrent::string_view,libtorrent::bdecode_node > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_string_view_bdecode_node_pair" "', argument " "1"" of type '" "std::pair< libtorrent::string_view,libtorrent::bdecode_node > const &""'"); 
  }
  arg1 = (std::pair< libtorrent::string_view,libtorrent::bdecode_node > *)(argp1);
  result = (std::pair< libtorrent::string_view,libtorrent::bdecode_node > *)new std::pair< libtorrent::string_view,libtorrent::bdecode_node >((std::pair< libtorrent::string_view,libtorrent::bdecode_node > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__pairT_libtorrent__string_view_libtorrent__bdecode_node_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_string_view_bdecode_node_pair(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_string_view_bdecode_node_pair__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_string_view_bdecode_node_pair__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_string_view_bdecode_node_pair__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_string_view_bdecode_node_pair__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_string_view_bdecode_node_pair__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_string_view_bdecode_node_pair__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_string_view_bdecode_node_pair");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_string_view_bdecode_node_pair_first_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  std::pair< libtorrent::string_view,libtorrent::bdecode_node > *arg1 = (std::pair< libtorrent::string_view,libtorrent::bdecode_node > *) 0 ;
  libtorrent::string_view *arg2 = (libtorrent::string_view *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_std__pairT_libtorrent__string_view_libtorrent__bdecode_node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_view_bdecode_node_pair_first_set" "', argument " "1"" of type '" "std::pair< libtorrent::string_view,libtorrent::bdecode_node > *""'"); 
  }
  arg1 = (std::pair< libtorrent::string_view,libtorrent::bdecode_node > *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__string_view, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_view_bdecode_node_pair_first_set" "', argument " "2"" of type '" "libtorrent::string_view *""'"); 
  }
  arg2 = (libtorrent::string_view *)(argp2);
  if (arg1) (arg1)->first = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_string_view_bdecode_node_pair_first_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::pair< libtorrent::string_view,libtorrent::bdecode_node > *arg1 = (std::pair< libtorrent::string_view,libtorrent::bdecode_node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::string_view *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_std__pairT_libtorrent__string_view_libtorrent__bdecode_node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_view_bdecode_node_pair_first_get" "', argument " "1"" of type '" "std::pair< libtorrent::string_view,libtorrent::bdecode_node > *""'"); 
  }
  arg1 = (std::pair< libtorrent::string_view,libtorrent::bdecode_node > *)(argp1);
  result = (libtorrent::string_view *)& ((arg1)->first);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__string_view, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_string_view_bdecode_node_pair_second_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  std::pair< libtorrent::string_view,libtorrent::bdecode_node > *arg1 = (std::pair< libtorrent::string_view,libtorrent::bdecode_node > *) 0 ;
  libtorrent::bdecode_node *arg2 = (libtorrent::bdecode_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_std__pairT_libtorrent__string_view_libtorrent__bdecode_node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_view_bdecode_node_pair_second_set" "', argument " "1"" of type '" "std::pair< libtorrent::string_view,libtorrent::bdecode_node > *""'"); 
  }
  arg1 = (std::pair< libtorrent::string_view,libtorrent::bdecode_node > *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__bdecode_node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_view_bdecode_node_pair_second_set" "', argument " "2"" of type '" "libtorrent::bdecode_node *""'"); 
  }
  arg2 = (libtorrent::bdecode_node *)(argp2);
  if (arg1) (arg1)->second = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_string_view_bdecode_node_pair_second_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::pair< libtorrent::string_view,libtorrent::bdecode_node > *arg1 = (std::pair< libtorrent::string_view,libtorrent::bdecode_node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::bdecode_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_std__pairT_libtorrent__string_view_libtorrent__bdecode_node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_view_bdecode_node_pair_second_get" "', argument " "1"" of type '" "std::pair< libtorrent::string_view,libtorrent::bdecode_node > *""'"); 
  }
  arg1 = (std::pair< libtorrent::string_view,libtorrent::bdecode_node > *)(argp1);
  result = (libtorrent::bdecode_node *)& ((arg1)->second);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__bdecode_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_string_view_bdecode_node_pair(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_string_view_bdecode_node_pair(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_string_view_bdecode_node_pair(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_string_view_bdecode_node_pair(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          std::pair< libtorrent::string_view,libtorrent::bdecode_node > * arg1 = (std::pair< libtorrent::string_view,libtorrent::bdecode_node > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_byte_vectors_pair__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::pair< std::vector< int8_t >,std::vector< int8_t > > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_byte_vectors_pair__SWIG_0.");
  result = (std::pair< std::vector< int8_t >,std::vector< int8_t > > *)new std::pair< std::vector< int8_t >,std::vector< int8_t > >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__pairT_std__vectorT_int8_t_t_std__vectorT_int8_t_t_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_byte_vectors_pair__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< int8_t > arg1 ;
  std::vector< int8_t > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::pair< std::vector< int8_t >,std::vector< int8_t > > *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_byte_vectors_pair__SWIG_1.");
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_signed_char_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_byte_vectors_pair" "', argument " "1"" of type '" "std::vector< int8_t >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_byte_vectors_pair" "', argument " "1"" of type '" "std::vector< int8_t >""'");
    } else {
      arg1 = *((std::vector< int8_t > *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__vectorT_signed_char_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_byte_vectors_pair" "', argument " "2"" of type '" "std::vector< int8_t >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_byte_vectors_pair" "', argument " "2"" of type '" "std::vector< int8_t >""'");
    } else {
      arg2 = *((std::vector< int8_t > *)(argp2));
    }
  }
  result = (std::pair< std::vector< int8_t >,std::vector< int8_t > > *)new std::pair< std::vector< int8_t >,std::vector< int8_t > >(arg1,arg2);
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__pairT_std__vectorT_int8_t_t_std__vectorT_int8_t_t_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_byte_vectors_pair__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::pair< std::vector< int8_t >,std::vector< int8_t > > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::pair< std::vector< int8_t >,std::vector< int8_t > > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_byte_vectors_pair__SWIG_2.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__pairT_std__vectorT_int8_t_t_std__vectorT_int8_t_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_byte_vectors_pair" "', argument " "1"" of type '" "std::pair< std::vector< int8_t >,std::vector< int8_t > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_byte_vectors_pair" "', argument " "1"" of type '" "std::pair< std::vector< int8_t >,std::vector< int8_t > > const &""'"); 
  }
  arg1 = (std::pair< std::vector< int8_t >,std::vector< int8_t > > *)(argp1);
  result = (std::pair< std::vector< int8_t >,std::vector< int8_t > > *)new std::pair< std::vector< int8_t >,std::vector< int8_t > >((std::pair< std::vector< int8_t >,std::vector< int8_t > > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__pairT_std__vectorT_int8_t_t_std__vectorT_int8_t_t_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_byte_vectors_pair(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_byte_vectors_pair__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_byte_vectors_pair__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_byte_vectors_pair__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_byte_vectors_pair__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_byte_vectors_pair__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_byte_vectors_pair__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_byte_vectors_pair");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_byte_vectors_pair_first_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  std::pair< std::vector< int8_t >,std::vector< int8_t > > *arg1 = (std::pair< std::vector< int8_t >,std::vector< int8_t > > *) 0 ;
  std::vector< int8_t > *arg2 = (std::vector< int8_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_std__pairT_std__vectorT_int8_t_t_std__vectorT_int8_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "byte_vectors_pair_first_set" "', argument " "1"" of type '" "std::pair< std::vector< int8_t >,std::vector< int8_t > > *""'"); 
  }
  arg1 = (std::pair< std::vector< int8_t >,std::vector< int8_t > > *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_std__vectorT_signed_char_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "byte_vectors_pair_first_set" "', argument " "2"" of type '" "std::vector< int8_t > *""'"); 
  }
  arg2 = (std::vector< int8_t > *)(argp2);
  if (arg1) (arg1)->first = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_byte_vectors_pair_first_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::pair< std::vector< int8_t >,std::vector< int8_t > > *arg1 = (std::pair< std::vector< int8_t >,std::vector< int8_t > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int8_t > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_std__pairT_std__vectorT_int8_t_t_std__vectorT_int8_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "byte_vectors_pair_first_get" "', argument " "1"" of type '" "std::pair< std::vector< int8_t >,std::vector< int8_t > > *""'"); 
  }
  arg1 = (std::pair< std::vector< int8_t >,std::vector< int8_t > > *)(argp1);
  result = (std::vector< int8_t > *)& ((arg1)->first);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_signed_char_t, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_byte_vectors_pair_second_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  std::pair< std::vector< int8_t >,std::vector< int8_t > > *arg1 = (std::pair< std::vector< int8_t >,std::vector< int8_t > > *) 0 ;
  std::vector< int8_t > *arg2 = (std::vector< int8_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_std__pairT_std__vectorT_int8_t_t_std__vectorT_int8_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "byte_vectors_pair_second_set" "', argument " "1"" of type '" "std::pair< std::vector< int8_t >,std::vector< int8_t > > *""'"); 
  }
  arg1 = (std::pair< std::vector< int8_t >,std::vector< int8_t > > *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_std__vectorT_signed_char_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "byte_vectors_pair_second_set" "', argument " "2"" of type '" "std::vector< int8_t > *""'"); 
  }
  arg2 = (std::vector< int8_t > *)(argp2);
  if (arg1) (arg1)->second = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_byte_vectors_pair_second_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::pair< std::vector< int8_t >,std::vector< int8_t > > *arg1 = (std::pair< std::vector< int8_t >,std::vector< int8_t > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int8_t > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_std__pairT_std__vectorT_int8_t_t_std__vectorT_int8_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "byte_vectors_pair_second_get" "', argument " "1"" of type '" "std::pair< std::vector< int8_t >,std::vector< int8_t > > *""'"); 
  }
  arg1 = (std::pair< std::vector< int8_t >,std::vector< int8_t > > *)(argp1);
  result = (std::vector< int8_t > *)& ((arg1)->second);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_signed_char_t, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_byte_vectors_pair(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_byte_vectors_pair(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_byte_vectors_pair(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_byte_vectors_pair(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          std::pair< std::vector< int8_t >,std::vector< int8_t > > * arg1 = (std::pair< std::vector< int8_t >,std::vector< int8_t > > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_byte_vector(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< int8_t > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_byte_vector.");
  result = (std::vector< int8_t > *)new std::vector< int8_t >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_signed_char_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_byte_vector_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int8_t > *arg1 = (std::vector< int8_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< signed char >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_byte_vector_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_signed_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "byte_vector_size" "', argument " "1"" of type '" "std::vector< int8_t > const *""'"); 
  }
  arg1 = (std::vector< int8_t > *)(argp1);
  result = ((std::vector< int8_t > const *)arg1)->size();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_byte_vector_capacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int8_t > *arg1 = (std::vector< int8_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< signed char >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_byte_vector_capacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_signed_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "byte_vector_capacity" "', argument " "1"" of type '" "std::vector< int8_t > const *""'"); 
  }
  arg1 = (std::vector< int8_t > *)(argp1);
  result = ((std::vector< int8_t > const *)arg1)->capacity();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_byte_vector_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int8_t > *arg1 = (std::vector< int8_t > *) 0 ;
  std::vector< signed char >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_byte_vector_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_signed_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "byte_vector_reserve" "', argument " "1"" of type '" "std::vector< int8_t > *""'"); 
  }
  arg1 = (std::vector< int8_t > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "byte_vector_reserve" "', argument " "2"" of type '" "std::vector< signed char >::size_type""'");
  } 
  arg2 = (std::vector< signed char >::size_type)(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_byte_vector_empty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int8_t > *arg1 = (std::vector< int8_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_byte_vector_empty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_signed_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "byte_vector_empty" "', argument " "1"" of type '" "std::vector< int8_t > const *""'"); 
  }
  arg1 = (std::vector< int8_t > *)(argp1);
  result = (bool)((std::vector< int8_t > const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_byte_vector_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int8_t > *arg1 = (std::vector< int8_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_byte_vector_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_signed_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "byte_vector_clear" "', argument " "1"" of type '" "std::vector< int8_t > *""'"); 
  }
  arg1 = (std::vector< int8_t > *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_byte_vector_push_back(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int8_t > *arg1 = (std::vector< int8_t > *) 0 ;
  std::vector< signed char >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< signed char >::value_type temp2 ;
  signed char val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_byte_vector_push_back.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_signed_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "byte_vector_push_back" "', argument " "1"" of type '" "std::vector< int8_t > *""'"); 
  }
  arg1 = (std::vector< int8_t > *)(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "byte_vector_push_back" "', argument " "2"" of type '" "std::vector< signed char >::value_type""'");
  } 
  temp2 = (std::vector< signed char >::value_type)(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< signed char >::value_type const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_byte_vector_resize(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int8_t > *arg1 = (std::vector< int8_t > *) 0 ;
  std::vector< signed char >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_byte_vector_resize.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_signed_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "byte_vector_resize" "', argument " "1"" of type '" "std::vector< int8_t > *""'"); 
  }
  arg1 = (std::vector< int8_t > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "byte_vector_resize" "', argument " "2"" of type '" "std::vector< signed char >::size_type""'");
  } 
  arg2 = (std::vector< signed char >::size_type)(val2);
  (arg1)->resize(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_byte_vector_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int8_t > *arg1 = (std::vector< int8_t > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int8_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_byte_vector_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_signed_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "byte_vector_get" "', argument " "1"" of type '" "std::vector< int8_t > *""'"); 
  }
  arg1 = (std::vector< int8_t > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "byte_vector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  try {
    result = (int8_t)std_vector_Sl_int8_t_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIG_From_signed_SS_char((signed char)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_byte_vector_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int8_t > *arg1 = (std::vector< int8_t > *) 0 ;
  int arg2 ;
  std::vector< signed char >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< signed char >::value_type temp3 ;
  signed char val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_byte_vector_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_signed_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "byte_vector_set" "', argument " "1"" of type '" "std::vector< int8_t > *""'"); 
  }
  arg1 = (std::vector< int8_t > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "byte_vector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_signed_SS_char(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "byte_vector_set" "', argument " "3"" of type '" "std::vector< signed char >::value_type""'");
  } 
  temp3 = (std::vector< signed char >::value_type)(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_int8_t_Sg__set(arg1,arg2,(signed char const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_byte_vector(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_byte_vector(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_byte_vector(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_byte_vector(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          std::vector< int8_t > * arg1 = (std::vector< int8_t > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_string_vector(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< std::string > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_string_vector.");
  result = (std::vector< std::string > *)new std::vector< std::string >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_vector_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_vector_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_size" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = (std::vector< std::string > *)(argp1);
  result = ((std::vector< std::string > const *)arg1)->size();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_vector_capacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_vector_capacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_capacity" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = (std::vector< std::string > *)(argp1);
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_vector_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_vector_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_reserve" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = (std::vector< std::string > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_vector_reserve" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = (std::vector< std::string >::size_type)(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_vector_empty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_vector_empty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_empty" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = (std::vector< std::string > *)(argp1);
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_vector_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_vector_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_clear" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = (std::vector< std::string > *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_vector_push_back(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_vector_push_back.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_push_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = (std::vector< std::string > *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_vector_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_vector_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_vector_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_vector_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_get" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = (std::vector< std::string > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_vector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_vector_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_vector_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_set" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = (std::vector< std::string > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_vector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "string_vector_set" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_vector_set" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIGV8_UNDEFINED();
  
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_string_vector(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_string_vector(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_string_vector(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_string_vector(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          std::vector< std::string > * arg1 = (std::vector< std::string > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_string_int_pair_vector(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< std::pair< std::string,int > > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_string_int_pair_vector.");
  result = (std::vector< std::pair< std::string,int > > *)new std::vector< std::pair< std::string,int > >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_std__pairT_std__string_int_t_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_int_pair_vector_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::pair< std::string,int > > *arg1 = (std::vector< std::pair< std::string,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::pair< std::string,int > >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_int_pair_vector_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_int_pair_vector_size" "', argument " "1"" of type '" "std::vector< std::pair< std::string,int > > const *""'"); 
  }
  arg1 = (std::vector< std::pair< std::string,int > > *)(argp1);
  result = ((std::vector< std::pair< std::string,int > > const *)arg1)->size();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_int_pair_vector_capacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::pair< std::string,int > > *arg1 = (std::vector< std::pair< std::string,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::pair< std::string,int > >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_int_pair_vector_capacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_int_pair_vector_capacity" "', argument " "1"" of type '" "std::vector< std::pair< std::string,int > > const *""'"); 
  }
  arg1 = (std::vector< std::pair< std::string,int > > *)(argp1);
  result = ((std::vector< std::pair< std::string,int > > const *)arg1)->capacity();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_int_pair_vector_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::pair< std::string,int > > *arg1 = (std::vector< std::pair< std::string,int > > *) 0 ;
  std::vector< std::pair< std::string,int > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_int_pair_vector_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_int_pair_vector_reserve" "', argument " "1"" of type '" "std::vector< std::pair< std::string,int > > *""'"); 
  }
  arg1 = (std::vector< std::pair< std::string,int > > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_int_pair_vector_reserve" "', argument " "2"" of type '" "std::vector< std::pair< std::string,int > >::size_type""'");
  } 
  arg2 = (std::vector< std::pair< std::string,int > >::size_type)(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_int_pair_vector_empty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::pair< std::string,int > > *arg1 = (std::vector< std::pair< std::string,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_int_pair_vector_empty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_int_pair_vector_empty" "', argument " "1"" of type '" "std::vector< std::pair< std::string,int > > const *""'"); 
  }
  arg1 = (std::vector< std::pair< std::string,int > > *)(argp1);
  result = (bool)((std::vector< std::pair< std::string,int > > const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_int_pair_vector_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::pair< std::string,int > > *arg1 = (std::vector< std::pair< std::string,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_int_pair_vector_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_int_pair_vector_clear" "', argument " "1"" of type '" "std::vector< std::pair< std::string,int > > *""'"); 
  }
  arg1 = (std::vector< std::pair< std::string,int > > *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_int_pair_vector_push_back(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::pair< std::string,int > > *arg1 = (std::vector< std::pair< std::string,int > > *) 0 ;
  std::vector< std::pair< std::string,int > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_int_pair_vector_push_back.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_int_pair_vector_push_back" "', argument " "1"" of type '" "std::vector< std::pair< std::string,int > > *""'"); 
  }
  arg1 = (std::vector< std::pair< std::string,int > > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__pairT_std__string_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_int_pair_vector_push_back" "', argument " "2"" of type '" "std::vector< std::pair< std::string,int > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_int_pair_vector_push_back" "', argument " "2"" of type '" "std::vector< std::pair< std::string,int > >::value_type const &""'"); 
  }
  arg2 = (std::vector< std::pair< std::string,int > >::value_type *)(argp2);
  (arg1)->push_back((std::vector< std::pair< std::string,int > >::value_type const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_int_pair_vector_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::pair< std::string,int > > *arg1 = (std::vector< std::pair< std::string,int > > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< std::pair< std::string,int > >::value_type *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_int_pair_vector_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_int_pair_vector_get" "', argument " "1"" of type '" "std::vector< std::pair< std::string,int > > *""'"); 
  }
  arg1 = (std::vector< std::pair< std::string,int > > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_int_pair_vector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  try {
    result = (std::vector< std::pair< std::string,int > >::value_type *) &std_vector_Sl_std_pair_Sl_std_string_Sc_int_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_std__string_int_t, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_int_pair_vector_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::pair< std::string,int > > *arg1 = (std::vector< std::pair< std::string,int > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< std::string,int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_int_pair_vector_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_int_pair_vector_set" "', argument " "1"" of type '" "std::vector< std::pair< std::string,int > > *""'"); 
  }
  arg1 = (std::vector< std::pair< std::string,int > > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_int_pair_vector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_std__pairT_std__string_int_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "string_int_pair_vector_set" "', argument " "3"" of type '" "std::vector< std::pair< std::string,int > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_int_pair_vector_set" "', argument " "3"" of type '" "std::vector< std::pair< std::string,int > >::value_type const &""'"); 
  }
  arg3 = (std::vector< std::pair< std::string,int > >::value_type *)(argp3);
  try {
    std_vector_Sl_std_pair_Sl_std_string_Sc_int_Sg__Sg__set(arg1,arg2,(std::pair< std::string,int > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_string_int_pair_vector(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_string_int_pair_vector(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_string_int_pair_vector(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_string_int_pair_vector(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          std::vector< std::pair< std::string,int > > * arg1 = (std::vector< std::pair< std::string,int > > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_string_string_pair_vector(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< std::pair< std::string,std::string > > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_string_string_pair_vector.");
  result = (std::vector< std::pair< std::string,std::string > > *)new std::vector< std::pair< std::string,std::string > >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_string_pair_vector_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::pair< std::string,std::string > >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_string_pair_vector_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_string_pair_vector_size" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > const *""'"); 
  }
  arg1 = (std::vector< std::pair< std::string,std::string > > *)(argp1);
  result = ((std::vector< std::pair< std::string,std::string > > const *)arg1)->size();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_string_pair_vector_capacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::pair< std::string,std::string > >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_string_pair_vector_capacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_string_pair_vector_capacity" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > const *""'"); 
  }
  arg1 = (std::vector< std::pair< std::string,std::string > > *)(argp1);
  result = ((std::vector< std::pair< std::string,std::string > > const *)arg1)->capacity();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_string_pair_vector_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_string_pair_vector_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_string_pair_vector_reserve" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = (std::vector< std::pair< std::string,std::string > > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_string_pair_vector_reserve" "', argument " "2"" of type '" "std::vector< std::pair< std::string,std::string > >::size_type""'");
  } 
  arg2 = (std::vector< std::pair< std::string,std::string > >::size_type)(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_string_pair_vector_empty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_string_pair_vector_empty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_string_pair_vector_empty" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > const *""'"); 
  }
  arg1 = (std::vector< std::pair< std::string,std::string > > *)(argp1);
  result = (bool)((std::vector< std::pair< std::string,std::string > > const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_string_pair_vector_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_string_pair_vector_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_string_pair_vector_clear" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = (std::vector< std::pair< std::string,std::string > > *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_string_pair_vector_push_back(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_string_pair_vector_push_back.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_string_pair_vector_push_back" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = (std::vector< std::pair< std::string,std::string > > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__pairT_std__string_std__string_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_string_pair_vector_push_back" "', argument " "2"" of type '" "std::vector< std::pair< std::string,std::string > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_string_pair_vector_push_back" "', argument " "2"" of type '" "std::vector< std::pair< std::string,std::string > >::value_type const &""'"); 
  }
  arg2 = (std::vector< std::pair< std::string,std::string > >::value_type *)(argp2);
  (arg1)->push_back((std::vector< std::pair< std::string,std::string > >::value_type const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_string_pair_vector_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< std::pair< std::string,std::string > >::value_type *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_string_pair_vector_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_string_pair_vector_get" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = (std::vector< std::pair< std::string,std::string > > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_string_pair_vector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  try {
    result = (std::vector< std::pair< std::string,std::string > >::value_type *) &std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_std__string_std__string_t, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_string_pair_vector_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< std::string,std::string > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_string_pair_vector_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_string_pair_vector_set" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = (std::vector< std::pair< std::string,std::string > > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_string_pair_vector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_std__pairT_std__string_std__string_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "string_string_pair_vector_set" "', argument " "3"" of type '" "std::vector< std::pair< std::string,std::string > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_string_pair_vector_set" "', argument " "3"" of type '" "std::vector< std::pair< std::string,std::string > >::value_type const &""'"); 
  }
  arg3 = (std::vector< std::pair< std::string,std::string > >::value_type *)(argp3);
  try {
    std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__set(arg1,arg2,(std::pair< std::string,std::string > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_string_string_pair_vector(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_string_string_pair_vector(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_string_string_pair_vector(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_string_string_pair_vector(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          std::vector< std::pair< std::string,std::string > > * arg1 = (std::vector< std::pair< std::string,std::string > > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_int_int_pair_vector(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< std::pair< int,int > > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_int_int_pair_vector.");
  result = (std::vector< std::pair< int,int > > *)new std::vector< std::pair< int,int > >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int_int_pair_vector_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::pair< int,int > >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int_int_pair_vector_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_int_pair_vector_size" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > const *""'"); 
  }
  arg1 = (std::vector< std::pair< int,int > > *)(argp1);
  result = ((std::vector< std::pair< int,int > > const *)arg1)->size();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int_int_pair_vector_capacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::pair< int,int > >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int_int_pair_vector_capacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_int_pair_vector_capacity" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > const *""'"); 
  }
  arg1 = (std::vector< std::pair< int,int > > *)(argp1);
  result = ((std::vector< std::pair< int,int > > const *)arg1)->capacity();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int_int_pair_vector_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int_int_pair_vector_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_int_pair_vector_reserve" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = (std::vector< std::pair< int,int > > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "int_int_pair_vector_reserve" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::size_type""'");
  } 
  arg2 = (std::vector< std::pair< int,int > >::size_type)(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int_int_pair_vector_empty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int_int_pair_vector_empty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_int_pair_vector_empty" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > const *""'"); 
  }
  arg1 = (std::vector< std::pair< int,int > > *)(argp1);
  result = (bool)((std::vector< std::pair< int,int > > const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int_int_pair_vector_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int_int_pair_vector_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_int_pair_vector_clear" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = (std::vector< std::pair< int,int > > *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int_int_pair_vector_push_back(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int_int_pair_vector_push_back.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_int_pair_vector_push_back" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = (std::vector< std::pair< int,int > > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__pairT_int_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "int_int_pair_vector_push_back" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "int_int_pair_vector_push_back" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
  }
  arg2 = (std::vector< std::pair< int,int > >::value_type *)(argp2);
  (arg1)->push_back((std::vector< std::pair< int,int > >::value_type const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int_int_pair_vector_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< std::pair< int,int > >::value_type *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int_int_pair_vector_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_int_pair_vector_get" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = (std::vector< std::pair< int,int > > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "int_int_pair_vector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  try {
    result = (std::vector< std::pair< int,int > >::value_type *) &std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_int_int_t, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int_int_pair_vector_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< int,int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int_int_pair_vector_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_int_pair_vector_set" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = (std::vector< std::pair< int,int > > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "int_int_pair_vector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_std__pairT_int_int_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "int_int_pair_vector_set" "', argument " "3"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "int_int_pair_vector_set" "', argument " "3"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
  }
  arg3 = (std::vector< std::pair< int,int > >::value_type *)(argp3);
  try {
    std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__set(arg1,arg2,(std::pair< int,int > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_int_int_pair_vector(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_int_int_pair_vector(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_int_int_pair_vector(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_int_int_pair_vector(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          std::vector< std::pair< int,int > > * arg1 = (std::vector< std::pair< int,int > > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_int_vector(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< int > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_int_vector.");
  result = (std::vector< int > *)new std::vector< int >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int_vector_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int_vector_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_size" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = (std::vector< int > *)(argp1);
  result = ((std::vector< int > const *)arg1)->size();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int_vector_capacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int_vector_capacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_capacity" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = (std::vector< int > *)(argp1);
  result = ((std::vector< int > const *)arg1)->capacity();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int_vector_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int_vector_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_reserve" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = (std::vector< int > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "int_vector_reserve" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = (std::vector< int >::size_type)(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int_vector_empty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int_vector_empty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_empty" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = (std::vector< int > *)(argp1);
  result = (bool)((std::vector< int > const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int_vector_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int_vector_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_clear" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = (std::vector< int > *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int_vector_push_back(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int_vector_push_back.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_push_back" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = (std::vector< int > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "int_vector_push_back" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = (std::vector< int >::value_type)(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int_vector_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int_vector_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_get" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = (std::vector< int > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "int_vector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIG_From_int((int)(*result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int_vector_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int_vector_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_set" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = (std::vector< int > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "int_vector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "int_vector_set" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = (std::vector< int >::value_type)(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_int_Sg__set(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_int_vector(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_int_vector(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_int_vector(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_int_vector(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          std::vector< int > * arg1 = (std::vector< int > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_int64_vector(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< long long > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_int64_vector.");
  result = (std::vector< long long > *)new std::vector< long long >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_long_long_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int64_vector_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< long long >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int64_vector_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_long_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int64_vector_size" "', argument " "1"" of type '" "std::vector< long long > const *""'"); 
  }
  arg1 = (std::vector< long long > *)(argp1);
  result = ((std::vector< long long > const *)arg1)->size();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int64_vector_capacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< long long >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int64_vector_capacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_long_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int64_vector_capacity" "', argument " "1"" of type '" "std::vector< long long > const *""'"); 
  }
  arg1 = (std::vector< long long > *)(argp1);
  result = ((std::vector< long long > const *)arg1)->capacity();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int64_vector_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int64_vector_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_long_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int64_vector_reserve" "', argument " "1"" of type '" "std::vector< long long > *""'"); 
  }
  arg1 = (std::vector< long long > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "int64_vector_reserve" "', argument " "2"" of type '" "std::vector< long long >::size_type""'");
  } 
  arg2 = (std::vector< long long >::size_type)(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int64_vector_empty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int64_vector_empty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_long_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int64_vector_empty" "', argument " "1"" of type '" "std::vector< long long > const *""'"); 
  }
  arg1 = (std::vector< long long > *)(argp1);
  result = (bool)((std::vector< long long > const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int64_vector_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int64_vector_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_long_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int64_vector_clear" "', argument " "1"" of type '" "std::vector< long long > *""'"); 
  }
  arg1 = (std::vector< long long > *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int64_vector_push_back(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< long long >::value_type temp2 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int64_vector_push_back.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_long_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int64_vector_push_back" "', argument " "1"" of type '" "std::vector< long long > *""'"); 
  }
  arg1 = (std::vector< long long > *)(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "int64_vector_push_back" "', argument " "2"" of type '" "std::vector< long long >::value_type""'");
  } 
  temp2 = (std::vector< long long >::value_type)(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< long long >::value_type const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int64_vector_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< long long >::value_type *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int64_vector_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_long_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int64_vector_get" "', argument " "1"" of type '" "std::vector< long long > *""'"); 
  }
  arg1 = (std::vector< long long > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "int64_vector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  try {
    result = (std::vector< long long >::value_type *) &std_vector_Sl_long_SS_long_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIG_From_long_SS_long((long long)(*result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int64_vector_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  int arg2 ;
  std::vector< long long >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< long long >::value_type temp3 ;
  long long val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int64_vector_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_long_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int64_vector_set" "', argument " "1"" of type '" "std::vector< long long > *""'"); 
  }
  arg1 = (std::vector< long long > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "int64_vector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_long_SS_long(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "int64_vector_set" "', argument " "3"" of type '" "std::vector< long long >::value_type""'");
  } 
  temp3 = (std::vector< long long >::value_type)(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_long_SS_long_Sg__set(arg1,arg2,(long long const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_int64_vector(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_int64_vector(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_int64_vector(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_int64_vector(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          std::vector< long long > * arg1 = (std::vector< long long > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_sha1_hash_vector(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< libtorrent::sha1_hash > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_sha1_hash_vector.");
  result = (std::vector< libtorrent::sha1_hash > *)new std::vector< libtorrent::sha1_hash >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_libtorrent__sha1_hash_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_sha1_hash_vector_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::sha1_hash > *arg1 = (std::vector< libtorrent::sha1_hash > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::sha1_hash >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_sha1_hash_vector_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__sha1_hash_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sha1_hash_vector_size" "', argument " "1"" of type '" "std::vector< libtorrent::sha1_hash > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::sha1_hash > *)(argp1);
  result = ((std::vector< libtorrent::sha1_hash > const *)arg1)->size();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_sha1_hash_vector_capacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::sha1_hash > *arg1 = (std::vector< libtorrent::sha1_hash > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::sha1_hash >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_sha1_hash_vector_capacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__sha1_hash_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sha1_hash_vector_capacity" "', argument " "1"" of type '" "std::vector< libtorrent::sha1_hash > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::sha1_hash > *)(argp1);
  result = ((std::vector< libtorrent::sha1_hash > const *)arg1)->capacity();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_sha1_hash_vector_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::sha1_hash > *arg1 = (std::vector< libtorrent::sha1_hash > *) 0 ;
  std::vector< libtorrent::sha1_hash >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_sha1_hash_vector_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__sha1_hash_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sha1_hash_vector_reserve" "', argument " "1"" of type '" "std::vector< libtorrent::sha1_hash > *""'"); 
  }
  arg1 = (std::vector< libtorrent::sha1_hash > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sha1_hash_vector_reserve" "', argument " "2"" of type '" "std::vector< libtorrent::sha1_hash >::size_type""'");
  } 
  arg2 = (std::vector< libtorrent::sha1_hash >::size_type)(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_sha1_hash_vector_empty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::sha1_hash > *arg1 = (std::vector< libtorrent::sha1_hash > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_sha1_hash_vector_empty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__sha1_hash_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sha1_hash_vector_empty" "', argument " "1"" of type '" "std::vector< libtorrent::sha1_hash > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::sha1_hash > *)(argp1);
  result = (bool)((std::vector< libtorrent::sha1_hash > const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_sha1_hash_vector_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::sha1_hash > *arg1 = (std::vector< libtorrent::sha1_hash > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_sha1_hash_vector_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__sha1_hash_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sha1_hash_vector_clear" "', argument " "1"" of type '" "std::vector< libtorrent::sha1_hash > *""'"); 
  }
  arg1 = (std::vector< libtorrent::sha1_hash > *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_sha1_hash_vector_push_back(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::sha1_hash > *arg1 = (std::vector< libtorrent::sha1_hash > *) 0 ;
  std::vector< libtorrent::sha1_hash >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_sha1_hash_vector_push_back.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__sha1_hash_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sha1_hash_vector_push_back" "', argument " "1"" of type '" "std::vector< libtorrent::sha1_hash > *""'"); 
  }
  arg1 = (std::vector< libtorrent::sha1_hash > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__sha1_hash,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sha1_hash_vector_push_back" "', argument " "2"" of type '" "std::vector< libtorrent::sha1_hash >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sha1_hash_vector_push_back" "', argument " "2"" of type '" "std::vector< libtorrent::sha1_hash >::value_type const &""'"); 
  }
  arg2 = (std::vector< libtorrent::sha1_hash >::value_type *)(argp2);
  (arg1)->push_back((std::vector< libtorrent::sha1_hash >::value_type const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_sha1_hash_vector_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::sha1_hash > *arg1 = (std::vector< libtorrent::sha1_hash > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< libtorrent::sha1_hash >::value_type *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_sha1_hash_vector_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__sha1_hash_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sha1_hash_vector_get" "', argument " "1"" of type '" "std::vector< libtorrent::sha1_hash > *""'"); 
  }
  arg1 = (std::vector< libtorrent::sha1_hash > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sha1_hash_vector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  try {
    result = (std::vector< libtorrent::sha1_hash >::value_type *) &std_vector_Sl_libtorrent_sha1_hash_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_sha1_hash_vector_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::sha1_hash > *arg1 = (std::vector< libtorrent::sha1_hash > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::sha1_hash >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_sha1_hash_vector_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__sha1_hash_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sha1_hash_vector_set" "', argument " "1"" of type '" "std::vector< libtorrent::sha1_hash > *""'"); 
  }
  arg1 = (std::vector< libtorrent::sha1_hash > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sha1_hash_vector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_libtorrent__sha1_hash,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sha1_hash_vector_set" "', argument " "3"" of type '" "std::vector< libtorrent::sha1_hash >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sha1_hash_vector_set" "', argument " "3"" of type '" "std::vector< libtorrent::sha1_hash >::value_type const &""'"); 
  }
  arg3 = (std::vector< libtorrent::sha1_hash >::value_type *)(argp3);
  try {
    std_vector_Sl_libtorrent_sha1_hash_Sg__set(arg1,arg2,(libtorrent::sha1_hash const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_sha1_hash_vector(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_sha1_hash_vector(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_sha1_hash_vector(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_sha1_hash_vector(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          std::vector< libtorrent::sha1_hash > * arg1 = (std::vector< libtorrent::sha1_hash > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_torrent_status_vector(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< libtorrent::torrent_status > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_torrent_status_vector.");
  result = (std::vector< libtorrent::torrent_status > *)new std::vector< libtorrent::torrent_status >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_libtorrent__torrent_status_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_status_vector_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::torrent_status > *arg1 = (std::vector< libtorrent::torrent_status > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::torrent_status >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_status_vector_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__torrent_status_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_vector_size" "', argument " "1"" of type '" "std::vector< libtorrent::torrent_status > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::torrent_status > *)(argp1);
  result = ((std::vector< libtorrent::torrent_status > const *)arg1)->size();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_status_vector_capacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::torrent_status > *arg1 = (std::vector< libtorrent::torrent_status > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::torrent_status >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_status_vector_capacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__torrent_status_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_vector_capacity" "', argument " "1"" of type '" "std::vector< libtorrent::torrent_status > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::torrent_status > *)(argp1);
  result = ((std::vector< libtorrent::torrent_status > const *)arg1)->capacity();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_status_vector_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::torrent_status > *arg1 = (std::vector< libtorrent::torrent_status > *) 0 ;
  std::vector< libtorrent::torrent_status >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_status_vector_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__torrent_status_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_vector_reserve" "', argument " "1"" of type '" "std::vector< libtorrent::torrent_status > *""'"); 
  }
  arg1 = (std::vector< libtorrent::torrent_status > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_vector_reserve" "', argument " "2"" of type '" "std::vector< libtorrent::torrent_status >::size_type""'");
  } 
  arg2 = (std::vector< libtorrent::torrent_status >::size_type)(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_status_vector_empty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::torrent_status > *arg1 = (std::vector< libtorrent::torrent_status > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_status_vector_empty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__torrent_status_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_vector_empty" "', argument " "1"" of type '" "std::vector< libtorrent::torrent_status > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::torrent_status > *)(argp1);
  result = (bool)((std::vector< libtorrent::torrent_status > const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_status_vector_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::torrent_status > *arg1 = (std::vector< libtorrent::torrent_status > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_status_vector_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__torrent_status_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_vector_clear" "', argument " "1"" of type '" "std::vector< libtorrent::torrent_status > *""'"); 
  }
  arg1 = (std::vector< libtorrent::torrent_status > *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_status_vector_push_back(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::torrent_status > *arg1 = (std::vector< libtorrent::torrent_status > *) 0 ;
  std::vector< libtorrent::torrent_status >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_status_vector_push_back.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__torrent_status_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_vector_push_back" "', argument " "1"" of type '" "std::vector< libtorrent::torrent_status > *""'"); 
  }
  arg1 = (std::vector< libtorrent::torrent_status > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__torrent_status,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_status_vector_push_back" "', argument " "2"" of type '" "std::vector< libtorrent::torrent_status >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_status_vector_push_back" "', argument " "2"" of type '" "std::vector< libtorrent::torrent_status >::value_type const &""'"); 
  }
  arg2 = (std::vector< libtorrent::torrent_status >::value_type *)(argp2);
  (arg1)->push_back((std::vector< libtorrent::torrent_status >::value_type const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_status_vector_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::torrent_status > *arg1 = (std::vector< libtorrent::torrent_status > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< libtorrent::torrent_status >::value_type *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_status_vector_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__torrent_status_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_vector_get" "', argument " "1"" of type '" "std::vector< libtorrent::torrent_status > *""'"); 
  }
  arg1 = (std::vector< libtorrent::torrent_status > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_vector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  try {
    result = (std::vector< libtorrent::torrent_status >::value_type *) &std_vector_Sl_libtorrent_torrent_status_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_status_vector_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::torrent_status > *arg1 = (std::vector< libtorrent::torrent_status > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::torrent_status >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_status_vector_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__torrent_status_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_vector_set" "', argument " "1"" of type '" "std::vector< libtorrent::torrent_status > *""'"); 
  }
  arg1 = (std::vector< libtorrent::torrent_status > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_vector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_libtorrent__torrent_status,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "torrent_status_vector_set" "', argument " "3"" of type '" "std::vector< libtorrent::torrent_status >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_status_vector_set" "', argument " "3"" of type '" "std::vector< libtorrent::torrent_status >::value_type const &""'"); 
  }
  arg3 = (std::vector< libtorrent::torrent_status >::value_type *)(argp3);
  try {
    std_vector_Sl_libtorrent_torrent_status_Sg__set(arg1,arg2,(libtorrent::torrent_status const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_torrent_status_vector(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_torrent_status_vector(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_torrent_status_vector(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_torrent_status_vector(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          std::vector< libtorrent::torrent_status > * arg1 = (std::vector< libtorrent::torrent_status > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_torrent_handle_vector(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< libtorrent::torrent_handle > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_torrent_handle_vector.");
  result = (std::vector< libtorrent::torrent_handle > *)new std::vector< libtorrent::torrent_handle >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_libtorrent__torrent_handle_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_vector_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::torrent_handle > *arg1 = (std::vector< libtorrent::torrent_handle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::torrent_handle >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_vector_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__torrent_handle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_vector_size" "', argument " "1"" of type '" "std::vector< libtorrent::torrent_handle > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::torrent_handle > *)(argp1);
  result = ((std::vector< libtorrent::torrent_handle > const *)arg1)->size();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_vector_capacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::torrent_handle > *arg1 = (std::vector< libtorrent::torrent_handle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::torrent_handle >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_vector_capacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__torrent_handle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_vector_capacity" "', argument " "1"" of type '" "std::vector< libtorrent::torrent_handle > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::torrent_handle > *)(argp1);
  result = ((std::vector< libtorrent::torrent_handle > const *)arg1)->capacity();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_vector_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::torrent_handle > *arg1 = (std::vector< libtorrent::torrent_handle > *) 0 ;
  std::vector< libtorrent::torrent_handle >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_vector_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__torrent_handle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_vector_reserve" "', argument " "1"" of type '" "std::vector< libtorrent::torrent_handle > *""'"); 
  }
  arg1 = (std::vector< libtorrent::torrent_handle > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_handle_vector_reserve" "', argument " "2"" of type '" "std::vector< libtorrent::torrent_handle >::size_type""'");
  } 
  arg2 = (std::vector< libtorrent::torrent_handle >::size_type)(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_vector_empty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::torrent_handle > *arg1 = (std::vector< libtorrent::torrent_handle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_vector_empty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__torrent_handle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_vector_empty" "', argument " "1"" of type '" "std::vector< libtorrent::torrent_handle > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::torrent_handle > *)(argp1);
  result = (bool)((std::vector< libtorrent::torrent_handle > const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_vector_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::torrent_handle > *arg1 = (std::vector< libtorrent::torrent_handle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_vector_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__torrent_handle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_vector_clear" "', argument " "1"" of type '" "std::vector< libtorrent::torrent_handle > *""'"); 
  }
  arg1 = (std::vector< libtorrent::torrent_handle > *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_vector_push_back(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::torrent_handle > *arg1 = (std::vector< libtorrent::torrent_handle > *) 0 ;
  std::vector< libtorrent::torrent_handle >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_vector_push_back.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__torrent_handle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_vector_push_back" "', argument " "1"" of type '" "std::vector< libtorrent::torrent_handle > *""'"); 
  }
  arg1 = (std::vector< libtorrent::torrent_handle > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__torrent_handle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_handle_vector_push_back" "', argument " "2"" of type '" "std::vector< libtorrent::torrent_handle >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_handle_vector_push_back" "', argument " "2"" of type '" "std::vector< libtorrent::torrent_handle >::value_type const &""'"); 
  }
  arg2 = (std::vector< libtorrent::torrent_handle >::value_type *)(argp2);
  (arg1)->push_back((std::vector< libtorrent::torrent_handle >::value_type const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_vector_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::torrent_handle > *arg1 = (std::vector< libtorrent::torrent_handle > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< libtorrent::torrent_handle >::value_type *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_vector_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__torrent_handle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_vector_get" "', argument " "1"" of type '" "std::vector< libtorrent::torrent_handle > *""'"); 
  }
  arg1 = (std::vector< libtorrent::torrent_handle > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_handle_vector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  try {
    result = (std::vector< libtorrent::torrent_handle >::value_type *) &std_vector_Sl_libtorrent_torrent_handle_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_vector_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::torrent_handle > *arg1 = (std::vector< libtorrent::torrent_handle > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::torrent_handle >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_vector_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__torrent_handle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_vector_set" "', argument " "1"" of type '" "std::vector< libtorrent::torrent_handle > *""'"); 
  }
  arg1 = (std::vector< libtorrent::torrent_handle > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_handle_vector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_libtorrent__torrent_handle,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "torrent_handle_vector_set" "', argument " "3"" of type '" "std::vector< libtorrent::torrent_handle >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_handle_vector_set" "', argument " "3"" of type '" "std::vector< libtorrent::torrent_handle >::value_type const &""'"); 
  }
  arg3 = (std::vector< libtorrent::torrent_handle >::value_type *)(argp3);
  try {
    std_vector_Sl_libtorrent_torrent_handle_Sg__set(arg1,arg2,(libtorrent::torrent_handle const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_torrent_handle_vector(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_torrent_handle_vector(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_torrent_handle_vector(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_torrent_handle_vector(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          std::vector< libtorrent::torrent_handle > * arg1 = (std::vector< libtorrent::torrent_handle > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_file_slice_vector(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< libtorrent::file_slice > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_file_slice_vector.");
  result = (std::vector< libtorrent::file_slice > *)new std::vector< libtorrent::file_slice >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_libtorrent__file_slice_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_slice_vector_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::file_slice > *arg1 = (std::vector< libtorrent::file_slice > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::file_slice >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_slice_vector_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__file_slice_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_slice_vector_size" "', argument " "1"" of type '" "std::vector< libtorrent::file_slice > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::file_slice > *)(argp1);
  result = ((std::vector< libtorrent::file_slice > const *)arg1)->size();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_slice_vector_capacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::file_slice > *arg1 = (std::vector< libtorrent::file_slice > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::file_slice >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_slice_vector_capacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__file_slice_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_slice_vector_capacity" "', argument " "1"" of type '" "std::vector< libtorrent::file_slice > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::file_slice > *)(argp1);
  result = ((std::vector< libtorrent::file_slice > const *)arg1)->capacity();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_slice_vector_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::file_slice > *arg1 = (std::vector< libtorrent::file_slice > *) 0 ;
  std::vector< libtorrent::file_slice >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_slice_vector_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__file_slice_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_slice_vector_reserve" "', argument " "1"" of type '" "std::vector< libtorrent::file_slice > *""'"); 
  }
  arg1 = (std::vector< libtorrent::file_slice > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "file_slice_vector_reserve" "', argument " "2"" of type '" "std::vector< libtorrent::file_slice >::size_type""'");
  } 
  arg2 = (std::vector< libtorrent::file_slice >::size_type)(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_slice_vector_empty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::file_slice > *arg1 = (std::vector< libtorrent::file_slice > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_slice_vector_empty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__file_slice_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_slice_vector_empty" "', argument " "1"" of type '" "std::vector< libtorrent::file_slice > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::file_slice > *)(argp1);
  result = (bool)((std::vector< libtorrent::file_slice > const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_slice_vector_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::file_slice > *arg1 = (std::vector< libtorrent::file_slice > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_slice_vector_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__file_slice_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_slice_vector_clear" "', argument " "1"" of type '" "std::vector< libtorrent::file_slice > *""'"); 
  }
  arg1 = (std::vector< libtorrent::file_slice > *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_slice_vector_push_back(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::file_slice > *arg1 = (std::vector< libtorrent::file_slice > *) 0 ;
  std::vector< libtorrent::file_slice >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_slice_vector_push_back.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__file_slice_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_slice_vector_push_back" "', argument " "1"" of type '" "std::vector< libtorrent::file_slice > *""'"); 
  }
  arg1 = (std::vector< libtorrent::file_slice > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__file_slice,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "file_slice_vector_push_back" "', argument " "2"" of type '" "std::vector< libtorrent::file_slice >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "file_slice_vector_push_back" "', argument " "2"" of type '" "std::vector< libtorrent::file_slice >::value_type const &""'"); 
  }
  arg2 = (std::vector< libtorrent::file_slice >::value_type *)(argp2);
  (arg1)->push_back((std::vector< libtorrent::file_slice >::value_type const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_slice_vector_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::file_slice > *arg1 = (std::vector< libtorrent::file_slice > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< libtorrent::file_slice >::value_type *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_slice_vector_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__file_slice_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_slice_vector_get" "', argument " "1"" of type '" "std::vector< libtorrent::file_slice > *""'"); 
  }
  arg1 = (std::vector< libtorrent::file_slice > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "file_slice_vector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  try {
    result = (std::vector< libtorrent::file_slice >::value_type *) &std_vector_Sl_libtorrent_file_slice_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__file_slice, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_slice_vector_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::file_slice > *arg1 = (std::vector< libtorrent::file_slice > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::file_slice >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_slice_vector_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__file_slice_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_slice_vector_set" "', argument " "1"" of type '" "std::vector< libtorrent::file_slice > *""'"); 
  }
  arg1 = (std::vector< libtorrent::file_slice > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "file_slice_vector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_libtorrent__file_slice,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "file_slice_vector_set" "', argument " "3"" of type '" "std::vector< libtorrent::file_slice >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "file_slice_vector_set" "', argument " "3"" of type '" "std::vector< libtorrent::file_slice >::value_type const &""'"); 
  }
  arg3 = (std::vector< libtorrent::file_slice >::value_type *)(argp3);
  try {
    std_vector_Sl_libtorrent_file_slice_Sg__set(arg1,arg2,(libtorrent::file_slice const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_file_slice_vector(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_file_slice_vector(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_file_slice_vector(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_file_slice_vector(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          std::vector< libtorrent::file_slice > * arg1 = (std::vector< libtorrent::file_slice > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_dht_routing_bucket_vector(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< libtorrent::dht_routing_bucket > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_dht_routing_bucket_vector.");
  result = (std::vector< libtorrent::dht_routing_bucket > *)new std::vector< libtorrent::dht_routing_bucket >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_libtorrent__dht_routing_bucket_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_routing_bucket_vector_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::dht_routing_bucket > *arg1 = (std::vector< libtorrent::dht_routing_bucket > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::dht_routing_bucket >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_routing_bucket_vector_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__dht_routing_bucket_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_routing_bucket_vector_size" "', argument " "1"" of type '" "std::vector< libtorrent::dht_routing_bucket > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::dht_routing_bucket > *)(argp1);
  result = ((std::vector< libtorrent::dht_routing_bucket > const *)arg1)->size();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_routing_bucket_vector_capacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::dht_routing_bucket > *arg1 = (std::vector< libtorrent::dht_routing_bucket > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::dht_routing_bucket >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_routing_bucket_vector_capacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__dht_routing_bucket_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_routing_bucket_vector_capacity" "', argument " "1"" of type '" "std::vector< libtorrent::dht_routing_bucket > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::dht_routing_bucket > *)(argp1);
  result = ((std::vector< libtorrent::dht_routing_bucket > const *)arg1)->capacity();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_routing_bucket_vector_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::dht_routing_bucket > *arg1 = (std::vector< libtorrent::dht_routing_bucket > *) 0 ;
  std::vector< libtorrent::dht_routing_bucket >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_routing_bucket_vector_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__dht_routing_bucket_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_routing_bucket_vector_reserve" "', argument " "1"" of type '" "std::vector< libtorrent::dht_routing_bucket > *""'"); 
  }
  arg1 = (std::vector< libtorrent::dht_routing_bucket > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_routing_bucket_vector_reserve" "', argument " "2"" of type '" "std::vector< libtorrent::dht_routing_bucket >::size_type""'");
  } 
  arg2 = (std::vector< libtorrent::dht_routing_bucket >::size_type)(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_routing_bucket_vector_empty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::dht_routing_bucket > *arg1 = (std::vector< libtorrent::dht_routing_bucket > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_routing_bucket_vector_empty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__dht_routing_bucket_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_routing_bucket_vector_empty" "', argument " "1"" of type '" "std::vector< libtorrent::dht_routing_bucket > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::dht_routing_bucket > *)(argp1);
  result = (bool)((std::vector< libtorrent::dht_routing_bucket > const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_routing_bucket_vector_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::dht_routing_bucket > *arg1 = (std::vector< libtorrent::dht_routing_bucket > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_routing_bucket_vector_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__dht_routing_bucket_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_routing_bucket_vector_clear" "', argument " "1"" of type '" "std::vector< libtorrent::dht_routing_bucket > *""'"); 
  }
  arg1 = (std::vector< libtorrent::dht_routing_bucket > *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_routing_bucket_vector_push_back(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::dht_routing_bucket > *arg1 = (std::vector< libtorrent::dht_routing_bucket > *) 0 ;
  std::vector< libtorrent::dht_routing_bucket >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_routing_bucket_vector_push_back.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__dht_routing_bucket_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_routing_bucket_vector_push_back" "', argument " "1"" of type '" "std::vector< libtorrent::dht_routing_bucket > *""'"); 
  }
  arg1 = (std::vector< libtorrent::dht_routing_bucket > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__dht_routing_bucket,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dht_routing_bucket_vector_push_back" "', argument " "2"" of type '" "std::vector< libtorrent::dht_routing_bucket >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dht_routing_bucket_vector_push_back" "', argument " "2"" of type '" "std::vector< libtorrent::dht_routing_bucket >::value_type const &""'"); 
  }
  arg2 = (std::vector< libtorrent::dht_routing_bucket >::value_type *)(argp2);
  (arg1)->push_back((std::vector< libtorrent::dht_routing_bucket >::value_type const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_routing_bucket_vector_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::dht_routing_bucket > *arg1 = (std::vector< libtorrent::dht_routing_bucket > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< libtorrent::dht_routing_bucket >::value_type *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_routing_bucket_vector_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__dht_routing_bucket_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_routing_bucket_vector_get" "', argument " "1"" of type '" "std::vector< libtorrent::dht_routing_bucket > *""'"); 
  }
  arg1 = (std::vector< libtorrent::dht_routing_bucket > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_routing_bucket_vector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  try {
    result = (std::vector< libtorrent::dht_routing_bucket >::value_type *) &std_vector_Sl_libtorrent_dht_routing_bucket_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__dht_routing_bucket, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_routing_bucket_vector_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::dht_routing_bucket > *arg1 = (std::vector< libtorrent::dht_routing_bucket > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::dht_routing_bucket >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_routing_bucket_vector_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__dht_routing_bucket_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_routing_bucket_vector_set" "', argument " "1"" of type '" "std::vector< libtorrent::dht_routing_bucket > *""'"); 
  }
  arg1 = (std::vector< libtorrent::dht_routing_bucket > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_routing_bucket_vector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_libtorrent__dht_routing_bucket,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dht_routing_bucket_vector_set" "', argument " "3"" of type '" "std::vector< libtorrent::dht_routing_bucket >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dht_routing_bucket_vector_set" "', argument " "3"" of type '" "std::vector< libtorrent::dht_routing_bucket >::value_type const &""'"); 
  }
  arg3 = (std::vector< libtorrent::dht_routing_bucket >::value_type *)(argp3);
  try {
    std_vector_Sl_libtorrent_dht_routing_bucket_Sg__set(arg1,arg2,(libtorrent::dht_routing_bucket const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_dht_routing_bucket_vector(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_dht_routing_bucket_vector(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_dht_routing_bucket_vector(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_dht_routing_bucket_vector(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          std::vector< libtorrent::dht_routing_bucket > * arg1 = (std::vector< libtorrent::dht_routing_bucket > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_dht_lookup_vector(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< libtorrent::dht_lookup > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_dht_lookup_vector.");
  result = (std::vector< libtorrent::dht_lookup > *)new std::vector< libtorrent::dht_lookup >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_libtorrent__dht_lookup_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_lookup_vector_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::dht_lookup > *arg1 = (std::vector< libtorrent::dht_lookup > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::dht_lookup >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_lookup_vector_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__dht_lookup_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_lookup_vector_size" "', argument " "1"" of type '" "std::vector< libtorrent::dht_lookup > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::dht_lookup > *)(argp1);
  result = ((std::vector< libtorrent::dht_lookup > const *)arg1)->size();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_lookup_vector_capacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::dht_lookup > *arg1 = (std::vector< libtorrent::dht_lookup > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::dht_lookup >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_lookup_vector_capacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__dht_lookup_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_lookup_vector_capacity" "', argument " "1"" of type '" "std::vector< libtorrent::dht_lookup > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::dht_lookup > *)(argp1);
  result = ((std::vector< libtorrent::dht_lookup > const *)arg1)->capacity();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_lookup_vector_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::dht_lookup > *arg1 = (std::vector< libtorrent::dht_lookup > *) 0 ;
  std::vector< libtorrent::dht_lookup >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_lookup_vector_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__dht_lookup_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_lookup_vector_reserve" "', argument " "1"" of type '" "std::vector< libtorrent::dht_lookup > *""'"); 
  }
  arg1 = (std::vector< libtorrent::dht_lookup > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_lookup_vector_reserve" "', argument " "2"" of type '" "std::vector< libtorrent::dht_lookup >::size_type""'");
  } 
  arg2 = (std::vector< libtorrent::dht_lookup >::size_type)(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_lookup_vector_empty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::dht_lookup > *arg1 = (std::vector< libtorrent::dht_lookup > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_lookup_vector_empty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__dht_lookup_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_lookup_vector_empty" "', argument " "1"" of type '" "std::vector< libtorrent::dht_lookup > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::dht_lookup > *)(argp1);
  result = (bool)((std::vector< libtorrent::dht_lookup > const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_lookup_vector_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::dht_lookup > *arg1 = (std::vector< libtorrent::dht_lookup > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_lookup_vector_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__dht_lookup_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_lookup_vector_clear" "', argument " "1"" of type '" "std::vector< libtorrent::dht_lookup > *""'"); 
  }
  arg1 = (std::vector< libtorrent::dht_lookup > *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_lookup_vector_push_back(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::dht_lookup > *arg1 = (std::vector< libtorrent::dht_lookup > *) 0 ;
  std::vector< libtorrent::dht_lookup >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_lookup_vector_push_back.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__dht_lookup_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_lookup_vector_push_back" "', argument " "1"" of type '" "std::vector< libtorrent::dht_lookup > *""'"); 
  }
  arg1 = (std::vector< libtorrent::dht_lookup > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__dht_lookup,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dht_lookup_vector_push_back" "', argument " "2"" of type '" "std::vector< libtorrent::dht_lookup >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dht_lookup_vector_push_back" "', argument " "2"" of type '" "std::vector< libtorrent::dht_lookup >::value_type const &""'"); 
  }
  arg2 = (std::vector< libtorrent::dht_lookup >::value_type *)(argp2);
  (arg1)->push_back((std::vector< libtorrent::dht_lookup >::value_type const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_lookup_vector_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::dht_lookup > *arg1 = (std::vector< libtorrent::dht_lookup > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< libtorrent::dht_lookup >::value_type *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_lookup_vector_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__dht_lookup_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_lookup_vector_get" "', argument " "1"" of type '" "std::vector< libtorrent::dht_lookup > *""'"); 
  }
  arg1 = (std::vector< libtorrent::dht_lookup > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_lookup_vector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  try {
    result = (std::vector< libtorrent::dht_lookup >::value_type *) &std_vector_Sl_libtorrent_dht_lookup_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__dht_lookup, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_lookup_vector_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::dht_lookup > *arg1 = (std::vector< libtorrent::dht_lookup > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::dht_lookup >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_lookup_vector_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__dht_lookup_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_lookup_vector_set" "', argument " "1"" of type '" "std::vector< libtorrent::dht_lookup > *""'"); 
  }
  arg1 = (std::vector< libtorrent::dht_lookup > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_lookup_vector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_libtorrent__dht_lookup,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dht_lookup_vector_set" "', argument " "3"" of type '" "std::vector< libtorrent::dht_lookup >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dht_lookup_vector_set" "', argument " "3"" of type '" "std::vector< libtorrent::dht_lookup >::value_type const &""'"); 
  }
  arg3 = (std::vector< libtorrent::dht_lookup >::value_type *)(argp3);
  try {
    std_vector_Sl_libtorrent_dht_lookup_Sg__set(arg1,arg2,(libtorrent::dht_lookup const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_dht_lookup_vector(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_dht_lookup_vector(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_dht_lookup_vector(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_dht_lookup_vector(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          std::vector< libtorrent::dht_lookup > * arg1 = (std::vector< libtorrent::dht_lookup > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_block_info_vector(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< libtorrent::block_info > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_block_info_vector.");
  result = (std::vector< libtorrent::block_info > *)new std::vector< libtorrent::block_info >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_libtorrent__block_info_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_block_info_vector_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::block_info > *arg1 = (std::vector< libtorrent::block_info > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::block_info >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_block_info_vector_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__block_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_info_vector_size" "', argument " "1"" of type '" "std::vector< libtorrent::block_info > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::block_info > *)(argp1);
  result = ((std::vector< libtorrent::block_info > const *)arg1)->size();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_block_info_vector_capacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::block_info > *arg1 = (std::vector< libtorrent::block_info > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::block_info >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_block_info_vector_capacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__block_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_info_vector_capacity" "', argument " "1"" of type '" "std::vector< libtorrent::block_info > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::block_info > *)(argp1);
  result = ((std::vector< libtorrent::block_info > const *)arg1)->capacity();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_block_info_vector_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::block_info > *arg1 = (std::vector< libtorrent::block_info > *) 0 ;
  std::vector< libtorrent::block_info >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_block_info_vector_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__block_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_info_vector_reserve" "', argument " "1"" of type '" "std::vector< libtorrent::block_info > *""'"); 
  }
  arg1 = (std::vector< libtorrent::block_info > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_info_vector_reserve" "', argument " "2"" of type '" "std::vector< libtorrent::block_info >::size_type""'");
  } 
  arg2 = (std::vector< libtorrent::block_info >::size_type)(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_block_info_vector_empty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::block_info > *arg1 = (std::vector< libtorrent::block_info > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_block_info_vector_empty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__block_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_info_vector_empty" "', argument " "1"" of type '" "std::vector< libtorrent::block_info > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::block_info > *)(argp1);
  result = (bool)((std::vector< libtorrent::block_info > const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_block_info_vector_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::block_info > *arg1 = (std::vector< libtorrent::block_info > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_block_info_vector_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__block_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_info_vector_clear" "', argument " "1"" of type '" "std::vector< libtorrent::block_info > *""'"); 
  }
  arg1 = (std::vector< libtorrent::block_info > *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_block_info_vector_push_back(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::block_info > *arg1 = (std::vector< libtorrent::block_info > *) 0 ;
  std::vector< libtorrent::block_info >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_block_info_vector_push_back.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__block_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_info_vector_push_back" "', argument " "1"" of type '" "std::vector< libtorrent::block_info > *""'"); 
  }
  arg1 = (std::vector< libtorrent::block_info > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__block_info,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "block_info_vector_push_back" "', argument " "2"" of type '" "std::vector< libtorrent::block_info >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_info_vector_push_back" "', argument " "2"" of type '" "std::vector< libtorrent::block_info >::value_type const &""'"); 
  }
  arg2 = (std::vector< libtorrent::block_info >::value_type *)(argp2);
  (arg1)->push_back((std::vector< libtorrent::block_info >::value_type const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_block_info_vector_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::block_info > *arg1 = (std::vector< libtorrent::block_info > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< libtorrent::block_info >::value_type *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_block_info_vector_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__block_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_info_vector_get" "', argument " "1"" of type '" "std::vector< libtorrent::block_info > *""'"); 
  }
  arg1 = (std::vector< libtorrent::block_info > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_info_vector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  try {
    result = (std::vector< libtorrent::block_info >::value_type *) &std_vector_Sl_libtorrent_block_info_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__block_info, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_block_info_vector_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::block_info > *arg1 = (std::vector< libtorrent::block_info > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::block_info >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_block_info_vector_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__block_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_info_vector_set" "', argument " "1"" of type '" "std::vector< libtorrent::block_info > *""'"); 
  }
  arg1 = (std::vector< libtorrent::block_info > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_info_vector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_libtorrent__block_info,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "block_info_vector_set" "', argument " "3"" of type '" "std::vector< libtorrent::block_info >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_info_vector_set" "', argument " "3"" of type '" "std::vector< libtorrent::block_info >::value_type const &""'"); 
  }
  arg3 = (std::vector< libtorrent::block_info >::value_type *)(argp3);
  try {
    std_vector_Sl_libtorrent_block_info_Sg__set(arg1,arg2,(libtorrent::block_info const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_block_info_vector(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_block_info_vector(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_block_info_vector(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_block_info_vector(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          std::vector< libtorrent::block_info > * arg1 = (std::vector< libtorrent::block_info > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_partial_piece_info_vector(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< libtorrent::partial_piece_info > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_partial_piece_info_vector.");
  result = (std::vector< libtorrent::partial_piece_info > *)new std::vector< libtorrent::partial_piece_info >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_libtorrent__partial_piece_info_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_partial_piece_info_vector_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::partial_piece_info > *arg1 = (std::vector< libtorrent::partial_piece_info > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::partial_piece_info >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_partial_piece_info_vector_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__partial_piece_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "partial_piece_info_vector_size" "', argument " "1"" of type '" "std::vector< libtorrent::partial_piece_info > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::partial_piece_info > *)(argp1);
  result = ((std::vector< libtorrent::partial_piece_info > const *)arg1)->size();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_partial_piece_info_vector_capacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::partial_piece_info > *arg1 = (std::vector< libtorrent::partial_piece_info > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::partial_piece_info >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_partial_piece_info_vector_capacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__partial_piece_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "partial_piece_info_vector_capacity" "', argument " "1"" of type '" "std::vector< libtorrent::partial_piece_info > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::partial_piece_info > *)(argp1);
  result = ((std::vector< libtorrent::partial_piece_info > const *)arg1)->capacity();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_partial_piece_info_vector_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::partial_piece_info > *arg1 = (std::vector< libtorrent::partial_piece_info > *) 0 ;
  std::vector< libtorrent::partial_piece_info >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_partial_piece_info_vector_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__partial_piece_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "partial_piece_info_vector_reserve" "', argument " "1"" of type '" "std::vector< libtorrent::partial_piece_info > *""'"); 
  }
  arg1 = (std::vector< libtorrent::partial_piece_info > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "partial_piece_info_vector_reserve" "', argument " "2"" of type '" "std::vector< libtorrent::partial_piece_info >::size_type""'");
  } 
  arg2 = (std::vector< libtorrent::partial_piece_info >::size_type)(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_partial_piece_info_vector_empty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::partial_piece_info > *arg1 = (std::vector< libtorrent::partial_piece_info > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_partial_piece_info_vector_empty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__partial_piece_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "partial_piece_info_vector_empty" "', argument " "1"" of type '" "std::vector< libtorrent::partial_piece_info > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::partial_piece_info > *)(argp1);
  result = (bool)((std::vector< libtorrent::partial_piece_info > const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_partial_piece_info_vector_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::partial_piece_info > *arg1 = (std::vector< libtorrent::partial_piece_info > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_partial_piece_info_vector_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__partial_piece_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "partial_piece_info_vector_clear" "', argument " "1"" of type '" "std::vector< libtorrent::partial_piece_info > *""'"); 
  }
  arg1 = (std::vector< libtorrent::partial_piece_info > *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_partial_piece_info_vector_push_back(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::partial_piece_info > *arg1 = (std::vector< libtorrent::partial_piece_info > *) 0 ;
  std::vector< libtorrent::partial_piece_info >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_partial_piece_info_vector_push_back.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__partial_piece_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "partial_piece_info_vector_push_back" "', argument " "1"" of type '" "std::vector< libtorrent::partial_piece_info > *""'"); 
  }
  arg1 = (std::vector< libtorrent::partial_piece_info > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__partial_piece_info,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "partial_piece_info_vector_push_back" "', argument " "2"" of type '" "std::vector< libtorrent::partial_piece_info >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "partial_piece_info_vector_push_back" "', argument " "2"" of type '" "std::vector< libtorrent::partial_piece_info >::value_type const &""'"); 
  }
  arg2 = (std::vector< libtorrent::partial_piece_info >::value_type *)(argp2);
  (arg1)->push_back((std::vector< libtorrent::partial_piece_info >::value_type const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_partial_piece_info_vector_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::partial_piece_info > *arg1 = (std::vector< libtorrent::partial_piece_info > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< libtorrent::partial_piece_info >::value_type *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_partial_piece_info_vector_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__partial_piece_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "partial_piece_info_vector_get" "', argument " "1"" of type '" "std::vector< libtorrent::partial_piece_info > *""'"); 
  }
  arg1 = (std::vector< libtorrent::partial_piece_info > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "partial_piece_info_vector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  try {
    result = (std::vector< libtorrent::partial_piece_info >::value_type *) &std_vector_Sl_libtorrent_partial_piece_info_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__partial_piece_info, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_partial_piece_info_vector_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::partial_piece_info > *arg1 = (std::vector< libtorrent::partial_piece_info > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::partial_piece_info >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_partial_piece_info_vector_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__partial_piece_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "partial_piece_info_vector_set" "', argument " "1"" of type '" "std::vector< libtorrent::partial_piece_info > *""'"); 
  }
  arg1 = (std::vector< libtorrent::partial_piece_info > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "partial_piece_info_vector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_libtorrent__partial_piece_info,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "partial_piece_info_vector_set" "', argument " "3"" of type '" "std::vector< libtorrent::partial_piece_info >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "partial_piece_info_vector_set" "', argument " "3"" of type '" "std::vector< libtorrent::partial_piece_info >::value_type const &""'"); 
  }
  arg3 = (std::vector< libtorrent::partial_piece_info >::value_type *)(argp3);
  try {
    std_vector_Sl_libtorrent_partial_piece_info_Sg__set(arg1,arg2,(libtorrent::partial_piece_info const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_partial_piece_info_vector(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_partial_piece_info_vector(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_partial_piece_info_vector(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_partial_piece_info_vector(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          std::vector< libtorrent::partial_piece_info > * arg1 = (std::vector< libtorrent::partial_piece_info > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_peer_info_vector(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< libtorrent::peer_info > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_peer_info_vector.");
  result = (std::vector< libtorrent::peer_info > *)new std::vector< libtorrent::peer_info >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_libtorrent__peer_info_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_info_vector_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::peer_info > *arg1 = (std::vector< libtorrent::peer_info > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::peer_info >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_info_vector_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__peer_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_vector_size" "', argument " "1"" of type '" "std::vector< libtorrent::peer_info > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::peer_info > *)(argp1);
  result = ((std::vector< libtorrent::peer_info > const *)arg1)->size();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_info_vector_capacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::peer_info > *arg1 = (std::vector< libtorrent::peer_info > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::peer_info >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_info_vector_capacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__peer_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_vector_capacity" "', argument " "1"" of type '" "std::vector< libtorrent::peer_info > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::peer_info > *)(argp1);
  result = ((std::vector< libtorrent::peer_info > const *)arg1)->capacity();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_info_vector_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::peer_info > *arg1 = (std::vector< libtorrent::peer_info > *) 0 ;
  std::vector< libtorrent::peer_info >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_info_vector_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__peer_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_vector_reserve" "', argument " "1"" of type '" "std::vector< libtorrent::peer_info > *""'"); 
  }
  arg1 = (std::vector< libtorrent::peer_info > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_vector_reserve" "', argument " "2"" of type '" "std::vector< libtorrent::peer_info >::size_type""'");
  } 
  arg2 = (std::vector< libtorrent::peer_info >::size_type)(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_info_vector_empty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::peer_info > *arg1 = (std::vector< libtorrent::peer_info > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_info_vector_empty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__peer_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_vector_empty" "', argument " "1"" of type '" "std::vector< libtorrent::peer_info > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::peer_info > *)(argp1);
  result = (bool)((std::vector< libtorrent::peer_info > const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_info_vector_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::peer_info > *arg1 = (std::vector< libtorrent::peer_info > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_info_vector_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__peer_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_vector_clear" "', argument " "1"" of type '" "std::vector< libtorrent::peer_info > *""'"); 
  }
  arg1 = (std::vector< libtorrent::peer_info > *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_info_vector_push_back(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::peer_info > *arg1 = (std::vector< libtorrent::peer_info > *) 0 ;
  std::vector< libtorrent::peer_info >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_info_vector_push_back.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__peer_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_vector_push_back" "', argument " "1"" of type '" "std::vector< libtorrent::peer_info > *""'"); 
  }
  arg1 = (std::vector< libtorrent::peer_info > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__peer_info,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "peer_info_vector_push_back" "', argument " "2"" of type '" "std::vector< libtorrent::peer_info >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "peer_info_vector_push_back" "', argument " "2"" of type '" "std::vector< libtorrent::peer_info >::value_type const &""'"); 
  }
  arg2 = (std::vector< libtorrent::peer_info >::value_type *)(argp2);
  (arg1)->push_back((std::vector< libtorrent::peer_info >::value_type const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_info_vector_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::peer_info > *arg1 = (std::vector< libtorrent::peer_info > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< libtorrent::peer_info >::value_type *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_info_vector_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__peer_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_vector_get" "', argument " "1"" of type '" "std::vector< libtorrent::peer_info > *""'"); 
  }
  arg1 = (std::vector< libtorrent::peer_info > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_vector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  try {
    result = (std::vector< libtorrent::peer_info >::value_type *) &std_vector_Sl_libtorrent_peer_info_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_info_vector_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::peer_info > *arg1 = (std::vector< libtorrent::peer_info > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::peer_info >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_info_vector_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__peer_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_vector_set" "', argument " "1"" of type '" "std::vector< libtorrent::peer_info > *""'"); 
  }
  arg1 = (std::vector< libtorrent::peer_info > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_vector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_libtorrent__peer_info,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "peer_info_vector_set" "', argument " "3"" of type '" "std::vector< libtorrent::peer_info >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "peer_info_vector_set" "', argument " "3"" of type '" "std::vector< libtorrent::peer_info >::value_type const &""'"); 
  }
  arg3 = (std::vector< libtorrent::peer_info >::value_type *)(argp3);
  try {
    std_vector_Sl_libtorrent_peer_info_Sg__set(arg1,arg2,(libtorrent::peer_info const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_peer_info_vector(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_peer_info_vector(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_peer_info_vector(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_peer_info_vector(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          std::vector< libtorrent::peer_info > * arg1 = (std::vector< libtorrent::peer_info > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_stats_metric_vector(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< libtorrent::stats_metric > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_stats_metric_vector.");
  result = (std::vector< libtorrent::stats_metric > *)new std::vector< libtorrent::stats_metric >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_libtorrent__stats_metric_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_stats_metric_vector_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::stats_metric > *arg1 = (std::vector< libtorrent::stats_metric > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::stats_metric >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_stats_metric_vector_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__stats_metric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "stats_metric_vector_size" "', argument " "1"" of type '" "std::vector< libtorrent::stats_metric > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::stats_metric > *)(argp1);
  result = ((std::vector< libtorrent::stats_metric > const *)arg1)->size();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_stats_metric_vector_capacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::stats_metric > *arg1 = (std::vector< libtorrent::stats_metric > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::stats_metric >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_stats_metric_vector_capacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__stats_metric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "stats_metric_vector_capacity" "', argument " "1"" of type '" "std::vector< libtorrent::stats_metric > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::stats_metric > *)(argp1);
  result = ((std::vector< libtorrent::stats_metric > const *)arg1)->capacity();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_stats_metric_vector_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::stats_metric > *arg1 = (std::vector< libtorrent::stats_metric > *) 0 ;
  std::vector< libtorrent::stats_metric >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_stats_metric_vector_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__stats_metric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "stats_metric_vector_reserve" "', argument " "1"" of type '" "std::vector< libtorrent::stats_metric > *""'"); 
  }
  arg1 = (std::vector< libtorrent::stats_metric > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "stats_metric_vector_reserve" "', argument " "2"" of type '" "std::vector< libtorrent::stats_metric >::size_type""'");
  } 
  arg2 = (std::vector< libtorrent::stats_metric >::size_type)(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_stats_metric_vector_empty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::stats_metric > *arg1 = (std::vector< libtorrent::stats_metric > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_stats_metric_vector_empty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__stats_metric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "stats_metric_vector_empty" "', argument " "1"" of type '" "std::vector< libtorrent::stats_metric > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::stats_metric > *)(argp1);
  result = (bool)((std::vector< libtorrent::stats_metric > const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_stats_metric_vector_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::stats_metric > *arg1 = (std::vector< libtorrent::stats_metric > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_stats_metric_vector_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__stats_metric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "stats_metric_vector_clear" "', argument " "1"" of type '" "std::vector< libtorrent::stats_metric > *""'"); 
  }
  arg1 = (std::vector< libtorrent::stats_metric > *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_stats_metric_vector_push_back(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::stats_metric > *arg1 = (std::vector< libtorrent::stats_metric > *) 0 ;
  std::vector< libtorrent::stats_metric >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_stats_metric_vector_push_back.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__stats_metric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "stats_metric_vector_push_back" "', argument " "1"" of type '" "std::vector< libtorrent::stats_metric > *""'"); 
  }
  arg1 = (std::vector< libtorrent::stats_metric > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__stats_metric,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "stats_metric_vector_push_back" "', argument " "2"" of type '" "std::vector< libtorrent::stats_metric >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "stats_metric_vector_push_back" "', argument " "2"" of type '" "std::vector< libtorrent::stats_metric >::value_type const &""'"); 
  }
  arg2 = (std::vector< libtorrent::stats_metric >::value_type *)(argp2);
  (arg1)->push_back((std::vector< libtorrent::stats_metric >::value_type const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_stats_metric_vector_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::stats_metric > *arg1 = (std::vector< libtorrent::stats_metric > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< libtorrent::stats_metric >::value_type *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_stats_metric_vector_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__stats_metric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "stats_metric_vector_get" "', argument " "1"" of type '" "std::vector< libtorrent::stats_metric > *""'"); 
  }
  arg1 = (std::vector< libtorrent::stats_metric > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "stats_metric_vector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  try {
    result = (std::vector< libtorrent::stats_metric >::value_type *) &std_vector_Sl_libtorrent_stats_metric_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__stats_metric, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_stats_metric_vector_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::stats_metric > *arg1 = (std::vector< libtorrent::stats_metric > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::stats_metric >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_stats_metric_vector_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__stats_metric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "stats_metric_vector_set" "', argument " "1"" of type '" "std::vector< libtorrent::stats_metric > *""'"); 
  }
  arg1 = (std::vector< libtorrent::stats_metric > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "stats_metric_vector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_libtorrent__stats_metric,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "stats_metric_vector_set" "', argument " "3"" of type '" "std::vector< libtorrent::stats_metric >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "stats_metric_vector_set" "', argument " "3"" of type '" "std::vector< libtorrent::stats_metric >::value_type const &""'"); 
  }
  arg3 = (std::vector< libtorrent::stats_metric >::value_type *)(argp3);
  try {
    std_vector_Sl_libtorrent_stats_metric_Sg__set(arg1,arg2,(libtorrent::stats_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_stats_metric_vector(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_stats_metric_vector(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_stats_metric_vector(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_stats_metric_vector(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          std::vector< libtorrent::stats_metric > * arg1 = (std::vector< libtorrent::stats_metric > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_entry_vector(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< libtorrent::entry > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_entry_vector.");
  result = (std::vector< libtorrent::entry > *)new std::vector< libtorrent::entry >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_libtorrent__entry_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_entry_vector_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::entry > *arg1 = (std::vector< libtorrent::entry > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::entry >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_entry_vector_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__entry_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "entry_vector_size" "', argument " "1"" of type '" "std::vector< libtorrent::entry > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::entry > *)(argp1);
  result = ((std::vector< libtorrent::entry > const *)arg1)->size();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_entry_vector_capacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::entry > *arg1 = (std::vector< libtorrent::entry > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::entry >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_entry_vector_capacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__entry_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "entry_vector_capacity" "', argument " "1"" of type '" "std::vector< libtorrent::entry > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::entry > *)(argp1);
  result = ((std::vector< libtorrent::entry > const *)arg1)->capacity();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_entry_vector_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::entry > *arg1 = (std::vector< libtorrent::entry > *) 0 ;
  std::vector< libtorrent::entry >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_entry_vector_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__entry_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "entry_vector_reserve" "', argument " "1"" of type '" "std::vector< libtorrent::entry > *""'"); 
  }
  arg1 = (std::vector< libtorrent::entry > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "entry_vector_reserve" "', argument " "2"" of type '" "std::vector< libtorrent::entry >::size_type""'");
  } 
  arg2 = (std::vector< libtorrent::entry >::size_type)(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_entry_vector_empty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::entry > *arg1 = (std::vector< libtorrent::entry > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_entry_vector_empty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__entry_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "entry_vector_empty" "', argument " "1"" of type '" "std::vector< libtorrent::entry > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::entry > *)(argp1);
  result = (bool)((std::vector< libtorrent::entry > const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_entry_vector_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::entry > *arg1 = (std::vector< libtorrent::entry > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_entry_vector_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__entry_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "entry_vector_clear" "', argument " "1"" of type '" "std::vector< libtorrent::entry > *""'"); 
  }
  arg1 = (std::vector< libtorrent::entry > *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_entry_vector_push_back(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::entry > *arg1 = (std::vector< libtorrent::entry > *) 0 ;
  std::vector< libtorrent::entry >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_entry_vector_push_back.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__entry_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "entry_vector_push_back" "', argument " "1"" of type '" "std::vector< libtorrent::entry > *""'"); 
  }
  arg1 = (std::vector< libtorrent::entry > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__entry,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "entry_vector_push_back" "', argument " "2"" of type '" "std::vector< libtorrent::entry >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "entry_vector_push_back" "', argument " "2"" of type '" "std::vector< libtorrent::entry >::value_type const &""'"); 
  }
  arg2 = (std::vector< libtorrent::entry >::value_type *)(argp2);
  (arg1)->push_back((std::vector< libtorrent::entry >::value_type const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_entry_vector_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::entry > *arg1 = (std::vector< libtorrent::entry > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< libtorrent::entry >::value_type *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_entry_vector_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__entry_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "entry_vector_get" "', argument " "1"" of type '" "std::vector< libtorrent::entry > *""'"); 
  }
  arg1 = (std::vector< libtorrent::entry > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "entry_vector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  try {
    result = (std::vector< libtorrent::entry >::value_type *) &std_vector_Sl_libtorrent_entry_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__entry, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_entry_vector_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::entry > *arg1 = (std::vector< libtorrent::entry > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::entry >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_entry_vector_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__entry_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "entry_vector_set" "', argument " "1"" of type '" "std::vector< libtorrent::entry > *""'"); 
  }
  arg1 = (std::vector< libtorrent::entry > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "entry_vector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_libtorrent__entry,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "entry_vector_set" "', argument " "3"" of type '" "std::vector< libtorrent::entry >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "entry_vector_set" "', argument " "3"" of type '" "std::vector< libtorrent::entry >::value_type const &""'"); 
  }
  arg3 = (std::vector< libtorrent::entry >::value_type *)(argp3);
  try {
    std_vector_Sl_libtorrent_entry_Sg__set(arg1,arg2,(libtorrent::entry const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_entry_vector(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_entry_vector(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_entry_vector(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_entry_vector(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          std::vector< libtorrent::entry > * arg1 = (std::vector< libtorrent::entry > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_web_seed_entry_vector(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< libtorrent::web_seed_entry > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_web_seed_entry_vector.");
  result = (std::vector< libtorrent::web_seed_entry > *)new std::vector< libtorrent::web_seed_entry >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_libtorrent__web_seed_entry_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_web_seed_entry_vector_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::web_seed_entry > *arg1 = (std::vector< libtorrent::web_seed_entry > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::web_seed_entry >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_web_seed_entry_vector_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__web_seed_entry_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "web_seed_entry_vector_size" "', argument " "1"" of type '" "std::vector< libtorrent::web_seed_entry > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::web_seed_entry > *)(argp1);
  result = ((std::vector< libtorrent::web_seed_entry > const *)arg1)->size();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_web_seed_entry_vector_capacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::web_seed_entry > *arg1 = (std::vector< libtorrent::web_seed_entry > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::web_seed_entry >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_web_seed_entry_vector_capacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__web_seed_entry_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "web_seed_entry_vector_capacity" "', argument " "1"" of type '" "std::vector< libtorrent::web_seed_entry > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::web_seed_entry > *)(argp1);
  result = ((std::vector< libtorrent::web_seed_entry > const *)arg1)->capacity();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_web_seed_entry_vector_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::web_seed_entry > *arg1 = (std::vector< libtorrent::web_seed_entry > *) 0 ;
  std::vector< libtorrent::web_seed_entry >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_web_seed_entry_vector_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__web_seed_entry_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "web_seed_entry_vector_reserve" "', argument " "1"" of type '" "std::vector< libtorrent::web_seed_entry > *""'"); 
  }
  arg1 = (std::vector< libtorrent::web_seed_entry > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "web_seed_entry_vector_reserve" "', argument " "2"" of type '" "std::vector< libtorrent::web_seed_entry >::size_type""'");
  } 
  arg2 = (std::vector< libtorrent::web_seed_entry >::size_type)(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_web_seed_entry_vector_empty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::web_seed_entry > *arg1 = (std::vector< libtorrent::web_seed_entry > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_web_seed_entry_vector_empty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__web_seed_entry_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "web_seed_entry_vector_empty" "', argument " "1"" of type '" "std::vector< libtorrent::web_seed_entry > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::web_seed_entry > *)(argp1);
  result = (bool)((std::vector< libtorrent::web_seed_entry > const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_web_seed_entry_vector_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::web_seed_entry > *arg1 = (std::vector< libtorrent::web_seed_entry > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_web_seed_entry_vector_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__web_seed_entry_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "web_seed_entry_vector_clear" "', argument " "1"" of type '" "std::vector< libtorrent::web_seed_entry > *""'"); 
  }
  arg1 = (std::vector< libtorrent::web_seed_entry > *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_web_seed_entry_vector_push_back(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::web_seed_entry > *arg1 = (std::vector< libtorrent::web_seed_entry > *) 0 ;
  std::vector< libtorrent::web_seed_entry >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_web_seed_entry_vector_push_back.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__web_seed_entry_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "web_seed_entry_vector_push_back" "', argument " "1"" of type '" "std::vector< libtorrent::web_seed_entry > *""'"); 
  }
  arg1 = (std::vector< libtorrent::web_seed_entry > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__web_seed_entry,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "web_seed_entry_vector_push_back" "', argument " "2"" of type '" "std::vector< libtorrent::web_seed_entry >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "web_seed_entry_vector_push_back" "', argument " "2"" of type '" "std::vector< libtorrent::web_seed_entry >::value_type const &""'"); 
  }
  arg2 = (std::vector< libtorrent::web_seed_entry >::value_type *)(argp2);
  (arg1)->push_back((std::vector< libtorrent::web_seed_entry >::value_type const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_web_seed_entry_vector_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::web_seed_entry > *arg1 = (std::vector< libtorrent::web_seed_entry > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< libtorrent::web_seed_entry >::value_type *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_web_seed_entry_vector_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__web_seed_entry_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "web_seed_entry_vector_get" "', argument " "1"" of type '" "std::vector< libtorrent::web_seed_entry > *""'"); 
  }
  arg1 = (std::vector< libtorrent::web_seed_entry > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "web_seed_entry_vector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  try {
    result = (std::vector< libtorrent::web_seed_entry >::value_type *) &std_vector_Sl_libtorrent_web_seed_entry_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__web_seed_entry, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_web_seed_entry_vector_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::web_seed_entry > *arg1 = (std::vector< libtorrent::web_seed_entry > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::web_seed_entry >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_web_seed_entry_vector_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__web_seed_entry_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "web_seed_entry_vector_set" "', argument " "1"" of type '" "std::vector< libtorrent::web_seed_entry > *""'"); 
  }
  arg1 = (std::vector< libtorrent::web_seed_entry > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "web_seed_entry_vector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_libtorrent__web_seed_entry,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "web_seed_entry_vector_set" "', argument " "3"" of type '" "std::vector< libtorrent::web_seed_entry >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "web_seed_entry_vector_set" "', argument " "3"" of type '" "std::vector< libtorrent::web_seed_entry >::value_type const &""'"); 
  }
  arg3 = (std::vector< libtorrent::web_seed_entry >::value_type *)(argp3);
  try {
    std_vector_Sl_libtorrent_web_seed_entry_Sg__set(arg1,arg2,(libtorrent::web_seed_entry const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_web_seed_entry_vector(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_web_seed_entry_vector(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_web_seed_entry_vector(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_web_seed_entry_vector(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          std::vector< libtorrent::web_seed_entry > * arg1 = (std::vector< libtorrent::web_seed_entry > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_announce_entry_vector(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< libtorrent::announce_entry > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_announce_entry_vector.");
  result = (std::vector< libtorrent::announce_entry > *)new std::vector< libtorrent::announce_entry >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_libtorrent__announce_entry_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_announce_entry_vector_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::announce_entry > *arg1 = (std::vector< libtorrent::announce_entry > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::announce_entry >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_announce_entry_vector_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__announce_entry_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_vector_size" "', argument " "1"" of type '" "std::vector< libtorrent::announce_entry > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::announce_entry > *)(argp1);
  result = ((std::vector< libtorrent::announce_entry > const *)arg1)->size();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_announce_entry_vector_capacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::announce_entry > *arg1 = (std::vector< libtorrent::announce_entry > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::announce_entry >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_announce_entry_vector_capacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__announce_entry_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_vector_capacity" "', argument " "1"" of type '" "std::vector< libtorrent::announce_entry > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::announce_entry > *)(argp1);
  result = ((std::vector< libtorrent::announce_entry > const *)arg1)->capacity();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_announce_entry_vector_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::announce_entry > *arg1 = (std::vector< libtorrent::announce_entry > *) 0 ;
  std::vector< libtorrent::announce_entry >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_announce_entry_vector_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__announce_entry_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_vector_reserve" "', argument " "1"" of type '" "std::vector< libtorrent::announce_entry > *""'"); 
  }
  arg1 = (std::vector< libtorrent::announce_entry > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "announce_entry_vector_reserve" "', argument " "2"" of type '" "std::vector< libtorrent::announce_entry >::size_type""'");
  } 
  arg2 = (std::vector< libtorrent::announce_entry >::size_type)(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_announce_entry_vector_empty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::announce_entry > *arg1 = (std::vector< libtorrent::announce_entry > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_announce_entry_vector_empty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__announce_entry_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_vector_empty" "', argument " "1"" of type '" "std::vector< libtorrent::announce_entry > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::announce_entry > *)(argp1);
  result = (bool)((std::vector< libtorrent::announce_entry > const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_announce_entry_vector_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::announce_entry > *arg1 = (std::vector< libtorrent::announce_entry > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_announce_entry_vector_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__announce_entry_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_vector_clear" "', argument " "1"" of type '" "std::vector< libtorrent::announce_entry > *""'"); 
  }
  arg1 = (std::vector< libtorrent::announce_entry > *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_announce_entry_vector_push_back(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::announce_entry > *arg1 = (std::vector< libtorrent::announce_entry > *) 0 ;
  std::vector< libtorrent::announce_entry >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_announce_entry_vector_push_back.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__announce_entry_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_vector_push_back" "', argument " "1"" of type '" "std::vector< libtorrent::announce_entry > *""'"); 
  }
  arg1 = (std::vector< libtorrent::announce_entry > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__announce_entry,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "announce_entry_vector_push_back" "', argument " "2"" of type '" "std::vector< libtorrent::announce_entry >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "announce_entry_vector_push_back" "', argument " "2"" of type '" "std::vector< libtorrent::announce_entry >::value_type const &""'"); 
  }
  arg2 = (std::vector< libtorrent::announce_entry >::value_type *)(argp2);
  (arg1)->push_back((std::vector< libtorrent::announce_entry >::value_type const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_announce_entry_vector_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::announce_entry > *arg1 = (std::vector< libtorrent::announce_entry > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< libtorrent::announce_entry >::value_type *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_announce_entry_vector_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__announce_entry_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_vector_get" "', argument " "1"" of type '" "std::vector< libtorrent::announce_entry > *""'"); 
  }
  arg1 = (std::vector< libtorrent::announce_entry > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "announce_entry_vector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  try {
    result = (std::vector< libtorrent::announce_entry >::value_type *) &std_vector_Sl_libtorrent_announce_entry_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_announce_entry_vector_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::announce_entry > *arg1 = (std::vector< libtorrent::announce_entry > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::announce_entry >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_announce_entry_vector_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__announce_entry_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_vector_set" "', argument " "1"" of type '" "std::vector< libtorrent::announce_entry > *""'"); 
  }
  arg1 = (std::vector< libtorrent::announce_entry > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "announce_entry_vector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_libtorrent__announce_entry,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "announce_entry_vector_set" "', argument " "3"" of type '" "std::vector< libtorrent::announce_entry >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "announce_entry_vector_set" "', argument " "3"" of type '" "std::vector< libtorrent::announce_entry >::value_type const &""'"); 
  }
  arg3 = (std::vector< libtorrent::announce_entry >::value_type *)(argp3);
  try {
    std_vector_Sl_libtorrent_announce_entry_Sg__set(arg1,arg2,(libtorrent::announce_entry const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_announce_entry_vector(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_announce_entry_vector(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_announce_entry_vector(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_announce_entry_vector(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          std::vector< libtorrent::announce_entry > * arg1 = (std::vector< libtorrent::announce_entry > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_tcp_endpoint_vector(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< libtorrent::tcp::endpoint > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_tcp_endpoint_vector.");
  result = (std::vector< libtorrent::tcp::endpoint > *)new std::vector< libtorrent::tcp::endpoint >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_libtorrent__tcp__endpoint_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tcp_endpoint_vector_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::tcp::endpoint > *arg1 = (std::vector< libtorrent::tcp::endpoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::tcp::endpoint >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_tcp_endpoint_vector_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__tcp__endpoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_endpoint_vector_size" "', argument " "1"" of type '" "std::vector< libtorrent::tcp::endpoint > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::tcp::endpoint > *)(argp1);
  result = ((std::vector< libtorrent::tcp::endpoint > const *)arg1)->size();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tcp_endpoint_vector_capacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::tcp::endpoint > *arg1 = (std::vector< libtorrent::tcp::endpoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::tcp::endpoint >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_tcp_endpoint_vector_capacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__tcp__endpoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_endpoint_vector_capacity" "', argument " "1"" of type '" "std::vector< libtorrent::tcp::endpoint > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::tcp::endpoint > *)(argp1);
  result = ((std::vector< libtorrent::tcp::endpoint > const *)arg1)->capacity();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tcp_endpoint_vector_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::tcp::endpoint > *arg1 = (std::vector< libtorrent::tcp::endpoint > *) 0 ;
  std::vector< libtorrent::tcp::endpoint >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_tcp_endpoint_vector_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__tcp__endpoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_endpoint_vector_reserve" "', argument " "1"" of type '" "std::vector< libtorrent::tcp::endpoint > *""'"); 
  }
  arg1 = (std::vector< libtorrent::tcp::endpoint > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tcp_endpoint_vector_reserve" "', argument " "2"" of type '" "std::vector< libtorrent::tcp::endpoint >::size_type""'");
  } 
  arg2 = (std::vector< libtorrent::tcp::endpoint >::size_type)(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tcp_endpoint_vector_empty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::tcp::endpoint > *arg1 = (std::vector< libtorrent::tcp::endpoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_tcp_endpoint_vector_empty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__tcp__endpoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_endpoint_vector_empty" "', argument " "1"" of type '" "std::vector< libtorrent::tcp::endpoint > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::tcp::endpoint > *)(argp1);
  result = (bool)((std::vector< libtorrent::tcp::endpoint > const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tcp_endpoint_vector_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::tcp::endpoint > *arg1 = (std::vector< libtorrent::tcp::endpoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_tcp_endpoint_vector_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__tcp__endpoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_endpoint_vector_clear" "', argument " "1"" of type '" "std::vector< libtorrent::tcp::endpoint > *""'"); 
  }
  arg1 = (std::vector< libtorrent::tcp::endpoint > *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tcp_endpoint_vector_push_back(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::tcp::endpoint > *arg1 = (std::vector< libtorrent::tcp::endpoint > *) 0 ;
  std::vector< libtorrent::tcp::endpoint >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_tcp_endpoint_vector_push_back.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__tcp__endpoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_endpoint_vector_push_back" "', argument " "1"" of type '" "std::vector< libtorrent::tcp::endpoint > *""'"); 
  }
  arg1 = (std::vector< libtorrent::tcp::endpoint > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__tcp__endpoint,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tcp_endpoint_vector_push_back" "', argument " "2"" of type '" "std::vector< libtorrent::tcp::endpoint >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tcp_endpoint_vector_push_back" "', argument " "2"" of type '" "std::vector< libtorrent::tcp::endpoint >::value_type const &""'"); 
  }
  arg2 = (std::vector< libtorrent::tcp::endpoint >::value_type *)(argp2);
  (arg1)->push_back((std::vector< libtorrent::tcp::endpoint >::value_type const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tcp_endpoint_vector_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::tcp::endpoint > *arg1 = (std::vector< libtorrent::tcp::endpoint > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< libtorrent::tcp::endpoint >::value_type *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_tcp_endpoint_vector_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__tcp__endpoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_endpoint_vector_get" "', argument " "1"" of type '" "std::vector< libtorrent::tcp::endpoint > *""'"); 
  }
  arg1 = (std::vector< libtorrent::tcp::endpoint > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tcp_endpoint_vector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  try {
    result = (std::vector< libtorrent::tcp::endpoint >::value_type *) &std_vector_Sl_libtorrent_tcp_endpoint_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__tcp__endpoint, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tcp_endpoint_vector_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::tcp::endpoint > *arg1 = (std::vector< libtorrent::tcp::endpoint > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::tcp::endpoint >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_tcp_endpoint_vector_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__tcp__endpoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_endpoint_vector_set" "', argument " "1"" of type '" "std::vector< libtorrent::tcp::endpoint > *""'"); 
  }
  arg1 = (std::vector< libtorrent::tcp::endpoint > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tcp_endpoint_vector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_libtorrent__tcp__endpoint,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tcp_endpoint_vector_set" "', argument " "3"" of type '" "std::vector< libtorrent::tcp::endpoint >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tcp_endpoint_vector_set" "', argument " "3"" of type '" "std::vector< libtorrent::tcp::endpoint >::value_type const &""'"); 
  }
  arg3 = (std::vector< libtorrent::tcp::endpoint >::value_type *)(argp3);
  try {
    std_vector_Sl_libtorrent_tcp_endpoint_Sg__set(arg1,arg2,(libtorrent::tcp::endpoint const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_tcp_endpoint_vector(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_tcp_endpoint_vector(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_tcp_endpoint_vector(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_tcp_endpoint_vector(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          std::vector< libtorrent::tcp::endpoint > * arg1 = (std::vector< libtorrent::tcp::endpoint > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_udp_endpoint_vector(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< libtorrent::udp::endpoint > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_udp_endpoint_vector.");
  result = (std::vector< libtorrent::udp::endpoint > *)new std::vector< libtorrent::udp::endpoint >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_libtorrent__udp__endpoint_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_udp_endpoint_vector_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::udp::endpoint > *arg1 = (std::vector< libtorrent::udp::endpoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::udp::endpoint >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_udp_endpoint_vector_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__udp__endpoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_endpoint_vector_size" "', argument " "1"" of type '" "std::vector< libtorrent::udp::endpoint > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::udp::endpoint > *)(argp1);
  result = ((std::vector< libtorrent::udp::endpoint > const *)arg1)->size();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_udp_endpoint_vector_capacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::udp::endpoint > *arg1 = (std::vector< libtorrent::udp::endpoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::udp::endpoint >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_udp_endpoint_vector_capacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__udp__endpoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_endpoint_vector_capacity" "', argument " "1"" of type '" "std::vector< libtorrent::udp::endpoint > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::udp::endpoint > *)(argp1);
  result = ((std::vector< libtorrent::udp::endpoint > const *)arg1)->capacity();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_udp_endpoint_vector_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::udp::endpoint > *arg1 = (std::vector< libtorrent::udp::endpoint > *) 0 ;
  std::vector< libtorrent::udp::endpoint >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_udp_endpoint_vector_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__udp__endpoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_endpoint_vector_reserve" "', argument " "1"" of type '" "std::vector< libtorrent::udp::endpoint > *""'"); 
  }
  arg1 = (std::vector< libtorrent::udp::endpoint > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_endpoint_vector_reserve" "', argument " "2"" of type '" "std::vector< libtorrent::udp::endpoint >::size_type""'");
  } 
  arg2 = (std::vector< libtorrent::udp::endpoint >::size_type)(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_udp_endpoint_vector_empty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::udp::endpoint > *arg1 = (std::vector< libtorrent::udp::endpoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_udp_endpoint_vector_empty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__udp__endpoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_endpoint_vector_empty" "', argument " "1"" of type '" "std::vector< libtorrent::udp::endpoint > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::udp::endpoint > *)(argp1);
  result = (bool)((std::vector< libtorrent::udp::endpoint > const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_udp_endpoint_vector_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::udp::endpoint > *arg1 = (std::vector< libtorrent::udp::endpoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_udp_endpoint_vector_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__udp__endpoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_endpoint_vector_clear" "', argument " "1"" of type '" "std::vector< libtorrent::udp::endpoint > *""'"); 
  }
  arg1 = (std::vector< libtorrent::udp::endpoint > *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_udp_endpoint_vector_push_back(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::udp::endpoint > *arg1 = (std::vector< libtorrent::udp::endpoint > *) 0 ;
  std::vector< libtorrent::udp::endpoint >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_udp_endpoint_vector_push_back.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__udp__endpoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_endpoint_vector_push_back" "', argument " "1"" of type '" "std::vector< libtorrent::udp::endpoint > *""'"); 
  }
  arg1 = (std::vector< libtorrent::udp::endpoint > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__udp__endpoint,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "udp_endpoint_vector_push_back" "', argument " "2"" of type '" "std::vector< libtorrent::udp::endpoint >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "udp_endpoint_vector_push_back" "', argument " "2"" of type '" "std::vector< libtorrent::udp::endpoint >::value_type const &""'"); 
  }
  arg2 = (std::vector< libtorrent::udp::endpoint >::value_type *)(argp2);
  (arg1)->push_back((std::vector< libtorrent::udp::endpoint >::value_type const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_udp_endpoint_vector_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::udp::endpoint > *arg1 = (std::vector< libtorrent::udp::endpoint > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< libtorrent::udp::endpoint >::value_type *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_udp_endpoint_vector_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__udp__endpoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_endpoint_vector_get" "', argument " "1"" of type '" "std::vector< libtorrent::udp::endpoint > *""'"); 
  }
  arg1 = (std::vector< libtorrent::udp::endpoint > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_endpoint_vector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  try {
    result = (std::vector< libtorrent::udp::endpoint >::value_type *) &std_vector_Sl_libtorrent_udp_endpoint_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__udp__endpoint, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_udp_endpoint_vector_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::udp::endpoint > *arg1 = (std::vector< libtorrent::udp::endpoint > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::udp::endpoint >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_udp_endpoint_vector_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__udp__endpoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_endpoint_vector_set" "', argument " "1"" of type '" "std::vector< libtorrent::udp::endpoint > *""'"); 
  }
  arg1 = (std::vector< libtorrent::udp::endpoint > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_endpoint_vector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_libtorrent__udp__endpoint,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "udp_endpoint_vector_set" "', argument " "3"" of type '" "std::vector< libtorrent::udp::endpoint >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "udp_endpoint_vector_set" "', argument " "3"" of type '" "std::vector< libtorrent::udp::endpoint >::value_type const &""'"); 
  }
  arg3 = (std::vector< libtorrent::udp::endpoint >::value_type *)(argp3);
  try {
    std_vector_Sl_libtorrent_udp_endpoint_Sg__set(arg1,arg2,(libtorrent::udp::endpoint const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_udp_endpoint_vector(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_udp_endpoint_vector(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_udp_endpoint_vector(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_udp_endpoint_vector(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          std::vector< libtorrent::udp::endpoint > * arg1 = (std::vector< libtorrent::udp::endpoint > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_int_string_map__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::map< int,std::string > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_int_string_map__SWIG_0.");
  result = (std::map< int,std::string > *)new std::map< int,std::string >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__mapT_int_std__string_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_int_string_map__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::map< int,std::string > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::map< int,std::string > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_int_string_map__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__mapT_int_std__string_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_int_string_map" "', argument " "1"" of type '" "std::map< int,std::string > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_int_string_map" "', argument " "1"" of type '" "std::map< int,std::string > const &""'"); 
  }
  arg1 = (std::map< int,std::string > *)(argp1);
  result = (std::map< int,std::string > *)new std::map< int,std::string >((std::map< int,std::string > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__mapT_int_std__string_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_int_string_map(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_int_string_map__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_int_string_map__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_int_string_map__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_int_string_map__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_int_string_map");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int_string_map_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int_string_map_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_string_map_size" "', argument " "1"" of type '" "std::map< int,std::string > const *""'"); 
  }
  arg1 = (std::map< int,std::string > *)(argp1);
  result = (unsigned int)((std::map< int,std::string > const *)arg1)->size();
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int_string_map_empty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int_string_map_empty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_string_map_empty" "', argument " "1"" of type '" "std::map< int,std::string > const *""'"); 
  }
  arg1 = (std::map< int,std::string > *)(argp1);
  result = (bool)((std::map< int,std::string > const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int_string_map_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int_string_map_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_string_map_clear" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = (std::map< int,std::string > *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int_string_map_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  std::string *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int_string_map_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_string_map_get" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = (std::map< int,std::string > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "int_string_map_get" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = (int)(val2);
  arg2 = &temp2;
  try {
    result = (std::string *) &std_map_Sl_int_Sc_std_string_Sg__get(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int_string_map_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  int *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int_string_map_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_string_map_set" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = (std::map< int,std::string > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "int_string_map_set" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = (int)(val2);
  arg2 = &temp2;
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "int_string_map_set" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "int_string_map_set" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  std_map_Sl_int_Sc_std_string_Sg__set(arg1,(int const &)*arg2,(std::string const &)*arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int_string_map_erase(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int_string_map_erase.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_string_map_erase" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = (std::map< int,std::string > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "int_string_map_erase" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = (int)(val2);
  arg2 = &temp2;
  try {
    std_map_Sl_int_Sc_std_string_Sg__erase(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int_string_map_has_key(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int_string_map_has_key.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_string_map_has_key" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = (std::map< int,std::string > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "int_string_map_has_key" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = (int)(val2);
  arg2 = &temp2;
  result = (bool)std_map_Sl_int_Sc_std_string_Sg__has_key(arg1,(int const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int_string_map_keys(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int_string_map_keys.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_string_map_keys" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = (std::map< int,std::string > *)(argp1);
  result = std_map_Sl_int_Sc_std_string_Sg__keys(arg1);
  jsresult = SWIG_NewPointerObj((new std::vector< int >((const std::vector< int >&)(result))), SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_int_string_map(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_int_string_map(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_int_string_map(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_int_string_map(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          std::map< int,std::string > * arg1 = (std::map< int,std::string > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_string_long_map__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::map< std::string,long > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_string_long_map__SWIG_0.");
  result = (std::map< std::string,long > *)new std::map< std::string,long >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__mapT_std__string_long_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_string_long_map__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::map< std::string,long > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::map< std::string,long > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_string_long_map__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__mapT_std__string_long_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_string_long_map" "', argument " "1"" of type '" "std::map< std::string,long > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_string_long_map" "', argument " "1"" of type '" "std::map< std::string,long > const &""'"); 
  }
  arg1 = (std::map< std::string,long > *)(argp1);
  result = (std::map< std::string,long > *)new std::map< std::string,long >((std::map< std::string,long > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__mapT_std__string_long_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_string_long_map(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_string_long_map__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_string_long_map__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_string_long_map__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_string_long_map__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_string_long_map");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_long_map_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::map< std::string,long > *arg1 = (std::map< std::string,long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_long_map_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_std__string_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_long_map_size" "', argument " "1"" of type '" "std::map< std::string,long > const *""'"); 
  }
  arg1 = (std::map< std::string,long > *)(argp1);
  result = (unsigned int)((std::map< std::string,long > const *)arg1)->size();
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_long_map_empty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::map< std::string,long > *arg1 = (std::map< std::string,long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_long_map_empty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_std__string_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_long_map_empty" "', argument " "1"" of type '" "std::map< std::string,long > const *""'"); 
  }
  arg1 = (std::map< std::string,long > *)(argp1);
  result = (bool)((std::map< std::string,long > const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_long_map_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::map< std::string,long > *arg1 = (std::map< std::string,long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_long_map_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_std__string_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_long_map_clear" "', argument " "1"" of type '" "std::map< std::string,long > *""'"); 
  }
  arg1 = (std::map< std::string,long > *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_long_map_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::map< std::string,long > *arg1 = (std::map< std::string,long > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  long *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_long_map_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_std__string_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_long_map_get" "', argument " "1"" of type '" "std::map< std::string,long > *""'"); 
  }
  arg1 = (std::map< std::string,long > *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_long_map_get" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_long_map_get" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    result = (long *) &std_map_Sl_std_string_Sc_long_Sg__get(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIG_From_long((long)(*result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_long_map_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::map< std::string,long > *arg1 = (std::map< std::string,long > *) 0 ;
  std::string *arg2 = 0 ;
  long *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  long temp3 ;
  long val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_long_map_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_std__string_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_long_map_set" "', argument " "1"" of type '" "std::map< std::string,long > *""'"); 
  }
  arg1 = (std::map< std::string,long > *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_long_map_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_long_map_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_long(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_long_map_set" "', argument " "3"" of type '" "long""'");
  } 
  temp3 = (long)(val3);
  arg3 = &temp3;
  std_map_Sl_std_string_Sc_long_Sg__set(arg1,(std::string const &)*arg2,(long const &)*arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_long_map_erase(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::map< std::string,long > *arg1 = (std::map< std::string,long > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_long_map_erase.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_std__string_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_long_map_erase" "', argument " "1"" of type '" "std::map< std::string,long > *""'"); 
  }
  arg1 = (std::map< std::string,long > *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_long_map_erase" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_long_map_erase" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    std_map_Sl_std_string_Sc_long_Sg__erase(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_long_map_has_key(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::map< std::string,long > *arg1 = (std::map< std::string,long > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_long_map_has_key.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_std__string_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_long_map_has_key" "', argument " "1"" of type '" "std::map< std::string,long > *""'"); 
  }
  arg1 = (std::map< std::string,long > *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_long_map_has_key" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_long_map_has_key" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)std_map_Sl_std_string_Sc_long_Sg__has_key(arg1,(std::string const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_long_map_keys(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::map< std::string,long > *arg1 = (std::map< std::string,long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_long_map_keys.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_std__string_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_long_map_keys" "', argument " "1"" of type '" "std::map< std::string,long > *""'"); 
  }
  arg1 = (std::map< std::string,long > *)(argp1);
  result = std_map_Sl_std_string_Sc_long_Sg__keys(arg1);
  jsresult = SWIG_NewPointerObj((new std::vector< std::string >((const std::vector< std::string >&)(result))), SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_string_long_map(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_string_long_map(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_string_long_map(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_string_long_map(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          std::map< std::string,long > * arg1 = (std::map< std::string,long > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_string_entry_map__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::map< std::string,libtorrent::entry > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_string_entry_map__SWIG_0.");
  result = (std::map< std::string,libtorrent::entry > *)new std::map< std::string,libtorrent::entry >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__mapT_std__string_libtorrent__entry_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_string_entry_map__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::map< std::string,libtorrent::entry > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::map< std::string,libtorrent::entry > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_string_entry_map__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__mapT_std__string_libtorrent__entry_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_string_entry_map" "', argument " "1"" of type '" "std::map< std::string,libtorrent::entry > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_string_entry_map" "', argument " "1"" of type '" "std::map< std::string,libtorrent::entry > const &""'"); 
  }
  arg1 = (std::map< std::string,libtorrent::entry > *)(argp1);
  result = (std::map< std::string,libtorrent::entry > *)new std::map< std::string,libtorrent::entry >((std::map< std::string,libtorrent::entry > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__mapT_std__string_libtorrent__entry_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_string_entry_map(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_string_entry_map__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_string_entry_map__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_string_entry_map__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_string_entry_map__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_string_entry_map");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_entry_map_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::map< std::string,libtorrent::entry > *arg1 = (std::map< std::string,libtorrent::entry > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_entry_map_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_std__string_libtorrent__entry_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_entry_map_size" "', argument " "1"" of type '" "std::map< std::string,libtorrent::entry > const *""'"); 
  }
  arg1 = (std::map< std::string,libtorrent::entry > *)(argp1);
  result = (unsigned int)((std::map< std::string,libtorrent::entry > const *)arg1)->size();
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_entry_map_empty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::map< std::string,libtorrent::entry > *arg1 = (std::map< std::string,libtorrent::entry > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_entry_map_empty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_std__string_libtorrent__entry_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_entry_map_empty" "', argument " "1"" of type '" "std::map< std::string,libtorrent::entry > const *""'"); 
  }
  arg1 = (std::map< std::string,libtorrent::entry > *)(argp1);
  result = (bool)((std::map< std::string,libtorrent::entry > const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_entry_map_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::map< std::string,libtorrent::entry > *arg1 = (std::map< std::string,libtorrent::entry > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_entry_map_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_std__string_libtorrent__entry_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_entry_map_clear" "', argument " "1"" of type '" "std::map< std::string,libtorrent::entry > *""'"); 
  }
  arg1 = (std::map< std::string,libtorrent::entry > *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_entry_map_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::map< std::string,libtorrent::entry > *arg1 = (std::map< std::string,libtorrent::entry > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  libtorrent::entry *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_entry_map_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_std__string_libtorrent__entry_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_entry_map_get" "', argument " "1"" of type '" "std::map< std::string,libtorrent::entry > *""'"); 
  }
  arg1 = (std::map< std::string,libtorrent::entry > *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_entry_map_get" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_entry_map_get" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    result = (libtorrent::entry *) &std_map_Sl_std_string_Sc_libtorrent_entry_Sg__get(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__entry, 0 |  0 );
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_entry_map_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::map< std::string,libtorrent::entry > *arg1 = (std::map< std::string,libtorrent::entry > *) 0 ;
  std::string *arg2 = 0 ;
  libtorrent::entry *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_entry_map_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_std__string_libtorrent__entry_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_entry_map_set" "', argument " "1"" of type '" "std::map< std::string,libtorrent::entry > *""'"); 
  }
  arg1 = (std::map< std::string,libtorrent::entry > *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_entry_map_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_entry_map_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_libtorrent__entry,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "string_entry_map_set" "', argument " "3"" of type '" "libtorrent::entry const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_entry_map_set" "', argument " "3"" of type '" "libtorrent::entry const &""'"); 
  }
  arg3 = (libtorrent::entry *)(argp3);
  std_map_Sl_std_string_Sc_libtorrent_entry_Sg__set(arg1,(std::string const &)*arg2,(libtorrent::entry const &)*arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_entry_map_erase(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::map< std::string,libtorrent::entry > *arg1 = (std::map< std::string,libtorrent::entry > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_entry_map_erase.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_std__string_libtorrent__entry_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_entry_map_erase" "', argument " "1"" of type '" "std::map< std::string,libtorrent::entry > *""'"); 
  }
  arg1 = (std::map< std::string,libtorrent::entry > *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_entry_map_erase" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_entry_map_erase" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    std_map_Sl_std_string_Sc_libtorrent_entry_Sg__erase(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_entry_map_has_key(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::map< std::string,libtorrent::entry > *arg1 = (std::map< std::string,libtorrent::entry > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_entry_map_has_key.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_std__string_libtorrent__entry_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_entry_map_has_key" "', argument " "1"" of type '" "std::map< std::string,libtorrent::entry > *""'"); 
  }
  arg1 = (std::map< std::string,libtorrent::entry > *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_entry_map_has_key" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_entry_map_has_key" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)std_map_Sl_std_string_Sc_libtorrent_entry_Sg__has_key(arg1,(std::string const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_entry_map_keys(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::map< std::string,libtorrent::entry > *arg1 = (std::map< std::string,libtorrent::entry > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_entry_map_keys.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_std__string_libtorrent__entry_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_entry_map_keys" "', argument " "1"" of type '" "std::map< std::string,libtorrent::entry > *""'"); 
  }
  arg1 = (std::map< std::string,libtorrent::entry > *)(argp1);
  result = std_map_Sl_std_string_Sc_libtorrent_entry_Sg__keys(arg1);
  jsresult = SWIG_NewPointerObj((new std::vector< std::string >((const std::vector< std::string >&)(result))), SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_string_entry_map(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_string_entry_map(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_string_entry_map(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_string_entry_map(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          std::map< std::string,libtorrent::entry > * arg1 = (std::map< std::string,libtorrent::entry > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_int_bitfield_map__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::map< int,libtorrent::bitfield > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_int_bitfield_map__SWIG_0.");
  result = (std::map< int,libtorrent::bitfield > *)new std::map< int,libtorrent::bitfield >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__mapT_int_libtorrent__bitfield_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_int_bitfield_map__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::map< int,libtorrent::bitfield > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::map< int,libtorrent::bitfield > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_int_bitfield_map__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__mapT_int_libtorrent__bitfield_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_int_bitfield_map" "', argument " "1"" of type '" "std::map< int,libtorrent::bitfield > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_int_bitfield_map" "', argument " "1"" of type '" "std::map< int,libtorrent::bitfield > const &""'"); 
  }
  arg1 = (std::map< int,libtorrent::bitfield > *)(argp1);
  result = (std::map< int,libtorrent::bitfield > *)new std::map< int,libtorrent::bitfield >((std::map< int,libtorrent::bitfield > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__mapT_int_libtorrent__bitfield_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_int_bitfield_map(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_int_bitfield_map__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_int_bitfield_map__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_int_bitfield_map__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_int_bitfield_map__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_int_bitfield_map");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int_bitfield_map_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::map< int,libtorrent::bitfield > *arg1 = (std::map< int,libtorrent::bitfield > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int_bitfield_map_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_int_libtorrent__bitfield_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_bitfield_map_size" "', argument " "1"" of type '" "std::map< int,libtorrent::bitfield > const *""'"); 
  }
  arg1 = (std::map< int,libtorrent::bitfield > *)(argp1);
  result = (unsigned int)((std::map< int,libtorrent::bitfield > const *)arg1)->size();
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int_bitfield_map_empty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::map< int,libtorrent::bitfield > *arg1 = (std::map< int,libtorrent::bitfield > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int_bitfield_map_empty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_int_libtorrent__bitfield_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_bitfield_map_empty" "', argument " "1"" of type '" "std::map< int,libtorrent::bitfield > const *""'"); 
  }
  arg1 = (std::map< int,libtorrent::bitfield > *)(argp1);
  result = (bool)((std::map< int,libtorrent::bitfield > const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int_bitfield_map_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::map< int,libtorrent::bitfield > *arg1 = (std::map< int,libtorrent::bitfield > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int_bitfield_map_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_int_libtorrent__bitfield_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_bitfield_map_clear" "', argument " "1"" of type '" "std::map< int,libtorrent::bitfield > *""'"); 
  }
  arg1 = (std::map< int,libtorrent::bitfield > *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int_bitfield_map_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::map< int,libtorrent::bitfield > *arg1 = (std::map< int,libtorrent::bitfield > *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  libtorrent::bitfield *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int_bitfield_map_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_int_libtorrent__bitfield_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_bitfield_map_get" "', argument " "1"" of type '" "std::map< int,libtorrent::bitfield > *""'"); 
  }
  arg1 = (std::map< int,libtorrent::bitfield > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "int_bitfield_map_get" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = (int)(val2);
  arg2 = &temp2;
  try {
    result = (libtorrent::bitfield *) &std_map_Sl_int_Sc_libtorrent_bitfield_Sg__get(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__bitfield, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int_bitfield_map_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::map< int,libtorrent::bitfield > *arg1 = (std::map< int,libtorrent::bitfield > *) 0 ;
  int *arg2 = 0 ;
  libtorrent::bitfield *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int_bitfield_map_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_int_libtorrent__bitfield_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_bitfield_map_set" "', argument " "1"" of type '" "std::map< int,libtorrent::bitfield > *""'"); 
  }
  arg1 = (std::map< int,libtorrent::bitfield > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "int_bitfield_map_set" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = (int)(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_libtorrent__bitfield,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "int_bitfield_map_set" "', argument " "3"" of type '" "libtorrent::bitfield const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "int_bitfield_map_set" "', argument " "3"" of type '" "libtorrent::bitfield const &""'"); 
  }
  arg3 = (libtorrent::bitfield *)(argp3);
  std_map_Sl_int_Sc_libtorrent_bitfield_Sg__set(arg1,(int const &)*arg2,(libtorrent::bitfield const &)*arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int_bitfield_map_erase(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::map< int,libtorrent::bitfield > *arg1 = (std::map< int,libtorrent::bitfield > *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int_bitfield_map_erase.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_int_libtorrent__bitfield_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_bitfield_map_erase" "', argument " "1"" of type '" "std::map< int,libtorrent::bitfield > *""'"); 
  }
  arg1 = (std::map< int,libtorrent::bitfield > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "int_bitfield_map_erase" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = (int)(val2);
  arg2 = &temp2;
  try {
    std_map_Sl_int_Sc_libtorrent_bitfield_Sg__erase(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int_bitfield_map_has_key(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::map< int,libtorrent::bitfield > *arg1 = (std::map< int,libtorrent::bitfield > *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int_bitfield_map_has_key.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_int_libtorrent__bitfield_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_bitfield_map_has_key" "', argument " "1"" of type '" "std::map< int,libtorrent::bitfield > *""'"); 
  }
  arg1 = (std::map< int,libtorrent::bitfield > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "int_bitfield_map_has_key" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = (int)(val2);
  arg2 = &temp2;
  result = (bool)std_map_Sl_int_Sc_libtorrent_bitfield_Sg__has_key(arg1,(int const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_int_bitfield_map_keys(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::map< int,libtorrent::bitfield > *arg1 = (std::map< int,libtorrent::bitfield > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_int_bitfield_map_keys.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_int_libtorrent__bitfield_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_bitfield_map_keys" "', argument " "1"" of type '" "std::map< int,libtorrent::bitfield > *""'"); 
  }
  arg1 = (std::map< int,libtorrent::bitfield > *)(argp1);
  result = std_map_Sl_int_Sc_libtorrent_bitfield_Sg__keys(arg1);
  jsresult = SWIG_NewPointerObj((new std::vector< int >((const std::vector< int >&)(result))), SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_int_bitfield_map(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_int_bitfield_map(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_int_bitfield_map(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_int_bitfield_map(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          std::map< int,libtorrent::bitfield > * arg1 = (std::map< int,libtorrent::bitfield > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_alert_ptr_vector(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< libtorrent::alert * > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_alert_ptr_vector.");
  result = (std::vector< libtorrent::alert * > *)new std::vector< libtorrent::alert * >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_libtorrent__alert_p_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_ptr_vector_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::alert * > *arg1 = (std::vector< libtorrent::alert * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::alert * >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_ptr_vector_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__alert_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_ptr_vector_size" "', argument " "1"" of type '" "std::vector< libtorrent::alert * > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::alert * > *)(argp1);
  result = ((std::vector< libtorrent::alert * > const *)arg1)->size();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_ptr_vector_capacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::alert * > *arg1 = (std::vector< libtorrent::alert * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::alert * >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_ptr_vector_capacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__alert_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_ptr_vector_capacity" "', argument " "1"" of type '" "std::vector< libtorrent::alert * > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::alert * > *)(argp1);
  result = ((std::vector< libtorrent::alert * > const *)arg1)->capacity();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_ptr_vector_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::alert * > *arg1 = (std::vector< libtorrent::alert * > *) 0 ;
  std::vector< libtorrent::alert * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_ptr_vector_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__alert_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_ptr_vector_reserve" "', argument " "1"" of type '" "std::vector< libtorrent::alert * > *""'"); 
  }
  arg1 = (std::vector< libtorrent::alert * > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "alert_ptr_vector_reserve" "', argument " "2"" of type '" "std::vector< libtorrent::alert * >::size_type""'");
  } 
  arg2 = (std::vector< libtorrent::alert * >::size_type)(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_ptr_vector_empty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::alert * > *arg1 = (std::vector< libtorrent::alert * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_ptr_vector_empty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__alert_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_ptr_vector_empty" "', argument " "1"" of type '" "std::vector< libtorrent::alert * > const *""'"); 
  }
  arg1 = (std::vector< libtorrent::alert * > *)(argp1);
  result = (bool)((std::vector< libtorrent::alert * > const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_ptr_vector_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::alert * > *arg1 = (std::vector< libtorrent::alert * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_ptr_vector_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__alert_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_ptr_vector_clear" "', argument " "1"" of type '" "std::vector< libtorrent::alert * > *""'"); 
  }
  arg1 = (std::vector< libtorrent::alert * > *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_ptr_vector_push_back(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::alert * > *arg1 = (std::vector< libtorrent::alert * > *) 0 ;
  std::vector< libtorrent::alert * >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< libtorrent::alert * >::value_type temp2 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_ptr_vector_push_back.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__alert_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_ptr_vector_push_back" "', argument " "1"" of type '" "std::vector< libtorrent::alert * > *""'"); 
  }
  arg1 = (std::vector< libtorrent::alert * > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "alert_ptr_vector_push_back" "', argument " "2"" of type '" "std::vector< libtorrent::alert * >::value_type""'"); 
  }
  temp2 = (std::vector< libtorrent::alert * >::value_type)(argp2);
  arg2 = (std::vector< libtorrent::alert * >::value_type *)(&temp2);
  (arg1)->push_back((std::vector< libtorrent::alert * >::value_type const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_ptr_vector_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::alert * > *arg1 = (std::vector< libtorrent::alert * > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< libtorrent::alert * >::value_type *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_ptr_vector_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__alert_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_ptr_vector_get" "', argument " "1"" of type '" "std::vector< libtorrent::alert * > *""'"); 
  }
  arg1 = (std::vector< libtorrent::alert * > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "alert_ptr_vector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  try {
    result = (std::vector< libtorrent::alert * >::value_type *) &std_vector_Sl_libtorrent_alert_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_ptr_vector_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::alert * > *arg1 = (std::vector< libtorrent::alert * > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::alert * >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< libtorrent::alert * >::value_type temp3 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_ptr_vector_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_libtorrent__alert_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_ptr_vector_set" "', argument " "1"" of type '" "std::vector< libtorrent::alert * > *""'"); 
  }
  arg1 = (std::vector< libtorrent::alert * > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "alert_ptr_vector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "alert_ptr_vector_set" "', argument " "3"" of type '" "std::vector< libtorrent::alert * >::value_type""'"); 
  }
  temp3 = (std::vector< libtorrent::alert * >::value_type)(argp3);
  arg3 = (std::vector< libtorrent::alert * >::value_type *)(&temp3);
  try {
    std_vector_Sl_libtorrent_alert_Sm__Sg__set(arg1,arg2,(libtorrent::alert *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_alert_ptr_vector(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_alert_ptr_vector(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_alert_ptr_vector(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_alert_ptr_vector(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          std::vector< libtorrent::alert * > * arg1 = (std::vector< libtorrent::alert * > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap_iovec_t_iov_base_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::file::iovec_t *arg1 = (libtorrent::file::iovec_t *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__file__iovec_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iovec_t_iov_base_set" "', argument " "1"" of type '" "libtorrent::file::iovec_t *""'"); 
  }
  arg1 = (libtorrent::file::iovec_t *)(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "iovec_t_iov_base_set" "', argument " "2"" of type '" "void *""'");
  } 
  arg2 = (void *)(val2);
  if (arg1) (arg1)->iov_base = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_iovec_t_iov_base_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file::iovec_t *arg1 = (libtorrent::file::iovec_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__file__iovec_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iovec_t_iov_base_get" "', argument " "1"" of type '" "libtorrent::file::iovec_t *""'"); 
  }
  arg1 = (libtorrent::file::iovec_t *)(argp1);
  result = (void *) ((arg1)->iov_base);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_iovec_t_iov_len_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::file::iovec_t *arg1 = (libtorrent::file::iovec_t *) 0 ;
  std::int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__file__iovec_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iovec_t_iov_len_set" "', argument " "1"" of type '" "libtorrent::file::iovec_t *""'"); 
  }
  arg1 = (libtorrent::file::iovec_t *)(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "iovec_t_iov_len_set" "', argument " "2"" of type '" "std::int64_t""'");
  } 
  arg2 = (std::int64_t)(val2);
  if (arg1) (arg1)->iov_len = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_iovec_t_iov_len_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file::iovec_t *arg1 = (libtorrent::file::iovec_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::int64_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__file__iovec_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iovec_t_iov_len_get" "', argument " "1"" of type '" "libtorrent::file::iovec_t *""'"); 
  }
  arg1 = (libtorrent::file::iovec_t *)(argp1);
  result = (std::int64_t) ((arg1)->iov_len);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_iovec_t(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::file::iovec_t *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_iovec_t.");
  result = (libtorrent::file::iovec_t *)new libtorrent::file::iovec_t();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__file__iovec_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_iovec_t(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_iovec_t(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_iovec_t(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_iovec_t(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::file::iovec_t * arg1 = (libtorrent::file::iovec_t *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_libtorrent_storage_mode_allocate(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::storage_mode_allocate));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_storage_mode_sparse(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::storage_mode_sparse));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_connection_type_bittorrent(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::connection_type::bittorrent));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_connection_type_url_seed(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::connection_type::url_seed));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_connection_type_http_seed(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::connection_type::http_seed));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_byte_span(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::span< char > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_byte_span.");
  result = (libtorrent::span< char > *)new libtorrent::span< char >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__spanT_char_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_byte_span_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::span< char > *arg1 = (libtorrent::span< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_byte_span_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__spanT_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "byte_span_size" "', argument " "1"" of type '" "libtorrent::span< char > const *""'"); 
  }
  arg1 = (libtorrent::span< char > *)(argp1);
  result = ((libtorrent::span< char > const *)arg1)->size();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_byte_span_empty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::span< char > *arg1 = (libtorrent::span< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_byte_span_empty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__spanT_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "byte_span_empty" "', argument " "1"" of type '" "libtorrent::span< char > const *""'"); 
  }
  arg1 = (libtorrent::span< char > *)(argp1);
  result = (bool)((libtorrent::span< char > const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_byte_span_front(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::span< char > *arg1 = (libtorrent::span< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int8_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_byte_span_front.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__spanT_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "byte_span_front" "', argument " "1"" of type '" "libtorrent::span< char > const *""'"); 
  }
  arg1 = (libtorrent::span< char > *)(argp1);
  result = (int8_t)((libtorrent::span< char > const *)arg1)->front();
  jsresult = SWIG_From_signed_SS_char((signed char)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_byte_span_back(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::span< char > *arg1 = (libtorrent::span< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int8_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_byte_span_back.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__spanT_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "byte_span_back" "', argument " "1"" of type '" "libtorrent::span< char > const *""'"); 
  }
  arg1 = (libtorrent::span< char > *)(argp1);
  result = (int8_t)((libtorrent::span< char > const *)arg1)->back();
  jsresult = SWIG_From_signed_SS_char((signed char)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_byte_span_first(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::span< char > *arg1 = (libtorrent::span< char > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  libtorrent::span< char > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_byte_span_first.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__spanT_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "byte_span_first" "', argument " "1"" of type '" "libtorrent::span< char > const *""'"); 
  }
  arg1 = (libtorrent::span< char > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "byte_span_first" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = ((libtorrent::span< char > const *)arg1)->first(arg2);
  jsresult = SWIG_NewPointerObj((new libtorrent::span< char >((const libtorrent::span< char >&)(result))), SWIGTYPE_p_libtorrent__spanT_char_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_byte_span_last(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::span< char > *arg1 = (libtorrent::span< char > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  libtorrent::span< char > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_byte_span_last.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__spanT_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "byte_span_last" "', argument " "1"" of type '" "libtorrent::span< char > const *""'"); 
  }
  arg1 = (libtorrent::span< char > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "byte_span_last" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = ((libtorrent::span< char > const *)arg1)->last(arg2);
  jsresult = SWIG_NewPointerObj((new libtorrent::span< char >((const libtorrent::span< char >&)(result))), SWIGTYPE_p_libtorrent__spanT_char_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_byte_span_subspan__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::span< char > *arg1 = (libtorrent::span< char > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  libtorrent::span< char > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__spanT_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "byte_span_subspan" "', argument " "1"" of type '" "libtorrent::span< char > const *""'"); 
  }
  arg1 = (libtorrent::span< char > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "byte_span_subspan" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = ((libtorrent::span< char > const *)arg1)->subspan(arg2);
  jsresult = SWIG_NewPointerObj((new libtorrent::span< char >((const libtorrent::span< char >&)(result))), SWIGTYPE_p_libtorrent__spanT_char_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_byte_span_subspan__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::span< char > *arg1 = (libtorrent::span< char > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  libtorrent::span< char > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__spanT_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "byte_span_subspan" "', argument " "1"" of type '" "libtorrent::span< char > const *""'"); 
  }
  arg1 = (libtorrent::span< char > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "byte_span_subspan" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "byte_span_subspan" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  result = ((libtorrent::span< char > const *)arg1)->subspan(arg2,arg3);
  jsresult = SWIG_NewPointerObj((new libtorrent::span< char >((const libtorrent::span< char >&)(result))), SWIGTYPE_p_libtorrent__spanT_char_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_byte_span__wrap_byte_span_subspan(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_byte_span_subspan__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_byte_span_subspan__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_byte_span_subspan__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_byte_span_subspan__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function subspan.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_byte_span_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::span< char > *arg1 = (libtorrent::span< char > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int8_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_byte_span_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__spanT_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "byte_span_get" "', argument " "1"" of type '" "libtorrent::span< char > *""'"); 
  }
  arg1 = (libtorrent::span< char > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "byte_span_get" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = (int8_t)libtorrent_span_Sl_char_Sg__get(arg1,arg2);
  jsresult = SWIG_From_signed_SS_char((signed char)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_byte_span(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_byte_span(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_byte_span(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_byte_span(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::span< char > * arg1 = (libtorrent::span< char > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_byte_const_span(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::span< char const > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_byte_const_span.");
  result = (libtorrent::span< char const > *)new libtorrent::span< char const >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__spanT_char_const_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_byte_const_span_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::span< char const > *arg1 = (libtorrent::span< char const > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_byte_const_span_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__spanT_char_const_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "byte_const_span_size" "', argument " "1"" of type '" "libtorrent::span< char const > const *""'"); 
  }
  arg1 = (libtorrent::span< char const > *)(argp1);
  result = ((libtorrent::span< char const > const *)arg1)->size();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_byte_const_span_empty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::span< char const > *arg1 = (libtorrent::span< char const > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_byte_const_span_empty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__spanT_char_const_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "byte_const_span_empty" "', argument " "1"" of type '" "libtorrent::span< char const > const *""'"); 
  }
  arg1 = (libtorrent::span< char const > *)(argp1);
  result = (bool)((libtorrent::span< char const > const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_byte_const_span_front(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::span< char const > *arg1 = (libtorrent::span< char const > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int8_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_byte_const_span_front.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__spanT_char_const_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "byte_const_span_front" "', argument " "1"" of type '" "libtorrent::span< char const > const *""'"); 
  }
  arg1 = (libtorrent::span< char const > *)(argp1);
  result = (int8_t)((libtorrent::span< char const > const *)arg1)->front();
  jsresult = SWIG_From_signed_SS_char((signed char)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_byte_const_span_back(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::span< char const > *arg1 = (libtorrent::span< char const > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int8_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_byte_const_span_back.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__spanT_char_const_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "byte_const_span_back" "', argument " "1"" of type '" "libtorrent::span< char const > const *""'"); 
  }
  arg1 = (libtorrent::span< char const > *)(argp1);
  result = (int8_t)((libtorrent::span< char const > const *)arg1)->back();
  jsresult = SWIG_From_signed_SS_char((signed char)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_byte_const_span_first(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::span< char const > *arg1 = (libtorrent::span< char const > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  libtorrent::span< char const > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_byte_const_span_first.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__spanT_char_const_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "byte_const_span_first" "', argument " "1"" of type '" "libtorrent::span< char const > const *""'"); 
  }
  arg1 = (libtorrent::span< char const > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "byte_const_span_first" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = ((libtorrent::span< char const > const *)arg1)->first(arg2);
  jsresult = SWIG_NewPointerObj((new libtorrent::span< char const >((const libtorrent::span< char const >&)(result))), SWIGTYPE_p_libtorrent__spanT_char_const_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_byte_const_span_last(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::span< char const > *arg1 = (libtorrent::span< char const > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  libtorrent::span< char const > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_byte_const_span_last.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__spanT_char_const_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "byte_const_span_last" "', argument " "1"" of type '" "libtorrent::span< char const > const *""'"); 
  }
  arg1 = (libtorrent::span< char const > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "byte_const_span_last" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = ((libtorrent::span< char const > const *)arg1)->last(arg2);
  jsresult = SWIG_NewPointerObj((new libtorrent::span< char const >((const libtorrent::span< char const >&)(result))), SWIGTYPE_p_libtorrent__spanT_char_const_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_byte_const_span_subspan__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::span< char const > *arg1 = (libtorrent::span< char const > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  libtorrent::span< char const > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__spanT_char_const_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "byte_const_span_subspan" "', argument " "1"" of type '" "libtorrent::span< char const > const *""'"); 
  }
  arg1 = (libtorrent::span< char const > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "byte_const_span_subspan" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = ((libtorrent::span< char const > const *)arg1)->subspan(arg2);
  jsresult = SWIG_NewPointerObj((new libtorrent::span< char const >((const libtorrent::span< char const >&)(result))), SWIGTYPE_p_libtorrent__spanT_char_const_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_byte_const_span_subspan__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::span< char const > *arg1 = (libtorrent::span< char const > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  libtorrent::span< char const > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__spanT_char_const_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "byte_const_span_subspan" "', argument " "1"" of type '" "libtorrent::span< char const > const *""'"); 
  }
  arg1 = (libtorrent::span< char const > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "byte_const_span_subspan" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "byte_const_span_subspan" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  result = ((libtorrent::span< char const > const *)arg1)->subspan(arg2,arg3);
  jsresult = SWIG_NewPointerObj((new libtorrent::span< char const >((const libtorrent::span< char const >&)(result))), SWIGTYPE_p_libtorrent__spanT_char_const_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_byte_const_span__wrap_byte_const_span_subspan(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_byte_const_span_subspan__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_byte_const_span_subspan__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_byte_const_span_subspan__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_byte_const_span_subspan__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function subspan.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_byte_const_span_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::span< char const > *arg1 = (libtorrent::span< char const > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int8_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_byte_const_span_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__spanT_char_const_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "byte_const_span_get" "', argument " "1"" of type '" "libtorrent::span< char const > *""'"); 
  }
  arg1 = (libtorrent::span< char const > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "byte_const_span_get" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = (int8_t)libtorrent_span_Sl_char_SS_const_Sg__get(arg1,arg2);
  jsresult = SWIG_From_signed_SS_char((signed char)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_byte_const_span(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_byte_const_span(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_byte_const_span(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_byte_const_span(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::span< char const > * arg1 = (libtorrent::span< char const > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_iovec_span(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::span< libtorrent::file::iovec_t const > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_iovec_span.");
  result = (libtorrent::span< libtorrent::file::iovec_t const > *)new libtorrent::span< libtorrent::file::iovec_t const >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__spanT_libtorrent__file__iovec_t_const_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_iovec_span_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::span< libtorrent::file::iovec_t const > *arg1 = (libtorrent::span< libtorrent::file::iovec_t const > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_iovec_span_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__spanT_libtorrent__file__iovec_t_const_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iovec_span_size" "', argument " "1"" of type '" "libtorrent::span< libtorrent::file::iovec_t const > const *""'"); 
  }
  arg1 = (libtorrent::span< libtorrent::file::iovec_t const > *)(argp1);
  result = ((libtorrent::span< libtorrent::file::iovec_t const > const *)arg1)->size();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_iovec_span_empty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::span< libtorrent::file::iovec_t const > *arg1 = (libtorrent::span< libtorrent::file::iovec_t const > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_iovec_span_empty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__spanT_libtorrent__file__iovec_t_const_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iovec_span_empty" "', argument " "1"" of type '" "libtorrent::span< libtorrent::file::iovec_t const > const *""'"); 
  }
  arg1 = (libtorrent::span< libtorrent::file::iovec_t const > *)(argp1);
  result = (bool)((libtorrent::span< libtorrent::file::iovec_t const > const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_iovec_span_front(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::span< libtorrent::file::iovec_t const > *arg1 = (libtorrent::span< libtorrent::file::iovec_t const > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::file::iovec_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_iovec_span_front.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__spanT_libtorrent__file__iovec_t_const_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iovec_span_front" "', argument " "1"" of type '" "libtorrent::span< libtorrent::file::iovec_t const > const *""'"); 
  }
  arg1 = (libtorrent::span< libtorrent::file::iovec_t const > *)(argp1);
  result = ((libtorrent::span< libtorrent::file::iovec_t const > const *)arg1)->front();
  jsresult = SWIG_NewPointerObj((new libtorrent::file::iovec_t((const libtorrent::file::iovec_t&)(result))), SWIGTYPE_p_libtorrent__file__iovec_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_iovec_span_back(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::span< libtorrent::file::iovec_t const > *arg1 = (libtorrent::span< libtorrent::file::iovec_t const > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::file::iovec_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_iovec_span_back.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__spanT_libtorrent__file__iovec_t_const_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iovec_span_back" "', argument " "1"" of type '" "libtorrent::span< libtorrent::file::iovec_t const > const *""'"); 
  }
  arg1 = (libtorrent::span< libtorrent::file::iovec_t const > *)(argp1);
  result = ((libtorrent::span< libtorrent::file::iovec_t const > const *)arg1)->back();
  jsresult = SWIG_NewPointerObj((new libtorrent::file::iovec_t((const libtorrent::file::iovec_t&)(result))), SWIGTYPE_p_libtorrent__file__iovec_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_iovec_span_first(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::span< libtorrent::file::iovec_t const > *arg1 = (libtorrent::span< libtorrent::file::iovec_t const > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  libtorrent::span< libtorrent::file::iovec_t const > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_iovec_span_first.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__spanT_libtorrent__file__iovec_t_const_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iovec_span_first" "', argument " "1"" of type '" "libtorrent::span< libtorrent::file::iovec_t const > const *""'"); 
  }
  arg1 = (libtorrent::span< libtorrent::file::iovec_t const > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "iovec_span_first" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = ((libtorrent::span< libtorrent::file::iovec_t const > const *)arg1)->first(arg2);
  jsresult = SWIG_NewPointerObj((new libtorrent::span< libtorrent::file::iovec_t const >((const libtorrent::span< libtorrent::file::iovec_t const >&)(result))), SWIGTYPE_p_libtorrent__spanT_libtorrent__file__iovec_t_const_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_iovec_span_last(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::span< libtorrent::file::iovec_t const > *arg1 = (libtorrent::span< libtorrent::file::iovec_t const > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  libtorrent::span< libtorrent::file::iovec_t const > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_iovec_span_last.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__spanT_libtorrent__file__iovec_t_const_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iovec_span_last" "', argument " "1"" of type '" "libtorrent::span< libtorrent::file::iovec_t const > const *""'"); 
  }
  arg1 = (libtorrent::span< libtorrent::file::iovec_t const > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "iovec_span_last" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = ((libtorrent::span< libtorrent::file::iovec_t const > const *)arg1)->last(arg2);
  jsresult = SWIG_NewPointerObj((new libtorrent::span< libtorrent::file::iovec_t const >((const libtorrent::span< libtorrent::file::iovec_t const >&)(result))), SWIGTYPE_p_libtorrent__spanT_libtorrent__file__iovec_t_const_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_iovec_span_subspan__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::span< libtorrent::file::iovec_t const > *arg1 = (libtorrent::span< libtorrent::file::iovec_t const > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  libtorrent::span< libtorrent::file::iovec_t const > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__spanT_libtorrent__file__iovec_t_const_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iovec_span_subspan" "', argument " "1"" of type '" "libtorrent::span< libtorrent::file::iovec_t const > const *""'"); 
  }
  arg1 = (libtorrent::span< libtorrent::file::iovec_t const > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "iovec_span_subspan" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = ((libtorrent::span< libtorrent::file::iovec_t const > const *)arg1)->subspan(arg2);
  jsresult = SWIG_NewPointerObj((new libtorrent::span< libtorrent::file::iovec_t const >((const libtorrent::span< libtorrent::file::iovec_t const >&)(result))), SWIGTYPE_p_libtorrent__spanT_libtorrent__file__iovec_t_const_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_iovec_span_subspan__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::span< libtorrent::file::iovec_t const > *arg1 = (libtorrent::span< libtorrent::file::iovec_t const > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  libtorrent::span< libtorrent::file::iovec_t const > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__spanT_libtorrent__file__iovec_t_const_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iovec_span_subspan" "', argument " "1"" of type '" "libtorrent::span< libtorrent::file::iovec_t const > const *""'"); 
  }
  arg1 = (libtorrent::span< libtorrent::file::iovec_t const > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "iovec_span_subspan" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "iovec_span_subspan" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  result = ((libtorrent::span< libtorrent::file::iovec_t const > const *)arg1)->subspan(arg2,arg3);
  jsresult = SWIG_NewPointerObj((new libtorrent::span< libtorrent::file::iovec_t const >((const libtorrent::span< libtorrent::file::iovec_t const >&)(result))), SWIGTYPE_p_libtorrent__spanT_libtorrent__file__iovec_t_const_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_iovec_span__wrap_iovec_span_subspan(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_iovec_span_subspan__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_iovec_span_subspan__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_iovec_span_subspan__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_iovec_span_subspan__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function subspan.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_iovec_span_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::span< libtorrent::file::iovec_t const > *arg1 = (libtorrent::span< libtorrent::file::iovec_t const > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  libtorrent::file::iovec_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_iovec_span_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__spanT_libtorrent__file__iovec_t_const_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iovec_span_get" "', argument " "1"" of type '" "libtorrent::span< libtorrent::file::iovec_t const > *""'"); 
  }
  arg1 = (libtorrent::span< libtorrent::file::iovec_t const > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "iovec_span_get" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = libtorrent_span_Sl_libtorrent_file_iovec_t_SS_const_Sg__get(arg1,arg2);
  jsresult = SWIG_NewPointerObj((new libtorrent::file::iovec_t((const libtorrent::file::iovec_t&)(result))), SWIGTYPE_p_libtorrent__file__iovec_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_iovec_span(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_iovec_span(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_iovec_span(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_iovec_span(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::span< libtorrent::file::iovec_t const > * arg1 = (libtorrent::span< libtorrent::file::iovec_t const > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_sha1_hash_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_sha1_hash_size.");
  
  result = libtorrent::sha1_hash::size();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_sha1_hash__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::sha1_hash *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_sha1_hash__SWIG_0.");
  result = (libtorrent::sha1_hash *)new libtorrent::sha1_hash();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__sha1_hash, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_sha1_hash__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::sha1_hash *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libtorrent::sha1_hash *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_sha1_hash__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__sha1_hash,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_sha1_hash" "', argument " "1"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_sha1_hash" "', argument " "1"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  arg1 = (libtorrent::sha1_hash *)(argp1);
  result = (libtorrent::sha1_hash *)new libtorrent::sha1_hash((libtorrent::sha1_hash const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__sha1_hash, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_sha1_hash_max(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::sha1_hash result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_sha1_hash_max.");
  
  result = libtorrent::sha1_hash::max();
  jsresult = SWIG_NewPointerObj((new libtorrent::sha1_hash((const libtorrent::sha1_hash&)(result))), SWIGTYPE_p_libtorrent__sha1_hash, SWIG_POINTER_OWN |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_sha1_hash_min(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::sha1_hash result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_sha1_hash_min.");
  
  result = libtorrent::sha1_hash::min();
  jsresult = SWIG_NewPointerObj((new libtorrent::sha1_hash((const libtorrent::sha1_hash&)(result))), SWIGTYPE_p_libtorrent__sha1_hash, SWIG_POINTER_OWN |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_sha1_hash_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::sha1_hash *arg1 = (libtorrent::sha1_hash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_sha1_hash_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sha1_hash_clear" "', argument " "1"" of type '" "libtorrent::sha1_hash *""'"); 
  }
  arg1 = (libtorrent::sha1_hash *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_sha1_hash_is_all_zeros(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::sha1_hash *arg1 = (libtorrent::sha1_hash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_sha1_hash_is_all_zeros.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sha1_hash_is_all_zeros" "', argument " "1"" of type '" "libtorrent::sha1_hash *""'"); 
  }
  arg1 = (libtorrent::sha1_hash *)(argp1);
  result = (bool)(arg1)->is_all_zeros();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_sha1_hash_count_leading_zeroes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::sha1_hash *arg1 = (libtorrent::sha1_hash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_sha1_hash_count_leading_zeroes.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sha1_hash_count_leading_zeroes" "', argument " "1"" of type '" "libtorrent::sha1_hash *""'"); 
  }
  arg1 = (libtorrent::sha1_hash *)(argp1);
  result = (int)(arg1)->count_leading_zeroes();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_sha1_hash__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< int8_t > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libtorrent::sha1_hash *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_sha1_hash__SWIG_2.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_signed_char_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_sha1_hash" "', argument " "1"" of type '" "std::vector< int8_t > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_sha1_hash" "', argument " "1"" of type '" "std::vector< int8_t > const &""'"); 
  }
  arg1 = (std::vector< int8_t > *)(argp1);
  result = (libtorrent::sha1_hash *)new_libtorrent_sha1_hash__SWIG_2((std::vector< signed char > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__sha1_hash, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_sha1_hash(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_sha1_hash__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_sha1_hash__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_sha1_hash__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_sha1_hash__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_sha1_hash__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_sha1_hash__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_sha1_hash");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_sha1_hash_assign(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::sha1_hash *arg1 = (libtorrent::sha1_hash *) 0 ;
  std::vector< int8_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_sha1_hash_assign.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sha1_hash_assign" "', argument " "1"" of type '" "libtorrent::sha1_hash *""'"); 
  }
  arg1 = (libtorrent::sha1_hash *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_signed_char_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sha1_hash_assign" "', argument " "2"" of type '" "std::vector< int8_t > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sha1_hash_assign" "', argument " "2"" of type '" "std::vector< int8_t > const &""'"); 
  }
  arg2 = (std::vector< int8_t > *)(argp2);
  libtorrent_sha1_hash_assign(arg1,(std::vector< signed char > const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_sha1_hash_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::sha1_hash *arg1 = (libtorrent::sha1_hash *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int8_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_sha1_hash_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sha1_hash_get" "', argument " "1"" of type '" "libtorrent::sha1_hash *""'"); 
  }
  arg1 = (libtorrent::sha1_hash *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sha1_hash_get" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = (int8_t)libtorrent_sha1_hash_get(arg1,arg2);
  jsresult = SWIG_From_signed_SS_char((signed char)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_sha1_hash_hash_code(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::sha1_hash *arg1 = (libtorrent::sha1_hash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_sha1_hash_hash_code.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sha1_hash_hash_code" "', argument " "1"" of type '" "libtorrent::sha1_hash *""'"); 
  }
  arg1 = (libtorrent::sha1_hash *)(argp1);
  result = (int)libtorrent_sha1_hash_hash_code(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_sha1_hash_to_bytes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::sha1_hash *arg1 = (libtorrent::sha1_hash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int8_t > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_sha1_hash_to_bytes.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sha1_hash_to_bytes" "', argument " "1"" of type '" "libtorrent::sha1_hash *""'"); 
  }
  arg1 = (libtorrent::sha1_hash *)(argp1);
  result = libtorrent_sha1_hash_to_bytes(arg1);
  jsresult = SWIG_NewPointerObj((new std::vector< int8_t >((const std::vector< int8_t >&)(result))), SWIGTYPE_p_std__vectorT_signed_char_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_sha1_hash_to_hex(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::sha1_hash *arg1 = (libtorrent::sha1_hash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_sha1_hash_to_hex.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sha1_hash_to_hex" "', argument " "1"" of type '" "libtorrent::sha1_hash *""'"); 
  }
  arg1 = (libtorrent::sha1_hash *)(argp1);
  result = libtorrent_sha1_hash_to_hex(arg1);
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_sha1_hash_op_eq(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::sha1_hash *arg1 = (libtorrent::sha1_hash *) 0 ;
  libtorrent::sha1_hash *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_sha1_hash_op_eq.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sha1_hash_op_eq" "', argument " "1"" of type '" "libtorrent::sha1_hash const *""'"); 
  }
  arg1 = (libtorrent::sha1_hash *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__sha1_hash,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sha1_hash_op_eq" "', argument " "2"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sha1_hash_op_eq" "', argument " "2"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  arg2 = (libtorrent::sha1_hash *)(argp2);
  result = (bool)libtorrent_sha1_hash_op_eq((libtorrent::sha1_hash const *)arg1,(libtorrent::sha1_hash const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_sha1_hash_op_ne(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::sha1_hash *arg1 = (libtorrent::sha1_hash *) 0 ;
  libtorrent::sha1_hash *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_sha1_hash_op_ne.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sha1_hash_op_ne" "', argument " "1"" of type '" "libtorrent::sha1_hash const *""'"); 
  }
  arg1 = (libtorrent::sha1_hash *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__sha1_hash,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sha1_hash_op_ne" "', argument " "2"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sha1_hash_op_ne" "', argument " "2"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  arg2 = (libtorrent::sha1_hash *)(argp2);
  result = (bool)libtorrent_sha1_hash_op_ne((libtorrent::sha1_hash const *)arg1,(libtorrent::sha1_hash const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_sha1_hash_op_lt(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::sha1_hash *arg1 = (libtorrent::sha1_hash *) 0 ;
  libtorrent::sha1_hash *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_sha1_hash_op_lt.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sha1_hash_op_lt" "', argument " "1"" of type '" "libtorrent::sha1_hash const *""'"); 
  }
  arg1 = (libtorrent::sha1_hash *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__sha1_hash,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sha1_hash_op_lt" "', argument " "2"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sha1_hash_op_lt" "', argument " "2"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  arg2 = (libtorrent::sha1_hash *)(argp2);
  result = (bool)libtorrent_sha1_hash_op_lt((libtorrent::sha1_hash const *)arg1,(libtorrent::sha1_hash const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_sha1_hash_compare(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::sha1_hash *arg1 = 0 ;
  libtorrent::sha1_hash *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_sha1_hash_compare.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__sha1_hash,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sha1_hash_compare" "', argument " "1"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sha1_hash_compare" "', argument " "1"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  arg1 = (libtorrent::sha1_hash *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_libtorrent__sha1_hash,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sha1_hash_compare" "', argument " "2"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sha1_hash_compare" "', argument " "2"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  arg2 = (libtorrent::sha1_hash *)(argp2);
  result = (int)libtorrent_sha1_hash_compare((libtorrent::sha1_hash const &)*arg1,(libtorrent::sha1_hash const &)*arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_sha1_hash(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_sha1_hash(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_sha1_hash(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_sha1_hash(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::sha1_hash * arg1 = (libtorrent::sha1_hash *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_bloom_filter_128_find(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bloom_filter< 128 > *arg1 = (libtorrent::bloom_filter< 128 > *) 0 ;
  libtorrent::sha1_hash *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bloom_filter_128_find.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bloom_filterT_128_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bloom_filter_128_find" "', argument " "1"" of type '" "libtorrent::bloom_filter< 128 > const *""'"); 
  }
  arg1 = (libtorrent::bloom_filter< 128 > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__sha1_hash,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bloom_filter_128_find" "', argument " "2"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bloom_filter_128_find" "', argument " "2"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  arg2 = (libtorrent::sha1_hash *)(argp2);
  result = (bool)((libtorrent::bloom_filter< 128 > const *)arg1)->find((libtorrent::sha1_hash const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bloom_filter_128_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bloom_filter< 128 > *arg1 = (libtorrent::bloom_filter< 128 > *) 0 ;
  libtorrent::sha1_hash *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bloom_filter_128_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bloom_filterT_128_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bloom_filter_128_set" "', argument " "1"" of type '" "libtorrent::bloom_filter< 128 > *""'"); 
  }
  arg1 = (libtorrent::bloom_filter< 128 > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__sha1_hash,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bloom_filter_128_set" "', argument " "2"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bloom_filter_128_set" "', argument " "2"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  arg2 = (libtorrent::sha1_hash *)(argp2);
  (arg1)->set((libtorrent::sha1_hash const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bloom_filter_128_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bloom_filter< 128 > *arg1 = (libtorrent::bloom_filter< 128 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bloom_filter_128_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bloom_filterT_128_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bloom_filter_128_clear" "', argument " "1"" of type '" "libtorrent::bloom_filter< 128 > *""'"); 
  }
  arg1 = (libtorrent::bloom_filter< 128 > *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bloom_filter_128_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bloom_filter< 128 > *arg1 = (libtorrent::bloom_filter< 128 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bloom_filter_128_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bloom_filterT_128_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bloom_filter_128_size" "', argument " "1"" of type '" "libtorrent::bloom_filter< 128 > const *""'"); 
  }
  arg1 = (libtorrent::bloom_filter< 128 > *)(argp1);
  result = (float)((libtorrent::bloom_filter< 128 > const *)arg1)->size();
  jsresult = SWIG_From_float((float)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_bloom_filter_128(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::bloom_filter< 128 > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_bloom_filter_128.");
  result = (libtorrent::bloom_filter< 128 > *)new libtorrent::bloom_filter< 128 >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__bloom_filterT_128_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bloom_filter_128_to_bytes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bloom_filter< 128 > *arg1 = (libtorrent::bloom_filter< 128 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int8_t > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bloom_filter_128_to_bytes.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bloom_filterT_128_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bloom_filter_128_to_bytes" "', argument " "1"" of type '" "libtorrent::bloom_filter< 128 > const *""'"); 
  }
  arg1 = (libtorrent::bloom_filter< 128 > *)(argp1);
  result = libtorrent_bloom_filter_Sl_128_Sg__to_bytes((libtorrent::bloom_filter< 128 > const *)arg1);
  jsresult = SWIG_NewPointerObj((new std::vector< int8_t >((const std::vector< int8_t >&)(result))), SWIGTYPE_p_std__vectorT_signed_char_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bloom_filter_128_from_bytes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bloom_filter< 128 > *arg1 = (libtorrent::bloom_filter< 128 > *) 0 ;
  std::vector< int8_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bloom_filter_128_from_bytes.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bloom_filterT_128_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bloom_filter_128_from_bytes" "', argument " "1"" of type '" "libtorrent::bloom_filter< 128 > *""'"); 
  }
  arg1 = (libtorrent::bloom_filter< 128 > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_signed_char_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bloom_filter_128_from_bytes" "', argument " "2"" of type '" "std::vector< int8_t > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bloom_filter_128_from_bytes" "', argument " "2"" of type '" "std::vector< int8_t > const &""'"); 
  }
  arg2 = (std::vector< int8_t > *)(argp2);
  libtorrent_bloom_filter_Sl_128_Sg__from_bytes(arg1,(std::vector< signed char > const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_bloom_filter_128(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_bloom_filter_128(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_bloom_filter_128(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_bloom_filter_128(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::bloom_filter< 128 > * arg1 = (libtorrent::bloom_filter< 128 > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_bloom_filter_256_find(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bloom_filter< 256 > *arg1 = (libtorrent::bloom_filter< 256 > *) 0 ;
  libtorrent::sha1_hash *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bloom_filter_256_find.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bloom_filterT_256_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bloom_filter_256_find" "', argument " "1"" of type '" "libtorrent::bloom_filter< 256 > const *""'"); 
  }
  arg1 = (libtorrent::bloom_filter< 256 > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__sha1_hash,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bloom_filter_256_find" "', argument " "2"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bloom_filter_256_find" "', argument " "2"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  arg2 = (libtorrent::sha1_hash *)(argp2);
  result = (bool)((libtorrent::bloom_filter< 256 > const *)arg1)->find((libtorrent::sha1_hash const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bloom_filter_256_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bloom_filter< 256 > *arg1 = (libtorrent::bloom_filter< 256 > *) 0 ;
  libtorrent::sha1_hash *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bloom_filter_256_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bloom_filterT_256_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bloom_filter_256_set" "', argument " "1"" of type '" "libtorrent::bloom_filter< 256 > *""'"); 
  }
  arg1 = (libtorrent::bloom_filter< 256 > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__sha1_hash,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bloom_filter_256_set" "', argument " "2"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bloom_filter_256_set" "', argument " "2"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  arg2 = (libtorrent::sha1_hash *)(argp2);
  (arg1)->set((libtorrent::sha1_hash const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bloom_filter_256_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bloom_filter< 256 > *arg1 = (libtorrent::bloom_filter< 256 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bloom_filter_256_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bloom_filterT_256_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bloom_filter_256_clear" "', argument " "1"" of type '" "libtorrent::bloom_filter< 256 > *""'"); 
  }
  arg1 = (libtorrent::bloom_filter< 256 > *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bloom_filter_256_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bloom_filter< 256 > *arg1 = (libtorrent::bloom_filter< 256 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bloom_filter_256_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bloom_filterT_256_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bloom_filter_256_size" "', argument " "1"" of type '" "libtorrent::bloom_filter< 256 > const *""'"); 
  }
  arg1 = (libtorrent::bloom_filter< 256 > *)(argp1);
  result = (float)((libtorrent::bloom_filter< 256 > const *)arg1)->size();
  jsresult = SWIG_From_float((float)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_bloom_filter_256(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::bloom_filter< 256 > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_bloom_filter_256.");
  result = (libtorrent::bloom_filter< 256 > *)new libtorrent::bloom_filter< 256 >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__bloom_filterT_256_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bloom_filter_256_to_bytes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bloom_filter< 256 > *arg1 = (libtorrent::bloom_filter< 256 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int8_t > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bloom_filter_256_to_bytes.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bloom_filterT_256_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bloom_filter_256_to_bytes" "', argument " "1"" of type '" "libtorrent::bloom_filter< 256 > const *""'"); 
  }
  arg1 = (libtorrent::bloom_filter< 256 > *)(argp1);
  result = libtorrent_bloom_filter_Sl_256_Sg__to_bytes((libtorrent::bloom_filter< 256 > const *)arg1);
  jsresult = SWIG_NewPointerObj((new std::vector< int8_t >((const std::vector< int8_t >&)(result))), SWIGTYPE_p_std__vectorT_signed_char_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bloom_filter_256_from_bytes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bloom_filter< 256 > *arg1 = (libtorrent::bloom_filter< 256 > *) 0 ;
  std::vector< int8_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bloom_filter_256_from_bytes.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bloom_filterT_256_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bloom_filter_256_from_bytes" "', argument " "1"" of type '" "libtorrent::bloom_filter< 256 > *""'"); 
  }
  arg1 = (libtorrent::bloom_filter< 256 > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_signed_char_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bloom_filter_256_from_bytes" "', argument " "2"" of type '" "std::vector< int8_t > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bloom_filter_256_from_bytes" "', argument " "2"" of type '" "std::vector< int8_t > const &""'"); 
  }
  arg2 = (std::vector< int8_t > *)(argp2);
  libtorrent_bloom_filter_Sl_256_Sg__from_bytes(arg1,(std::vector< signed char > const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_bloom_filter_256(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_bloom_filter_256(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_bloom_filter_256(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_bloom_filter_256(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::bloom_filter< 256 > * arg1 = (libtorrent::bloom_filter< 256 > *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_string_view(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::string arg1 ;
  libtorrent::string_view *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_string_view.");
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_string_view" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (libtorrent::string_view *)new libtorrent::string_view(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__string_view, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_string_view_to_string(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::string_view *arg1 = (libtorrent::string_view *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_string_view_to_string.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__string_view, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_view_to_string" "', argument " "1"" of type '" "libtorrent::string_view *""'"); 
  }
  arg1 = (libtorrent::string_view *)(argp1);
  result = (arg1)->to_string();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_string_view(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_string_view(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_string_view(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_string_view(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::string_view * arg1 = (libtorrent::string_view *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_address__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::address *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_address__SWIG_0.");
  result = (libtorrent::address *)new libtorrent::address();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__address, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_address__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::address arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  libtorrent::address *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_address__SWIG_1.");
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__address,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_address" "', argument " "1"" of type '" "libtorrent::address""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_address" "', argument " "1"" of type '" "libtorrent::address""'");
    } else {
      arg1 = *((libtorrent::address *)(argp1));
    }
  }
  result = (libtorrent::address *)new libtorrent::address(arg1);
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__address, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_address(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_address__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_address__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_address__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_address__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_address");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_address_is_v4(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::address *arg1 = (libtorrent::address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_address_is_v4.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "address_is_v4" "', argument " "1"" of type '" "libtorrent::address *""'"); 
  }
  arg1 = (libtorrent::address *)(argp1);
  result = (bool)(arg1)->is_v4();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_address_is_v6(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::address *arg1 = (libtorrent::address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_address_is_v6.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "address_is_v6" "', argument " "1"" of type '" "libtorrent::address *""'"); 
  }
  arg1 = (libtorrent::address *)(argp1);
  result = (bool)(arg1)->is_v6();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_address_to_string(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::address *arg1 = (libtorrent::address *) 0 ;
  boost::system::error_code arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::string result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_address_to_string.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "address_to_string" "', argument " "1"" of type '" "libtorrent::address *""'"); 
  }
  arg1 = (libtorrent::address *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_boost__system__error_code,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "address_to_string" "', argument " "2"" of type '" "boost::system::error_code""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "address_to_string" "', argument " "2"" of type '" "boost::system::error_code""'");
    } else {
      arg2 = *((boost::system::error_code *)(argp2));
    }
  }
  result = (arg1)->to_string(arg2);
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_address_from_string(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  boost::system::error_code arg2 ;
  void *argp2 ;
  int res2 = 0 ;
  libtorrent::address result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_address_from_string.");
  
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "address_from_string" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_boost__system__error_code,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "address_from_string" "', argument " "2"" of type '" "boost::system::error_code""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "address_from_string" "', argument " "2"" of type '" "boost::system::error_code""'");
    } else {
      arg2 = *((boost::system::error_code *)(argp2));
    }
  }
  result = libtorrent::address::from_string(arg1,arg2);
  jsresult = SWIG_NewPointerObj((new libtorrent::address((const libtorrent::address&)(result))), SWIGTYPE_p_libtorrent__address, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_address_is_loopback(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::address *arg1 = (libtorrent::address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_address_is_loopback.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "address_is_loopback" "', argument " "1"" of type '" "libtorrent::address *""'"); 
  }
  arg1 = (libtorrent::address *)(argp1);
  result = (bool)(arg1)->is_loopback();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_address_is_unspecified(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::address *arg1 = (libtorrent::address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_address_is_unspecified.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "address_is_unspecified" "', argument " "1"" of type '" "libtorrent::address *""'"); 
  }
  arg1 = (libtorrent::address *)(argp1);
  result = (bool)(arg1)->is_unspecified();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_address_is_multicast(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::address *arg1 = (libtorrent::address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_address_is_multicast.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "address_is_multicast" "', argument " "1"" of type '" "libtorrent::address *""'"); 
  }
  arg1 = (libtorrent::address *)(argp1);
  result = (bool)(arg1)->is_multicast();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_address_op_lt(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::address *arg1 = (libtorrent::address *) 0 ;
  libtorrent::address *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_address_op_lt.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "address_op_lt" "', argument " "1"" of type '" "libtorrent::address *""'"); 
  }
  arg1 = (libtorrent::address *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__address,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "address_op_lt" "', argument " "2"" of type '" "libtorrent::address const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "address_op_lt" "', argument " "2"" of type '" "libtorrent::address const &""'"); 
  }
  arg2 = (libtorrent::address *)(argp2);
  result = (bool)libtorrent_address_op_lt(arg1,(libtorrent::address const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_address_compare(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::address *arg1 = 0 ;
  libtorrent::address *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_address_compare.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__address,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "address_compare" "', argument " "1"" of type '" "libtorrent::address const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "address_compare" "', argument " "1"" of type '" "libtorrent::address const &""'"); 
  }
  arg1 = (libtorrent::address *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_libtorrent__address,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "address_compare" "', argument " "2"" of type '" "libtorrent::address const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "address_compare" "', argument " "2"" of type '" "libtorrent::address const &""'"); 
  }
  arg2 = (libtorrent::address *)(argp2);
  result = (int)libtorrent_address_compare((libtorrent::address const &)*arg1,(libtorrent::address const &)*arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_address(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_address(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_address(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_address(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::address * arg1 = (libtorrent::address *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_tcp_endpoint__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::tcp::endpoint *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_tcp_endpoint__SWIG_0.");
  result = (libtorrent::tcp::endpoint *)new libtorrent::tcp::endpoint();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__tcp__endpoint, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_tcp_endpoint__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::address arg1 ;
  unsigned short arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  libtorrent::tcp::endpoint *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_tcp_endpoint__SWIG_1.");
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__address,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_tcp_endpoint" "', argument " "1"" of type '" "libtorrent::address""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_tcp_endpoint" "', argument " "1"" of type '" "libtorrent::address""'");
    } else {
      arg1 = *((libtorrent::address *)(argp1));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_short(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_tcp_endpoint" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = (unsigned short)(val2);
  result = (libtorrent::tcp::endpoint *)new libtorrent::tcp::endpoint(arg1,arg2);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__tcp__endpoint, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_tcp_endpoint(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_tcp_endpoint__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_tcp_endpoint__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_tcp_endpoint__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_tcp_endpoint__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_tcp_endpoint");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tcp_endpoint_port(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::tcp::endpoint *arg1 = (libtorrent::tcp::endpoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_tcp_endpoint_port.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__tcp__endpoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_endpoint_port" "', argument " "1"" of type '" "libtorrent::tcp::endpoint *""'"); 
  }
  arg1 = (libtorrent::tcp::endpoint *)(argp1);
  result = (unsigned short)(arg1)->port();
  jsresult = SWIG_From_unsigned_SS_short((unsigned short)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tcp_endpoint_address(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::tcp::endpoint *arg1 = (libtorrent::tcp::endpoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::address result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_tcp_endpoint_address.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__tcp__endpoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_endpoint_address" "', argument " "1"" of type '" "libtorrent::tcp::endpoint *""'"); 
  }
  arg1 = (libtorrent::tcp::endpoint *)(argp1);
  result = (arg1)->address();
  jsresult = SWIG_NewPointerObj((new libtorrent::address((const libtorrent::address&)(result))), SWIGTYPE_p_libtorrent__address, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_tcp_endpoint(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_tcp_endpoint(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_tcp_endpoint(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_tcp_endpoint(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::tcp::endpoint * arg1 = (libtorrent::tcp::endpoint *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_udp_endpoint__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::udp::endpoint *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_udp_endpoint__SWIG_0.");
  result = (libtorrent::udp::endpoint *)new libtorrent::udp::endpoint();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__udp__endpoint, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_udp_endpoint__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::address arg1 ;
  unsigned short arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  libtorrent::udp::endpoint *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_udp_endpoint__SWIG_1.");
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__address,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_udp_endpoint" "', argument " "1"" of type '" "libtorrent::address""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_udp_endpoint" "', argument " "1"" of type '" "libtorrent::address""'");
    } else {
      arg1 = *((libtorrent::address *)(argp1));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_short(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_udp_endpoint" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = (unsigned short)(val2);
  result = (libtorrent::udp::endpoint *)new libtorrent::udp::endpoint(arg1,arg2);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__udp__endpoint, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_udp_endpoint(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_udp_endpoint__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_udp_endpoint__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_udp_endpoint__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_udp_endpoint__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_udp_endpoint");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_udp_endpoint_port(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::udp::endpoint *arg1 = (libtorrent::udp::endpoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_udp_endpoint_port.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__udp__endpoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_endpoint_port" "', argument " "1"" of type '" "libtorrent::udp::endpoint *""'"); 
  }
  arg1 = (libtorrent::udp::endpoint *)(argp1);
  result = (unsigned short)(arg1)->port();
  jsresult = SWIG_From_unsigned_SS_short((unsigned short)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_udp_endpoint_address(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::udp::endpoint *arg1 = (libtorrent::udp::endpoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::address result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_udp_endpoint_address.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__udp__endpoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_endpoint_address" "', argument " "1"" of type '" "libtorrent::udp::endpoint *""'"); 
  }
  arg1 = (libtorrent::udp::endpoint *)(argp1);
  result = (arg1)->address();
  jsresult = SWIG_NewPointerObj((new libtorrent::address((const libtorrent::address&)(result))), SWIGTYPE_p_libtorrent__address, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_udp_endpoint(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_udp_endpoint(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_udp_endpoint(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_udp_endpoint(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::udp::endpoint * arg1 = (libtorrent::udp::endpoint *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_boost_system_errc_success(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::success));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_address_family_not_supported(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::address_family_not_supported));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_address_in_use(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::address_in_use));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_address_not_available(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::address_not_available));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_already_connected(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::already_connected));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_argument_list_too_long(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::argument_list_too_long));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_argument_out_of_domain(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::argument_out_of_domain));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_bad_address(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::bad_address));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_bad_file_descriptor(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::bad_file_descriptor));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_bad_message(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::bad_message));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_broken_pipe(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::broken_pipe));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_connection_aborted(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::connection_aborted));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_connection_already_in_progress(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::connection_already_in_progress));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_connection_refused(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::connection_refused));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_connection_reset(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::connection_reset));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_cross_device_link(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::cross_device_link));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_destination_address_required(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::destination_address_required));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_device_or_resource_busy(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::device_or_resource_busy));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_directory_not_empty(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::directory_not_empty));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_executable_format_error(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::executable_format_error));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_file_exists(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::file_exists));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_file_too_large(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::file_too_large));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_filename_too_long(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::filename_too_long));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_function_not_supported(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::function_not_supported));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_host_unreachable(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::host_unreachable));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_identifier_removed(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::identifier_removed));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_illegal_byte_sequence(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::illegal_byte_sequence));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_inappropriate_io_control_operation(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::inappropriate_io_control_operation));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_interrupted(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::interrupted));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_invalid_argument(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::invalid_argument));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_invalid_seek(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::invalid_seek));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_io_error(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::io_error));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_is_a_directory(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::is_a_directory));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_message_size(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::message_size));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_network_down(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::network_down));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_network_reset(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::network_reset));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_network_unreachable(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::network_unreachable));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_no_buffer_space(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::no_buffer_space));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_no_child_process(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::no_child_process));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_no_link(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::no_link));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_no_lock_available(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::no_lock_available));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_no_message_available(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::no_message_available));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_no_message(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::no_message));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_no_protocol_option(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::no_protocol_option));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_no_space_on_device(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::no_space_on_device));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_no_stream_resources(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::no_stream_resources));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_no_such_device_or_address(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::no_such_device_or_address));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_no_such_device(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::no_such_device));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_no_such_file_or_directory(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::no_such_file_or_directory));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_no_such_process(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::no_such_process));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_not_a_directory(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::not_a_directory));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_not_a_socket(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::not_a_socket));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_not_a_stream(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::not_a_stream));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_not_connected(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::not_connected));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_not_enough_memory(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::not_enough_memory));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_not_supported(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::not_supported));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_operation_canceled(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::operation_canceled));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_operation_in_progress(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::operation_in_progress));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_operation_not_permitted(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::operation_not_permitted));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_operation_not_supported(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::operation_not_supported));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_operation_would_block(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::operation_would_block));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_owner_dead(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::owner_dead));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_permission_denied(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::permission_denied));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_protocol_error(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::protocol_error));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_protocol_not_supported(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::protocol_not_supported));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_read_only_file_system(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::read_only_file_system));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_resource_deadlock_would_occur(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::resource_deadlock_would_occur));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_resource_unavailable_try_again(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::resource_unavailable_try_again));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_result_out_of_range(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::result_out_of_range));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_state_not_recoverable(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::state_not_recoverable));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_stream_timeout(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::stream_timeout));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_text_file_busy(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::text_file_busy));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_timed_out(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::timed_out));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_too_many_files_open_in_system(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::too_many_files_open_in_system));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_too_many_files_open(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::too_many_files_open));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_too_many_links(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::too_many_links));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_too_many_symbolic_link_levels(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::too_many_symbolic_link_levels));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_value_too_large(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::value_too_large));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_boost_system_errc_wrong_protocol_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(boost::system::errc::wrong_protocol_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_error_category(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_error_category(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_error_category(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_error_category(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          boost::system::error_category * arg1 = (boost::system::error_category *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_error_category_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  boost::system::error_category *arg1 = (boost::system::error_category *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_error_category_name.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_boost__system__error_category, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "error_category_name" "', argument " "1"" of type '" "boost::system::error_category const *""'"); 
  }
  arg1 = (boost::system::error_category *)(argp1);
  result = (char *)((boost::system::error_category const *)arg1)->name();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_error_category_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  boost::system::error_category *arg1 = (boost::system::error_category *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::string result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_error_category_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_boost__system__error_category, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "error_category_message" "', argument " "1"" of type '" "boost::system::error_category const *""'"); 
  }
  arg1 = (boost::system::error_category *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "error_category_message" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = ((boost::system::error_category const *)arg1)->message(arg2);
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_error_category_default_error_condition(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  boost::system::error_category *arg1 = (boost::system::error_category *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  boost::system::error_condition result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_error_category_default_error_condition.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_boost__system__error_category, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "error_category_default_error_condition" "', argument " "1"" of type '" "boost::system::error_category const *""'"); 
  }
  arg1 = (boost::system::error_category *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "error_category_default_error_condition" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = ((boost::system::error_category const *)arg1)->default_error_condition(arg2);
  jsresult = SWIG_NewPointerObj((new boost::system::error_condition((const boost::system::error_condition&)(result))), SWIGTYPE_p_boost__system__error_condition, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_error_category_equivalent__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  boost::system::error_category *arg1 = (boost::system::error_category *) 0 ;
  int arg2 ;
  boost::system::error_condition *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_boost__system__error_category, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "error_category_equivalent" "', argument " "1"" of type '" "boost::system::error_category const *""'"); 
  }
  arg1 = (boost::system::error_category *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "error_category_equivalent" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_boost__system__error_condition,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "error_category_equivalent" "', argument " "3"" of type '" "boost::system::error_condition const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "error_category_equivalent" "', argument " "3"" of type '" "boost::system::error_condition const &""'"); 
  }
  arg3 = (boost::system::error_condition *)(argp3);
  result = (bool)((boost::system::error_category const *)arg1)->equivalent(arg2,(boost::system::error_condition const &)*arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_error_category_equivalent__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  boost::system::error_category *arg1 = (boost::system::error_category *) 0 ;
  boost::system::error_code *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_boost__system__error_category, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "error_category_equivalent" "', argument " "1"" of type '" "boost::system::error_category const *""'"); 
  }
  arg1 = (boost::system::error_category *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_boost__system__error_code,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "error_category_equivalent" "', argument " "2"" of type '" "boost::system::error_code const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "error_category_equivalent" "', argument " "2"" of type '" "boost::system::error_code const &""'"); 
  }
  arg2 = (boost::system::error_code *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "error_category_equivalent" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (bool)((boost::system::error_category const *)arg1)->equivalent((boost::system::error_code const &)*arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_error_category__wrap_error_category_equivalent(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_error_category_equivalent__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_error_category_equivalent__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_error_category_equivalent__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_error_category_equivalent__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function equivalent.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_error_category_op_eq(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  boost::system::error_category *arg1 = (boost::system::error_category *) 0 ;
  boost::system::error_category *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_error_category_op_eq.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_boost__system__error_category, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "error_category_op_eq" "', argument " "1"" of type '" "boost::system::error_category const *""'"); 
  }
  arg1 = (boost::system::error_category *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_boost__system__error_category,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "error_category_op_eq" "', argument " "2"" of type '" "boost::system::error_category const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "error_category_op_eq" "', argument " "2"" of type '" "boost::system::error_category const &""'"); 
  }
  arg2 = (boost::system::error_category *)(argp2);
  result = (bool)((boost::system::error_category const *)arg1)->operator ==((boost::system::error_category const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_error_category_op_ne(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  boost::system::error_category *arg1 = (boost::system::error_category *) 0 ;
  boost::system::error_category *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_error_category_op_ne.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_boost__system__error_category, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "error_category_op_ne" "', argument " "1"" of type '" "boost::system::error_category const *""'"); 
  }
  arg1 = (boost::system::error_category *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_boost__system__error_category,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "error_category_op_ne" "', argument " "2"" of type '" "boost::system::error_category const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "error_category_op_ne" "', argument " "2"" of type '" "boost::system::error_category const &""'"); 
  }
  arg2 = (boost::system::error_category *)(argp2);
  result = (bool)((boost::system::error_category const *)arg1)->operator !=((boost::system::error_category const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_error_category_op_lt(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  boost::system::error_category *arg1 = (boost::system::error_category *) 0 ;
  boost::system::error_category *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_error_category_op_lt.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_boost__system__error_category, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "error_category_op_lt" "', argument " "1"" of type '" "boost::system::error_category const *""'"); 
  }
  arg1 = (boost::system::error_category *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_boost__system__error_category,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "error_category_op_lt" "', argument " "2"" of type '" "boost::system::error_category const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "error_category_op_lt" "', argument " "2"" of type '" "boost::system::error_category const &""'"); 
  }
  arg2 = (boost::system::error_category *)(argp2);
  result = (bool)((boost::system::error_category const *)arg1)->operator <((boost::system::error_category const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_veto_error_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class error_category can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_error_condition__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  boost::system::error_condition *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_error_condition__SWIG_0.");
  result = (boost::system::error_condition *)new boost::system::error_condition();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_boost__system__error_condition, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_error_condition__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  boost::system::error_category *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  boost::system::error_condition *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_error_condition__SWIG_1.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_error_condition" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_boost__system__error_category,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_error_condition" "', argument " "2"" of type '" "boost::system::error_category const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_error_condition" "', argument " "2"" of type '" "boost::system::error_category const &""'"); 
  }
  arg2 = (boost::system::error_category *)(argp2);
  result = (boost::system::error_condition *)new boost::system::error_condition(arg1,(boost::system::error_category const &)*arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_boost__system__error_condition, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_error_condition(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_error_condition__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_error_condition__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_error_condition__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_error_condition__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_error_condition");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_error_condition_assign(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  boost::system::error_condition *arg1 = (boost::system::error_condition *) 0 ;
  int arg2 ;
  boost::system::error_category *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_error_condition_assign.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_boost__system__error_condition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "error_condition_assign" "', argument " "1"" of type '" "boost::system::error_condition *""'"); 
  }
  arg1 = (boost::system::error_condition *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "error_condition_assign" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_boost__system__error_category,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "error_condition_assign" "', argument " "3"" of type '" "boost::system::error_category const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "error_condition_assign" "', argument " "3"" of type '" "boost::system::error_category const &""'"); 
  }
  arg3 = (boost::system::error_category *)(argp3);
  (arg1)->assign(arg2,(boost::system::error_category const &)*arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_error_condition_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  boost::system::error_condition *arg1 = (boost::system::error_condition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_error_condition_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_boost__system__error_condition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "error_condition_clear" "', argument " "1"" of type '" "boost::system::error_condition *""'"); 
  }
  arg1 = (boost::system::error_condition *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_error_condition_value(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  boost::system::error_condition *arg1 = (boost::system::error_condition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_error_condition_value.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_boost__system__error_condition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "error_condition_value" "', argument " "1"" of type '" "boost::system::error_condition const *""'"); 
  }
  arg1 = (boost::system::error_condition *)(argp1);
  result = (int)((boost::system::error_condition const *)arg1)->value();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_error_condition_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  boost::system::error_condition *arg1 = (boost::system::error_condition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::system::error_category *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_error_condition_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_boost__system__error_condition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "error_condition_category" "', argument " "1"" of type '" "boost::system::error_condition const *""'"); 
  }
  arg1 = (boost::system::error_condition *)(argp1);
  result = (boost::system::error_category *) &((boost::system::error_condition const *)arg1)->category();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__system__error_category, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_error_condition_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  boost::system::error_condition *arg1 = (boost::system::error_condition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_error_condition_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_boost__system__error_condition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "error_condition_message" "', argument " "1"" of type '" "boost::system::error_condition const *""'"); 
  }
  arg1 = (boost::system::error_condition *)(argp1);
  result = ((boost::system::error_condition const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_error_condition_unspecified_bool_true(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_error_condition_unspecified_bool_true.");
  
  boost::system::error_condition::unspecified_bool_true();
  jsresult = SWIGV8_UNDEFINED();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_op_eq__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  boost::system::error_condition *arg1 = 0 ;
  boost::system::error_condition *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_boost__system__error_condition,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "op_eq" "', argument " "1"" of type '" "boost::system::error_condition const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "op_eq" "', argument " "1"" of type '" "boost::system::error_condition const &""'"); 
  }
  arg1 = (boost::system::error_condition *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_boost__system__error_condition,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "op_eq" "', argument " "2"" of type '" "boost::system::error_condition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "op_eq" "', argument " "2"" of type '" "boost::system::error_condition const &""'"); 
  }
  arg2 = (boost::system::error_condition *)(argp2);
  result = (bool)operator ==((boost::system::error_condition const &)*arg1,(boost::system::error_condition const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_op_lt__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  boost::system::error_condition *arg1 = 0 ;
  boost::system::error_condition *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_boost__system__error_condition,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "op_lt" "', argument " "1"" of type '" "boost::system::error_condition const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "op_lt" "', argument " "1"" of type '" "boost::system::error_condition const &""'"); 
  }
  arg1 = (boost::system::error_condition *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_boost__system__error_condition,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "op_lt" "', argument " "2"" of type '" "boost::system::error_condition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "op_lt" "', argument " "2"" of type '" "boost::system::error_condition const &""'"); 
  }
  arg2 = (boost::system::error_condition *)(argp2);
  result = (bool)operator <((boost::system::error_condition const &)*arg1,(boost::system::error_condition const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_error_condition(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_error_condition(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_error_condition(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_error_condition(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          boost::system::error_condition * arg1 = (boost::system::error_condition *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_error_code__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  boost::system::error_code *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_error_code__SWIG_0.");
  result = (boost::system::error_code *)new boost::system::error_code();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_boost__system__error_code, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_error_code__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  boost::system::error_category *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  boost::system::error_code *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_error_code__SWIG_1.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_error_code" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_boost__system__error_category,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_error_code" "', argument " "2"" of type '" "boost::system::error_category const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_error_code" "', argument " "2"" of type '" "boost::system::error_category const &""'"); 
  }
  arg2 = (boost::system::error_category *)(argp2);
  result = (boost::system::error_code *)new boost::system::error_code(arg1,(boost::system::error_category const &)*arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_boost__system__error_code, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_error_code(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_error_code__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_error_code__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_error_code__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_error_code__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_error_code");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_error_code_assign(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  boost::system::error_code *arg1 = (boost::system::error_code *) 0 ;
  int arg2 ;
  boost::system::error_category *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_error_code_assign.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "error_code_assign" "', argument " "1"" of type '" "boost::system::error_code *""'"); 
  }
  arg1 = (boost::system::error_code *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "error_code_assign" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_boost__system__error_category,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "error_code_assign" "', argument " "3"" of type '" "boost::system::error_category const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "error_code_assign" "', argument " "3"" of type '" "boost::system::error_category const &""'"); 
  }
  arg3 = (boost::system::error_category *)(argp3);
  (arg1)->assign(arg2,(boost::system::error_category const &)*arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_error_code_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  boost::system::error_code *arg1 = (boost::system::error_code *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_error_code_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "error_code_clear" "', argument " "1"" of type '" "boost::system::error_code *""'"); 
  }
  arg1 = (boost::system::error_code *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_error_code_value(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  boost::system::error_code *arg1 = (boost::system::error_code *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_error_code_value.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "error_code_value" "', argument " "1"" of type '" "boost::system::error_code const *""'"); 
  }
  arg1 = (boost::system::error_code *)(argp1);
  result = (int)((boost::system::error_code const *)arg1)->value();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_error_code_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  boost::system::error_code *arg1 = (boost::system::error_code *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::system::error_category *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_error_code_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "error_code_category" "', argument " "1"" of type '" "boost::system::error_code const *""'"); 
  }
  arg1 = (boost::system::error_code *)(argp1);
  result = (boost::system::error_category *) &((boost::system::error_code const *)arg1)->category();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__system__error_category, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_error_code_default_error_condition(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  boost::system::error_code *arg1 = (boost::system::error_code *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::system::error_condition result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_error_code_default_error_condition.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "error_code_default_error_condition" "', argument " "1"" of type '" "boost::system::error_code const *""'"); 
  }
  arg1 = (boost::system::error_code *)(argp1);
  result = ((boost::system::error_code const *)arg1)->default_error_condition();
  jsresult = SWIG_NewPointerObj((new boost::system::error_condition((const boost::system::error_condition&)(result))), SWIGTYPE_p_boost__system__error_condition, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_error_code_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  boost::system::error_code *arg1 = (boost::system::error_code *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_error_code_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "error_code_message" "', argument " "1"" of type '" "boost::system::error_code const *""'"); 
  }
  arg1 = (boost::system::error_code *)(argp1);
  result = ((boost::system::error_code const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_op_eq__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  boost::system::error_code *arg1 = 0 ;
  boost::system::error_code *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_boost__system__error_code,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "op_eq" "', argument " "1"" of type '" "boost::system::error_code const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "op_eq" "', argument " "1"" of type '" "boost::system::error_code const &""'"); 
  }
  arg1 = (boost::system::error_code *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_boost__system__error_code,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "op_eq" "', argument " "2"" of type '" "boost::system::error_code const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "op_eq" "', argument " "2"" of type '" "boost::system::error_code const &""'"); 
  }
  arg2 = (boost::system::error_code *)(argp2);
  result = (bool)operator ==((boost::system::error_code const &)*arg1,(boost::system::error_code const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_op_lt__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  boost::system::error_code *arg1 = 0 ;
  boost::system::error_code *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_boost__system__error_code,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "op_lt" "', argument " "1"" of type '" "boost::system::error_code const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "op_lt" "', argument " "1"" of type '" "boost::system::error_code const &""'"); 
  }
  arg1 = (boost::system::error_code *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_boost__system__error_code,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "op_lt" "', argument " "2"" of type '" "boost::system::error_code const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "op_lt" "', argument " "2"" of type '" "boost::system::error_code const &""'"); 
  }
  arg2 = (boost::system::error_code *)(argp2);
  result = (bool)operator <((boost::system::error_code const &)*arg1,(boost::system::error_code const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_error_code__wrap_op_lt(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_op_lt__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_op_lt__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_op_lt__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_op_lt__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function op_lt.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_error_code(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_error_code(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_error_code(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_error_code(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          boost::system::error_code * arg1 = (boost::system::error_code *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_op_ne__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  boost::system::error_code *arg1 = 0 ;
  boost::system::error_code *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_boost__system__error_code,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "op_ne" "', argument " "1"" of type '" "boost::system::error_code const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "op_ne" "', argument " "1"" of type '" "boost::system::error_code const &""'"); 
  }
  arg1 = (boost::system::error_code *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_boost__system__error_code,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "op_ne" "', argument " "2"" of type '" "boost::system::error_code const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "op_ne" "', argument " "2"" of type '" "boost::system::error_code const &""'"); 
  }
  arg2 = (boost::system::error_code *)(argp2);
  result = (bool)boost::system::operator !=((boost::system::error_code const &)*arg1,(boost::system::error_code const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_op_ne__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  boost::system::error_condition *arg1 = 0 ;
  boost::system::error_condition *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_boost__system__error_condition,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "op_ne" "', argument " "1"" of type '" "boost::system::error_condition const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "op_ne" "', argument " "1"" of type '" "boost::system::error_condition const &""'"); 
  }
  arg1 = (boost::system::error_condition *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_boost__system__error_condition,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "op_ne" "', argument " "2"" of type '" "boost::system::error_condition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "op_ne" "', argument " "2"" of type '" "boost::system::error_condition const &""'"); 
  }
  arg2 = (boost::system::error_condition *)(argp2);
  result = (bool)boost::system::operator !=((boost::system::error_condition const &)*arg1,(boost::system::error_condition const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_op_eq__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  boost::system::error_code *arg1 = 0 ;
  boost::system::error_condition *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_boost__system__error_code,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "op_eq" "', argument " "1"" of type '" "boost::system::error_code const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "op_eq" "', argument " "1"" of type '" "boost::system::error_code const &""'"); 
  }
  arg1 = (boost::system::error_code *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_boost__system__error_condition,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "op_eq" "', argument " "2"" of type '" "boost::system::error_condition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "op_eq" "', argument " "2"" of type '" "boost::system::error_condition const &""'"); 
  }
  arg2 = (boost::system::error_condition *)(argp2);
  result = (bool)boost::system::operator ==((boost::system::error_code const &)*arg1,(boost::system::error_condition const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_op_ne__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  boost::system::error_code *arg1 = 0 ;
  boost::system::error_condition *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_boost__system__error_code,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "op_ne" "', argument " "1"" of type '" "boost::system::error_code const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "op_ne" "', argument " "1"" of type '" "boost::system::error_code const &""'"); 
  }
  arg1 = (boost::system::error_code *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_boost__system__error_condition,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "op_ne" "', argument " "2"" of type '" "boost::system::error_condition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "op_ne" "', argument " "2"" of type '" "boost::system::error_condition const &""'"); 
  }
  arg2 = (boost::system::error_condition *)(argp2);
  result = (bool)boost::system::operator !=((boost::system::error_code const &)*arg1,(boost::system::error_condition const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_op_eq__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  boost::system::error_condition *arg1 = 0 ;
  boost::system::error_code *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_boost__system__error_condition,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "op_eq" "', argument " "1"" of type '" "boost::system::error_condition const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "op_eq" "', argument " "1"" of type '" "boost::system::error_condition const &""'"); 
  }
  arg1 = (boost::system::error_condition *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_boost__system__error_code,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "op_eq" "', argument " "2"" of type '" "boost::system::error_code const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "op_eq" "', argument " "2"" of type '" "boost::system::error_code const &""'"); 
  }
  arg2 = (boost::system::error_code *)(argp2);
  result = (bool)boost::system::operator ==((boost::system::error_condition const &)*arg1,(boost::system::error_code const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_system__wrap_op_eq(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_op_eq__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_op_eq__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_op_eq__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_op_eq__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_op_eq__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_op_eq__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_op_eq__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_op_eq__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function op_eq.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_op_ne__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  boost::system::error_condition *arg1 = 0 ;
  boost::system::error_code *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_boost__system__error_condition,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "op_ne" "', argument " "1"" of type '" "boost::system::error_condition const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "op_ne" "', argument " "1"" of type '" "boost::system::error_condition const &""'"); 
  }
  arg1 = (boost::system::error_condition *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_boost__system__error_code,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "op_ne" "', argument " "2"" of type '" "boost::system::error_code const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "op_ne" "', argument " "2"" of type '" "boost::system::error_code const &""'"); 
  }
  arg2 = (boost::system::error_code *)(argp2);
  result = (bool)boost::system::operator !=((boost::system::error_condition const &)*arg1,(boost::system::error_code const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_system__wrap_op_ne(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_op_ne__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_op_ne__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_op_ne__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_op_ne__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_op_ne__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_op_ne__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_op_ne__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_op_ne__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function op_ne.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_make_error_code(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  boost::system::errc::errc_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  boost::system::error_code result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_make_error_code.");
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "make_error_code" "', argument " "1"" of type '" "boost::system::errc::errc_t""'");
  } 
  arg1 = (boost::system::errc::errc_t)(val1);
  result = boost::system::errc::make_error_code(arg1);
  jsresult = SWIG_NewPointerObj((new boost::system::error_code((const boost::system::error_code&)(result))), SWIGTYPE_p_boost__system__error_code, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_make_error_condition(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  boost::system::errc::errc_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  boost::system::error_condition result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_make_error_condition.");
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "make_error_condition" "', argument " "1"" of type '" "boost::system::errc::errc_t""'");
  } 
  arg1 = (boost::system::errc::errc_t)(val1);
  result = boost::system::errc::make_error_condition(arg1);
  jsresult = SWIG_NewPointerObj((new boost::system::error_condition((const boost::system::error_condition&)(result))), SWIGTYPE_p_boost__system__error_condition, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_LIBTORRENT_VERSION_MAJOR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(1));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LIBTORRENT_VERSION_MINOR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LIBTORRENT_VERSION_TINY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LIBTORRENT_VERSION_NUM(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(((1*10000) +(2*100) +0)));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LIBTORRENT_VERSION(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"1.2.0.0");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LIBTORRENT_REVISION(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"62cdec8");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_version(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_version.");
  
  result = (char *)libtorrent::version();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_errors_no_error(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::no_error));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_file_collision(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::file_collision));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_failed_hash_check(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::failed_hash_check));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_torrent_is_no_dict(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::torrent_is_no_dict));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_torrent_missing_info(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::torrent_missing_info));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_torrent_info_no_dict(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::torrent_info_no_dict));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_torrent_missing_piece_length(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::torrent_missing_piece_length));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_torrent_missing_name(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::torrent_missing_name));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_torrent_invalid_name(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::torrent_invalid_name));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_torrent_invalid_length(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::torrent_invalid_length));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_torrent_file_parse_failed(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::torrent_file_parse_failed));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_torrent_missing_pieces(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::torrent_missing_pieces));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_torrent_invalid_hashes(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::torrent_invalid_hashes));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_too_many_pieces_in_torrent(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::too_many_pieces_in_torrent));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_swarm_metadata(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_swarm_metadata));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_bencoding(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_bencoding));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_no_files_in_torrent(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::no_files_in_torrent));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_escaped_string(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_escaped_string));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_session_is_closing(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::session_is_closing));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_duplicate_torrent(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::duplicate_torrent));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_torrent_handle(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_torrent_handle));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_entry_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_entry_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_missing_info_hash_in_uri(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::missing_info_hash_in_uri));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_file_too_short(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::file_too_short));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_unsupported_url_protocol(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::unsupported_url_protocol));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_url_parse_error(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::url_parse_error));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_peer_sent_empty_piece(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::peer_sent_empty_piece));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_parse_failed(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::parse_failed));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_file_tag(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_file_tag));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_missing_info_hash(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::missing_info_hash));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_mismatching_info_hash(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::mismatching_info_hash));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_hostname(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_hostname));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_port(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_port));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_port_blocked(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::port_blocked));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_expected_close_bracket_in_address(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::expected_close_bracket_in_address));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_destructing_torrent(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::destructing_torrent));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_timed_out(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::timed_out));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_upload_upload_connection(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::upload_upload_connection));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_uninteresting_upload_peer(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::uninteresting_upload_peer));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_info_hash(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_info_hash));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_torrent_paused(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::torrent_paused));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_have(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_have));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_bitfield_size(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_bitfield_size));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_too_many_requests_when_choked(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::too_many_requests_when_choked));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_piece(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_piece));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_no_memory(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::no_memory));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_torrent_aborted(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::torrent_aborted));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_self_connection(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::self_connection));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_piece_size(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_piece_size));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_timed_out_no_interest(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::timed_out_no_interest));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_timed_out_inactivity(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::timed_out_inactivity));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_timed_out_no_handshake(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::timed_out_no_handshake));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_timed_out_no_request(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::timed_out_no_request));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_choke(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_choke));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_unchoke(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_unchoke));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_interested(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_interested));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_not_interested(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_not_interested));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_request(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_request));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_hash_list(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_hash_list));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_hash_piece(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_hash_piece));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_cancel(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_cancel));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_dht_port(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_dht_port));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_suggest(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_suggest));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_have_all(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_have_all));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_have_none(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_have_none));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_reject(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_reject));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_allow_fast(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_allow_fast));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_extended(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_extended));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_message(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_message));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_sync_hash_not_found(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::sync_hash_not_found));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_encryption_constant(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_encryption_constant));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_no_plaintext_mode(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::no_plaintext_mode));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_no_rc4_mode(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::no_rc4_mode));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_unsupported_encryption_mode(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::unsupported_encryption_mode));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_unsupported_encryption_mode_selected(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::unsupported_encryption_mode_selected));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_pad_size(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_pad_size));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_encrypt_handshake(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_encrypt_handshake));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_no_incoming_encrypted(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::no_incoming_encrypted));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_no_incoming_regular(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::no_incoming_regular));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_duplicate_peer_id(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::duplicate_peer_id));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_torrent_removed(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::torrent_removed));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_packet_too_large(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::packet_too_large));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_reserved(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::reserved));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_http_error(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::http_error));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_missing_location(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::missing_location));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_redirection(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_redirection));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_redirecting(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::redirecting));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_range(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_range));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_no_content_length(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::no_content_length));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_banned_by_ip_filter(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::banned_by_ip_filter));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_too_many_connections(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::too_many_connections));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_peer_banned(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::peer_banned));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_stopping_torrent(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::stopping_torrent));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_too_many_corrupt_pieces(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::too_many_corrupt_pieces));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_torrent_not_ready(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::torrent_not_ready));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_peer_not_constructed(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::peer_not_constructed));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_session_closing(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::session_closing));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_optimistic_disconnect(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::optimistic_disconnect));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_torrent_finished(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::torrent_finished));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_no_router(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::no_router));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_metadata_too_large(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::metadata_too_large));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_metadata_request(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_metadata_request));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_metadata_size(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_metadata_size));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_metadata_offset(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_metadata_offset));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_metadata_message(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_metadata_message));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_pex_message_too_large(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::pex_message_too_large));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_pex_message(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_pex_message));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_lt_tracker_message(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_lt_tracker_message));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_too_frequent_pex(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::too_frequent_pex));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_no_metadata(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::no_metadata));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_dont_have(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_dont_have));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_requires_ssl_connection(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::requires_ssl_connection));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_ssl_cert(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_ssl_cert));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_not_an_ssl_torrent(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::not_an_ssl_torrent));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_banned_by_port_filter(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::banned_by_port_filter));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_unsupported_protocol_version(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::unsupported_protocol_version));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_natpmp_not_authorized(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::natpmp_not_authorized));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_network_failure(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::network_failure));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_no_resources(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::no_resources));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_unsupported_opcode(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::unsupported_opcode));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_missing_file_sizes(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::missing_file_sizes));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_no_files_in_resume_data(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::no_files_in_resume_data));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_missing_pieces(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::missing_pieces));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_mismatching_number_of_files(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::mismatching_number_of_files));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_mismatching_file_size(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::mismatching_file_size));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_mismatching_file_timestamp(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::mismatching_file_timestamp));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_not_a_dictionary(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::not_a_dictionary));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_blocks_per_piece(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_blocks_per_piece));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_missing_slots(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::missing_slots));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_too_many_slots(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::too_many_slots));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_slot_list(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_slot_list));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_piece_index(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_piece_index));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_pieces_need_reorder(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::pieces_need_reorder));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_resume_data_not_modified(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::resume_data_not_modified));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_http_parse_error(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::http_parse_error));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_http_missing_location(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::http_missing_location));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_http_failed_decompress(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::http_failed_decompress));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_no_i2p_router(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::no_i2p_router));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_no_i2p_endpoint(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::no_i2p_endpoint));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_scrape_not_available(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::scrape_not_available));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_tracker_response(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_tracker_response));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_peer_dict(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_peer_dict));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_tracker_failure(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::tracker_failure));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_files_entry(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_files_entry));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_hash_entry(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_hash_entry));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_peers_entry(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_peers_entry));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_tracker_response_length(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_tracker_response_length));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_tracker_transaction_id(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_tracker_transaction_id));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_invalid_tracker_action(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::invalid_tracker_action));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_error_code_max(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::error_code_max));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_cont(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::cont));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_ok(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::ok));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_created(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::created));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_accepted(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::accepted));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_no_content(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::no_content));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_multiple_choices(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::multiple_choices));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_moved_permanently(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::moved_permanently));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_moved_temporarily(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::moved_temporarily));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_not_modified(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::not_modified));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_bad_request(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::bad_request));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_unauthorized(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::unauthorized));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_forbidden(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::forbidden));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_not_found(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::not_found));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_internal_server_error(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::internal_server_error));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_not_implemented(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::not_implemented));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_bad_gateway(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::bad_gateway));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_errors_service_unavailable(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::errors::service_unavailable));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  boost::system::error_category *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_libtorrent_category.");
  
  result = (boost::system::error_category *) &libtorrent::libtorrent_category();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__system__error_category, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_http_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  boost::system::error_category *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_http_category.");
  
  result = (boost::system::error_category *) &libtorrent::http_category();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__system__error_category, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_bitfield__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::bitfield *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_bitfield__SWIG_0.");
  result = (libtorrent::bitfield *)new libtorrent::bitfield();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__bitfield, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_bitfield__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  libtorrent::bitfield *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_bitfield__SWIG_1.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_bitfield" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  result = (libtorrent::bitfield *)new libtorrent::bitfield(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__bitfield, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_bitfield__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  bool arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  libtorrent::bitfield *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_bitfield__SWIG_2.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_bitfield" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_bitfield" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  result = (libtorrent::bitfield *)new libtorrent::bitfield(arg1,arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__bitfield, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_bitfield__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  libtorrent::bitfield *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_bitfield__SWIG_3.");
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_bitfield" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_bitfield" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (libtorrent::bitfield *)new libtorrent::bitfield((char const *)arg1,arg2);
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__bitfield, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_bitfield__SWIG_4(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::bitfield *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::bitfield *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_bitfield__SWIG_4.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__bitfield,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_bitfield" "', argument " "1"" of type '" "libtorrent::bitfield &&""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_bitfield" "', argument " "1"" of type '" "libtorrent::bitfield &&""'"); 
  }
  arg1 = (libtorrent::bitfield *)(argp1);
  result = (libtorrent::bitfield *)new libtorrent::bitfield((libtorrent::bitfield &&)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__bitfield, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_bitfield(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_bitfield__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_bitfield__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_bitfield__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_bitfield__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_bitfield__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_bitfield__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_bitfield__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_bitfield__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_bitfield__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_bitfield__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_bitfield");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bitfield_assign(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bitfield_assign.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bitfield, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bitfield_assign" "', argument " "1"" of type '" "libtorrent::bitfield *""'"); 
  }
  arg1 = (libtorrent::bitfield *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bitfield_assign" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "bitfield_assign" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->assign((char const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bitfield_get_bit(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bitfield_get_bit.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bitfield, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bitfield_get_bit" "', argument " "1"" of type '" "libtorrent::bitfield const *""'"); 
  }
  arg1 = (libtorrent::bitfield *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bitfield_get_bit" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (bool)((libtorrent::bitfield const *)arg1)->get_bit(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bitfield_clear_bit(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bitfield_clear_bit.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bitfield, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bitfield_clear_bit" "', argument " "1"" of type '" "libtorrent::bitfield *""'"); 
  }
  arg1 = (libtorrent::bitfield *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bitfield_clear_bit" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->clear_bit(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bitfield_set_bit(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bitfield_set_bit.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bitfield, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bitfield_set_bit" "', argument " "1"" of type '" "libtorrent::bitfield *""'"); 
  }
  arg1 = (libtorrent::bitfield *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bitfield_set_bit" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->set_bit(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bitfield_all_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bitfield_all_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bitfield, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bitfield_all_set" "', argument " "1"" of type '" "libtorrent::bitfield const *""'"); 
  }
  arg1 = (libtorrent::bitfield *)(argp1);
  result = (bool)((libtorrent::bitfield const *)arg1)->all_set();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bitfield_none_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bitfield_none_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bitfield, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bitfield_none_set" "', argument " "1"" of type '" "libtorrent::bitfield const *""'"); 
  }
  arg1 = (libtorrent::bitfield *)(argp1);
  result = (bool)((libtorrent::bitfield const *)arg1)->none_set();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bitfield_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bitfield_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bitfield, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bitfield_size" "', argument " "1"" of type '" "libtorrent::bitfield const *""'"); 
  }
  arg1 = (libtorrent::bitfield *)(argp1);
  result = (int)((libtorrent::bitfield const *)arg1)->size();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bitfield_num_words(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bitfield_num_words.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bitfield, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bitfield_num_words" "', argument " "1"" of type '" "libtorrent::bitfield const *""'"); 
  }
  arg1 = (libtorrent::bitfield *)(argp1);
  result = (int)((libtorrent::bitfield const *)arg1)->num_words();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bitfield_empty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bitfield_empty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bitfield, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bitfield_empty" "', argument " "1"" of type '" "libtorrent::bitfield const *""'"); 
  }
  arg1 = (libtorrent::bitfield *)(argp1);
  result = (bool)((libtorrent::bitfield const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bitfield_data(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bitfield_data.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bitfield, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bitfield_data" "', argument " "1"" of type '" "libtorrent::bitfield const *""'"); 
  }
  arg1 = (libtorrent::bitfield *)(argp1);
  result = (char *)((libtorrent::bitfield const *)arg1)->data();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bitfield_count(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bitfield_count.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bitfield, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bitfield_count" "', argument " "1"" of type '" "libtorrent::bitfield const *""'"); 
  }
  arg1 = (libtorrent::bitfield *)(argp1);
  result = (int)((libtorrent::bitfield const *)arg1)->count();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bitfield_find_first_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bitfield_find_first_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bitfield, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bitfield_find_first_set" "', argument " "1"" of type '" "libtorrent::bitfield const *""'"); 
  }
  arg1 = (libtorrent::bitfield *)(argp1);
  result = (int)((libtorrent::bitfield const *)arg1)->find_first_set();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bitfield_find_last_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bitfield_find_last_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bitfield, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bitfield_find_last_clear" "', argument " "1"" of type '" "libtorrent::bitfield const *""'"); 
  }
  arg1 = (libtorrent::bitfield *)(argp1);
  result = (int)((libtorrent::bitfield const *)arg1)->find_last_clear();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bitfield_resize__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bitfield, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bitfield_resize" "', argument " "1"" of type '" "libtorrent::bitfield *""'"); 
  }
  arg1 = (libtorrent::bitfield *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bitfield_resize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "bitfield_resize" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  (arg1)->resize(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bitfield_resize__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bitfield, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bitfield_resize" "', argument " "1"" of type '" "libtorrent::bitfield *""'"); 
  }
  arg1 = (libtorrent::bitfield *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bitfield_resize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->resize(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bitfield__wrap_bitfield_resize(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_bitfield_resize__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_bitfield_resize__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_bitfield_resize__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_bitfield_resize__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function resize.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bitfield_set_all(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bitfield_set_all.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bitfield, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bitfield_set_all" "', argument " "1"" of type '" "libtorrent::bitfield *""'"); 
  }
  arg1 = (libtorrent::bitfield *)(argp1);
  (arg1)->set_all();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bitfield_clear_all(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bitfield_clear_all.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bitfield, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bitfield_clear_all" "', argument " "1"" of type '" "libtorrent::bitfield *""'"); 
  }
  arg1 = (libtorrent::bitfield *)(argp1);
  (arg1)->clear_all();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bitfield_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bitfield_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bitfield, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bitfield_clear" "', argument " "1"" of type '" "libtorrent::bitfield *""'"); 
  }
  arg1 = (libtorrent::bitfield *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_bitfield(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_bitfield(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_bitfield(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_bitfield(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::bitfield * arg1 = (libtorrent::bitfield *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap_peer_request_piece_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_request *arg1 = (libtorrent::peer_request *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_request, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_request_piece_set" "', argument " "1"" of type '" "libtorrent::peer_request *""'"); 
  }
  arg1 = (libtorrent::peer_request *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_request_piece_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->piece = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_request_piece_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_request *arg1 = (libtorrent::peer_request *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_request, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_request_piece_get" "', argument " "1"" of type '" "libtorrent::peer_request *""'"); 
  }
  arg1 = (libtorrent::peer_request *)(argp1);
  result = (int) ((arg1)->piece);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_request_start_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_request *arg1 = (libtorrent::peer_request *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_request, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_request_start_set" "', argument " "1"" of type '" "libtorrent::peer_request *""'"); 
  }
  arg1 = (libtorrent::peer_request *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_request_start_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->start = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_request_start_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_request *arg1 = (libtorrent::peer_request *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_request, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_request_start_get" "', argument " "1"" of type '" "libtorrent::peer_request *""'"); 
  }
  arg1 = (libtorrent::peer_request *)(argp1);
  result = (int) ((arg1)->start);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_request_length_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_request *arg1 = (libtorrent::peer_request *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_request, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_request_length_set" "', argument " "1"" of type '" "libtorrent::peer_request *""'"); 
  }
  arg1 = (libtorrent::peer_request *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_request_length_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->length = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_request_length_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_request *arg1 = (libtorrent::peer_request *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_request, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_request_length_get" "', argument " "1"" of type '" "libtorrent::peer_request *""'"); 
  }
  arg1 = (libtorrent::peer_request *)(argp1);
  result = (int) ((arg1)->length);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_peer_request_op_eq(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_request *arg1 = (libtorrent::peer_request *) 0 ;
  libtorrent::peer_request *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_request_op_eq.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_request, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_request_op_eq" "', argument " "1"" of type '" "libtorrent::peer_request const *""'"); 
  }
  arg1 = (libtorrent::peer_request *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__peer_request,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "peer_request_op_eq" "', argument " "2"" of type '" "libtorrent::peer_request const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "peer_request_op_eq" "', argument " "2"" of type '" "libtorrent::peer_request const &""'"); 
  }
  arg2 = (libtorrent::peer_request *)(argp2);
  result = (bool)((libtorrent::peer_request const *)arg1)->operator ==((libtorrent::peer_request const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_peer_request(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::peer_request *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_peer_request.");
  result = (libtorrent::peer_request *)new libtorrent::peer_request();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__peer_request, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_peer_request(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_peer_request(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_peer_request(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_peer_request(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::peer_request * arg1 = (libtorrent::peer_request *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_libtorrent_entry_int_t(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::entry::int_t));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_entry_string_t(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::entry::string_t));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_entry_list_t(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::entry::list_t));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_entry_dictionary_t(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::entry::dictionary_t));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_entry_undefined_t(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::entry::undefined_t));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_entry_preformatted_t(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::entry::preformatted_t));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_entry_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::entry *arg1 = (libtorrent::entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::entry::data_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_entry_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "entry_type" "', argument " "1"" of type '" "libtorrent::entry const *""'"); 
  }
  arg1 = (libtorrent::entry *)(argp1);
  result = (libtorrent::entry::data_type)((libtorrent::entry const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_entry__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::entry::dictionary_type arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  libtorrent::entry *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_entry__SWIG_0.");
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__mapT_std__string_libtorrent__entry_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_entry" "', argument " "1"" of type '" "libtorrent::entry::dictionary_type""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_entry" "', argument " "1"" of type '" "libtorrent::entry::dictionary_type""'");
    } else {
      arg1 = *((libtorrent::entry::dictionary_type *)(argp1));
    }
  }
  result = (libtorrent::entry *)new libtorrent::entry(arg1);
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__entry, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_entry__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::span< char const > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  libtorrent::entry *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_entry__SWIG_1.");
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__spanT_char_const_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_entry" "', argument " "1"" of type '" "libtorrent::span< char const >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_entry" "', argument " "1"" of type '" "libtorrent::span< char const >""'");
    } else {
      arg1 = *((libtorrent::span< char const > *)(argp1));
    }
  }
  result = (libtorrent::entry *)new libtorrent::entry(arg1);
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__entry, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_entry__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::entry::list_type arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  libtorrent::entry *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_entry__SWIG_3.");
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_libtorrent__entry_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_entry" "', argument " "1"" of type '" "libtorrent::entry::list_type""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_entry" "', argument " "1"" of type '" "libtorrent::entry::list_type""'");
    } else {
      arg1 = *((libtorrent::entry::list_type *)(argp1));
    }
  }
  result = (libtorrent::entry *)new libtorrent::entry(arg1);
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__entry, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_entry__SWIG_4(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::entry::integer_type arg1 ;
  long long val1 ;
  int ecode1 = 0 ;
  libtorrent::entry *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_entry__SWIG_4.");
  ecode1 = SWIG_AsVal_long_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_entry" "', argument " "1"" of type '" "libtorrent::entry::integer_type""'");
  } 
  arg1 = (libtorrent::entry::integer_type)(val1);
  result = (libtorrent::entry *)new libtorrent::entry(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__entry, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_entry__SWIG_5(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::entry::data_type arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  libtorrent::entry *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_entry__SWIG_5.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_entry" "', argument " "1"" of type '" "libtorrent::entry::data_type""'");
  } 
  arg1 = (libtorrent::entry::data_type)(val1);
  result = (libtorrent::entry *)new libtorrent::entry(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__entry, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_entry__SWIG_6(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::entry *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libtorrent::entry *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_entry__SWIG_6.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__entry,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_entry" "', argument " "1"" of type '" "libtorrent::entry const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_entry" "', argument " "1"" of type '" "libtorrent::entry const &""'"); 
  }
  arg1 = (libtorrent::entry *)(argp1);
  result = (libtorrent::entry *)new libtorrent::entry((libtorrent::entry const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__entry, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_entry__SWIG_7(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::entry *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_entry__SWIG_7.");
  result = (libtorrent::entry *)new libtorrent::entry();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__entry, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_entry(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_entry(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_entry(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_entry(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::entry * arg1 = (libtorrent::entry *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_entry_op_eq(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::entry *arg1 = (libtorrent::entry *) 0 ;
  libtorrent::entry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_entry_op_eq.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "entry_op_eq" "', argument " "1"" of type '" "libtorrent::entry const *""'"); 
  }
  arg1 = (libtorrent::entry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__entry,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "entry_op_eq" "', argument " "2"" of type '" "libtorrent::entry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "entry_op_eq" "', argument " "2"" of type '" "libtorrent::entry const &""'"); 
  }
  arg2 = (libtorrent::entry *)(argp2);
  result = (bool)((libtorrent::entry const *)arg1)->operator ==((libtorrent::entry const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_entry_op_ne(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::entry *arg1 = (libtorrent::entry *) 0 ;
  libtorrent::entry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_entry_op_ne.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "entry_op_ne" "', argument " "1"" of type '" "libtorrent::entry const *""'"); 
  }
  arg1 = (libtorrent::entry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__entry,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "entry_op_ne" "', argument " "2"" of type '" "libtorrent::entry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "entry_op_ne" "', argument " "2"" of type '" "libtorrent::entry const &""'"); 
  }
  arg2 = (libtorrent::entry *)(argp2);
  result = (bool)((libtorrent::entry const *)arg1)->operator !=((libtorrent::entry const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_entry_integer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::entry *arg1 = (libtorrent::entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::entry::integer_type *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_entry_integer.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "entry_integer" "', argument " "1"" of type '" "libtorrent::entry const *""'"); 
  }
  arg1 = (libtorrent::entry *)(argp1);
  result = (libtorrent::entry::integer_type *) &((libtorrent::entry const *)arg1)->integer();
  jsresult = SWIG_From_long_SS_long((long long)(*result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_entry_string(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::entry *arg1 = (libtorrent::entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::entry::string_type *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_entry_string.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "entry_string" "', argument " "1"" of type '" "libtorrent::entry const *""'"); 
  }
  arg1 = (libtorrent::entry *)(argp1);
  result = (libtorrent::entry::string_type *) &((libtorrent::entry const *)arg1)->string();
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_entry_list(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::entry *arg1 = (libtorrent::entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::entry::list_type *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_entry_list.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "entry_list" "', argument " "1"" of type '" "libtorrent::entry *""'"); 
  }
  arg1 = (libtorrent::entry *)(argp1);
  result = (libtorrent::entry::list_type *) &(arg1)->list();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_libtorrent__entry_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_entry_dict(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::entry *arg1 = (libtorrent::entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::entry::dictionary_type *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_entry_dict.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "entry_dict" "', argument " "1"" of type '" "libtorrent::entry *""'"); 
  }
  arg1 = (libtorrent::entry *)(argp1);
  result = (libtorrent::entry::dictionary_type *) &(arg1)->dict();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_libtorrent__entry_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_entry_swap(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::entry *arg1 = (libtorrent::entry *) 0 ;
  libtorrent::entry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_entry_swap.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "entry_swap" "', argument " "1"" of type '" "libtorrent::entry *""'"); 
  }
  arg1 = (libtorrent::entry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__entry,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "entry_swap" "', argument " "2"" of type '" "libtorrent::entry &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "entry_swap" "', argument " "2"" of type '" "libtorrent::entry &""'"); 
  }
  arg2 = (libtorrent::entry *)(argp2);
  (arg1)->swap(*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_entry_find_key(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::entry *arg1 = (libtorrent::entry *) 0 ;
  SwigValueWrapper< libtorrent::string_view > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  libtorrent::entry *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_entry_find_key.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "entry_find_key" "', argument " "1"" of type '" "libtorrent::entry *""'"); 
  }
  arg1 = (libtorrent::entry *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__string_view,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "entry_find_key" "', argument " "2"" of type '" "libtorrent::string_view""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "entry_find_key" "', argument " "2"" of type '" "libtorrent::string_view""'");
    } else {
      arg2 = *((libtorrent::string_view *)(argp2));
    }
  }
  result = (libtorrent::entry *)(arg1)->find_key(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__entry, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_entry_to_string(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::entry *arg1 = (libtorrent::entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_entry_to_string.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "entry_to_string" "', argument " "1"" of type '" "libtorrent::entry const *""'"); 
  }
  arg1 = (libtorrent::entry *)(argp1);
  result = ((libtorrent::entry const *)arg1)->to_string();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_entry__SWIG_8(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  libtorrent::entry *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_entry__SWIG_8.");
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_entry" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_entry" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (libtorrent::entry *)new_libtorrent_entry__SWIG_8((std::string const &)*arg1);
  
  if (SWIG_IsNewObj(res1)) delete arg1;
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__entry, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_entry(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_entry__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_entry__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_entry__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_entry__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_entry__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_entry__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_entry__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_entry__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_entry__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_entry__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_entry__SWIG_6(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_entry__SWIG_6(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_entry__SWIG_7(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_entry__SWIG_7(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_entry__SWIG_8(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_entry__SWIG_8(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_entry");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_entry_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::entry *arg1 = (libtorrent::entry *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  libtorrent::entry *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_entry_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "entry_get" "', argument " "1"" of type '" "libtorrent::entry *""'"); 
  }
  arg1 = (libtorrent::entry *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "entry_get" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "entry_get" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (libtorrent::entry *) &libtorrent_entry_get(arg1,(std::string const &)*arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__entry, 0 |  0 );
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_entry_set__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::entry *arg1 = (libtorrent::entry *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "entry_set" "', argument " "1"" of type '" "libtorrent::entry *""'"); 
  }
  arg1 = (libtorrent::entry *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "entry_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "entry_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "entry_set" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "entry_set" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  libtorrent_entry_set__SWIG_0(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_entry_set__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::entry *arg1 = (libtorrent::entry *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< int8_t > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "entry_set" "', argument " "1"" of type '" "libtorrent::entry *""'"); 
  }
  arg1 = (libtorrent::entry *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "entry_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "entry_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_std__vectorT_signed_char_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "entry_set" "', argument " "3"" of type '" "std::vector< int8_t > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "entry_set" "', argument " "3"" of type '" "std::vector< int8_t > const &""'"); 
  }
  arg3 = (std::vector< int8_t > *)(argp3);
  libtorrent_entry_set__SWIG_1(arg1,(std::string const &)*arg2,(std::vector< signed char > const &)*arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_entry_set__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::entry *arg1 = (libtorrent::entry *) 0 ;
  std::string *arg2 = 0 ;
  long long *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  long long temp3 ;
  long long val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "entry_set" "', argument " "1"" of type '" "libtorrent::entry *""'"); 
  }
  arg1 = (libtorrent::entry *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "entry_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "entry_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_long_SS_long(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "entry_set" "', argument " "3"" of type '" "long long""'");
  } 
  temp3 = (long long)(val3);
  arg3 = &temp3;
  libtorrent_entry_set__SWIG_2(arg1,(std::string const &)*arg2,(long long const &)*arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_entry_set__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::entry *arg1 = (libtorrent::entry *) 0 ;
  std::string *arg2 = 0 ;
  libtorrent::entry *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "entry_set" "', argument " "1"" of type '" "libtorrent::entry *""'"); 
  }
  arg1 = (libtorrent::entry *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "entry_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "entry_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_libtorrent__entry,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "entry_set" "', argument " "3"" of type '" "libtorrent::entry const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "entry_set" "', argument " "3"" of type '" "libtorrent::entry const &""'"); 
  }
  arg3 = (libtorrent::entry *)(argp3);
  libtorrent_entry_set__SWIG_3(arg1,(std::string const &)*arg2,(libtorrent::entry const &)*arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_entry__wrap_entry_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_entry_set__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_entry_set__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_entry_set__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_entry_set__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_entry_set__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_entry_set__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_entry_set__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_entry_set__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_entry_string_bytes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::entry *arg1 = (libtorrent::entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int8_t > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_entry_string_bytes.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "entry_string_bytes" "', argument " "1"" of type '" "libtorrent::entry *""'"); 
  }
  arg1 = (libtorrent::entry *)(argp1);
  result = libtorrent_entry_string_bytes(arg1);
  jsresult = SWIG_NewPointerObj((new std::vector< int8_t >((const std::vector< int8_t >&)(result))), SWIGTYPE_p_std__vectorT_signed_char_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_entry_preformatted_bytes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::entry *arg1 = (libtorrent::entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int8_t > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_entry_preformatted_bytes.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "entry_preformatted_bytes" "', argument " "1"" of type '" "libtorrent::entry *""'"); 
  }
  arg1 = (libtorrent::entry *)(argp1);
  result = libtorrent_entry_preformatted_bytes(arg1);
  jsresult = SWIG_NewPointerObj((new std::vector< int8_t >((const std::vector< int8_t >&)(result))), SWIGTYPE_p_std__vectorT_signed_char_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_entry_bencode(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::entry *arg1 = (libtorrent::entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int8_t > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_entry_bencode.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "entry_bencode" "', argument " "1"" of type '" "libtorrent::entry *""'"); 
  }
  arg1 = (libtorrent::entry *)(argp1);
  result = libtorrent_entry_bencode(arg1);
  jsresult = SWIG_NewPointerObj((new std::vector< int8_t >((const std::vector< int8_t >&)(result))), SWIGTYPE_p_std__vectorT_signed_char_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_entry_from_string_bytes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int8_t > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libtorrent::entry result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_entry_from_string_bytes.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_signed_char_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "entry_from_string_bytes" "', argument " "1"" of type '" "std::vector< int8_t > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "entry_from_string_bytes" "', argument " "1"" of type '" "std::vector< int8_t > const &""'"); 
  }
  arg1 = (std::vector< int8_t > *)(argp1);
  result = libtorrent_entry_from_string_bytes((std::vector< signed char > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new libtorrent::entry((const libtorrent::entry&)(result))), SWIGTYPE_p_libtorrent__entry, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_entry_from_preformatted_bytes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int8_t > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libtorrent::entry result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_entry_from_preformatted_bytes.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_signed_char_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "entry_from_preformatted_bytes" "', argument " "1"" of type '" "std::vector< int8_t > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "entry_from_preformatted_bytes" "', argument " "1"" of type '" "std::vector< int8_t > const &""'"); 
  }
  arg1 = (std::vector< int8_t > *)(argp1);
  result = libtorrent_entry_from_preformatted_bytes((std::vector< signed char > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new libtorrent::entry((const libtorrent::entry&)(result))), SWIGTYPE_p_libtorrent__entry, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_entry_bdecode(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int8_t > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::entry result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_entry_bdecode.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_signed_char_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "entry_bdecode" "', argument " "1"" of type '" "std::vector< int8_t > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "entry_bdecode" "', argument " "1"" of type '" "std::vector< int8_t > &""'"); 
  }
  arg1 = (std::vector< int8_t > *)(argp1);
  result = libtorrent_entry_bdecode(*arg1);
  jsresult = SWIG_NewPointerObj((new libtorrent::entry((const libtorrent::entry&)(result))), SWIGTYPE_p_libtorrent__entry, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_file_slice_file_index_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::file_slice *arg1 = (libtorrent::file_slice *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_slice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_slice_file_index_set" "', argument " "1"" of type '" "libtorrent::file_slice *""'"); 
  }
  arg1 = (libtorrent::file_slice *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "file_slice_file_index_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->file_index = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_file_slice_file_index_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_slice *arg1 = (libtorrent::file_slice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_slice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_slice_file_index_get" "', argument " "1"" of type '" "libtorrent::file_slice *""'"); 
  }
  arg1 = (libtorrent::file_slice *)(argp1);
  result = (int) ((arg1)->file_index);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_file_slice_offset_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::file_slice *arg1 = (libtorrent::file_slice *) 0 ;
  std::int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_slice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_slice_offset_set" "', argument " "1"" of type '" "libtorrent::file_slice *""'"); 
  }
  arg1 = (libtorrent::file_slice *)(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "file_slice_offset_set" "', argument " "2"" of type '" "std::int64_t""'");
  } 
  arg2 = (std::int64_t)(val2);
  if (arg1) (arg1)->offset = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_file_slice_offset_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_slice *arg1 = (libtorrent::file_slice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::int64_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_slice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_slice_offset_get" "', argument " "1"" of type '" "libtorrent::file_slice *""'"); 
  }
  arg1 = (libtorrent::file_slice *)(argp1);
  result = (std::int64_t) ((arg1)->offset);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_file_slice_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::file_slice *arg1 = (libtorrent::file_slice *) 0 ;
  std::int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_slice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_slice_size_set" "', argument " "1"" of type '" "libtorrent::file_slice *""'"); 
  }
  arg1 = (libtorrent::file_slice *)(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "file_slice_size_set" "', argument " "2"" of type '" "std::int64_t""'");
  } 
  arg2 = (std::int64_t)(val2);
  if (arg1) (arg1)->size = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_file_slice_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_slice *arg1 = (libtorrent::file_slice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::int64_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_slice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_slice_size_get" "', argument " "1"" of type '" "libtorrent::file_slice *""'"); 
  }
  arg1 = (libtorrent::file_slice *)(argp1);
  result = (std::int64_t) ((arg1)->size);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_file_slice(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::file_slice *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_file_slice.");
  result = (libtorrent::file_slice *)new libtorrent::file_slice();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__file_slice, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_file_slice(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_file_slice(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_file_slice(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_file_slice(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::file_slice * arg1 = (libtorrent::file_slice *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_file_storage__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::file_storage *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_file_storage__SWIG_0.");
  result = (libtorrent::file_storage *)new libtorrent::file_storage();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__file_storage, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_file_storage(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_file_storage(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_file_storage(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_file_storage(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::file_storage * arg1 = (libtorrent::file_storage *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_file_storage__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::file_storage *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libtorrent::file_storage *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_file_storage__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__file_storage,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_file_storage" "', argument " "1"" of type '" "libtorrent::file_storage const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_file_storage" "', argument " "1"" of type '" "libtorrent::file_storage const &""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  result = (libtorrent::file_storage *)new libtorrent::file_storage((libtorrent::file_storage const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__file_storage, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_file_storage(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_file_storage__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_file_storage__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_file_storage__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_file_storage__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_file_storage");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_is_valid(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_storage_is_valid.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_is_valid" "', argument " "1"" of type '" "libtorrent::file_storage const *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  result = (bool)((libtorrent::file_storage const *)arg1)->is_valid();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_file_storage_pad_file(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::file_storage::pad_file));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_file_storage_attribute_hidden(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::file_storage::attribute_hidden));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_file_storage_attribute_executable(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::file_storage::attribute_executable));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_file_storage_attribute_symlink(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::file_storage::attribute_symlink));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_file_storage_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_storage_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_reserve" "', argument " "1"" of type '" "libtorrent::file_storage *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "file_storage_reserve" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_add_file_borrow__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  std::int64_t arg5 ;
  std::uint32_t arg6 ;
  char *arg7 = (char *) 0 ;
  std::int64_t arg8 ;
  SwigValueWrapper< libtorrent::string_view > arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  long long val5 ;
  int ecode5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  long long val8 ;
  int ecode8 = 0 ;
  void *argp9 ;
  int res9 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_add_file_borrow" "', argument " "1"" of type '" "libtorrent::file_storage *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "file_storage_add_file_borrow" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "file_storage_add_file_borrow" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(args[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "file_storage_add_file_borrow" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "file_storage_add_file_borrow" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_long_SS_long(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "file_storage_add_file_borrow" "', argument " "5"" of type '" "std::int64_t""'");
  } 
  arg5 = (std::int64_t)(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_int(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "file_storage_add_file_borrow" "', argument " "6"" of type '" "std::uint32_t""'");
  } 
  arg6 = (std::uint32_t)(val6);
  res7 = SWIG_AsCharPtrAndSize(args[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "file_storage_add_file_borrow" "', argument " "7"" of type '" "char const *""'");
  }
  arg7 = (char *)(buf7);
  ecode8 = SWIG_AsVal_long_SS_long(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "file_storage_add_file_borrow" "', argument " "8"" of type '" "std::int64_t""'");
  } 
  arg8 = (std::int64_t)(val8);
  {
    res9 = SWIG_ConvertPtr(args[7], &argp9, SWIGTYPE_p_libtorrent__string_view,  0 );
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "file_storage_add_file_borrow" "', argument " "9"" of type '" "libtorrent::string_view""'"); 
    }  
    if (!argp9) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "file_storage_add_file_borrow" "', argument " "9"" of type '" "libtorrent::string_view""'");
    } else {
      arg9 = *((libtorrent::string_view *)(argp9));
    }
  }
  (arg1)->add_file_borrow((char const *)arg2,arg3,(std::string const &)*arg4,arg5,arg6,(char const *)arg7,arg8,arg9);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  
  
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_add_file_borrow__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  std::int64_t arg5 ;
  std::uint32_t arg6 ;
  char *arg7 = (char *) 0 ;
  std::int64_t arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  long long val5 ;
  int ecode5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  long long val8 ;
  int ecode8 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_add_file_borrow" "', argument " "1"" of type '" "libtorrent::file_storage *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "file_storage_add_file_borrow" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "file_storage_add_file_borrow" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(args[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "file_storage_add_file_borrow" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "file_storage_add_file_borrow" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_long_SS_long(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "file_storage_add_file_borrow" "', argument " "5"" of type '" "std::int64_t""'");
  } 
  arg5 = (std::int64_t)(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_int(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "file_storage_add_file_borrow" "', argument " "6"" of type '" "std::uint32_t""'");
  } 
  arg6 = (std::uint32_t)(val6);
  res7 = SWIG_AsCharPtrAndSize(args[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "file_storage_add_file_borrow" "', argument " "7"" of type '" "char const *""'");
  }
  arg7 = (char *)(buf7);
  ecode8 = SWIG_AsVal_long_SS_long(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "file_storage_add_file_borrow" "', argument " "8"" of type '" "std::int64_t""'");
  } 
  arg8 = (std::int64_t)(val8);
  (arg1)->add_file_borrow((char const *)arg2,arg3,(std::string const &)*arg4,arg5,arg6,(char const *)arg7,arg8);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  
  
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_add_file_borrow__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  std::int64_t arg5 ;
  std::uint32_t arg6 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  long long val5 ;
  int ecode5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_add_file_borrow" "', argument " "1"" of type '" "libtorrent::file_storage *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "file_storage_add_file_borrow" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "file_storage_add_file_borrow" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(args[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "file_storage_add_file_borrow" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "file_storage_add_file_borrow" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_long_SS_long(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "file_storage_add_file_borrow" "', argument " "5"" of type '" "std::int64_t""'");
  } 
  arg5 = (std::int64_t)(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_int(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "file_storage_add_file_borrow" "', argument " "6"" of type '" "std::uint32_t""'");
  } 
  arg6 = (std::uint32_t)(val6);
  res7 = SWIG_AsCharPtrAndSize(args[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "file_storage_add_file_borrow" "', argument " "7"" of type '" "char const *""'");
  }
  arg7 = (char *)(buf7);
  (arg1)->add_file_borrow((char const *)arg2,arg3,(std::string const &)*arg4,arg5,arg6,(char const *)arg7);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  
  
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_add_file_borrow__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  std::int64_t arg5 ;
  std::uint32_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  long long val5 ;
  int ecode5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_add_file_borrow" "', argument " "1"" of type '" "libtorrent::file_storage *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "file_storage_add_file_borrow" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "file_storage_add_file_borrow" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(args[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "file_storage_add_file_borrow" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "file_storage_add_file_borrow" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_long_SS_long(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "file_storage_add_file_borrow" "', argument " "5"" of type '" "std::int64_t""'");
  } 
  arg5 = (std::int64_t)(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_int(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "file_storage_add_file_borrow" "', argument " "6"" of type '" "std::uint32_t""'");
  } 
  arg6 = (std::uint32_t)(val6);
  (arg1)->add_file_borrow((char const *)arg2,arg3,(std::string const &)*arg4,arg5,arg6);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_add_file_borrow__SWIG_4(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  std::int64_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  long long val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_add_file_borrow" "', argument " "1"" of type '" "libtorrent::file_storage *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "file_storage_add_file_borrow" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "file_storage_add_file_borrow" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(args[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "file_storage_add_file_borrow" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "file_storage_add_file_borrow" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_long_SS_long(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "file_storage_add_file_borrow" "', argument " "5"" of type '" "std::int64_t""'");
  } 
  arg5 = (std::int64_t)(val5);
  (arg1)->add_file_borrow((char const *)arg2,arg3,(std::string const &)*arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage__wrap_file_storage_add_file_borrow(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 8) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_file_storage_add_file_borrow__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_file_storage_add_file_borrow__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 7) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_file_storage_add_file_borrow__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_file_storage_add_file_borrow__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_file_storage_add_file_borrow__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_file_storage_add_file_borrow__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_file_storage_add_file_borrow__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_file_storage_add_file_borrow__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_file_storage_add_file_borrow__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_file_storage_add_file_borrow__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function add_file_borrow.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_add_file__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  std::string *arg2 = 0 ;
  std::int64_t arg3 ;
  int arg4 ;
  std::time_t arg5 ;
  SwigValueWrapper< libtorrent::string_view > arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  long long val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_add_file" "', argument " "1"" of type '" "libtorrent::file_storage *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "file_storage_add_file" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "file_storage_add_file" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_long_SS_long(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "file_storage_add_file" "', argument " "3"" of type '" "std::int64_t""'");
  } 
  arg3 = (std::int64_t)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "file_storage_add_file" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_long(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "file_storage_add_file" "', argument " "5"" of type '" "std::time_t""'");
  } 
  arg5 = (std::time_t)(val5);
  {
    res6 = SWIG_ConvertPtr(args[4], &argp6, SWIGTYPE_p_libtorrent__string_view,  0 );
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "file_storage_add_file" "', argument " "6"" of type '" "libtorrent::string_view""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "file_storage_add_file" "', argument " "6"" of type '" "libtorrent::string_view""'");
    } else {
      arg6 = *((libtorrent::string_view *)(argp6));
    }
  }
  (arg1)->add_file((std::string const &)*arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_add_file__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  std::string *arg2 = 0 ;
  std::int64_t arg3 ;
  int arg4 ;
  std::time_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  long long val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_add_file" "', argument " "1"" of type '" "libtorrent::file_storage *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "file_storage_add_file" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "file_storage_add_file" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_long_SS_long(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "file_storage_add_file" "', argument " "3"" of type '" "std::int64_t""'");
  } 
  arg3 = (std::int64_t)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "file_storage_add_file" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_long(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "file_storage_add_file" "', argument " "5"" of type '" "std::time_t""'");
  } 
  arg5 = (std::time_t)(val5);
  (arg1)->add_file((std::string const &)*arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_add_file__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  std::string *arg2 = 0 ;
  std::int64_t arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  long long val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_add_file" "', argument " "1"" of type '" "libtorrent::file_storage *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "file_storage_add_file" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "file_storage_add_file" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_long_SS_long(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "file_storage_add_file" "', argument " "3"" of type '" "std::int64_t""'");
  } 
  arg3 = (std::int64_t)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "file_storage_add_file" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  (arg1)->add_file((std::string const &)*arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_add_file__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  std::string *arg2 = 0 ;
  std::int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  long long val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_add_file" "', argument " "1"" of type '" "libtorrent::file_storage *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "file_storage_add_file" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "file_storage_add_file" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_long_SS_long(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "file_storage_add_file" "', argument " "3"" of type '" "std::int64_t""'");
  } 
  arg3 = (std::int64_t)(val3);
  (arg1)->add_file((std::string const &)*arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage__wrap_file_storage_add_file(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_file_storage_add_file__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_file_storage_add_file__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_file_storage_add_file__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_file_storage_add_file__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_file_storage_add_file__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_file_storage_add_file__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_file_storage_add_file__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_file_storage_add_file__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function add_file.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_rename_file(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_storage_rename_file.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_rename_file" "', argument " "1"" of type '" "libtorrent::file_storage *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "file_storage_rename_file" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "file_storage_rename_file" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "file_storage_rename_file" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->rename_file(arg2,(std::string const &)*arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_map_block(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  std::int64_t arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long long val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  std::vector< libtorrent::file_slice > result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_storage_map_block.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_map_block" "', argument " "1"" of type '" "libtorrent::file_storage const *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "file_storage_map_block" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_long_SS_long(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "file_storage_map_block" "', argument " "3"" of type '" "std::int64_t""'");
  } 
  arg3 = (std::int64_t)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "file_storage_map_block" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  result = ((libtorrent::file_storage const *)arg1)->map_block(arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj((new std::vector< libtorrent::file_slice >((const std::vector< libtorrent::file_slice >&)(result))), SWIGTYPE_p_std__vectorT_libtorrent__file_slice_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_map_file(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  std::int64_t arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long long val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  libtorrent::peer_request result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_storage_map_file.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_map_file" "', argument " "1"" of type '" "libtorrent::file_storage const *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "file_storage_map_file" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_long_SS_long(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "file_storage_map_file" "', argument " "3"" of type '" "std::int64_t""'");
  } 
  arg3 = (std::int64_t)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "file_storage_map_file" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  result = ((libtorrent::file_storage const *)arg1)->map_file(arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj((new libtorrent::peer_request((const libtorrent::peer_request&)(result))), SWIGTYPE_p_libtorrent__peer_request, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_num_files(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_storage_num_files.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_num_files" "', argument " "1"" of type '" "libtorrent::file_storage const *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  result = (int)((libtorrent::file_storage const *)arg1)->num_files();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_total_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::int64_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_storage_total_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_total_size" "', argument " "1"" of type '" "libtorrent::file_storage const *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  result = (std::int64_t)((libtorrent::file_storage const *)arg1)->total_size();
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_set_num_pieces(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_storage_set_num_pieces.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_set_num_pieces" "', argument " "1"" of type '" "libtorrent::file_storage *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "file_storage_set_num_pieces" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->set_num_pieces(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_num_pieces(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_storage_num_pieces.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_num_pieces" "', argument " "1"" of type '" "libtorrent::file_storage const *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  result = (int)((libtorrent::file_storage const *)arg1)->num_pieces();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_set_piece_length(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_storage_set_piece_length.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_set_piece_length" "', argument " "1"" of type '" "libtorrent::file_storage *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "file_storage_set_piece_length" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->set_piece_length(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_piece_length(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_storage_piece_length.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_piece_length" "', argument " "1"" of type '" "libtorrent::file_storage const *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  result = (int)((libtorrent::file_storage const *)arg1)->piece_length();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_piece_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_storage_piece_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_piece_size" "', argument " "1"" of type '" "libtorrent::file_storage const *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "file_storage_piece_size" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (int)((libtorrent::file_storage const *)arg1)->piece_size(arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_set_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_storage_set_name.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_set_name" "', argument " "1"" of type '" "libtorrent::file_storage *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "file_storage_set_name" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "file_storage_set_name" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_name((std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_storage_name.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_name" "', argument " "1"" of type '" "libtorrent::file_storage const *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  result = (std::string *) &((libtorrent::file_storage const *)arg1)->name();
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_swap(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  libtorrent::file_storage *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_storage_swap.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_swap" "', argument " "1"" of type '" "libtorrent::file_storage *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__file_storage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "file_storage_swap" "', argument " "2"" of type '" "libtorrent::file_storage &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "file_storage_swap" "', argument " "2"" of type '" "libtorrent::file_storage &""'"); 
  }
  arg2 = (libtorrent::file_storage *)(argp2);
  (arg1)->swap(*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_unload(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_storage_unload.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_unload" "', argument " "1"" of type '" "libtorrent::file_storage *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  (arg1)->unload();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_is_loaded(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_storage_is_loaded.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_is_loaded" "', argument " "1"" of type '" "libtorrent::file_storage const *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  result = (bool)((libtorrent::file_storage const *)arg1)->is_loaded();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_optimize__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_optimize" "', argument " "1"" of type '" "libtorrent::file_storage *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "file_storage_optimize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "file_storage_optimize" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_bool(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "file_storage_optimize" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  (arg1)->optimize(arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_optimize__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_optimize" "', argument " "1"" of type '" "libtorrent::file_storage *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "file_storage_optimize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "file_storage_optimize" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->optimize(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_optimize__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_optimize" "', argument " "1"" of type '" "libtorrent::file_storage *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "file_storage_optimize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->optimize(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_optimize__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_optimize" "', argument " "1"" of type '" "libtorrent::file_storage *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  (arg1)->optimize();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage__wrap_file_storage_optimize(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_file_storage_optimize__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_file_storage_optimize__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_file_storage_optimize__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_file_storage_optimize__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_file_storage_optimize__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_file_storage_optimize__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_file_storage_optimize__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_file_storage_optimize__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function optimize.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_hash(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  libtorrent::sha1_hash result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_storage_hash.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_hash" "', argument " "1"" of type '" "libtorrent::file_storage const *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "file_storage_hash" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = ((libtorrent::file_storage const *)arg1)->hash(arg2);
  jsresult = SWIG_NewPointerObj((new libtorrent::sha1_hash((const libtorrent::sha1_hash&)(result))), SWIGTYPE_p_libtorrent__sha1_hash, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_symlink(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::string *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_storage_symlink.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_symlink" "', argument " "1"" of type '" "libtorrent::file_storage const *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "file_storage_symlink" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (std::string *) &((libtorrent::file_storage const *)arg1)->symlink(arg2);
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_mtime(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  time_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_storage_mtime.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_mtime" "', argument " "1"" of type '" "libtorrent::file_storage const *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "file_storage_mtime" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (time_t)((libtorrent::file_storage const *)arg1)->mtime(arg2);
  jsresult = SWIG_From_long((long)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_file_path__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  std::string result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_file_path" "', argument " "1"" of type '" "libtorrent::file_storage const *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "file_storage_file_path" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "file_storage_file_path" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "file_storage_file_path" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = ((libtorrent::file_storage const *)arg1)->file_path(arg2,(std::string const &)*arg3);
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_file_path__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::string result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_file_path" "', argument " "1"" of type '" "libtorrent::file_storage const *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "file_storage_file_path" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = ((libtorrent::file_storage const *)arg1)->file_path(arg2);
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage__wrap_file_storage_file_path(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_file_storage_file_path__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_file_storage_file_path__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_file_storage_file_path__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_file_storage_file_path__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function file_path.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_file_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< libtorrent::string_view > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_storage_file_name.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_file_name" "', argument " "1"" of type '" "libtorrent::file_storage const *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "file_storage_file_name" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = ((libtorrent::file_storage const *)arg1)->file_name(arg2);
  jsresult = SWIG_NewPointerObj((new libtorrent::string_view((const libtorrent::string_view&)(result))), SWIGTYPE_p_libtorrent__string_view, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_file_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::int64_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_storage_file_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_file_size" "', argument " "1"" of type '" "libtorrent::file_storage const *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "file_storage_file_size" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (std::int64_t)((libtorrent::file_storage const *)arg1)->file_size(arg2);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_pad_file_at(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_storage_pad_file_at.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_pad_file_at" "', argument " "1"" of type '" "libtorrent::file_storage const *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "file_storage_pad_file_at" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (bool)((libtorrent::file_storage const *)arg1)->pad_file_at(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_file_offset(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::int64_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_storage_file_offset.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_file_offset" "', argument " "1"" of type '" "libtorrent::file_storage const *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "file_storage_file_offset" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (std::int64_t)((libtorrent::file_storage const *)arg1)->file_offset(arg2);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_file_storage_flag_pad_file(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::file_storage::flag_pad_file));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_file_storage_flag_hidden(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::file_storage::flag_hidden));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_file_storage_flag_executable(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::file_storage::flag_executable));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_file_storage_flag_symlink(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::file_storage::flag_symlink));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_file_storage_paths(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_storage_paths.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_paths" "', argument " "1"" of type '" "libtorrent::file_storage const *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  result = (std::vector< std::string > *) &((libtorrent::file_storage const *)arg1)->paths();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_file_flags(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_storage_file_flags.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_file_flags" "', argument " "1"" of type '" "libtorrent::file_storage const *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "file_storage_file_flags" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (int)((libtorrent::file_storage const *)arg1)->file_flags(arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_file_absolute_path(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_storage_file_absolute_path.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_file_absolute_path" "', argument " "1"" of type '" "libtorrent::file_storage const *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "file_storage_file_absolute_path" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (bool)((libtorrent::file_storage const *)arg1)->file_absolute_path(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_storage_file_index_at_offset(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  std::int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_storage_file_index_at_offset.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_storage_file_index_at_offset" "', argument " "1"" of type '" "libtorrent::file_storage const *""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "file_storage_file_index_at_offset" "', argument " "2"" of type '" "std::int64_t""'");
  } 
  arg2 = (std::int64_t)(val2);
  result = (int)((libtorrent::file_storage const *)arg1)->file_index_at_offset(arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_web_seed_entry_url_seed(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::web_seed_entry::url_seed));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_web_seed_entry_http_seed(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::web_seed_entry::http_seed));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_web_seed_entry__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::string *arg1 = 0 ;
  libtorrent::web_seed_entry::type_t arg2 ;
  std::string *arg3 = 0 ;
  libtorrent::web_seed_entry::headers_t *arg4 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 ;
  int res4 = 0 ;
  libtorrent::web_seed_entry *result;
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_web_seed_entry__SWIG_0.");
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_web_seed_entry" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_web_seed_entry" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_web_seed_entry" "', argument " "2"" of type '" "libtorrent::web_seed_entry::type_t""'");
  } 
  arg2 = (libtorrent::web_seed_entry::type_t)(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(args[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_web_seed_entry" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_web_seed_entry" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_web_seed_entry" "', argument " "4"" of type '" "libtorrent::web_seed_entry::headers_t const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_web_seed_entry" "', argument " "4"" of type '" "libtorrent::web_seed_entry::headers_t const &""'"); 
  }
  arg4 = (libtorrent::web_seed_entry::headers_t *)(argp4);
  result = (libtorrent::web_seed_entry *)new libtorrent::web_seed_entry((std::string const &)*arg1,arg2,(std::string const &)*arg3,(libtorrent::web_seed_entry::headers_t const &)*arg4);
  
  if (SWIG_IsNewObj(res1)) delete arg1;
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__web_seed_entry, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_web_seed_entry__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::string *arg1 = 0 ;
  libtorrent::web_seed_entry::type_t arg2 ;
  std::string *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  libtorrent::web_seed_entry *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_web_seed_entry__SWIG_1.");
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_web_seed_entry" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_web_seed_entry" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_web_seed_entry" "', argument " "2"" of type '" "libtorrent::web_seed_entry::type_t""'");
  } 
  arg2 = (libtorrent::web_seed_entry::type_t)(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(args[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_web_seed_entry" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_web_seed_entry" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (libtorrent::web_seed_entry *)new libtorrent::web_seed_entry((std::string const &)*arg1,arg2,(std::string const &)*arg3);
  
  if (SWIG_IsNewObj(res1)) delete arg1;
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__web_seed_entry, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_web_seed_entry__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::string *arg1 = 0 ;
  libtorrent::web_seed_entry::type_t arg2 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  libtorrent::web_seed_entry *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_web_seed_entry__SWIG_2.");
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_web_seed_entry" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_web_seed_entry" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_web_seed_entry" "', argument " "2"" of type '" "libtorrent::web_seed_entry::type_t""'");
  } 
  arg2 = (libtorrent::web_seed_entry::type_t)(val2);
  result = (libtorrent::web_seed_entry *)new libtorrent::web_seed_entry((std::string const &)*arg1,arg2);
  
  if (SWIG_IsNewObj(res1)) delete arg1;
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__web_seed_entry, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_web_seed_entry(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_web_seed_entry__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_web_seed_entry__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_web_seed_entry__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_web_seed_entry__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_web_seed_entry__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_web_seed_entry__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_web_seed_entry");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_web_seed_entry_op_eq(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::web_seed_entry *arg1 = (libtorrent::web_seed_entry *) 0 ;
  libtorrent::web_seed_entry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_web_seed_entry_op_eq.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__web_seed_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "web_seed_entry_op_eq" "', argument " "1"" of type '" "libtorrent::web_seed_entry const *""'"); 
  }
  arg1 = (libtorrent::web_seed_entry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__web_seed_entry,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "web_seed_entry_op_eq" "', argument " "2"" of type '" "libtorrent::web_seed_entry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "web_seed_entry_op_eq" "', argument " "2"" of type '" "libtorrent::web_seed_entry const &""'"); 
  }
  arg2 = (libtorrent::web_seed_entry *)(argp2);
  result = (bool)((libtorrent::web_seed_entry const *)arg1)->operator ==((libtorrent::web_seed_entry const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_web_seed_entry_op_lt(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::web_seed_entry *arg1 = (libtorrent::web_seed_entry *) 0 ;
  libtorrent::web_seed_entry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_web_seed_entry_op_lt.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__web_seed_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "web_seed_entry_op_lt" "', argument " "1"" of type '" "libtorrent::web_seed_entry const *""'"); 
  }
  arg1 = (libtorrent::web_seed_entry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__web_seed_entry,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "web_seed_entry_op_lt" "', argument " "2"" of type '" "libtorrent::web_seed_entry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "web_seed_entry_op_lt" "', argument " "2"" of type '" "libtorrent::web_seed_entry const &""'"); 
  }
  arg2 = (libtorrent::web_seed_entry *)(argp2);
  result = (bool)((libtorrent::web_seed_entry const *)arg1)->operator <((libtorrent::web_seed_entry const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_web_seed_entry_url_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::web_seed_entry *arg1 = (libtorrent::web_seed_entry *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__web_seed_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "web_seed_entry_url_set" "', argument " "1"" of type '" "libtorrent::web_seed_entry *""'"); 
  }
  arg1 = (libtorrent::web_seed_entry *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(value, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "web_seed_entry_url_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "web_seed_entry_url_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->url = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_web_seed_entry_url_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::web_seed_entry *arg1 = (libtorrent::web_seed_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__web_seed_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "web_seed_entry_url_get" "', argument " "1"" of type '" "libtorrent::web_seed_entry *""'"); 
  }
  arg1 = (libtorrent::web_seed_entry *)(argp1);
  result = (std::string *) & ((arg1)->url);
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_web_seed_entry_auth_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::web_seed_entry *arg1 = (libtorrent::web_seed_entry *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__web_seed_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "web_seed_entry_auth_set" "', argument " "1"" of type '" "libtorrent::web_seed_entry *""'"); 
  }
  arg1 = (libtorrent::web_seed_entry *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(value, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "web_seed_entry_auth_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "web_seed_entry_auth_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->auth = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_web_seed_entry_auth_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::web_seed_entry *arg1 = (libtorrent::web_seed_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__web_seed_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "web_seed_entry_auth_get" "', argument " "1"" of type '" "libtorrent::web_seed_entry *""'"); 
  }
  arg1 = (libtorrent::web_seed_entry *)(argp1);
  result = (std::string *) & ((arg1)->auth);
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_web_seed_entry_extra_headers_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::web_seed_entry *arg1 = (libtorrent::web_seed_entry *) 0 ;
  libtorrent::web_seed_entry::headers_t *arg2 = (libtorrent::web_seed_entry::headers_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__web_seed_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "web_seed_entry_extra_headers_set" "', argument " "1"" of type '" "libtorrent::web_seed_entry *""'"); 
  }
  arg1 = (libtorrent::web_seed_entry *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "web_seed_entry_extra_headers_set" "', argument " "2"" of type '" "libtorrent::web_seed_entry::headers_t *""'"); 
  }
  arg2 = (libtorrent::web_seed_entry::headers_t *)(argp2);
  if (arg1) (arg1)->extra_headers = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_web_seed_entry_extra_headers_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::web_seed_entry *arg1 = (libtorrent::web_seed_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::web_seed_entry::headers_t *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__web_seed_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "web_seed_entry_extra_headers_get" "', argument " "1"" of type '" "libtorrent::web_seed_entry *""'"); 
  }
  arg1 = (libtorrent::web_seed_entry *)(argp1);
  result = (libtorrent::web_seed_entry::headers_t *)& ((arg1)->extra_headers);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_t, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_web_seed_entry_type_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::web_seed_entry *arg1 = (libtorrent::web_seed_entry *) 0 ;
  std::uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__web_seed_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "web_seed_entry_type_set" "', argument " "1"" of type '" "libtorrent::web_seed_entry *""'"); 
  }
  arg1 = (libtorrent::web_seed_entry *)(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "web_seed_entry_type_set" "', argument " "2"" of type '" "std::uint8_t""'");
  } 
  arg2 = (std::uint8_t)(val2);
  if (arg1) (arg1)->type = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_web_seed_entry_type_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::web_seed_entry *arg1 = (libtorrent::web_seed_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__web_seed_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "web_seed_entry_type_get" "', argument " "1"" of type '" "libtorrent::web_seed_entry *""'"); 
  }
  arg1 = (libtorrent::web_seed_entry *)(argp1);
  result = (std::uint8_t) ((arg1)->type);
  jsresult = SWIG_From_signed_SS_char((signed char)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_web_seed_entry(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_web_seed_entry(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_web_seed_entry(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_web_seed_entry(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::web_seed_entry * arg1 = (libtorrent::web_seed_entry *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_torrent_info__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::torrent_info *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libtorrent::torrent_info *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_torrent_info__SWIG_0.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__torrent_info,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_torrent_info" "', argument " "1"" of type '" "libtorrent::torrent_info const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_torrent_info" "', argument " "1"" of type '" "libtorrent::torrent_info const &""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  result = (libtorrent::torrent_info *)new libtorrent::torrent_info((libtorrent::torrent_info const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__torrent_info, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_torrent_info__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::sha1_hash *arg1 = 0 ;
  int arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  libtorrent::torrent_info *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_torrent_info__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__sha1_hash,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_torrent_info" "', argument " "1"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_torrent_info" "', argument " "1"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  arg1 = (libtorrent::sha1_hash *)(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_torrent_info" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (libtorrent::torrent_info *)new libtorrent::torrent_info((libtorrent::sha1_hash const &)*arg1,arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__torrent_info, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_torrent_info__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::sha1_hash *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libtorrent::torrent_info *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_torrent_info__SWIG_2.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__sha1_hash,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_torrent_info" "', argument " "1"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_torrent_info" "', argument " "1"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  arg1 = (libtorrent::sha1_hash *)(argp1);
  result = (libtorrent::torrent_info *)new libtorrent::torrent_info((libtorrent::sha1_hash const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__torrent_info, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_torrent_info__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::bdecode_node *arg1 = 0 ;
  libtorrent::error_code *arg2 = 0 ;
  int arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  libtorrent::torrent_info *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_torrent_info__SWIG_3.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__bdecode_node,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_torrent_info" "', argument " "1"" of type '" "libtorrent::bdecode_node const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_torrent_info" "', argument " "1"" of type '" "libtorrent::bdecode_node const &""'"); 
  }
  arg1 = (libtorrent::bdecode_node *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_boost__system__error_code,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_torrent_info" "', argument " "2"" of type '" "libtorrent::error_code &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_torrent_info" "', argument " "2"" of type '" "libtorrent::error_code &""'"); 
  }
  arg2 = (libtorrent::error_code *)(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_torrent_info" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (libtorrent::torrent_info *)new libtorrent::torrent_info((libtorrent::bdecode_node const &)*arg1,*arg2,arg3);
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__torrent_info, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_torrent_info__SWIG_4(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::bdecode_node *arg1 = 0 ;
  libtorrent::error_code *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  libtorrent::torrent_info *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_torrent_info__SWIG_4.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__bdecode_node,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_torrent_info" "', argument " "1"" of type '" "libtorrent::bdecode_node const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_torrent_info" "', argument " "1"" of type '" "libtorrent::bdecode_node const &""'"); 
  }
  arg1 = (libtorrent::bdecode_node *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_boost__system__error_code,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_torrent_info" "', argument " "2"" of type '" "libtorrent::error_code &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_torrent_info" "', argument " "2"" of type '" "libtorrent::error_code &""'"); 
  }
  arg2 = (libtorrent::error_code *)(argp2);
  result = (libtorrent::torrent_info *)new libtorrent::torrent_info((libtorrent::bdecode_node const &)*arg1,*arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__torrent_info, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_torrent_info__SWIG_5(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::string *arg1 = 0 ;
  libtorrent::error_code *arg2 = 0 ;
  int arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  libtorrent::torrent_info *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_torrent_info__SWIG_5.");
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_torrent_info" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_torrent_info" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_boost__system__error_code,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_torrent_info" "', argument " "2"" of type '" "libtorrent::error_code &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_torrent_info" "', argument " "2"" of type '" "libtorrent::error_code &""'"); 
  }
  arg2 = (libtorrent::error_code *)(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_torrent_info" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (libtorrent::torrent_info *)new libtorrent::torrent_info((std::string const &)*arg1,*arg2,arg3);
  
  if (SWIG_IsNewObj(res1)) delete arg1;
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__torrent_info, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_torrent_info__SWIG_6(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::string *arg1 = 0 ;
  libtorrent::error_code *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  libtorrent::torrent_info *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_torrent_info__SWIG_6.");
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_torrent_info" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_torrent_info" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_boost__system__error_code,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_torrent_info" "', argument " "2"" of type '" "libtorrent::error_code &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_torrent_info" "', argument " "2"" of type '" "libtorrent::error_code &""'"); 
  }
  arg2 = (libtorrent::error_code *)(argp2);
  result = (libtorrent::torrent_info *)new libtorrent::torrent_info((std::string const &)*arg1,*arg2);
  
  if (SWIG_IsNewObj(res1)) delete arg1;
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__torrent_info, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_torrent_info(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_torrent_info(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_torrent_info(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_torrent_info(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::torrent_info * arg1 = (libtorrent::torrent_info *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_torrent_info_files(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::file_storage *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_info_files.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_files" "', argument " "1"" of type '" "libtorrent::torrent_info const *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  result = (libtorrent::file_storage *) &((libtorrent::torrent_info const *)arg1)->files();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_orig_files(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::file_storage *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_info_orig_files.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_orig_files" "', argument " "1"" of type '" "libtorrent::torrent_info const *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  result = (libtorrent::file_storage *) &((libtorrent::torrent_info const *)arg1)->orig_files();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_rename_file(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_info_rename_file.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_rename_file" "', argument " "1"" of type '" "libtorrent::torrent_info *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_info_rename_file" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "torrent_info_rename_file" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_info_rename_file" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->rename_file(arg2,(std::string const &)*arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_remap_files(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  libtorrent::file_storage *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_info_remap_files.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_remap_files" "', argument " "1"" of type '" "libtorrent::torrent_info *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__file_storage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_info_remap_files" "', argument " "2"" of type '" "libtorrent::file_storage const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_info_remap_files" "', argument " "2"" of type '" "libtorrent::file_storage const &""'"); 
  }
  arg2 = (libtorrent::file_storage *)(argp2);
  (arg1)->remap_files((libtorrent::file_storage const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_add_tracker__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_add_tracker" "', argument " "1"" of type '" "libtorrent::torrent_info *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_info_add_tracker" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_info_add_tracker" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "torrent_info_add_tracker" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->add_tracker((std::string const &)*arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_add_tracker__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_add_tracker" "', argument " "1"" of type '" "libtorrent::torrent_info *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_info_add_tracker" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_info_add_tracker" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->add_tracker((std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info__wrap_torrent_info_add_tracker(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_info_add_tracker__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_info_add_tracker__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_info_add_tracker__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_info_add_tracker__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function add_tracker.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_trackers(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::announce_entry > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_info_trackers.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_trackers" "', argument " "1"" of type '" "libtorrent::torrent_info const *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  result = (std::vector< libtorrent::announce_entry > *) &((libtorrent::torrent_info const *)arg1)->trackers();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_libtorrent__announce_entry_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_similar_torrents(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::sha1_hash > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_info_similar_torrents.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_similar_torrents" "', argument " "1"" of type '" "libtorrent::torrent_info const *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  result = ((libtorrent::torrent_info const *)arg1)->similar_torrents();
  jsresult = SWIG_NewPointerObj((new std::vector< libtorrent::sha1_hash >((const std::vector< libtorrent::sha1_hash >&)(result))), SWIGTYPE_p_std__vectorT_libtorrent__sha1_hash_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_collections(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_info_collections.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_collections" "', argument " "1"" of type '" "libtorrent::torrent_info const *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  result = ((libtorrent::torrent_info const *)arg1)->collections();
  jsresult = SWIG_NewPointerObj((new std::vector< std::string >((const std::vector< std::string >&)(result))), SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_add_url_seed__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  libtorrent::web_seed_entry::headers_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 ;
  int res4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_add_url_seed" "', argument " "1"" of type '" "libtorrent::torrent_info *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_info_add_url_seed" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_info_add_url_seed" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "torrent_info_add_url_seed" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_info_add_url_seed" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "torrent_info_add_url_seed" "', argument " "4"" of type '" "libtorrent::web_seed_entry::headers_t const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_info_add_url_seed" "', argument " "4"" of type '" "libtorrent::web_seed_entry::headers_t const &""'"); 
  }
  arg4 = (libtorrent::web_seed_entry::headers_t *)(argp4);
  (arg1)->add_url_seed((std::string const &)*arg2,(std::string const &)*arg3,(libtorrent::web_seed_entry::headers_t const &)*arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_add_url_seed__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_add_url_seed" "', argument " "1"" of type '" "libtorrent::torrent_info *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_info_add_url_seed" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_info_add_url_seed" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "torrent_info_add_url_seed" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_info_add_url_seed" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->add_url_seed((std::string const &)*arg2,(std::string const &)*arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_add_url_seed__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_add_url_seed" "', argument " "1"" of type '" "libtorrent::torrent_info *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_info_add_url_seed" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_info_add_url_seed" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->add_url_seed((std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info__wrap_torrent_info_add_url_seed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_info_add_url_seed__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_info_add_url_seed__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_info_add_url_seed__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_info_add_url_seed__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_info_add_url_seed__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_info_add_url_seed__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function add_url_seed.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_add_http_seed__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  libtorrent::web_seed_entry::headers_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 ;
  int res4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_add_http_seed" "', argument " "1"" of type '" "libtorrent::torrent_info *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_info_add_http_seed" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_info_add_http_seed" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "torrent_info_add_http_seed" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_info_add_http_seed" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "torrent_info_add_http_seed" "', argument " "4"" of type '" "libtorrent::web_seed_entry::headers_t const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_info_add_http_seed" "', argument " "4"" of type '" "libtorrent::web_seed_entry::headers_t const &""'"); 
  }
  arg4 = (libtorrent::web_seed_entry::headers_t *)(argp4);
  (arg1)->add_http_seed((std::string const &)*arg2,(std::string const &)*arg3,(libtorrent::web_seed_entry::headers_t const &)*arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_add_http_seed__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_add_http_seed" "', argument " "1"" of type '" "libtorrent::torrent_info *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_info_add_http_seed" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_info_add_http_seed" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "torrent_info_add_http_seed" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_info_add_http_seed" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->add_http_seed((std::string const &)*arg2,(std::string const &)*arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_add_http_seed__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_add_http_seed" "', argument " "1"" of type '" "libtorrent::torrent_info *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_info_add_http_seed" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_info_add_http_seed" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->add_http_seed((std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info__wrap_torrent_info_add_http_seed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_info_add_http_seed__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_info_add_http_seed__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_info_add_http_seed__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_info_add_http_seed__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_info_add_http_seed__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_info_add_http_seed__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function add_http_seed.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_web_seeds(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::web_seed_entry > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_info_web_seeds.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_web_seeds" "', argument " "1"" of type '" "libtorrent::torrent_info const *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  result = (std::vector< libtorrent::web_seed_entry > *) &((libtorrent::torrent_info const *)arg1)->web_seeds();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_libtorrent__web_seed_entry_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_set_web_seeds(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  std::vector< libtorrent::web_seed_entry > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_info_set_web_seeds.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_set_web_seeds" "', argument " "1"" of type '" "libtorrent::torrent_info *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_libtorrent__web_seed_entry_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_info_set_web_seeds" "', argument " "2"" of type '" "std::vector< libtorrent::web_seed_entry >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_info_set_web_seeds" "', argument " "2"" of type '" "std::vector< libtorrent::web_seed_entry >""'");
    } else {
      arg2 = *((std::vector< libtorrent::web_seed_entry > *)(argp2));
    }
  }
  (arg1)->set_web_seeds(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_total_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::int64_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_info_total_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_total_size" "', argument " "1"" of type '" "libtorrent::torrent_info const *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  result = (std::int64_t)((libtorrent::torrent_info const *)arg1)->total_size();
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_piece_length(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_info_piece_length.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_piece_length" "', argument " "1"" of type '" "libtorrent::torrent_info const *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  result = (int)((libtorrent::torrent_info const *)arg1)->piece_length();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_num_pieces(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_info_num_pieces.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_num_pieces" "', argument " "1"" of type '" "libtorrent::torrent_info const *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  result = (int)((libtorrent::torrent_info const *)arg1)->num_pieces();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_info_hash(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::sha1_hash *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_info_info_hash.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_info_hash" "', argument " "1"" of type '" "libtorrent::torrent_info const *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  result = (libtorrent::sha1_hash *) &((libtorrent::torrent_info const *)arg1)->info_hash();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_num_files(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_info_num_files.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_num_files" "', argument " "1"" of type '" "libtorrent::torrent_info const *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  result = (int)((libtorrent::torrent_info const *)arg1)->num_files();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_map_block(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  int arg2 ;
  std::int64_t arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long long val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  std::vector< libtorrent::file_slice > result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_info_map_block.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_map_block" "', argument " "1"" of type '" "libtorrent::torrent_info const *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_info_map_block" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_long_SS_long(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "torrent_info_map_block" "', argument " "3"" of type '" "std::int64_t""'");
  } 
  arg3 = (std::int64_t)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "torrent_info_map_block" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  result = ((libtorrent::torrent_info const *)arg1)->map_block(arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj((new std::vector< libtorrent::file_slice >((const std::vector< libtorrent::file_slice >&)(result))), SWIGTYPE_p_std__vectorT_libtorrent__file_slice_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_map_file(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  int arg2 ;
  std::int64_t arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long long val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  libtorrent::peer_request result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_info_map_file.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_map_file" "', argument " "1"" of type '" "libtorrent::torrent_info const *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_info_map_file" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_long_SS_long(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "torrent_info_map_file" "', argument " "3"" of type '" "std::int64_t""'");
  } 
  arg3 = (std::int64_t)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "torrent_info_map_file" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  result = ((libtorrent::torrent_info const *)arg1)->map_file(arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj((new libtorrent::peer_request((const libtorrent::peer_request&)(result))), SWIGTYPE_p_libtorrent__peer_request, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_is_valid(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_info_is_valid.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_is_valid" "', argument " "1"" of type '" "libtorrent::torrent_info const *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  result = (bool)((libtorrent::torrent_info const *)arg1)->is_valid();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_priv(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_info_priv.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_priv" "', argument " "1"" of type '" "libtorrent::torrent_info const *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  result = (bool)((libtorrent::torrent_info const *)arg1)->priv();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_is_i2p(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_info_is_i2p.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_is_i2p" "', argument " "1"" of type '" "libtorrent::torrent_info const *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  result = (bool)((libtorrent::torrent_info const *)arg1)->is_i2p();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_piece_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_info_piece_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_piece_size" "', argument " "1"" of type '" "libtorrent::torrent_info const *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_info_piece_size" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (int)((libtorrent::torrent_info const *)arg1)->piece_size(arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_hash_for_piece(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  libtorrent::sha1_hash result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_info_hash_for_piece.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_hash_for_piece" "', argument " "1"" of type '" "libtorrent::torrent_info const *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_info_hash_for_piece" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = ((libtorrent::torrent_info const *)arg1)->hash_for_piece(arg2);
  jsresult = SWIG_NewPointerObj((new libtorrent::sha1_hash((const libtorrent::sha1_hash&)(result))), SWIGTYPE_p_libtorrent__sha1_hash, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_is_loaded(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_info_is_loaded.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_is_loaded" "', argument " "1"" of type '" "libtorrent::torrent_info const *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  result = (bool)((libtorrent::torrent_info const *)arg1)->is_loaded();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_merkle_tree(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::sha1_hash > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_info_merkle_tree.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_merkle_tree" "', argument " "1"" of type '" "libtorrent::torrent_info const *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  result = (std::vector< libtorrent::sha1_hash > *) &((libtorrent::torrent_info const *)arg1)->merkle_tree();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_libtorrent__sha1_hash_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_set_merkle_tree(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  std::vector< libtorrent::sha1_hash > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_info_set_merkle_tree.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_set_merkle_tree" "', argument " "1"" of type '" "libtorrent::torrent_info *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_libtorrent__sha1_hash_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_info_set_merkle_tree" "', argument " "2"" of type '" "std::vector< libtorrent::sha1_hash > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_info_set_merkle_tree" "', argument " "2"" of type '" "std::vector< libtorrent::sha1_hash > &""'"); 
  }
  arg2 = (std::vector< libtorrent::sha1_hash > *)(argp2);
  (arg1)->set_merkle_tree(*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_info_name.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_name" "', argument " "1"" of type '" "libtorrent::torrent_info const *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  result = (std::string *) &((libtorrent::torrent_info const *)arg1)->name();
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_creation_date(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  time_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_info_creation_date.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_creation_date" "', argument " "1"" of type '" "libtorrent::torrent_info const *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  result = (time_t)((libtorrent::torrent_info const *)arg1)->creation_date();
  jsresult = SWIG_From_long((long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_creator(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_info_creator.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_creator" "', argument " "1"" of type '" "libtorrent::torrent_info const *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  result = (std::string *) &((libtorrent::torrent_info const *)arg1)->creator();
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_comment(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_info_comment.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_comment" "', argument " "1"" of type '" "libtorrent::torrent_info const *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  result = (std::string *) &((libtorrent::torrent_info const *)arg1)->comment();
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_nodes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::pair< std::string,int > > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_info_nodes.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_nodes" "', argument " "1"" of type '" "libtorrent::torrent_info const *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  result = (std::vector< std::pair< std::string,int > > *) &((libtorrent::torrent_info const *)arg1)->nodes();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_std__string_int_t_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_add_node(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  std::pair< std::string,int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_info_add_node.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_add_node" "', argument " "1"" of type '" "libtorrent::torrent_info *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__pairT_std__string_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_info_add_node" "', argument " "2"" of type '" "std::pair< std::string,int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_info_add_node" "', argument " "2"" of type '" "std::pair< std::string,int > const &""'"); 
  }
  arg2 = (std::pair< std::string,int > *)(argp2);
  (arg1)->add_node((std::pair< std::string,int > const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_info(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  libtorrent::bdecode_node result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_info_info.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_info" "', argument " "1"" of type '" "libtorrent::torrent_info const *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_info_info" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = ((libtorrent::torrent_info const *)arg1)->info((char const *)arg2);
  jsresult = SWIG_NewPointerObj((new libtorrent::bdecode_node((const libtorrent::bdecode_node&)(result))), SWIGTYPE_p_libtorrent__bdecode_node, SWIG_POINTER_OWN |  0 );
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_metadata_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_info_metadata_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_metadata_size" "', argument " "1"" of type '" "libtorrent::torrent_info const *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  result = (int)((libtorrent::torrent_info const *)arg1)->metadata_size();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_info_is_merkle_torrent(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_info_is_merkle_torrent.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_info_is_merkle_torrent" "', argument " "1"" of type '" "libtorrent::torrent_info const *""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  result = (bool)((libtorrent::torrent_info const *)arg1)->is_merkle_torrent();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_torrent_info__SWIG_7(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int64_t arg1 ;
  int arg2 ;
  libtorrent::error_code *arg3 = 0 ;
  int arg4 ;
  long long val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  libtorrent::torrent_info *result;
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_torrent_info__SWIG_7.");
  ecode1 = SWIG_AsVal_long_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_torrent_info" "', argument " "1"" of type '" "int64_t""'");
  } 
  arg1 = (int64_t)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_torrent_info" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_boost__system__error_code,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_torrent_info" "', argument " "3"" of type '" "libtorrent::error_code &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_torrent_info" "', argument " "3"" of type '" "libtorrent::error_code &""'"); 
  }
  arg3 = (libtorrent::error_code *)(argp3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_torrent_info" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  result = (libtorrent::torrent_info *)new_libtorrent_torrent_info__SWIG_7(arg1,arg2,*arg3,arg4);
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__torrent_info, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_torrent_info__SWIG_8(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int64_t arg1 ;
  int arg2 ;
  libtorrent::error_code *arg3 = 0 ;
  long long val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  libtorrent::torrent_info *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_torrent_info__SWIG_8.");
  ecode1 = SWIG_AsVal_long_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_torrent_info" "', argument " "1"" of type '" "int64_t""'");
  } 
  arg1 = (int64_t)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_torrent_info" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_boost__system__error_code,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_torrent_info" "', argument " "3"" of type '" "libtorrent::error_code &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_torrent_info" "', argument " "3"" of type '" "libtorrent::error_code &""'"); 
  }
  arg3 = (libtorrent::error_code *)(argp3);
  result = (libtorrent::torrent_info *)new_libtorrent_torrent_info__SWIG_7(arg1,arg2,*arg3);
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__torrent_info, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_torrent_info(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_torrent_info__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_torrent_info__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_torrent_info__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_torrent_info__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_torrent_info__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_torrent_info__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_torrent_info__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_torrent_info__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_torrent_info__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_torrent_info__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_torrent_info__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_torrent_info__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_torrent_info__SWIG_6(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_torrent_info__SWIG_6(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_torrent_info__SWIG_7(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_torrent_info__SWIG_7(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_torrent_info__SWIG_8(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_torrent_info__SWIG_8(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_torrent_info");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_block_info_none(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::block_info::none));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_block_info_requested(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::block_info::requested));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_block_info_writing(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::block_info::writing));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_block_info_finished(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::block_info::finished));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_block_info_peer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::block_info *arg1 = (libtorrent::block_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::tcp::endpoint result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_block_info_peer.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__block_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_info_peer" "', argument " "1"" of type '" "libtorrent::block_info const *""'"); 
  }
  arg1 = (libtorrent::block_info *)(argp1);
  result = ((libtorrent::block_info const *)arg1)->peer();
  jsresult = SWIG_NewPointerObj((new libtorrent::tcp::endpoint((const libtorrent::tcp::endpoint&)(result))), SWIGTYPE_p_libtorrent__tcp__endpoint, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_block_info_bytes_progress_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::block_info *arg1 = (libtorrent::block_info *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__block_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_info_bytes_progress_set" "', argument " "1"" of type '" "libtorrent::block_info *""'"); 
  }
  arg1 = (libtorrent::block_info *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_info_bytes_progress_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->bytes_progress = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_block_info_bytes_progress_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::block_info *arg1 = (libtorrent::block_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__block_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_info_bytes_progress_get" "', argument " "1"" of type '" "libtorrent::block_info *""'"); 
  }
  arg1 = (libtorrent::block_info *)(argp1);
  result = (unsigned int) ((arg1)->bytes_progress);
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_block_info_block_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::block_info *arg1 = (libtorrent::block_info *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__block_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_info_block_size_set" "', argument " "1"" of type '" "libtorrent::block_info *""'"); 
  }
  arg1 = (libtorrent::block_info *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_info_block_size_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->block_size = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_block_info_block_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::block_info *arg1 = (libtorrent::block_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__block_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_info_block_size_get" "', argument " "1"" of type '" "libtorrent::block_info *""'"); 
  }
  arg1 = (libtorrent::block_info *)(argp1);
  result = (unsigned int) ((arg1)->block_size);
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_block_info_state_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::block_info *arg1 = (libtorrent::block_info *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__block_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_info_state_set" "', argument " "1"" of type '" "libtorrent::block_info *""'"); 
  }
  arg1 = (libtorrent::block_info *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_info_state_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->state = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_block_info_state_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::block_info *arg1 = (libtorrent::block_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__block_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_info_state_get" "', argument " "1"" of type '" "libtorrent::block_info *""'"); 
  }
  arg1 = (libtorrent::block_info *)(argp1);
  result = (unsigned int) ((arg1)->state);
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_block_info_num_peers_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::block_info *arg1 = (libtorrent::block_info *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__block_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_info_num_peers_set" "', argument " "1"" of type '" "libtorrent::block_info *""'"); 
  }
  arg1 = (libtorrent::block_info *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_info_num_peers_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->num_peers = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_block_info_num_peers_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::block_info *arg1 = (libtorrent::block_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__block_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_info_num_peers_get" "', argument " "1"" of type '" "libtorrent::block_info *""'"); 
  }
  arg1 = (libtorrent::block_info *)(argp1);
  result = (unsigned int) ((arg1)->num_peers);
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_block_info(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::block_info *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_block_info.");
  result = (libtorrent::block_info *)new libtorrent::block_info();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__block_info, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_block_info(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_block_info(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_block_info(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_block_info(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::block_info * arg1 = (libtorrent::block_info *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap_partial_piece_info_piece_index_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::partial_piece_info *arg1 = (libtorrent::partial_piece_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__partial_piece_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "partial_piece_info_piece_index_set" "', argument " "1"" of type '" "libtorrent::partial_piece_info *""'"); 
  }
  arg1 = (libtorrent::partial_piece_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "partial_piece_info_piece_index_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->piece_index = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_partial_piece_info_piece_index_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::partial_piece_info *arg1 = (libtorrent::partial_piece_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__partial_piece_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "partial_piece_info_piece_index_get" "', argument " "1"" of type '" "libtorrent::partial_piece_info *""'"); 
  }
  arg1 = (libtorrent::partial_piece_info *)(argp1);
  result = (int) ((arg1)->piece_index);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_partial_piece_info_blocks_in_piece_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::partial_piece_info *arg1 = (libtorrent::partial_piece_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__partial_piece_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "partial_piece_info_blocks_in_piece_set" "', argument " "1"" of type '" "libtorrent::partial_piece_info *""'"); 
  }
  arg1 = (libtorrent::partial_piece_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "partial_piece_info_blocks_in_piece_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->blocks_in_piece = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_partial_piece_info_blocks_in_piece_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::partial_piece_info *arg1 = (libtorrent::partial_piece_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__partial_piece_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "partial_piece_info_blocks_in_piece_get" "', argument " "1"" of type '" "libtorrent::partial_piece_info *""'"); 
  }
  arg1 = (libtorrent::partial_piece_info *)(argp1);
  result = (int) ((arg1)->blocks_in_piece);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_partial_piece_info_finished_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::partial_piece_info *arg1 = (libtorrent::partial_piece_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__partial_piece_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "partial_piece_info_finished_set" "', argument " "1"" of type '" "libtorrent::partial_piece_info *""'"); 
  }
  arg1 = (libtorrent::partial_piece_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "partial_piece_info_finished_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->finished = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_partial_piece_info_finished_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::partial_piece_info *arg1 = (libtorrent::partial_piece_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__partial_piece_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "partial_piece_info_finished_get" "', argument " "1"" of type '" "libtorrent::partial_piece_info *""'"); 
  }
  arg1 = (libtorrent::partial_piece_info *)(argp1);
  result = (int) ((arg1)->finished);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_partial_piece_info_writing_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::partial_piece_info *arg1 = (libtorrent::partial_piece_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__partial_piece_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "partial_piece_info_writing_set" "', argument " "1"" of type '" "libtorrent::partial_piece_info *""'"); 
  }
  arg1 = (libtorrent::partial_piece_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "partial_piece_info_writing_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->writing = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_partial_piece_info_writing_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::partial_piece_info *arg1 = (libtorrent::partial_piece_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__partial_piece_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "partial_piece_info_writing_get" "', argument " "1"" of type '" "libtorrent::partial_piece_info *""'"); 
  }
  arg1 = (libtorrent::partial_piece_info *)(argp1);
  result = (int) ((arg1)->writing);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_partial_piece_info_requested_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::partial_piece_info *arg1 = (libtorrent::partial_piece_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__partial_piece_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "partial_piece_info_requested_set" "', argument " "1"" of type '" "libtorrent::partial_piece_info *""'"); 
  }
  arg1 = (libtorrent::partial_piece_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "partial_piece_info_requested_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->requested = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_partial_piece_info_requested_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::partial_piece_info *arg1 = (libtorrent::partial_piece_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__partial_piece_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "partial_piece_info_requested_get" "', argument " "1"" of type '" "libtorrent::partial_piece_info *""'"); 
  }
  arg1 = (libtorrent::partial_piece_info *)(argp1);
  result = (int) ((arg1)->requested);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_partial_piece_info_none(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::partial_piece_info::none));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_partial_piece_info_slow(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::partial_piece_info::slow));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_partial_piece_info_medium(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::partial_piece_info::medium));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_partial_piece_info_fast(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::partial_piece_info::fast));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_partial_piece_info_piece_state_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::partial_piece_info *arg1 = (libtorrent::partial_piece_info *) 0 ;
  libtorrent::partial_piece_info::state_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__partial_piece_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "partial_piece_info_piece_state_set" "', argument " "1"" of type '" "libtorrent::partial_piece_info *""'"); 
  }
  arg1 = (libtorrent::partial_piece_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "partial_piece_info_piece_state_set" "', argument " "2"" of type '" "libtorrent::partial_piece_info::state_t""'");
  } 
  arg2 = (libtorrent::partial_piece_info::state_t)(val2);
  if (arg1) (arg1)->piece_state = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_partial_piece_info_piece_state_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::partial_piece_info *arg1 = (libtorrent::partial_piece_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::partial_piece_info::state_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__partial_piece_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "partial_piece_info_piece_state_get" "', argument " "1"" of type '" "libtorrent::partial_piece_info *""'"); 
  }
  arg1 = (libtorrent::partial_piece_info *)(argp1);
  result = (libtorrent::partial_piece_info::state_t) ((arg1)->piece_state);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_partial_piece_info_get_blocks(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::partial_piece_info *arg1 = (libtorrent::partial_piece_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::block_info > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_partial_piece_info_get_blocks.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__partial_piece_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "partial_piece_info_get_blocks" "', argument " "1"" of type '" "libtorrent::partial_piece_info *""'"); 
  }
  arg1 = (libtorrent::partial_piece_info *)(argp1);
  result = libtorrent_partial_piece_info_get_blocks(arg1);
  jsresult = SWIG_NewPointerObj((new std::vector< libtorrent::block_info >((const std::vector< libtorrent::block_info >&)(result))), SWIGTYPE_p_std__vectorT_libtorrent__block_info_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_partial_piece_info(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::partial_piece_info *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_partial_piece_info.");
  result = (libtorrent::partial_piece_info *)new libtorrent::partial_piece_info();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__partial_piece_info, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_partial_piece_info(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_partial_piece_info(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_partial_piece_info(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_partial_piece_info(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::partial_piece_info * arg1 = (libtorrent::partial_piece_info *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_libtorrent_torrent_handle_overwrite_existing(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_handle::overwrite_existing));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_torrent_handle_read_piece(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_read_piece.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_read_piece" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_handle_read_piece" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ((libtorrent::torrent_handle const *)arg1)->read_piece(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_have_piece(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_have_piece.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_have_piece" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_handle_have_piece" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (bool)((libtorrent::torrent_handle const *)arg1)->have_piece(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_get_peer_info(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::vector< libtorrent::peer_info > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_get_peer_info.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_get_peer_info" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_libtorrent__peer_info_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_handle_get_peer_info" "', argument " "2"" of type '" "std::vector< libtorrent::peer_info > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_handle_get_peer_info" "', argument " "2"" of type '" "std::vector< libtorrent::peer_info > &""'"); 
  }
  arg2 = (std::vector< libtorrent::peer_info > *)(argp2);
  ((libtorrent::torrent_handle const *)arg1)->get_peer_info(*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_handle_query_distributed_copies(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_handle::query_distributed_copies));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_handle_query_accurate_download_counters(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_handle::query_accurate_download_counters));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_handle_query_last_seen_complete(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_handle::query_last_seen_complete));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_handle_query_pieces(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_handle::query_pieces));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_handle_query_verified_pieces(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_handle::query_verified_pieces));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_handle_query_torrent_file(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_handle::query_torrent_file));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_handle_query_name(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_handle::query_name));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_handle_query_save_path(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_handle::query_save_path));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_torrent_handle_status__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  libtorrent::torrent_status result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_status" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_handle_status" "', argument " "2"" of type '" "std::uint32_t""'");
  } 
  arg2 = (std::uint32_t)(val2);
  result = ((libtorrent::torrent_handle const *)arg1)->status(arg2);
  jsresult = SWIG_NewPointerObj((new libtorrent::torrent_status((const libtorrent::torrent_status&)(result))), SWIGTYPE_p_libtorrent__torrent_status, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_status__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::torrent_status result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_status" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  result = ((libtorrent::torrent_handle const *)arg1)->status();
  jsresult = SWIG_NewPointerObj((new libtorrent::torrent_status((const libtorrent::torrent_status&)(result))), SWIGTYPE_p_libtorrent__torrent_status, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle__wrap_torrent_handle_status(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_handle_status__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_handle_status__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_handle_status__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_handle_status__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function status.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_get_download_queue(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::vector< libtorrent::partial_piece_info > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_get_download_queue.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_get_download_queue" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_libtorrent__partial_piece_info_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_handle_get_download_queue" "', argument " "2"" of type '" "std::vector< libtorrent::partial_piece_info > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_handle_get_download_queue" "', argument " "2"" of type '" "std::vector< libtorrent::partial_piece_info > &""'"); 
  }
  arg2 = (std::vector< libtorrent::partial_piece_info > *)(argp2);
  ((libtorrent::torrent_handle const *)arg1)->get_download_queue(*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_handle_alert_when_available(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_handle::alert_when_available));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_torrent_handle_set_piece_deadline__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_set_piece_deadline" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_handle_set_piece_deadline" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "torrent_handle_set_piece_deadline" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "torrent_handle_set_piece_deadline" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ((libtorrent::torrent_handle const *)arg1)->set_piece_deadline(arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_set_piece_deadline__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_set_piece_deadline" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_handle_set_piece_deadline" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "torrent_handle_set_piece_deadline" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ((libtorrent::torrent_handle const *)arg1)->set_piece_deadline(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle__wrap_torrent_handle_set_piece_deadline(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_handle_set_piece_deadline__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_handle_set_piece_deadline__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_handle_set_piece_deadline__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_handle_set_piece_deadline__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set_piece_deadline.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_reset_piece_deadline(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_reset_piece_deadline.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_reset_piece_deadline" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_handle_reset_piece_deadline" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ((libtorrent::torrent_handle const *)arg1)->reset_piece_deadline(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_clear_piece_deadlines(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_clear_piece_deadlines.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_clear_piece_deadlines" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ((libtorrent::torrent_handle const *)arg1)->clear_piece_deadlines();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_handle_piece_granularity(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_handle::piece_granularity));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_torrent_handle_file_progress__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::vector< std::int64_t > *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_file_progress" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_long_long_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_handle_file_progress" "', argument " "2"" of type '" "std::vector< std::int64_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_handle_file_progress" "', argument " "2"" of type '" "std::vector< std::int64_t > &""'"); 
  }
  arg2 = (std::vector< std::int64_t > *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "torrent_handle_file_progress" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ((libtorrent::torrent_handle const *)arg1)->file_progress(*arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_file_progress__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::vector< std::int64_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_file_progress" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_long_long_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_handle_file_progress" "', argument " "2"" of type '" "std::vector< std::int64_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_handle_file_progress" "', argument " "2"" of type '" "std::vector< std::int64_t > &""'"); 
  }
  arg2 = (std::vector< std::int64_t > *)(argp2);
  ((libtorrent::torrent_handle const *)arg1)->file_progress(*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle__wrap_torrent_handle_file_progress(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_handle_file_progress__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_handle_file_progress__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_handle_file_progress__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_handle_file_progress__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function file_progress.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_clear_error(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_clear_error.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_clear_error" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ((libtorrent::torrent_handle const *)arg1)->clear_error();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_trackers(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::announce_entry > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_trackers.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_trackers" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  result = ((libtorrent::torrent_handle const *)arg1)->trackers();
  jsresult = SWIG_NewPointerObj((new std::vector< libtorrent::announce_entry >((const std::vector< libtorrent::announce_entry >&)(result))), SWIGTYPE_p_std__vectorT_libtorrent__announce_entry_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_replace_trackers(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::vector< libtorrent::announce_entry > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_replace_trackers.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_replace_trackers" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_libtorrent__announce_entry_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_handle_replace_trackers" "', argument " "2"" of type '" "std::vector< libtorrent::announce_entry > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_handle_replace_trackers" "', argument " "2"" of type '" "std::vector< libtorrent::announce_entry > const &""'"); 
  }
  arg2 = (std::vector< libtorrent::announce_entry > *)(argp2);
  ((libtorrent::torrent_handle const *)arg1)->replace_trackers((std::vector< libtorrent::announce_entry > const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_add_tracker(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  libtorrent::announce_entry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_add_tracker.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_add_tracker" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__announce_entry,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_handle_add_tracker" "', argument " "2"" of type '" "libtorrent::announce_entry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_handle_add_tracker" "', argument " "2"" of type '" "libtorrent::announce_entry const &""'"); 
  }
  arg2 = (libtorrent::announce_entry *)(argp2);
  ((libtorrent::torrent_handle const *)arg1)->add_tracker((libtorrent::announce_entry const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_add_url_seed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_add_url_seed.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_add_url_seed" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_handle_add_url_seed" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_handle_add_url_seed" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ((libtorrent::torrent_handle const *)arg1)->add_url_seed((std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_remove_url_seed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_remove_url_seed.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_remove_url_seed" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_handle_remove_url_seed" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_handle_remove_url_seed" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ((libtorrent::torrent_handle const *)arg1)->remove_url_seed((std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_add_http_seed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_add_http_seed.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_add_http_seed" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_handle_add_http_seed" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_handle_add_http_seed" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ((libtorrent::torrent_handle const *)arg1)->add_http_seed((std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_remove_http_seed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_remove_http_seed.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_remove_http_seed" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_handle_remove_http_seed" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_handle_remove_http_seed" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ((libtorrent::torrent_handle const *)arg1)->remove_http_seed((std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_is_valid(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_is_valid.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_is_valid" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  result = (bool)((libtorrent::torrent_handle const *)arg1)->is_valid();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_handle_graceful_pause(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_handle::graceful_pause));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_torrent_handle_pause__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_pause" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_handle_pause" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ((libtorrent::torrent_handle const *)arg1)->pause(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_pause__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_pause" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ((libtorrent::torrent_handle const *)arg1)->pause();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle__wrap_torrent_handle_pause(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_handle_pause__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_handle_pause__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_handle_pause__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_handle_pause__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function pause.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_resume(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_resume.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_resume" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ((libtorrent::torrent_handle const *)arg1)->resume();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_stop_when_ready(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_stop_when_ready.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_stop_when_ready" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_handle_stop_when_ready" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  ((libtorrent::torrent_handle const *)arg1)->stop_when_ready(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_set_upload_mode(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_set_upload_mode.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_set_upload_mode" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_handle_set_upload_mode" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  ((libtorrent::torrent_handle const *)arg1)->set_upload_mode(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_set_share_mode(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_set_share_mode.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_set_share_mode" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_handle_set_share_mode" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  ((libtorrent::torrent_handle const *)arg1)->set_share_mode(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_flush_cache(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_flush_cache.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_flush_cache" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ((libtorrent::torrent_handle const *)arg1)->flush_cache();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_apply_ip_filter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_apply_ip_filter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_apply_ip_filter" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_handle_apply_ip_filter" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  ((libtorrent::torrent_handle const *)arg1)->apply_ip_filter(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_force_recheck(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_force_recheck.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_force_recheck" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ((libtorrent::torrent_handle const *)arg1)->force_recheck();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_handle_flush_disk_cache(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_handle::flush_disk_cache));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_handle_save_info_dict(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_handle::save_info_dict));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_handle_only_if_modified(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_handle::only_if_modified));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_torrent_handle_save_resume_data__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_save_resume_data" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_handle_save_resume_data" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ((libtorrent::torrent_handle const *)arg1)->save_resume_data(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_save_resume_data__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_save_resume_data" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ((libtorrent::torrent_handle const *)arg1)->save_resume_data();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle__wrap_torrent_handle_save_resume_data(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_handle_save_resume_data__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_handle_save_resume_data__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_handle_save_resume_data__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_handle_save_resume_data__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function save_resume_data.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_need_save_resume_data(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_need_save_resume_data.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_need_save_resume_data" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  result = (bool)((libtorrent::torrent_handle const *)arg1)->need_save_resume_data();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_auto_managed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_auto_managed.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_auto_managed" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_handle_auto_managed" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  ((libtorrent::torrent_handle const *)arg1)->auto_managed(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_queue_position(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_queue_position.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_queue_position" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  result = (int)((libtorrent::torrent_handle const *)arg1)->queue_position();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_queue_position_up(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_queue_position_up.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_queue_position_up" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ((libtorrent::torrent_handle const *)arg1)->queue_position_up();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_queue_position_down(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_queue_position_down.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_queue_position_down" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ((libtorrent::torrent_handle const *)arg1)->queue_position_down();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_queue_position_top(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_queue_position_top.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_queue_position_top" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ((libtorrent::torrent_handle const *)arg1)->queue_position_top();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_queue_position_bottom(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_queue_position_bottom.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_queue_position_bottom" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ((libtorrent::torrent_handle const *)arg1)->queue_position_bottom();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_piece_availability(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::vector< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_piece_availability.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_piece_availability" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_handle_piece_availability" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_handle_piece_availability" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  arg2 = (std::vector< int > *)(argp2);
  ((libtorrent::torrent_handle const *)arg1)->piece_availability(*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_piece_priority__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_piece_priority" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_handle_piece_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "torrent_handle_piece_priority" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ((libtorrent::torrent_handle const *)arg1)->piece_priority(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_piece_priority__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_piece_priority" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_handle_piece_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (int)((libtorrent::torrent_handle const *)arg1)->piece_priority(arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle__wrap_torrent_handle_piece_priority(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_handle_piece_priority__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_handle_piece_priority__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_handle_piece_priority__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_handle_piece_priority__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function piece_priority.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_prioritize_pieces__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::vector< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_prioritize_pieces" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_handle_prioritize_pieces" "', argument " "2"" of type '" "std::vector< int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_handle_prioritize_pieces" "', argument " "2"" of type '" "std::vector< int > const &""'"); 
  }
  arg2 = (std::vector< int > *)(argp2);
  ((libtorrent::torrent_handle const *)arg1)->prioritize_pieces((std::vector< int > const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_prioritize_pieces__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::vector< std::pair< int,int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_prioritize_pieces" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_handle_prioritize_pieces" "', argument " "2"" of type '" "std::vector< std::pair< int,int > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_handle_prioritize_pieces" "', argument " "2"" of type '" "std::vector< std::pair< int,int > > const &""'"); 
  }
  arg2 = (std::vector< std::pair< int,int > > *)(argp2);
  ((libtorrent::torrent_handle const *)arg1)->prioritize_pieces((std::vector< std::pair< int,int > > const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle__wrap_torrent_handle_prioritize_pieces(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_handle_prioritize_pieces__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_handle_prioritize_pieces__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_handle_prioritize_pieces__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_handle_prioritize_pieces__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function prioritize_pieces.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_piece_priorities(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_piece_priorities.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_piece_priorities" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  result = ((libtorrent::torrent_handle const *)arg1)->piece_priorities();
  jsresult = SWIG_NewPointerObj((new std::vector< int >((const std::vector< int >&)(result))), SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_file_priority__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_file_priority" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_handle_file_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "torrent_handle_file_priority" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ((libtorrent::torrent_handle const *)arg1)->file_priority(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_file_priority__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_file_priority" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_handle_file_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (int)((libtorrent::torrent_handle const *)arg1)->file_priority(arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle__wrap_torrent_handle_file_priority(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_handle_file_priority__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_handle_file_priority__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_handle_file_priority__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_handle_file_priority__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function file_priority.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_prioritize_files(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::vector< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_prioritize_files.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_prioritize_files" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_handle_prioritize_files" "', argument " "2"" of type '" "std::vector< int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_handle_prioritize_files" "', argument " "2"" of type '" "std::vector< int > const &""'"); 
  }
  arg2 = (std::vector< int > *)(argp2);
  ((libtorrent::torrent_handle const *)arg1)->prioritize_files((std::vector< int > const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_file_priorities(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_file_priorities.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_file_priorities" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  result = ((libtorrent::torrent_handle const *)arg1)->file_priorities();
  jsresult = SWIG_NewPointerObj((new std::vector< int >((const std::vector< int >&)(result))), SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_force_reannounce__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_force_reannounce" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_handle_force_reannounce" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "torrent_handle_force_reannounce" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ((libtorrent::torrent_handle const *)arg1)->force_reannounce(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_force_reannounce__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_force_reannounce" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_handle_force_reannounce" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ((libtorrent::torrent_handle const *)arg1)->force_reannounce(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_force_reannounce__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_force_reannounce" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ((libtorrent::torrent_handle const *)arg1)->force_reannounce();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle__wrap_torrent_handle_force_reannounce(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_handle_force_reannounce__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_handle_force_reannounce__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_handle_force_reannounce__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_handle_force_reannounce__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_handle_force_reannounce__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_handle_force_reannounce__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function force_reannounce.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_force_dht_announce(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_force_dht_announce.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_force_dht_announce" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ((libtorrent::torrent_handle const *)arg1)->force_dht_announce();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_scrape_tracker__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_scrape_tracker" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_handle_scrape_tracker" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ((libtorrent::torrent_handle const *)arg1)->scrape_tracker(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_scrape_tracker__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_scrape_tracker" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ((libtorrent::torrent_handle const *)arg1)->scrape_tracker();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle__wrap_torrent_handle_scrape_tracker(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_handle_scrape_tracker__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_handle_scrape_tracker__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_handle_scrape_tracker__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_handle_scrape_tracker__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function scrape_tracker.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_set_upload_limit(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_set_upload_limit.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_set_upload_limit" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_handle_set_upload_limit" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ((libtorrent::torrent_handle const *)arg1)->set_upload_limit(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_upload_limit(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_upload_limit.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_upload_limit" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  result = (int)((libtorrent::torrent_handle const *)arg1)->upload_limit();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_set_download_limit(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_set_download_limit.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_set_download_limit" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_handle_set_download_limit" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ((libtorrent::torrent_handle const *)arg1)->set_download_limit(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_download_limit(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_download_limit.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_download_limit" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  result = (int)((libtorrent::torrent_handle const *)arg1)->download_limit();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_set_pinned(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_set_pinned.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_set_pinned" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_handle_set_pinned" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  ((libtorrent::torrent_handle const *)arg1)->set_pinned(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_set_sequential_download(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_set_sequential_download.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_set_sequential_download" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_handle_set_sequential_download" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  ((libtorrent::torrent_handle const *)arg1)->set_sequential_download(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_connect_peer__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  libtorrent::tcp::endpoint *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_connect_peer" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__tcp__endpoint,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_handle_connect_peer" "', argument " "2"" of type '" "libtorrent::tcp::endpoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_handle_connect_peer" "', argument " "2"" of type '" "libtorrent::tcp::endpoint const &""'"); 
  }
  arg2 = (libtorrent::tcp::endpoint *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "torrent_handle_connect_peer" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "torrent_handle_connect_peer" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ((libtorrent::torrent_handle const *)arg1)->connect_peer((libtorrent::tcp::endpoint const &)*arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_connect_peer__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  libtorrent::tcp::endpoint *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_connect_peer" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__tcp__endpoint,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_handle_connect_peer" "', argument " "2"" of type '" "libtorrent::tcp::endpoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_handle_connect_peer" "', argument " "2"" of type '" "libtorrent::tcp::endpoint const &""'"); 
  }
  arg2 = (libtorrent::tcp::endpoint *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "torrent_handle_connect_peer" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ((libtorrent::torrent_handle const *)arg1)->connect_peer((libtorrent::tcp::endpoint const &)*arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_connect_peer__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  libtorrent::tcp::endpoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_connect_peer" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__tcp__endpoint,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_handle_connect_peer" "', argument " "2"" of type '" "libtorrent::tcp::endpoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_handle_connect_peer" "', argument " "2"" of type '" "libtorrent::tcp::endpoint const &""'"); 
  }
  arg2 = (libtorrent::tcp::endpoint *)(argp2);
  ((libtorrent::torrent_handle const *)arg1)->connect_peer((libtorrent::tcp::endpoint const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle__wrap_torrent_handle_connect_peer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_handle_connect_peer__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_handle_connect_peer__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_handle_connect_peer__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_handle_connect_peer__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_handle_connect_peer__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_handle_connect_peer__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function connect_peer.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_set_max_uploads(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_set_max_uploads.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_set_max_uploads" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_handle_set_max_uploads" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ((libtorrent::torrent_handle const *)arg1)->set_max_uploads(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_max_uploads(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_max_uploads.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_max_uploads" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  result = (int)((libtorrent::torrent_handle const *)arg1)->max_uploads();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_set_max_connections(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_set_max_connections.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_set_max_connections" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_handle_set_max_connections" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ((libtorrent::torrent_handle const *)arg1)->set_max_connections(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_max_connections(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_max_connections.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_max_connections" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  result = (int)((libtorrent::torrent_handle const *)arg1)->max_connections();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_move_storage__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_move_storage" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_handle_move_storage" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_handle_move_storage" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "torrent_handle_move_storage" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ((libtorrent::torrent_handle const *)arg1)->move_storage((std::string const &)*arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_move_storage__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_move_storage" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_handle_move_storage" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_handle_move_storage" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ((libtorrent::torrent_handle const *)arg1)->move_storage((std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle__wrap_torrent_handle_move_storage(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_handle_move_storage__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_handle_move_storage__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_handle_move_storage__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_handle_move_storage__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function move_storage.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_rename_file(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_rename_file.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_rename_file" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_handle_rename_file" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "torrent_handle_rename_file" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_handle_rename_file" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ((libtorrent::torrent_handle const *)arg1)->rename_file(arg2,(std::string const &)*arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_super_seeding(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_super_seeding.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_super_seeding" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_handle_super_seeding" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  ((libtorrent::torrent_handle const *)arg1)->super_seeding(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_info_hash(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::sha1_hash result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_info_hash.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_info_hash" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  result = ((libtorrent::torrent_handle const *)arg1)->info_hash();
  jsresult = SWIG_NewPointerObj((new libtorrent::sha1_hash((const libtorrent::sha1_hash&)(result))), SWIGTYPE_p_libtorrent__sha1_hash, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_op_eq(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  libtorrent::torrent_handle *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_op_eq.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_op_eq" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__torrent_handle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_handle_op_eq" "', argument " "2"" of type '" "libtorrent::torrent_handle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_handle_op_eq" "', argument " "2"" of type '" "libtorrent::torrent_handle const &""'"); 
  }
  arg2 = (libtorrent::torrent_handle *)(argp2);
  result = (bool)((libtorrent::torrent_handle const *)arg1)->operator ==((libtorrent::torrent_handle const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_op_ne(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  libtorrent::torrent_handle *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_op_ne.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_op_ne" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__torrent_handle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_handle_op_ne" "', argument " "2"" of type '" "libtorrent::torrent_handle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_handle_op_ne" "', argument " "2"" of type '" "libtorrent::torrent_handle const &""'"); 
  }
  arg2 = (libtorrent::torrent_handle *)(argp2);
  result = (bool)((libtorrent::torrent_handle const *)arg1)->operator !=((libtorrent::torrent_handle const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_op_lt(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  libtorrent::torrent_handle *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_op_lt.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_op_lt" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__torrent_handle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_handle_op_lt" "', argument " "2"" of type '" "libtorrent::torrent_handle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_handle_op_lt" "', argument " "2"" of type '" "libtorrent::torrent_handle const &""'"); 
  }
  arg2 = (libtorrent::torrent_handle *)(argp2);
  result = (bool)((libtorrent::torrent_handle const *)arg1)->operator <((libtorrent::torrent_handle const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_id(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::uint32_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_id.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_id" "', argument " "1"" of type '" "libtorrent::torrent_handle const *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  result = (std::uint32_t)((libtorrent::torrent_handle const *)arg1)->id();
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_add_piece_bytes__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  std::vector< int8_t > *arg3 = 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_add_piece_bytes" "', argument " "1"" of type '" "libtorrent::torrent_handle *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_handle_add_piece_bytes" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_std__vectorT_signed_char_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "torrent_handle_add_piece_bytes" "', argument " "3"" of type '" "std::vector< int8_t > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_handle_add_piece_bytes" "', argument " "3"" of type '" "std::vector< int8_t > const &""'"); 
  }
  arg3 = (std::vector< int8_t > *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "torrent_handle_add_piece_bytes" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  libtorrent_torrent_handle_add_piece_bytes__SWIG_0(arg1,arg2,(std::vector< signed char > const &)*arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_add_piece_bytes__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  std::vector< int8_t > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_add_piece_bytes" "', argument " "1"" of type '" "libtorrent::torrent_handle *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_handle_add_piece_bytes" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_std__vectorT_signed_char_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "torrent_handle_add_piece_bytes" "', argument " "3"" of type '" "std::vector< int8_t > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_handle_add_piece_bytes" "', argument " "3"" of type '" "std::vector< int8_t > const &""'"); 
  }
  arg3 = (std::vector< int8_t > *)(argp3);
  libtorrent_torrent_handle_add_piece_bytes__SWIG_0(arg1,arg2,(std::vector< signed char > const &)*arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle__wrap_torrent_handle_add_piece_bytes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_handle_add_piece_bytes__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_handle_add_piece_bytes__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_torrent_handle_add_piece_bytes__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_torrent_handle_add_piece_bytes__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function add_piece_bytes.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_handle_torrent_file_ptr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::torrent_info *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_handle_torrent_file_ptr.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_handle_torrent_file_ptr" "', argument " "1"" of type '" "libtorrent::torrent_handle *""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  result = (libtorrent::torrent_info *)libtorrent_torrent_handle_torrent_file_ptr(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_torrent_handle(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_torrent_handle(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_torrent_handle(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_torrent_handle(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::torrent_handle * arg1 = (libtorrent::torrent_handle *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_torrent_handle(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class torrent_handle can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_add_torrent_params_flag_seed_mode(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::add_torrent_params::flag_seed_mode));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_add_torrent_params_flag_upload_mode(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::add_torrent_params::flag_upload_mode));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_add_torrent_params_flag_share_mode(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::add_torrent_params::flag_share_mode));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_add_torrent_params_flag_apply_ip_filter(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::add_torrent_params::flag_apply_ip_filter));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_add_torrent_params_flag_paused(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::add_torrent_params::flag_paused));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_add_torrent_params_flag_auto_managed(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::add_torrent_params::flag_auto_managed));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_add_torrent_params_flag_duplicate_is_error(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::add_torrent_params::flag_duplicate_is_error));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_add_torrent_params_flag_update_subscribe(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::add_torrent_params::flag_update_subscribe));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_add_torrent_params_flag_super_seeding(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::add_torrent_params::flag_super_seeding));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_add_torrent_params_flag_sequential_download(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::add_torrent_params::flag_sequential_download));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_add_torrent_params_flag_pinned(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::add_torrent_params::flag_pinned));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_add_torrent_params_flag_stop_when_ready(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::add_torrent_params::flag_stop_when_ready));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_add_torrent_params_flag_override_trackers(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::add_torrent_params::flag_override_trackers));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_add_torrent_params_flag_override_web_seeds(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::add_torrent_params::flag_override_web_seeds));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_add_torrent_params_flag_need_save_resume(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::add_torrent_params::flag_need_save_resume));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_add_torrent_params_default_flags(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::add_torrent_params::default_flags));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_version_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_version_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "add_torrent_params_version_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->version = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_version_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_version_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (int) ((arg1)->version);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_trackers_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_trackers_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "add_torrent_params_trackers_set" "', argument " "2"" of type '" "std::vector< std::string > *""'"); 
  }
  arg2 = (std::vector< std::string > *)(argp2);
  if (arg1) (arg1)->trackers = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_trackers_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_trackers_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (std::vector< std::string > *)& ((arg1)->trackers);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_tracker_tiers_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::vector< int > *arg2 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_tracker_tiers_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "add_torrent_params_tracker_tiers_set" "', argument " "2"" of type '" "std::vector< int > *""'"); 
  }
  arg2 = (std::vector< int > *)(argp2);
  if (arg1) (arg1)->tracker_tiers = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_tracker_tiers_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_tracker_tiers_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (std::vector< int > *)& ((arg1)->tracker_tiers);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_dht_nodes_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::vector< std::pair< std::string,int > > *arg2 = (std::vector< std::pair< std::string,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_dht_nodes_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_std__vectorT_std__pairT_std__string_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "add_torrent_params_dht_nodes_set" "', argument " "2"" of type '" "std::vector< std::pair< std::string,int > > *""'"); 
  }
  arg2 = (std::vector< std::pair< std::string,int > > *)(argp2);
  if (arg1) (arg1)->dht_nodes = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_dht_nodes_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::pair< std::string,int > > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_dht_nodes_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (std::vector< std::pair< std::string,int > > *)& ((arg1)->dht_nodes);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_std__string_int_t_t, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_name_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_name_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(value, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "add_torrent_params_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "add_torrent_params_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->name = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_name_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_name_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (std::string *) & ((arg1)->name);
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_save_path_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_save_path_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(value, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "add_torrent_params_save_path_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "add_torrent_params_save_path_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->save_path = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_save_path_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_save_path_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (std::string *) & ((arg1)->save_path);
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_storage_mode_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  libtorrent::storage_mode_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_storage_mode_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "add_torrent_params_storage_mode_set" "', argument " "2"" of type '" "libtorrent::storage_mode_t""'");
  } 
  arg2 = (libtorrent::storage_mode_t)(val2);
  if (arg1) (arg1)->storage_mode = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_storage_mode_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::storage_mode_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_storage_mode_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (libtorrent::storage_mode_t) ((arg1)->storage_mode);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_file_priorities_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::vector< std::uint8_t > *arg2 = (std::vector< std::uint8_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_file_priorities_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_std__vectorT_signed_char_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "add_torrent_params_file_priorities_set" "', argument " "2"" of type '" "std::vector< std::uint8_t > *""'"); 
  }
  arg2 = (std::vector< std::uint8_t > *)(argp2);
  if (arg1) (arg1)->file_priorities = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_file_priorities_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::uint8_t > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_file_priorities_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (std::vector< std::uint8_t > *)& ((arg1)->file_priorities);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_signed_char_t, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_trackerid_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_trackerid_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(value, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "add_torrent_params_trackerid_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "add_torrent_params_trackerid_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->trackerid = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_trackerid_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_trackerid_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (std::string *) & ((arg1)->trackerid);
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_url_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_url_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(value, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "add_torrent_params_url_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "add_torrent_params_url_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->url = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_url_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_url_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (std::string *) & ((arg1)->url);
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_flags_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_flags_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "add_torrent_params_flags_set" "', argument " "2"" of type '" "std::uint64_t""'");
  } 
  arg2 = (std::uint64_t)(val2);
  if (arg1) (arg1)->flags = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_flags_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::uint64_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_flags_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (std::uint64_t) ((arg1)->flags);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_info_hash_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  libtorrent::sha1_hash *arg2 = (libtorrent::sha1_hash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_info_hash_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "add_torrent_params_info_hash_set" "', argument " "2"" of type '" "libtorrent::sha1_hash *""'"); 
  }
  arg2 = (libtorrent::sha1_hash *)(argp2);
  if (arg1) (arg1)->info_hash = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_info_hash_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::sha1_hash *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_info_hash_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (libtorrent::sha1_hash *)& ((arg1)->info_hash);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_max_uploads_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_max_uploads_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "add_torrent_params_max_uploads_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->max_uploads = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_max_uploads_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_max_uploads_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (int) ((arg1)->max_uploads);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_max_connections_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_max_connections_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "add_torrent_params_max_connections_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->max_connections = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_max_connections_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_max_connections_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (int) ((arg1)->max_connections);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_upload_limit_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_upload_limit_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "add_torrent_params_upload_limit_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->upload_limit = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_upload_limit_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_upload_limit_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (int) ((arg1)->upload_limit);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_download_limit_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_download_limit_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "add_torrent_params_download_limit_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->download_limit = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_download_limit_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_download_limit_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (int) ((arg1)->download_limit);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_total_uploaded_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_total_uploaded_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "add_torrent_params_total_uploaded_set" "', argument " "2"" of type '" "std::int64_t""'");
  } 
  arg2 = (std::int64_t)(val2);
  if (arg1) (arg1)->total_uploaded = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_total_uploaded_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::int64_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_total_uploaded_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (std::int64_t) ((arg1)->total_uploaded);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_total_downloaded_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_total_downloaded_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "add_torrent_params_total_downloaded_set" "', argument " "2"" of type '" "std::int64_t""'");
  } 
  arg2 = (std::int64_t)(val2);
  if (arg1) (arg1)->total_downloaded = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_total_downloaded_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::int64_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_total_downloaded_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (std::int64_t) ((arg1)->total_downloaded);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_active_time_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_active_time_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "add_torrent_params_active_time_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->active_time = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_active_time_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_active_time_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (int) ((arg1)->active_time);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_finished_time_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_finished_time_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "add_torrent_params_finished_time_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->finished_time = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_finished_time_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_finished_time_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (int) ((arg1)->finished_time);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_seeding_time_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_seeding_time_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "add_torrent_params_seeding_time_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->seeding_time = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_seeding_time_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_seeding_time_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (int) ((arg1)->seeding_time);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_added_time_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  time_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_added_time_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  ecode2 = SWIG_AsVal_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "add_torrent_params_added_time_set" "', argument " "2"" of type '" "time_t""'");
  } 
  arg2 = (time_t)(val2);
  if (arg1) (arg1)->added_time = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_added_time_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  time_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_added_time_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (time_t) ((arg1)->added_time);
  jsresult = SWIG_From_long((long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_completed_time_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  time_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_completed_time_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  ecode2 = SWIG_AsVal_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "add_torrent_params_completed_time_set" "', argument " "2"" of type '" "time_t""'");
  } 
  arg2 = (time_t)(val2);
  if (arg1) (arg1)->completed_time = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_completed_time_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  time_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_completed_time_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (time_t) ((arg1)->completed_time);
  jsresult = SWIG_From_long((long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_last_seen_complete_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  time_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_last_seen_complete_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  ecode2 = SWIG_AsVal_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "add_torrent_params_last_seen_complete_set" "', argument " "2"" of type '" "time_t""'");
  } 
  arg2 = (time_t)(val2);
  if (arg1) (arg1)->last_seen_complete = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_last_seen_complete_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  time_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_last_seen_complete_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (time_t) ((arg1)->last_seen_complete);
  jsresult = SWIG_From_long((long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_num_complete_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_num_complete_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "add_torrent_params_num_complete_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->num_complete = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_num_complete_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_num_complete_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (int) ((arg1)->num_complete);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_num_incomplete_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_num_incomplete_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "add_torrent_params_num_incomplete_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->num_incomplete = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_num_incomplete_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_num_incomplete_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (int) ((arg1)->num_incomplete);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_num_downloaded_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_num_downloaded_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "add_torrent_params_num_downloaded_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->num_downloaded = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_num_downloaded_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_num_downloaded_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (int) ((arg1)->num_downloaded);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_http_seeds_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_http_seeds_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "add_torrent_params_http_seeds_set" "', argument " "2"" of type '" "std::vector< std::string > *""'"); 
  }
  arg2 = (std::vector< std::string > *)(argp2);
  if (arg1) (arg1)->http_seeds = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_http_seeds_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_http_seeds_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (std::vector< std::string > *)& ((arg1)->http_seeds);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_url_seeds_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_url_seeds_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "add_torrent_params_url_seeds_set" "', argument " "2"" of type '" "std::vector< std::string > *""'"); 
  }
  arg2 = (std::vector< std::string > *)(argp2);
  if (arg1) (arg1)->url_seeds = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_url_seeds_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_url_seeds_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (std::vector< std::string > *)& ((arg1)->url_seeds);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_peers_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::vector< libtorrent::tcp::endpoint > *arg2 = (std::vector< libtorrent::tcp::endpoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_peers_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_std__vectorT_libtorrent__tcp__endpoint_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "add_torrent_params_peers_set" "', argument " "2"" of type '" "std::vector< libtorrent::tcp::endpoint > *""'"); 
  }
  arg2 = (std::vector< libtorrent::tcp::endpoint > *)(argp2);
  if (arg1) (arg1)->peers = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_peers_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::tcp::endpoint > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_peers_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (std::vector< libtorrent::tcp::endpoint > *)& ((arg1)->peers);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_libtorrent__tcp__endpoint_t, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_banned_peers_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::vector< libtorrent::tcp::endpoint > *arg2 = (std::vector< libtorrent::tcp::endpoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_banned_peers_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_std__vectorT_libtorrent__tcp__endpoint_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "add_torrent_params_banned_peers_set" "', argument " "2"" of type '" "std::vector< libtorrent::tcp::endpoint > *""'"); 
  }
  arg2 = (std::vector< libtorrent::tcp::endpoint > *)(argp2);
  if (arg1) (arg1)->banned_peers = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_banned_peers_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::tcp::endpoint > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_banned_peers_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (std::vector< libtorrent::tcp::endpoint > *)& ((arg1)->banned_peers);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_libtorrent__tcp__endpoint_t, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_unfinished_pieces_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::map< int,libtorrent::bitfield > *arg2 = (std::map< int,libtorrent::bitfield > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_unfinished_pieces_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_std__mapT_int_libtorrent__bitfield_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "add_torrent_params_unfinished_pieces_set" "', argument " "2"" of type '" "std::map< int,libtorrent::bitfield > *""'"); 
  }
  arg2 = (std::map< int,libtorrent::bitfield > *)(argp2);
  if (arg1) (arg1)->unfinished_pieces = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_unfinished_pieces_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,libtorrent::bitfield > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_unfinished_pieces_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (std::map< int,libtorrent::bitfield > *)& ((arg1)->unfinished_pieces);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_int_libtorrent__bitfield_t, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_have_pieces_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  libtorrent::bitfield *arg2 = (libtorrent::bitfield *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_have_pieces_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__bitfield, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "add_torrent_params_have_pieces_set" "', argument " "2"" of type '" "libtorrent::bitfield *""'"); 
  }
  arg2 = (libtorrent::bitfield *)(argp2);
  if (arg1) (arg1)->have_pieces = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_have_pieces_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::bitfield *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_have_pieces_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (libtorrent::bitfield *)& ((arg1)->have_pieces);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__bitfield, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_verified_pieces_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  libtorrent::bitfield *arg2 = (libtorrent::bitfield *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_verified_pieces_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__bitfield, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "add_torrent_params_verified_pieces_set" "', argument " "2"" of type '" "libtorrent::bitfield *""'"); 
  }
  arg2 = (libtorrent::bitfield *)(argp2);
  if (arg1) (arg1)->verified_pieces = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_verified_pieces_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::bitfield *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_verified_pieces_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (libtorrent::bitfield *)& ((arg1)->verified_pieces);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__bitfield, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_piece_priorities_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::vector< std::uint8_t > *arg2 = (std::vector< std::uint8_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_piece_priorities_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_std__vectorT_signed_char_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "add_torrent_params_piece_priorities_set" "', argument " "2"" of type '" "std::vector< std::uint8_t > *""'"); 
  }
  arg2 = (std::vector< std::uint8_t > *)(argp2);
  if (arg1) (arg1)->piece_priorities = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_piece_priorities_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::uint8_t > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_piece_priorities_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (std::vector< std::uint8_t > *)& ((arg1)->piece_priorities);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_signed_char_t, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_merkle_tree_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::vector< libtorrent::sha1_hash > *arg2 = (std::vector< libtorrent::sha1_hash > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_merkle_tree_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_std__vectorT_libtorrent__sha1_hash_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "add_torrent_params_merkle_tree_set" "', argument " "2"" of type '" "std::vector< libtorrent::sha1_hash > *""'"); 
  }
  arg2 = (std::vector< libtorrent::sha1_hash > *)(argp2);
  if (arg1) (arg1)->merkle_tree = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_merkle_tree_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::sha1_hash > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_merkle_tree_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (std::vector< libtorrent::sha1_hash > *)& ((arg1)->merkle_tree);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_libtorrent__sha1_hash_t, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_params_renamed_files_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::map< int,std::string > *arg2 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_renamed_files_set" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "add_torrent_params_renamed_files_set" "', argument " "2"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg2 = (std::map< int,std::string > *)(argp2);
  if (arg1) (arg1)->renamed_files = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_params_renamed_files_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::string > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_renamed_files_get" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (std::map< int,std::string > *)& ((arg1)->renamed_files);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_add_torrent_params_ti_ptr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::torrent_info *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_add_torrent_params_ti_ptr.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_ti_ptr" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  result = (libtorrent::torrent_info *)libtorrent_add_torrent_params_ti_ptr(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_add_torrent_params_set_ti(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  libtorrent::torrent_info *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_add_torrent_params_set_ti.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_set_ti" "', argument " "1"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg1 = (libtorrent::add_torrent_params *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__torrent_info,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "add_torrent_params_set_ti" "', argument " "2"" of type '" "libtorrent::torrent_info const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "add_torrent_params_set_ti" "', argument " "2"" of type '" "libtorrent::torrent_info const &""'"); 
  }
  arg2 = (libtorrent::torrent_info *)(argp2);
  libtorrent_add_torrent_params_set_ti(arg1,(libtorrent::torrent_info const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_add_torrent_params_create_instance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_add_torrent_params_create_instance.");
  
  result = libtorrent_add_torrent_params_create_instance();
  jsresult = SWIG_NewPointerObj((new libtorrent::add_torrent_params((const libtorrent::add_torrent_params&)(result))), SWIGTYPE_p_libtorrent__add_torrent_params, SWIG_POINTER_OWN |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_add_torrent_params_create_instance_disabled_storage(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_add_torrent_params_create_instance_disabled_storage.");
  
  result = libtorrent_add_torrent_params_create_instance_disabled_storage();
  jsresult = SWIG_NewPointerObj((new libtorrent::add_torrent_params((const libtorrent::add_torrent_params&)(result))), SWIGTYPE_p_libtorrent__add_torrent_params, SWIG_POINTER_OWN |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_add_torrent_params_create_instance_zero_storage(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_params result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_add_torrent_params_create_instance_zero_storage.");
  
  result = libtorrent_add_torrent_params_create_instance_zero_storage();
  jsresult = SWIG_NewPointerObj((new libtorrent::add_torrent_params((const libtorrent::add_torrent_params&)(result))), SWIGTYPE_p_libtorrent__add_torrent_params, SWIG_POINTER_OWN |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_add_torrent_params_read_resume_data__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bdecode_node *arg1 = 0 ;
  libtorrent::error_code *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  libtorrent::add_torrent_params result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__bdecode_node,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_read_resume_data" "', argument " "1"" of type '" "libtorrent::bdecode_node const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "add_torrent_params_read_resume_data" "', argument " "1"" of type '" "libtorrent::bdecode_node const &""'"); 
  }
  arg1 = (libtorrent::bdecode_node *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_boost__system__error_code,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "add_torrent_params_read_resume_data" "', argument " "2"" of type '" "libtorrent::error_code &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "add_torrent_params_read_resume_data" "', argument " "2"" of type '" "libtorrent::error_code &""'"); 
  }
  arg2 = (libtorrent::error_code *)(argp2);
  result = libtorrent_add_torrent_params_read_resume_data__SWIG_0((libtorrent::bdecode_node const &)*arg1,*arg2);
  jsresult = SWIG_NewPointerObj((new libtorrent::add_torrent_params((const libtorrent::add_torrent_params&)(result))), SWIGTYPE_p_libtorrent__add_torrent_params, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_add_torrent_params_read_resume_data__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int8_t > *arg1 = 0 ;
  libtorrent::error_code *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  libtorrent::add_torrent_params result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_signed_char_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_params_read_resume_data" "', argument " "1"" of type '" "std::vector< int8_t > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "add_torrent_params_read_resume_data" "', argument " "1"" of type '" "std::vector< int8_t > const &""'"); 
  }
  arg1 = (std::vector< int8_t > *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_boost__system__error_code,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "add_torrent_params_read_resume_data" "', argument " "2"" of type '" "libtorrent::error_code &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "add_torrent_params_read_resume_data" "', argument " "2"" of type '" "libtorrent::error_code &""'"); 
  }
  arg2 = (libtorrent::error_code *)(argp2);
  result = libtorrent_add_torrent_params_read_resume_data__SWIG_1((std::vector< signed char > const &)*arg1,*arg2);
  jsresult = SWIG_NewPointerObj((new libtorrent::add_torrent_params((const libtorrent::add_torrent_params&)(result))), SWIGTYPE_p_libtorrent__add_torrent_params, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_add_torrent_params__wrap_add_torrent_params_read_resume_data(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_add_torrent_params_read_resume_data__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_add_torrent_params_read_resume_data__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_add_torrent_params_read_resume_data__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_add_torrent_params_read_resume_data__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function read_resume_data.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_add_torrent_params(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_add_torrent_params(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_add_torrent_params(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_add_torrent_params(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::add_torrent_params * arg1 = (libtorrent::add_torrent_params *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_add_torrent_params(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class add_torrent_params can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_op_bittorrent(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::op_bittorrent));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_op_iocontrol(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::op_iocontrol));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_op_getpeername(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::op_getpeername));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_op_getname(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::op_getname));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_op_alloc_recvbuf(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::op_alloc_recvbuf));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_op_alloc_sndbuf(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::op_alloc_sndbuf));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_op_file_write(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::op_file_write));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_op_file_read(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::op_file_read));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_op_file(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::op_file));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_op_sock_write(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::op_sock_write));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_op_sock_read(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::op_sock_read));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_op_sock_open(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::op_sock_open));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_op_sock_bind(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::op_sock_bind));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_op_available(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::op_available));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_op_encryption(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::op_encryption));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_op_connect(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::op_connect));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_op_ssl_handshake(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::op_ssl_handshake));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_op_get_interface(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::op_get_interface));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_op_unknown(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::op_unknown));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_stats_metric_value_index_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::stats_metric *arg1 = (libtorrent::stats_metric *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__stats_metric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "stats_metric_value_index_set" "', argument " "1"" of type '" "libtorrent::stats_metric *""'"); 
  }
  arg1 = (libtorrent::stats_metric *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "stats_metric_value_index_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->value_index = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_stats_metric_value_index_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::stats_metric *arg1 = (libtorrent::stats_metric *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__stats_metric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "stats_metric_value_index_get" "', argument " "1"" of type '" "libtorrent::stats_metric *""'"); 
  }
  arg1 = (libtorrent::stats_metric *)(argp1);
  result = (int) ((arg1)->value_index);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_stats_metric_type_counter(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::stats_metric::type_counter));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_stats_metric_type_gauge(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::stats_metric::type_gauge));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_stats_metric_type_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::stats_metric *arg1 = (libtorrent::stats_metric *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__stats_metric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "stats_metric_type_set" "', argument " "1"" of type '" "libtorrent::stats_metric *""'"); 
  }
  arg1 = (libtorrent::stats_metric *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "stats_metric_type_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->type = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_stats_metric_type_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::stats_metric *arg1 = (libtorrent::stats_metric *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__stats_metric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "stats_metric_type_get" "', argument " "1"" of type '" "libtorrent::stats_metric *""'"); 
  }
  arg1 = (libtorrent::stats_metric *)(argp1);
  result = (int) ((arg1)->type);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_stats_metric_get_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::stats_metric *arg1 = (libtorrent::stats_metric *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_stats_metric_get_name.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__stats_metric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "stats_metric_get_name" "', argument " "1"" of type '" "libtorrent::stats_metric *""'"); 
  }
  arg1 = (libtorrent::stats_metric *)(argp1);
  result = libtorrent_stats_metric_get_name(arg1);
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_stats_metric(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::stats_metric *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_stats_metric.");
  result = (libtorrent::stats_metric *)new libtorrent::stats_metric();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__stats_metric, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_stats_metric(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_stats_metric(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_stats_metric(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_stats_metric(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::stats_metric * arg1 = (libtorrent::stats_metric *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_session_stats_metrics(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< libtorrent::stats_metric > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_stats_metrics.");
  
  result = libtorrent::session_stats_metrics();
  jsresult = SWIG_NewPointerObj((new std::vector< libtorrent::stats_metric >((const std::vector< libtorrent::stats_metric >&)(result))), SWIGTYPE_p_std__vectorT_libtorrent__stats_metric_t, SWIG_POINTER_OWN |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_find_metric_idx(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_find_metric_idx.");
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "find_metric_idx" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  result = (int)libtorrent::find_metric_idx((char const *)arg1);
  jsresult = SWIG_From_int((int)(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_close_no_reason(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_no_reason));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_duplicate_peer_id(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_duplicate_peer_id));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_torrent_removed(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_torrent_removed));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_no_memory(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_no_memory));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_port_blocked(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_port_blocked));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_blocked(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_blocked));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_upload_to_upload(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_upload_to_upload));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_not_interested_upload_only(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_not_interested_upload_only));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_timeout(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_timeout));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_timed_out_interest(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_timed_out_interest));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_timed_out_activity(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_timed_out_activity));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_timed_out_handshake(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_timed_out_handshake));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_timed_out_request(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_timed_out_request));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_protocol_blocked(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_protocol_blocked));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_peer_churn(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_peer_churn));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_too_many_connections(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_too_many_connections));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_too_many_files(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_too_many_files));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_encryption_error(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_encryption_error));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_invalid_info_hash(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_invalid_info_hash));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_self_connection(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_self_connection));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_invalid_metadata(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_invalid_metadata));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_metadata_too_big(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_metadata_too_big));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_message_too_big(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_message_too_big));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_invalid_message_id(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_invalid_message_id));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_invalid_message(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_invalid_message));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_invalid_piece_message(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_invalid_piece_message));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_invalid_have_message(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_invalid_have_message));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_invalid_bitfield_message(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_invalid_bitfield_message));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_invalid_choke_message(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_invalid_choke_message));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_invalid_unchoke_message(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_invalid_unchoke_message));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_invalid_interested_message(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_invalid_interested_message));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_invalid_not_interested_message(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_invalid_not_interested_message));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_invalid_request_message(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_invalid_request_message));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_invalid_reject_message(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_invalid_reject_message));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_invalid_allow_fast_message(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_invalid_allow_fast_message));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_invalid_extended_message(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_invalid_extended_message));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_invalid_cancel_message(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_invalid_cancel_message));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_invalid_dht_port_message(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_invalid_dht_port_message));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_invalid_suggest_message(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_invalid_suggest_message));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_invalid_have_all_message(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_invalid_have_all_message));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_invalid_dont_have_message(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_invalid_dont_have_message));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_invalid_have_none_message(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_invalid_have_none_message));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_invalid_pex_message(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_invalid_pex_message));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_invalid_metadata_request_message(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_invalid_metadata_request_message));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_invalid_metadata_message(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_invalid_metadata_message));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_invalid_metadata_offset(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_invalid_metadata_offset));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_request_when_choked(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_request_when_choked));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_corrupt_pieces(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_corrupt_pieces));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_pex_message_too_big(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_pex_message_too_big));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_close_pex_too_frequent(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::close_pex_too_frequent));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_alert_error_notification(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::alert::error_notification));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_alert_peer_notification(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::alert::peer_notification));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_alert_port_mapping_notification(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::alert::port_mapping_notification));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_alert_storage_notification(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::alert::storage_notification));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_alert_tracker_notification(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::alert::tracker_notification));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_alert_debug_notification(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::alert::debug_notification));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_alert_status_notification(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::alert::status_notification));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_alert_progress_notification(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::alert::progress_notification));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_alert_ip_block_notification(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::alert::ip_block_notification));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_alert_performance_warning(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::alert::performance_warning));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_alert_dht_notification(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::alert::dht_notification));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_alert_stats_notification(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::alert::stats_notification));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_alert_session_log_notification(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::alert::session_log_notification));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_alert_torrent_log_notification(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::alert::torrent_log_notification));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_alert_peer_log_notification(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::alert::peer_log_notification));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_alert_incoming_request_notification(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::alert::incoming_request_notification));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_alert_dht_log_notification(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::alert::dht_log_notification));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_alert_dht_operation_notification(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::alert::dht_operation_notification));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_alert_port_mapping_log_notification(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::alert::port_mapping_log_notification));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_alert_picker_log_notification(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::alert::picker_log_notification));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_alert_all_categories(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::alert::all_categories));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::alert * arg1 = (libtorrent::alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_type" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (int)((libtorrent::alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_what" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (char *)((libtorrent::alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_message" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = ((libtorrent::alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_category" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (int)((libtorrent::alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_torrent_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::torrent_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_torrent_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_torrent_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::torrent_alert *)libtorrent_alert_cast_to_torrent_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__torrent_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_peer_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::peer_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_peer_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_peer_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::peer_alert *)libtorrent_alert_cast_to_peer_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__peer_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_tracker_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::tracker_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_tracker_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_tracker_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::tracker_alert *)libtorrent_alert_cast_to_tracker_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__tracker_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_torrent_added_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::torrent_added_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_torrent_added_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_torrent_added_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::torrent_added_alert *)libtorrent_alert_cast_to_torrent_added_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__torrent_added_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_torrent_removed_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::torrent_removed_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_torrent_removed_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_torrent_removed_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::torrent_removed_alert *)libtorrent_alert_cast_to_torrent_removed_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__torrent_removed_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_read_piece_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::read_piece_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_read_piece_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_read_piece_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::read_piece_alert *)libtorrent_alert_cast_to_read_piece_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__read_piece_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_file_completed_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::file_completed_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_file_completed_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_file_completed_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::file_completed_alert *)libtorrent_alert_cast_to_file_completed_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__file_completed_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_file_renamed_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::file_renamed_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_file_renamed_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_file_renamed_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::file_renamed_alert *)libtorrent_alert_cast_to_file_renamed_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__file_renamed_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_file_rename_failed_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::file_rename_failed_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_file_rename_failed_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_file_rename_failed_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::file_rename_failed_alert *)libtorrent_alert_cast_to_file_rename_failed_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__file_rename_failed_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_performance_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::performance_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_performance_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_performance_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::performance_alert *)libtorrent_alert_cast_to_performance_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__performance_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_state_changed_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::state_changed_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_state_changed_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_state_changed_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::state_changed_alert *)libtorrent_alert_cast_to_state_changed_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__state_changed_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_tracker_error_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::tracker_error_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_tracker_error_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_tracker_error_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::tracker_error_alert *)libtorrent_alert_cast_to_tracker_error_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__tracker_error_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_tracker_warning_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::tracker_warning_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_tracker_warning_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_tracker_warning_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::tracker_warning_alert *)libtorrent_alert_cast_to_tracker_warning_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__tracker_warning_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_scrape_reply_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::scrape_reply_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_scrape_reply_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_scrape_reply_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::scrape_reply_alert *)libtorrent_alert_cast_to_scrape_reply_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__scrape_reply_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_scrape_failed_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::scrape_failed_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_scrape_failed_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_scrape_failed_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::scrape_failed_alert *)libtorrent_alert_cast_to_scrape_failed_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__scrape_failed_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_tracker_reply_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::tracker_reply_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_tracker_reply_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_tracker_reply_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::tracker_reply_alert *)libtorrent_alert_cast_to_tracker_reply_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__tracker_reply_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_dht_reply_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::dht_reply_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_dht_reply_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_dht_reply_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::dht_reply_alert *)libtorrent_alert_cast_to_dht_reply_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__dht_reply_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_tracker_announce_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::tracker_announce_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_tracker_announce_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_tracker_announce_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::tracker_announce_alert *)libtorrent_alert_cast_to_tracker_announce_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__tracker_announce_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_hash_failed_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::hash_failed_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_hash_failed_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_hash_failed_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::hash_failed_alert *)libtorrent_alert_cast_to_hash_failed_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__hash_failed_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_peer_ban_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::peer_ban_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_peer_ban_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_peer_ban_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::peer_ban_alert *)libtorrent_alert_cast_to_peer_ban_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__peer_ban_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_peer_unsnubbed_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::peer_unsnubbed_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_peer_unsnubbed_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_peer_unsnubbed_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::peer_unsnubbed_alert *)libtorrent_alert_cast_to_peer_unsnubbed_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__peer_unsnubbed_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_peer_snubbed_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::peer_snubbed_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_peer_snubbed_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_peer_snubbed_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::peer_snubbed_alert *)libtorrent_alert_cast_to_peer_snubbed_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__peer_snubbed_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_peer_error_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::peer_error_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_peer_error_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_peer_error_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::peer_error_alert *)libtorrent_alert_cast_to_peer_error_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__peer_error_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_peer_connect_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::peer_connect_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_peer_connect_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_peer_connect_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::peer_connect_alert *)libtorrent_alert_cast_to_peer_connect_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__peer_connect_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_peer_disconnected_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::peer_disconnected_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_peer_disconnected_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_peer_disconnected_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::peer_disconnected_alert *)libtorrent_alert_cast_to_peer_disconnected_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__peer_disconnected_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_invalid_request_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::invalid_request_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_invalid_request_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_invalid_request_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::invalid_request_alert *)libtorrent_alert_cast_to_invalid_request_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__invalid_request_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_torrent_finished_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::torrent_finished_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_torrent_finished_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_torrent_finished_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::torrent_finished_alert *)libtorrent_alert_cast_to_torrent_finished_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__torrent_finished_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_piece_finished_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::piece_finished_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_piece_finished_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_piece_finished_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::piece_finished_alert *)libtorrent_alert_cast_to_piece_finished_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__piece_finished_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_request_dropped_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::request_dropped_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_request_dropped_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_request_dropped_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::request_dropped_alert *)libtorrent_alert_cast_to_request_dropped_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__request_dropped_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_block_timeout_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::block_timeout_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_block_timeout_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_block_timeout_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::block_timeout_alert *)libtorrent_alert_cast_to_block_timeout_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__block_timeout_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_block_finished_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::block_finished_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_block_finished_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_block_finished_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::block_finished_alert *)libtorrent_alert_cast_to_block_finished_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__block_finished_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_block_downloading_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::block_downloading_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_block_downloading_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_block_downloading_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::block_downloading_alert *)libtorrent_alert_cast_to_block_downloading_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__block_downloading_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_unwanted_block_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::unwanted_block_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_unwanted_block_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_unwanted_block_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::unwanted_block_alert *)libtorrent_alert_cast_to_unwanted_block_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__unwanted_block_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_storage_moved_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::storage_moved_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_storage_moved_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_storage_moved_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::storage_moved_alert *)libtorrent_alert_cast_to_storage_moved_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__storage_moved_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_storage_moved_failed_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::storage_moved_failed_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_storage_moved_failed_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_storage_moved_failed_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::storage_moved_failed_alert *)libtorrent_alert_cast_to_storage_moved_failed_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__storage_moved_failed_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_torrent_deleted_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::torrent_deleted_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_torrent_deleted_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_torrent_deleted_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::torrent_deleted_alert *)libtorrent_alert_cast_to_torrent_deleted_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__torrent_deleted_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_torrent_delete_failed_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::torrent_delete_failed_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_torrent_delete_failed_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_torrent_delete_failed_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::torrent_delete_failed_alert *)libtorrent_alert_cast_to_torrent_delete_failed_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__torrent_delete_failed_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_save_resume_data_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::save_resume_data_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_save_resume_data_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_save_resume_data_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::save_resume_data_alert *)libtorrent_alert_cast_to_save_resume_data_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__save_resume_data_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_save_resume_data_failed_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::save_resume_data_failed_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_save_resume_data_failed_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_save_resume_data_failed_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::save_resume_data_failed_alert *)libtorrent_alert_cast_to_save_resume_data_failed_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__save_resume_data_failed_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_torrent_paused_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::torrent_paused_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_torrent_paused_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_torrent_paused_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::torrent_paused_alert *)libtorrent_alert_cast_to_torrent_paused_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__torrent_paused_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_torrent_resumed_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::torrent_resumed_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_torrent_resumed_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_torrent_resumed_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::torrent_resumed_alert *)libtorrent_alert_cast_to_torrent_resumed_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__torrent_resumed_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_torrent_checked_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::torrent_checked_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_torrent_checked_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_torrent_checked_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::torrent_checked_alert *)libtorrent_alert_cast_to_torrent_checked_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__torrent_checked_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_url_seed_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::url_seed_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_url_seed_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_url_seed_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::url_seed_alert *)libtorrent_alert_cast_to_url_seed_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__url_seed_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_file_error_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::file_error_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_file_error_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_file_error_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::file_error_alert *)libtorrent_alert_cast_to_file_error_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__file_error_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_metadata_failed_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::metadata_failed_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_metadata_failed_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_metadata_failed_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::metadata_failed_alert *)libtorrent_alert_cast_to_metadata_failed_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__metadata_failed_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_metadata_received_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::metadata_received_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_metadata_received_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_metadata_received_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::metadata_received_alert *)libtorrent_alert_cast_to_metadata_received_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__metadata_received_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_udp_error_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::udp_error_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_udp_error_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_udp_error_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::udp_error_alert *)libtorrent_alert_cast_to_udp_error_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__udp_error_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_external_ip_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::external_ip_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_external_ip_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_external_ip_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::external_ip_alert *)libtorrent_alert_cast_to_external_ip_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__external_ip_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_listen_failed_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::listen_failed_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_listen_failed_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_listen_failed_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::listen_failed_alert *)libtorrent_alert_cast_to_listen_failed_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__listen_failed_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_listen_succeeded_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::listen_succeeded_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_listen_succeeded_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_listen_succeeded_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::listen_succeeded_alert *)libtorrent_alert_cast_to_listen_succeeded_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__listen_succeeded_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_portmap_error_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::portmap_error_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_portmap_error_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_portmap_error_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::portmap_error_alert *)libtorrent_alert_cast_to_portmap_error_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__portmap_error_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_portmap_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::portmap_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_portmap_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_portmap_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::portmap_alert *)libtorrent_alert_cast_to_portmap_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__portmap_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_portmap_log_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::portmap_log_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_portmap_log_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_portmap_log_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::portmap_log_alert *)libtorrent_alert_cast_to_portmap_log_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__portmap_log_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_fastresume_rejected_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::fastresume_rejected_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_fastresume_rejected_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_fastresume_rejected_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::fastresume_rejected_alert *)libtorrent_alert_cast_to_fastresume_rejected_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__fastresume_rejected_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_peer_blocked_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::peer_blocked_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_peer_blocked_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_peer_blocked_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::peer_blocked_alert *)libtorrent_alert_cast_to_peer_blocked_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__peer_blocked_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_dht_announce_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::dht_announce_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_dht_announce_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_dht_announce_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::dht_announce_alert *)libtorrent_alert_cast_to_dht_announce_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__dht_announce_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_dht_get_peers_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::dht_get_peers_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_dht_get_peers_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_dht_get_peers_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::dht_get_peers_alert *)libtorrent_alert_cast_to_dht_get_peers_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__dht_get_peers_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_stats_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::stats_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_stats_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_stats_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::stats_alert *)libtorrent_alert_cast_to_stats_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__stats_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_cache_flushed_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::cache_flushed_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_cache_flushed_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_cache_flushed_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::cache_flushed_alert *)libtorrent_alert_cast_to_cache_flushed_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__cache_flushed_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_anonymous_mode_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::anonymous_mode_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_anonymous_mode_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_anonymous_mode_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::anonymous_mode_alert *)libtorrent_alert_cast_to_anonymous_mode_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__anonymous_mode_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_lsd_peer_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::lsd_peer_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_lsd_peer_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_lsd_peer_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::lsd_peer_alert *)libtorrent_alert_cast_to_lsd_peer_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__lsd_peer_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_trackerid_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::trackerid_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_trackerid_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_trackerid_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::trackerid_alert *)libtorrent_alert_cast_to_trackerid_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__trackerid_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_dht_bootstrap_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::dht_bootstrap_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_dht_bootstrap_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_dht_bootstrap_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::dht_bootstrap_alert *)libtorrent_alert_cast_to_dht_bootstrap_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__dht_bootstrap_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_torrent_error_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::torrent_error_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_torrent_error_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_torrent_error_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::torrent_error_alert *)libtorrent_alert_cast_to_torrent_error_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__torrent_error_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_torrent_need_cert_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::torrent_need_cert_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_torrent_need_cert_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_torrent_need_cert_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::torrent_need_cert_alert *)libtorrent_alert_cast_to_torrent_need_cert_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__torrent_need_cert_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_incoming_connection_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::incoming_connection_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_incoming_connection_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_incoming_connection_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::incoming_connection_alert *)libtorrent_alert_cast_to_incoming_connection_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__incoming_connection_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_add_torrent_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::add_torrent_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_add_torrent_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_add_torrent_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::add_torrent_alert *)libtorrent_alert_cast_to_add_torrent_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__add_torrent_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_state_update_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::state_update_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_state_update_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_state_update_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::state_update_alert *)libtorrent_alert_cast_to_state_update_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__state_update_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_mmap_cache_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::mmap_cache_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_mmap_cache_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_mmap_cache_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::mmap_cache_alert *)libtorrent_alert_cast_to_mmap_cache_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__mmap_cache_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_session_stats_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::session_stats_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_session_stats_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_session_stats_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::session_stats_alert *)libtorrent_alert_cast_to_session_stats_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__session_stats_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_dht_error_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::dht_error_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_dht_error_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_dht_error_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::dht_error_alert *)libtorrent_alert_cast_to_dht_error_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__dht_error_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_dht_immutable_item_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::dht_immutable_item_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_dht_immutable_item_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_dht_immutable_item_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::dht_immutable_item_alert *)libtorrent_alert_cast_to_dht_immutable_item_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__dht_immutable_item_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_dht_mutable_item_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::dht_mutable_item_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_dht_mutable_item_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_dht_mutable_item_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::dht_mutable_item_alert *)libtorrent_alert_cast_to_dht_mutable_item_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__dht_mutable_item_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_dht_put_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::dht_put_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_dht_put_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_dht_put_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::dht_put_alert *)libtorrent_alert_cast_to_dht_put_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__dht_put_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_i2p_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::i2p_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_i2p_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_i2p_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::i2p_alert *)libtorrent_alert_cast_to_i2p_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__i2p_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_dht_outgoing_get_peers_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::dht_outgoing_get_peers_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_dht_outgoing_get_peers_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_dht_outgoing_get_peers_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::dht_outgoing_get_peers_alert *)libtorrent_alert_cast_to_dht_outgoing_get_peers_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__dht_outgoing_get_peers_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_log_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::log_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_log_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_log_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::log_alert *)libtorrent_alert_cast_to_log_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__log_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_torrent_log_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::torrent_log_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_torrent_log_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_torrent_log_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::torrent_log_alert *)libtorrent_alert_cast_to_torrent_log_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__torrent_log_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_peer_log_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::peer_log_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_peer_log_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_peer_log_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::peer_log_alert *)libtorrent_alert_cast_to_peer_log_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__peer_log_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_lsd_error_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::lsd_error_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_lsd_error_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_lsd_error_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::lsd_error_alert *)libtorrent_alert_cast_to_lsd_error_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__lsd_error_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_dht_stats_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::dht_stats_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_dht_stats_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_dht_stats_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::dht_stats_alert *)libtorrent_alert_cast_to_dht_stats_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__dht_stats_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_incoming_request_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::incoming_request_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_incoming_request_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_incoming_request_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::incoming_request_alert *)libtorrent_alert_cast_to_incoming_request_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__incoming_request_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_dht_log_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::dht_log_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_dht_log_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_dht_log_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::dht_log_alert *)libtorrent_alert_cast_to_dht_log_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__dht_log_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_dht_pkt_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::dht_pkt_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_dht_pkt_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_dht_pkt_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::dht_pkt_alert *)libtorrent_alert_cast_to_dht_pkt_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__dht_pkt_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_dht_get_peers_reply_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::dht_get_peers_reply_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_dht_get_peers_reply_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_dht_get_peers_reply_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::dht_get_peers_reply_alert *)libtorrent_alert_cast_to_dht_get_peers_reply_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__dht_get_peers_reply_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_dht_direct_response_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::dht_direct_response_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_dht_direct_response_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_dht_direct_response_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::dht_direct_response_alert *)libtorrent_alert_cast_to_dht_direct_response_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__dht_direct_response_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_cast_to_picker_log_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::picker_log_alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_cast_to_picker_log_alert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_cast_to_picker_log_alert" "', argument " "1"" of type '" "libtorrent::alert const *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (libtorrent::picker_log_alert *)libtorrent_alert_cast_to_picker_log_alert((libtorrent::alert const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__picker_log_alert, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_alert_get_timestamp(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int64_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_get_timestamp.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_get_timestamp" "', argument " "1"" of type '" "libtorrent::alert *""'"); 
  }
  arg1 = (libtorrent::alert *)(argp1);
  result = (int64_t)libtorrent_alert_get_timestamp(arg1);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_veto_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_operation_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_operation_name.");
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "operation_name" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  result = (char *)libtorrent::operation_name(arg1);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_torrent_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_alert *arg1 = (libtorrent::torrent_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_alert_message" "', argument " "1"" of type '" "libtorrent::torrent_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_alert *)(argp1);
  result = ((libtorrent::torrent_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_torrent_alert_handle_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_alert *arg1 = (libtorrent::torrent_alert *) 0 ;
  libtorrent::torrent_handle *arg2 = (libtorrent::torrent_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_alert_handle_set" "', argument " "1"" of type '" "libtorrent::torrent_alert *""'"); 
  }
  arg1 = (libtorrent::torrent_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_alert_handle_set" "', argument " "2"" of type '" "libtorrent::torrent_handle *""'"); 
  }
  arg2 = (libtorrent::torrent_handle *)(argp2);
  if (arg1) (arg1)->handle = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_alert_handle_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_alert *arg1 = (libtorrent::torrent_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::torrent_handle *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_alert_handle_get" "', argument " "1"" of type '" "libtorrent::torrent_alert *""'"); 
  }
  arg1 = (libtorrent::torrent_alert *)(argp1);
  result = (libtorrent::torrent_handle *)& ((arg1)->handle);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_torrent_alert_torrent_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_alert *arg1 = (libtorrent::torrent_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_alert_torrent_name.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_alert_torrent_name" "', argument " "1"" of type '" "libtorrent::torrent_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_alert *)(argp1);
  result = (char *)((libtorrent::torrent_alert const *)arg1)->torrent_name();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_torrent_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_torrent_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_torrent_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_torrent_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::torrent_alert * arg1 = (libtorrent::torrent_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_torrent_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class torrent_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_peer_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_peer_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_alert *arg1 = (libtorrent::peer_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_alert_category" "', argument " "1"" of type '" "libtorrent::peer_alert const *""'"); 
  }
  arg1 = (libtorrent::peer_alert *)(argp1);
  result = (int)((libtorrent::peer_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_alert *arg1 = (libtorrent::peer_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_alert_message" "', argument " "1"" of type '" "libtorrent::peer_alert const *""'"); 
  }
  arg1 = (libtorrent::peer_alert *)(argp1);
  result = ((libtorrent::peer_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_peer_alert_ip_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_alert *arg1 = (libtorrent::peer_alert *) 0 ;
  libtorrent::tcp::endpoint *arg2 = (libtorrent::tcp::endpoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_alert_ip_set" "', argument " "1"" of type '" "libtorrent::peer_alert *""'"); 
  }
  arg1 = (libtorrent::peer_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__tcp__endpoint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "peer_alert_ip_set" "', argument " "2"" of type '" "libtorrent::tcp::endpoint *""'"); 
  }
  arg2 = (libtorrent::tcp::endpoint *)(argp2);
  if (arg1) (arg1)->ip = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_alert_ip_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_alert *arg1 = (libtorrent::peer_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::tcp::endpoint *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_alert_ip_get" "', argument " "1"" of type '" "libtorrent::peer_alert *""'"); 
  }
  arg1 = (libtorrent::peer_alert *)(argp1);
  result = (libtorrent::tcp::endpoint *)& ((arg1)->ip);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__tcp__endpoint, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_alert_pid_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_alert *arg1 = (libtorrent::peer_alert *) 0 ;
  libtorrent::peer_id *arg2 = (libtorrent::peer_id *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_alert_pid_set" "', argument " "1"" of type '" "libtorrent::peer_alert *""'"); 
  }
  arg1 = (libtorrent::peer_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "peer_alert_pid_set" "', argument " "2"" of type '" "libtorrent::peer_id *""'"); 
  }
  arg2 = (libtorrent::peer_id *)(argp2);
  if (arg1) (arg1)->pid = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_alert_pid_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_alert *arg1 = (libtorrent::peer_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::peer_id *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_alert_pid_get" "', argument " "1"" of type '" "libtorrent::peer_alert *""'"); 
  }
  arg1 = (libtorrent::peer_alert *)(argp1);
  result = (libtorrent::peer_id *)& ((arg1)->pid);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_peer_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_peer_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_peer_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_peer_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::peer_alert * arg1 = (libtorrent::peer_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_peer_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class peer_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_tracker_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::tracker_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_tracker_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::tracker_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tracker_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::tracker_alert *arg1 = (libtorrent::tracker_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_tracker_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__tracker_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tracker_alert_category" "', argument " "1"" of type '" "libtorrent::tracker_alert const *""'"); 
  }
  arg1 = (libtorrent::tracker_alert *)(argp1);
  result = (int)((libtorrent::tracker_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tracker_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::tracker_alert *arg1 = (libtorrent::tracker_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_tracker_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__tracker_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tracker_alert_message" "', argument " "1"" of type '" "libtorrent::tracker_alert const *""'"); 
  }
  arg1 = (libtorrent::tracker_alert *)(argp1);
  result = ((libtorrent::tracker_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tracker_alert_tracker_url(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::tracker_alert *arg1 = (libtorrent::tracker_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_tracker_alert_tracker_url.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__tracker_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tracker_alert_tracker_url" "', argument " "1"" of type '" "libtorrent::tracker_alert const *""'"); 
  }
  arg1 = (libtorrent::tracker_alert *)(argp1);
  result = (char *)((libtorrent::tracker_alert const *)arg1)->tracker_url();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_tracker_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_tracker_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_tracker_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_tracker_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::tracker_alert * arg1 = (libtorrent::tracker_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_tracker_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class tracker_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_added_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_added_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_added_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_added_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_torrent_added_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_added_alert *arg1 = (libtorrent::torrent_added_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_added_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_added_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_added_alert_type" "', argument " "1"" of type '" "libtorrent::torrent_added_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_added_alert *)(argp1);
  result = (int)((libtorrent::torrent_added_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_added_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_added_alert *arg1 = (libtorrent::torrent_added_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_added_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_added_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_added_alert_category" "', argument " "1"" of type '" "libtorrent::torrent_added_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_added_alert *)(argp1);
  result = (int)((libtorrent::torrent_added_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_added_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_added_alert *arg1 = (libtorrent::torrent_added_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_added_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_added_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_added_alert_what" "', argument " "1"" of type '" "libtorrent::torrent_added_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_added_alert *)(argp1);
  result = (char *)((libtorrent::torrent_added_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_added_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_added_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_torrent_added_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_added_alert *arg1 = (libtorrent::torrent_added_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_added_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_added_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_added_alert_message" "', argument " "1"" of type '" "libtorrent::torrent_added_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_added_alert *)(argp1);
  result = ((libtorrent::torrent_added_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_torrent_added_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_torrent_added_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_torrent_added_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_torrent_added_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::torrent_added_alert * arg1 = (libtorrent::torrent_added_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_torrent_added_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class torrent_added_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_removed_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_removed_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_removed_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_removed_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_torrent_removed_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_removed_alert *arg1 = (libtorrent::torrent_removed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_removed_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_removed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_removed_alert_type" "', argument " "1"" of type '" "libtorrent::torrent_removed_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_removed_alert *)(argp1);
  result = (int)((libtorrent::torrent_removed_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_removed_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_removed_alert *arg1 = (libtorrent::torrent_removed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_removed_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_removed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_removed_alert_category" "', argument " "1"" of type '" "libtorrent::torrent_removed_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_removed_alert *)(argp1);
  result = (int)((libtorrent::torrent_removed_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_removed_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_removed_alert *arg1 = (libtorrent::torrent_removed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_removed_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_removed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_removed_alert_what" "', argument " "1"" of type '" "libtorrent::torrent_removed_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_removed_alert *)(argp1);
  result = (char *)((libtorrent::torrent_removed_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_removed_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_removed_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_torrent_removed_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_removed_alert *arg1 = (libtorrent::torrent_removed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_removed_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_removed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_removed_alert_message" "', argument " "1"" of type '" "libtorrent::torrent_removed_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_removed_alert *)(argp1);
  result = ((libtorrent::torrent_removed_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_torrent_removed_alert_info_hash_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_removed_alert *arg1 = (libtorrent::torrent_removed_alert *) 0 ;
  libtorrent::sha1_hash *arg2 = (libtorrent::sha1_hash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_removed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_removed_alert_info_hash_set" "', argument " "1"" of type '" "libtorrent::torrent_removed_alert *""'"); 
  }
  arg1 = (libtorrent::torrent_removed_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_removed_alert_info_hash_set" "', argument " "2"" of type '" "libtorrent::sha1_hash *""'"); 
  }
  arg2 = (libtorrent::sha1_hash *)(argp2);
  if (arg1) (arg1)->info_hash = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_removed_alert_info_hash_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_removed_alert *arg1 = (libtorrent::torrent_removed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::sha1_hash *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_removed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_removed_alert_info_hash_get" "', argument " "1"" of type '" "libtorrent::torrent_removed_alert *""'"); 
  }
  arg1 = (libtorrent::torrent_removed_alert *)(argp1);
  result = (libtorrent::sha1_hash *)& ((arg1)->info_hash);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_torrent_removed_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_torrent_removed_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_torrent_removed_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_torrent_removed_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::torrent_removed_alert * arg1 = (libtorrent::torrent_removed_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_torrent_removed_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class torrent_removed_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_read_piece_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::read_piece_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_read_piece_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::read_piece_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_read_piece_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::read_piece_alert *arg1 = (libtorrent::read_piece_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_read_piece_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__read_piece_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "read_piece_alert_type" "', argument " "1"" of type '" "libtorrent::read_piece_alert const *""'"); 
  }
  arg1 = (libtorrent::read_piece_alert *)(argp1);
  result = (int)((libtorrent::read_piece_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_read_piece_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::read_piece_alert *arg1 = (libtorrent::read_piece_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_read_piece_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__read_piece_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "read_piece_alert_category" "', argument " "1"" of type '" "libtorrent::read_piece_alert const *""'"); 
  }
  arg1 = (libtorrent::read_piece_alert *)(argp1);
  result = (int)((libtorrent::read_piece_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_read_piece_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::read_piece_alert *arg1 = (libtorrent::read_piece_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_read_piece_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__read_piece_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "read_piece_alert_what" "', argument " "1"" of type '" "libtorrent::read_piece_alert const *""'"); 
  }
  arg1 = (libtorrent::read_piece_alert *)(argp1);
  result = (char *)((libtorrent::read_piece_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_read_piece_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::read_piece_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_read_piece_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::read_piece_alert *arg1 = (libtorrent::read_piece_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_read_piece_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__read_piece_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "read_piece_alert_message" "', argument " "1"" of type '" "libtorrent::read_piece_alert const *""'"); 
  }
  arg1 = (libtorrent::read_piece_alert *)(argp1);
  result = ((libtorrent::read_piece_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_read_piece_alert_ec_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::read_piece_alert *arg1 = (libtorrent::read_piece_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__read_piece_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "read_piece_alert_ec_set" "', argument " "1"" of type '" "libtorrent::read_piece_alert *""'"); 
  }
  arg1 = (libtorrent::read_piece_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "read_piece_alert_ec_set" "', argument " "2"" of type '" "libtorrent::error_code *""'"); 
  }
  arg2 = (libtorrent::error_code *)(argp2);
  if (arg1) (arg1)->ec = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_read_piece_alert_ec_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::read_piece_alert *arg1 = (libtorrent::read_piece_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::error_code *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__read_piece_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "read_piece_alert_ec_get" "', argument " "1"" of type '" "libtorrent::read_piece_alert *""'"); 
  }
  arg1 = (libtorrent::read_piece_alert *)(argp1);
  result = (libtorrent::error_code *)& ((arg1)->ec);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_read_piece_alert_piece_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::read_piece_alert *arg1 = (libtorrent::read_piece_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__read_piece_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "read_piece_alert_piece_set" "', argument " "1"" of type '" "libtorrent::read_piece_alert *""'"); 
  }
  arg1 = (libtorrent::read_piece_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "read_piece_alert_piece_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->piece = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_read_piece_alert_piece_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::read_piece_alert *arg1 = (libtorrent::read_piece_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__read_piece_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "read_piece_alert_piece_get" "', argument " "1"" of type '" "libtorrent::read_piece_alert *""'"); 
  }
  arg1 = (libtorrent::read_piece_alert *)(argp1);
  result = (int) ((arg1)->piece);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_read_piece_alert_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::read_piece_alert *arg1 = (libtorrent::read_piece_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__read_piece_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "read_piece_alert_size_set" "', argument " "1"" of type '" "libtorrent::read_piece_alert *""'"); 
  }
  arg1 = (libtorrent::read_piece_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "read_piece_alert_size_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->size = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_read_piece_alert_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::read_piece_alert *arg1 = (libtorrent::read_piece_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__read_piece_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "read_piece_alert_size_get" "', argument " "1"" of type '" "libtorrent::read_piece_alert *""'"); 
  }
  arg1 = (libtorrent::read_piece_alert *)(argp1);
  result = (int) ((arg1)->size);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_read_piece_alert_buffer_ptr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::read_piece_alert *arg1 = (libtorrent::read_piece_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int64_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_read_piece_alert_buffer_ptr.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__read_piece_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "read_piece_alert_buffer_ptr" "', argument " "1"" of type '" "libtorrent::read_piece_alert *""'"); 
  }
  arg1 = (libtorrent::read_piece_alert *)(argp1);
  result = (int64_t)libtorrent_read_piece_alert_buffer_ptr(arg1);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_read_piece_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_read_piece_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_read_piece_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_read_piece_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::read_piece_alert * arg1 = (libtorrent::read_piece_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_read_piece_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class read_piece_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_file_completed_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::file_completed_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_file_completed_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::file_completed_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_file_completed_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_completed_alert *arg1 = (libtorrent::file_completed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_completed_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_completed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_completed_alert_type" "', argument " "1"" of type '" "libtorrent::file_completed_alert const *""'"); 
  }
  arg1 = (libtorrent::file_completed_alert *)(argp1);
  result = (int)((libtorrent::file_completed_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_completed_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_completed_alert *arg1 = (libtorrent::file_completed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_completed_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_completed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_completed_alert_category" "', argument " "1"" of type '" "libtorrent::file_completed_alert const *""'"); 
  }
  arg1 = (libtorrent::file_completed_alert *)(argp1);
  result = (int)((libtorrent::file_completed_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_completed_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_completed_alert *arg1 = (libtorrent::file_completed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_completed_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_completed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_completed_alert_what" "', argument " "1"" of type '" "libtorrent::file_completed_alert const *""'"); 
  }
  arg1 = (libtorrent::file_completed_alert *)(argp1);
  result = (char *)((libtorrent::file_completed_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_file_completed_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::file_completed_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_file_completed_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_completed_alert *arg1 = (libtorrent::file_completed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_completed_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_completed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_completed_alert_message" "', argument " "1"" of type '" "libtorrent::file_completed_alert const *""'"); 
  }
  arg1 = (libtorrent::file_completed_alert *)(argp1);
  result = ((libtorrent::file_completed_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_file_completed_alert_index_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::file_completed_alert *arg1 = (libtorrent::file_completed_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_completed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_completed_alert_index_set" "', argument " "1"" of type '" "libtorrent::file_completed_alert *""'"); 
  }
  arg1 = (libtorrent::file_completed_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "file_completed_alert_index_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->index = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_file_completed_alert_index_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_completed_alert *arg1 = (libtorrent::file_completed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_completed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_completed_alert_index_get" "', argument " "1"" of type '" "libtorrent::file_completed_alert *""'"); 
  }
  arg1 = (libtorrent::file_completed_alert *)(argp1);
  result = (int) ((arg1)->index);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_file_completed_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_file_completed_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_file_completed_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_file_completed_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::file_completed_alert * arg1 = (libtorrent::file_completed_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_file_completed_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class file_completed_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_file_renamed_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::file_renamed_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_file_renamed_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::file_renamed_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_file_renamed_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_renamed_alert *arg1 = (libtorrent::file_renamed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_renamed_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_renamed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_renamed_alert_type" "', argument " "1"" of type '" "libtorrent::file_renamed_alert const *""'"); 
  }
  arg1 = (libtorrent::file_renamed_alert *)(argp1);
  result = (int)((libtorrent::file_renamed_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_renamed_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_renamed_alert *arg1 = (libtorrent::file_renamed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_renamed_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_renamed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_renamed_alert_category" "', argument " "1"" of type '" "libtorrent::file_renamed_alert const *""'"); 
  }
  arg1 = (libtorrent::file_renamed_alert *)(argp1);
  result = (int)((libtorrent::file_renamed_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_renamed_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_renamed_alert *arg1 = (libtorrent::file_renamed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_renamed_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_renamed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_renamed_alert_what" "', argument " "1"" of type '" "libtorrent::file_renamed_alert const *""'"); 
  }
  arg1 = (libtorrent::file_renamed_alert *)(argp1);
  result = (char *)((libtorrent::file_renamed_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_file_renamed_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::file_renamed_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_file_renamed_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_renamed_alert *arg1 = (libtorrent::file_renamed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_renamed_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_renamed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_renamed_alert_message" "', argument " "1"" of type '" "libtorrent::file_renamed_alert const *""'"); 
  }
  arg1 = (libtorrent::file_renamed_alert *)(argp1);
  result = ((libtorrent::file_renamed_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_renamed_alert_new_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_renamed_alert *arg1 = (libtorrent::file_renamed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_renamed_alert_new_name.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_renamed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_renamed_alert_new_name" "', argument " "1"" of type '" "libtorrent::file_renamed_alert const *""'"); 
  }
  arg1 = (libtorrent::file_renamed_alert *)(argp1);
  result = (char *)((libtorrent::file_renamed_alert const *)arg1)->new_name();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_file_renamed_alert_index_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::file_renamed_alert *arg1 = (libtorrent::file_renamed_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_renamed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_renamed_alert_index_set" "', argument " "1"" of type '" "libtorrent::file_renamed_alert *""'"); 
  }
  arg1 = (libtorrent::file_renamed_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "file_renamed_alert_index_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->index = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_file_renamed_alert_index_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_renamed_alert *arg1 = (libtorrent::file_renamed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_renamed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_renamed_alert_index_get" "', argument " "1"" of type '" "libtorrent::file_renamed_alert *""'"); 
  }
  arg1 = (libtorrent::file_renamed_alert *)(argp1);
  result = (int) ((arg1)->index);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_file_renamed_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_file_renamed_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_file_renamed_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_file_renamed_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::file_renamed_alert * arg1 = (libtorrent::file_renamed_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_file_renamed_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class file_renamed_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_file_rename_failed_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::file_rename_failed_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_file_rename_failed_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::file_rename_failed_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_file_rename_failed_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_rename_failed_alert *arg1 = (libtorrent::file_rename_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_rename_failed_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_rename_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_rename_failed_alert_type" "', argument " "1"" of type '" "libtorrent::file_rename_failed_alert const *""'"); 
  }
  arg1 = (libtorrent::file_rename_failed_alert *)(argp1);
  result = (int)((libtorrent::file_rename_failed_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_rename_failed_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_rename_failed_alert *arg1 = (libtorrent::file_rename_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_rename_failed_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_rename_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_rename_failed_alert_category" "', argument " "1"" of type '" "libtorrent::file_rename_failed_alert const *""'"); 
  }
  arg1 = (libtorrent::file_rename_failed_alert *)(argp1);
  result = (int)((libtorrent::file_rename_failed_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_rename_failed_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_rename_failed_alert *arg1 = (libtorrent::file_rename_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_rename_failed_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_rename_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_rename_failed_alert_what" "', argument " "1"" of type '" "libtorrent::file_rename_failed_alert const *""'"); 
  }
  arg1 = (libtorrent::file_rename_failed_alert *)(argp1);
  result = (char *)((libtorrent::file_rename_failed_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_file_rename_failed_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::file_rename_failed_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_file_rename_failed_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_rename_failed_alert *arg1 = (libtorrent::file_rename_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_rename_failed_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_rename_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_rename_failed_alert_message" "', argument " "1"" of type '" "libtorrent::file_rename_failed_alert const *""'"); 
  }
  arg1 = (libtorrent::file_rename_failed_alert *)(argp1);
  result = ((libtorrent::file_rename_failed_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_file_rename_failed_alert_index_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::file_rename_failed_alert *arg1 = (libtorrent::file_rename_failed_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_rename_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_rename_failed_alert_index_set" "', argument " "1"" of type '" "libtorrent::file_rename_failed_alert *""'"); 
  }
  arg1 = (libtorrent::file_rename_failed_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "file_rename_failed_alert_index_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->index = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_file_rename_failed_alert_index_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_rename_failed_alert *arg1 = (libtorrent::file_rename_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_rename_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_rename_failed_alert_index_get" "', argument " "1"" of type '" "libtorrent::file_rename_failed_alert *""'"); 
  }
  arg1 = (libtorrent::file_rename_failed_alert *)(argp1);
  result = (int) ((arg1)->index);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_file_rename_failed_alert_error_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::file_rename_failed_alert *arg1 = (libtorrent::file_rename_failed_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_rename_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_rename_failed_alert_error_set" "', argument " "1"" of type '" "libtorrent::file_rename_failed_alert *""'"); 
  }
  arg1 = (libtorrent::file_rename_failed_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "file_rename_failed_alert_error_set" "', argument " "2"" of type '" "libtorrent::error_code *""'"); 
  }
  arg2 = (libtorrent::error_code *)(argp2);
  if (arg1) (arg1)->error = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_file_rename_failed_alert_error_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_rename_failed_alert *arg1 = (libtorrent::file_rename_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::error_code *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_rename_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_rename_failed_alert_error_get" "', argument " "1"" of type '" "libtorrent::file_rename_failed_alert *""'"); 
  }
  arg1 = (libtorrent::file_rename_failed_alert *)(argp1);
  result = (libtorrent::error_code *)& ((arg1)->error);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_file_rename_failed_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_file_rename_failed_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_file_rename_failed_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_file_rename_failed_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::file_rename_failed_alert * arg1 = (libtorrent::file_rename_failed_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_file_rename_failed_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class file_rename_failed_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_performance_alert_outstanding_disk_buffer_limit_reached(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::performance_alert::outstanding_disk_buffer_limit_reached));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_performance_alert_outstanding_request_limit_reached(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::performance_alert::outstanding_request_limit_reached));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_performance_alert_upload_limit_too_low(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::performance_alert::upload_limit_too_low));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_performance_alert_download_limit_too_low(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::performance_alert::download_limit_too_low));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_performance_alert_send_buffer_watermark_too_low(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::performance_alert::send_buffer_watermark_too_low));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_performance_alert_too_many_optimistic_unchoke_slots(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::performance_alert::too_many_optimistic_unchoke_slots));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_performance_alert_too_high_disk_queue_limit(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::performance_alert::too_high_disk_queue_limit));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_performance_alert_aio_limit_reached(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::performance_alert::aio_limit_reached));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_performance_alert_bittyrant_with_no_uplimit(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::performance_alert::bittyrant_with_no_uplimit));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_performance_alert_too_few_outgoing_ports(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::performance_alert::too_few_outgoing_ports));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_performance_alert_too_few_file_descriptors(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::performance_alert::too_few_file_descriptors));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_performance_alert_num_warnings(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::performance_alert::num_warnings));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_performance_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::performance_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_performance_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::performance_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_performance_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::performance_alert *arg1 = (libtorrent::performance_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_performance_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__performance_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "performance_alert_type" "', argument " "1"" of type '" "libtorrent::performance_alert const *""'"); 
  }
  arg1 = (libtorrent::performance_alert *)(argp1);
  result = (int)((libtorrent::performance_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_performance_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::performance_alert *arg1 = (libtorrent::performance_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_performance_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__performance_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "performance_alert_category" "', argument " "1"" of type '" "libtorrent::performance_alert const *""'"); 
  }
  arg1 = (libtorrent::performance_alert *)(argp1);
  result = (int)((libtorrent::performance_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_performance_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::performance_alert *arg1 = (libtorrent::performance_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_performance_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__performance_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "performance_alert_what" "', argument " "1"" of type '" "libtorrent::performance_alert const *""'"); 
  }
  arg1 = (libtorrent::performance_alert *)(argp1);
  result = (char *)((libtorrent::performance_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_performance_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::performance_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_performance_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::performance_alert *arg1 = (libtorrent::performance_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_performance_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__performance_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "performance_alert_message" "', argument " "1"" of type '" "libtorrent::performance_alert const *""'"); 
  }
  arg1 = (libtorrent::performance_alert *)(argp1);
  result = ((libtorrent::performance_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_performance_alert_warning_code_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::performance_alert *arg1 = (libtorrent::performance_alert *) 0 ;
  libtorrent::performance_alert::performance_warning_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__performance_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "performance_alert_warning_code_set" "', argument " "1"" of type '" "libtorrent::performance_alert *""'"); 
  }
  arg1 = (libtorrent::performance_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "performance_alert_warning_code_set" "', argument " "2"" of type '" "libtorrent::performance_alert::performance_warning_t""'");
  } 
  arg2 = (libtorrent::performance_alert::performance_warning_t)(val2);
  if (arg1) (arg1)->warning_code = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_performance_alert_warning_code_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::performance_alert *arg1 = (libtorrent::performance_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::performance_alert::performance_warning_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__performance_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "performance_alert_warning_code_get" "', argument " "1"" of type '" "libtorrent::performance_alert *""'"); 
  }
  arg1 = (libtorrent::performance_alert *)(argp1);
  result = (libtorrent::performance_alert::performance_warning_t) ((arg1)->warning_code);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_performance_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_performance_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_performance_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_performance_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::performance_alert * arg1 = (libtorrent::performance_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_performance_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class performance_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_state_changed_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::state_changed_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_state_changed_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::state_changed_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_state_changed_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::state_changed_alert *arg1 = (libtorrent::state_changed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_state_changed_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__state_changed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "state_changed_alert_type" "', argument " "1"" of type '" "libtorrent::state_changed_alert const *""'"); 
  }
  arg1 = (libtorrent::state_changed_alert *)(argp1);
  result = (int)((libtorrent::state_changed_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_state_changed_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::state_changed_alert *arg1 = (libtorrent::state_changed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_state_changed_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__state_changed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "state_changed_alert_category" "', argument " "1"" of type '" "libtorrent::state_changed_alert const *""'"); 
  }
  arg1 = (libtorrent::state_changed_alert *)(argp1);
  result = (int)((libtorrent::state_changed_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_state_changed_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::state_changed_alert *arg1 = (libtorrent::state_changed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_state_changed_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__state_changed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "state_changed_alert_what" "', argument " "1"" of type '" "libtorrent::state_changed_alert const *""'"); 
  }
  arg1 = (libtorrent::state_changed_alert *)(argp1);
  result = (char *)((libtorrent::state_changed_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_state_changed_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::state_changed_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_state_changed_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::state_changed_alert *arg1 = (libtorrent::state_changed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_state_changed_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__state_changed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "state_changed_alert_message" "', argument " "1"" of type '" "libtorrent::state_changed_alert const *""'"); 
  }
  arg1 = (libtorrent::state_changed_alert *)(argp1);
  result = ((libtorrent::state_changed_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_state_changed_alert_state_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::state_changed_alert *arg1 = (libtorrent::state_changed_alert *) 0 ;
  libtorrent::torrent_status::state_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__state_changed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "state_changed_alert_state_set" "', argument " "1"" of type '" "libtorrent::state_changed_alert *""'"); 
  }
  arg1 = (libtorrent::state_changed_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "state_changed_alert_state_set" "', argument " "2"" of type '" "libtorrent::torrent_status::state_t""'");
  } 
  arg2 = (libtorrent::torrent_status::state_t)(val2);
  if (arg1) (arg1)->state = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_state_changed_alert_state_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::state_changed_alert *arg1 = (libtorrent::state_changed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::torrent_status::state_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__state_changed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "state_changed_alert_state_get" "', argument " "1"" of type '" "libtorrent::state_changed_alert *""'"); 
  }
  arg1 = (libtorrent::state_changed_alert *)(argp1);
  result = (libtorrent::torrent_status::state_t) ((arg1)->state);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_state_changed_alert_prev_state_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::state_changed_alert *arg1 = (libtorrent::state_changed_alert *) 0 ;
  libtorrent::torrent_status::state_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__state_changed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "state_changed_alert_prev_state_set" "', argument " "1"" of type '" "libtorrent::state_changed_alert *""'"); 
  }
  arg1 = (libtorrent::state_changed_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "state_changed_alert_prev_state_set" "', argument " "2"" of type '" "libtorrent::torrent_status::state_t""'");
  } 
  arg2 = (libtorrent::torrent_status::state_t)(val2);
  if (arg1) (arg1)->prev_state = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_state_changed_alert_prev_state_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::state_changed_alert *arg1 = (libtorrent::state_changed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::torrent_status::state_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__state_changed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "state_changed_alert_prev_state_get" "', argument " "1"" of type '" "libtorrent::state_changed_alert *""'"); 
  }
  arg1 = (libtorrent::state_changed_alert *)(argp1);
  result = (libtorrent::torrent_status::state_t) ((arg1)->prev_state);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_state_changed_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_state_changed_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_state_changed_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_state_changed_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::state_changed_alert * arg1 = (libtorrent::state_changed_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_state_changed_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class state_changed_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_tracker_error_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::tracker_error_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_tracker_error_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::tracker_error_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tracker_error_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::tracker_error_alert *arg1 = (libtorrent::tracker_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_tracker_error_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__tracker_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tracker_error_alert_type" "', argument " "1"" of type '" "libtorrent::tracker_error_alert const *""'"); 
  }
  arg1 = (libtorrent::tracker_error_alert *)(argp1);
  result = (int)((libtorrent::tracker_error_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tracker_error_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::tracker_error_alert *arg1 = (libtorrent::tracker_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_tracker_error_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__tracker_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tracker_error_alert_category" "', argument " "1"" of type '" "libtorrent::tracker_error_alert const *""'"); 
  }
  arg1 = (libtorrent::tracker_error_alert *)(argp1);
  result = (int)((libtorrent::tracker_error_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tracker_error_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::tracker_error_alert *arg1 = (libtorrent::tracker_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_tracker_error_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__tracker_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tracker_error_alert_what" "', argument " "1"" of type '" "libtorrent::tracker_error_alert const *""'"); 
  }
  arg1 = (libtorrent::tracker_error_alert *)(argp1);
  result = (char *)((libtorrent::tracker_error_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_tracker_error_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::tracker_error_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tracker_error_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::tracker_error_alert *arg1 = (libtorrent::tracker_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_tracker_error_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__tracker_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tracker_error_alert_message" "', argument " "1"" of type '" "libtorrent::tracker_error_alert const *""'"); 
  }
  arg1 = (libtorrent::tracker_error_alert *)(argp1);
  result = ((libtorrent::tracker_error_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_tracker_error_alert_times_in_row_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::tracker_error_alert *arg1 = (libtorrent::tracker_error_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__tracker_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tracker_error_alert_times_in_row_set" "', argument " "1"" of type '" "libtorrent::tracker_error_alert *""'"); 
  }
  arg1 = (libtorrent::tracker_error_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tracker_error_alert_times_in_row_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->times_in_row = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_tracker_error_alert_times_in_row_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::tracker_error_alert *arg1 = (libtorrent::tracker_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__tracker_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tracker_error_alert_times_in_row_get" "', argument " "1"" of type '" "libtorrent::tracker_error_alert *""'"); 
  }
  arg1 = (libtorrent::tracker_error_alert *)(argp1);
  result = (int) ((arg1)->times_in_row);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_tracker_error_alert_status_code_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::tracker_error_alert *arg1 = (libtorrent::tracker_error_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__tracker_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tracker_error_alert_status_code_set" "', argument " "1"" of type '" "libtorrent::tracker_error_alert *""'"); 
  }
  arg1 = (libtorrent::tracker_error_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tracker_error_alert_status_code_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->status_code = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_tracker_error_alert_status_code_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::tracker_error_alert *arg1 = (libtorrent::tracker_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__tracker_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tracker_error_alert_status_code_get" "', argument " "1"" of type '" "libtorrent::tracker_error_alert *""'"); 
  }
  arg1 = (libtorrent::tracker_error_alert *)(argp1);
  result = (int) ((arg1)->status_code);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_tracker_error_alert_error_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::tracker_error_alert *arg1 = (libtorrent::tracker_error_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__tracker_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tracker_error_alert_error_set" "', argument " "1"" of type '" "libtorrent::tracker_error_alert *""'"); 
  }
  arg1 = (libtorrent::tracker_error_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tracker_error_alert_error_set" "', argument " "2"" of type '" "libtorrent::error_code *""'"); 
  }
  arg2 = (libtorrent::error_code *)(argp2);
  if (arg1) (arg1)->error = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_tracker_error_alert_error_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::tracker_error_alert *arg1 = (libtorrent::tracker_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::error_code *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__tracker_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tracker_error_alert_error_get" "', argument " "1"" of type '" "libtorrent::tracker_error_alert *""'"); 
  }
  arg1 = (libtorrent::tracker_error_alert *)(argp1);
  result = (libtorrent::error_code *)& ((arg1)->error);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tracker_error_alert_error_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::tracker_error_alert *arg1 = (libtorrent::tracker_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_tracker_error_alert_error_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__tracker_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tracker_error_alert_error_message" "', argument " "1"" of type '" "libtorrent::tracker_error_alert const *""'"); 
  }
  arg1 = (libtorrent::tracker_error_alert *)(argp1);
  result = (char *)((libtorrent::tracker_error_alert const *)arg1)->error_message();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_tracker_error_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_tracker_error_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_tracker_error_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_tracker_error_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::tracker_error_alert * arg1 = (libtorrent::tracker_error_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_tracker_error_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class tracker_error_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_tracker_warning_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::tracker_warning_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_tracker_warning_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::tracker_warning_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tracker_warning_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::tracker_warning_alert *arg1 = (libtorrent::tracker_warning_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_tracker_warning_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__tracker_warning_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tracker_warning_alert_type" "', argument " "1"" of type '" "libtorrent::tracker_warning_alert const *""'"); 
  }
  arg1 = (libtorrent::tracker_warning_alert *)(argp1);
  result = (int)((libtorrent::tracker_warning_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tracker_warning_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::tracker_warning_alert *arg1 = (libtorrent::tracker_warning_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_tracker_warning_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__tracker_warning_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tracker_warning_alert_category" "', argument " "1"" of type '" "libtorrent::tracker_warning_alert const *""'"); 
  }
  arg1 = (libtorrent::tracker_warning_alert *)(argp1);
  result = (int)((libtorrent::tracker_warning_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tracker_warning_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::tracker_warning_alert *arg1 = (libtorrent::tracker_warning_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_tracker_warning_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__tracker_warning_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tracker_warning_alert_what" "', argument " "1"" of type '" "libtorrent::tracker_warning_alert const *""'"); 
  }
  arg1 = (libtorrent::tracker_warning_alert *)(argp1);
  result = (char *)((libtorrent::tracker_warning_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_tracker_warning_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::tracker_warning_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tracker_warning_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::tracker_warning_alert *arg1 = (libtorrent::tracker_warning_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_tracker_warning_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__tracker_warning_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tracker_warning_alert_message" "', argument " "1"" of type '" "libtorrent::tracker_warning_alert const *""'"); 
  }
  arg1 = (libtorrent::tracker_warning_alert *)(argp1);
  result = ((libtorrent::tracker_warning_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tracker_warning_alert_warning_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::tracker_warning_alert *arg1 = (libtorrent::tracker_warning_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_tracker_warning_alert_warning_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__tracker_warning_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tracker_warning_alert_warning_message" "', argument " "1"" of type '" "libtorrent::tracker_warning_alert const *""'"); 
  }
  arg1 = (libtorrent::tracker_warning_alert *)(argp1);
  result = (char *)((libtorrent::tracker_warning_alert const *)arg1)->warning_message();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_tracker_warning_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_tracker_warning_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_tracker_warning_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_tracker_warning_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::tracker_warning_alert * arg1 = (libtorrent::tracker_warning_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_tracker_warning_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class tracker_warning_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_scrape_reply_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::scrape_reply_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_scrape_reply_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::scrape_reply_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_scrape_reply_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::scrape_reply_alert *arg1 = (libtorrent::scrape_reply_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_scrape_reply_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__scrape_reply_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scrape_reply_alert_type" "', argument " "1"" of type '" "libtorrent::scrape_reply_alert const *""'"); 
  }
  arg1 = (libtorrent::scrape_reply_alert *)(argp1);
  result = (int)((libtorrent::scrape_reply_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_scrape_reply_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::scrape_reply_alert *arg1 = (libtorrent::scrape_reply_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_scrape_reply_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__scrape_reply_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scrape_reply_alert_category" "', argument " "1"" of type '" "libtorrent::scrape_reply_alert const *""'"); 
  }
  arg1 = (libtorrent::scrape_reply_alert *)(argp1);
  result = (int)((libtorrent::scrape_reply_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_scrape_reply_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::scrape_reply_alert *arg1 = (libtorrent::scrape_reply_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_scrape_reply_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__scrape_reply_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scrape_reply_alert_what" "', argument " "1"" of type '" "libtorrent::scrape_reply_alert const *""'"); 
  }
  arg1 = (libtorrent::scrape_reply_alert *)(argp1);
  result = (char *)((libtorrent::scrape_reply_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_scrape_reply_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::scrape_reply_alert *arg1 = (libtorrent::scrape_reply_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_scrape_reply_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__scrape_reply_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scrape_reply_alert_message" "', argument " "1"" of type '" "libtorrent::scrape_reply_alert const *""'"); 
  }
  arg1 = (libtorrent::scrape_reply_alert *)(argp1);
  result = ((libtorrent::scrape_reply_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_scrape_reply_alert_incomplete_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::scrape_reply_alert *arg1 = (libtorrent::scrape_reply_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__scrape_reply_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scrape_reply_alert_incomplete_set" "', argument " "1"" of type '" "libtorrent::scrape_reply_alert *""'"); 
  }
  arg1 = (libtorrent::scrape_reply_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scrape_reply_alert_incomplete_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->incomplete = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_scrape_reply_alert_incomplete_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::scrape_reply_alert *arg1 = (libtorrent::scrape_reply_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__scrape_reply_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scrape_reply_alert_incomplete_get" "', argument " "1"" of type '" "libtorrent::scrape_reply_alert *""'"); 
  }
  arg1 = (libtorrent::scrape_reply_alert *)(argp1);
  result = (int) ((arg1)->incomplete);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_scrape_reply_alert_complete_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::scrape_reply_alert *arg1 = (libtorrent::scrape_reply_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__scrape_reply_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scrape_reply_alert_complete_set" "', argument " "1"" of type '" "libtorrent::scrape_reply_alert *""'"); 
  }
  arg1 = (libtorrent::scrape_reply_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scrape_reply_alert_complete_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->complete = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_scrape_reply_alert_complete_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::scrape_reply_alert *arg1 = (libtorrent::scrape_reply_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__scrape_reply_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scrape_reply_alert_complete_get" "', argument " "1"" of type '" "libtorrent::scrape_reply_alert *""'"); 
  }
  arg1 = (libtorrent::scrape_reply_alert *)(argp1);
  result = (int) ((arg1)->complete);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_scrape_reply_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_scrape_reply_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_scrape_reply_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_scrape_reply_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::scrape_reply_alert * arg1 = (libtorrent::scrape_reply_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_scrape_reply_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class scrape_reply_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_scrape_failed_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::scrape_failed_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_scrape_failed_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::scrape_failed_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_scrape_failed_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::scrape_failed_alert *arg1 = (libtorrent::scrape_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_scrape_failed_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__scrape_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scrape_failed_alert_type" "', argument " "1"" of type '" "libtorrent::scrape_failed_alert const *""'"); 
  }
  arg1 = (libtorrent::scrape_failed_alert *)(argp1);
  result = (int)((libtorrent::scrape_failed_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_scrape_failed_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::scrape_failed_alert *arg1 = (libtorrent::scrape_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_scrape_failed_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__scrape_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scrape_failed_alert_category" "', argument " "1"" of type '" "libtorrent::scrape_failed_alert const *""'"); 
  }
  arg1 = (libtorrent::scrape_failed_alert *)(argp1);
  result = (int)((libtorrent::scrape_failed_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_scrape_failed_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::scrape_failed_alert *arg1 = (libtorrent::scrape_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_scrape_failed_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__scrape_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scrape_failed_alert_what" "', argument " "1"" of type '" "libtorrent::scrape_failed_alert const *""'"); 
  }
  arg1 = (libtorrent::scrape_failed_alert *)(argp1);
  result = (char *)((libtorrent::scrape_failed_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_scrape_failed_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::scrape_failed_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_scrape_failed_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::scrape_failed_alert *arg1 = (libtorrent::scrape_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_scrape_failed_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__scrape_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scrape_failed_alert_message" "', argument " "1"" of type '" "libtorrent::scrape_failed_alert const *""'"); 
  }
  arg1 = (libtorrent::scrape_failed_alert *)(argp1);
  result = ((libtorrent::scrape_failed_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_scrape_failed_alert_error_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::scrape_failed_alert *arg1 = (libtorrent::scrape_failed_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__scrape_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scrape_failed_alert_error_set" "', argument " "1"" of type '" "libtorrent::scrape_failed_alert *""'"); 
  }
  arg1 = (libtorrent::scrape_failed_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "scrape_failed_alert_error_set" "', argument " "2"" of type '" "libtorrent::error_code *""'"); 
  }
  arg2 = (libtorrent::error_code *)(argp2);
  if (arg1) (arg1)->error = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_scrape_failed_alert_error_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::scrape_failed_alert *arg1 = (libtorrent::scrape_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::error_code *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__scrape_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scrape_failed_alert_error_get" "', argument " "1"" of type '" "libtorrent::scrape_failed_alert *""'"); 
  }
  arg1 = (libtorrent::scrape_failed_alert *)(argp1);
  result = (libtorrent::error_code *)& ((arg1)->error);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_scrape_failed_alert_error_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::scrape_failed_alert *arg1 = (libtorrent::scrape_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_scrape_failed_alert_error_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__scrape_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scrape_failed_alert_error_message" "', argument " "1"" of type '" "libtorrent::scrape_failed_alert const *""'"); 
  }
  arg1 = (libtorrent::scrape_failed_alert *)(argp1);
  result = (char *)((libtorrent::scrape_failed_alert const *)arg1)->error_message();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_scrape_failed_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_scrape_failed_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_scrape_failed_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_scrape_failed_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::scrape_failed_alert * arg1 = (libtorrent::scrape_failed_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_scrape_failed_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class scrape_failed_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_tracker_reply_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::tracker_reply_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_tracker_reply_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::tracker_reply_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tracker_reply_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::tracker_reply_alert *arg1 = (libtorrent::tracker_reply_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_tracker_reply_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__tracker_reply_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tracker_reply_alert_type" "', argument " "1"" of type '" "libtorrent::tracker_reply_alert const *""'"); 
  }
  arg1 = (libtorrent::tracker_reply_alert *)(argp1);
  result = (int)((libtorrent::tracker_reply_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tracker_reply_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::tracker_reply_alert *arg1 = (libtorrent::tracker_reply_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_tracker_reply_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__tracker_reply_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tracker_reply_alert_category" "', argument " "1"" of type '" "libtorrent::tracker_reply_alert const *""'"); 
  }
  arg1 = (libtorrent::tracker_reply_alert *)(argp1);
  result = (int)((libtorrent::tracker_reply_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tracker_reply_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::tracker_reply_alert *arg1 = (libtorrent::tracker_reply_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_tracker_reply_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__tracker_reply_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tracker_reply_alert_what" "', argument " "1"" of type '" "libtorrent::tracker_reply_alert const *""'"); 
  }
  arg1 = (libtorrent::tracker_reply_alert *)(argp1);
  result = (char *)((libtorrent::tracker_reply_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tracker_reply_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::tracker_reply_alert *arg1 = (libtorrent::tracker_reply_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_tracker_reply_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__tracker_reply_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tracker_reply_alert_message" "', argument " "1"" of type '" "libtorrent::tracker_reply_alert const *""'"); 
  }
  arg1 = (libtorrent::tracker_reply_alert *)(argp1);
  result = ((libtorrent::tracker_reply_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_tracker_reply_alert_num_peers_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::tracker_reply_alert *arg1 = (libtorrent::tracker_reply_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__tracker_reply_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tracker_reply_alert_num_peers_set" "', argument " "1"" of type '" "libtorrent::tracker_reply_alert *""'"); 
  }
  arg1 = (libtorrent::tracker_reply_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tracker_reply_alert_num_peers_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->num_peers = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_tracker_reply_alert_num_peers_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::tracker_reply_alert *arg1 = (libtorrent::tracker_reply_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__tracker_reply_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tracker_reply_alert_num_peers_get" "', argument " "1"" of type '" "libtorrent::tracker_reply_alert *""'"); 
  }
  arg1 = (libtorrent::tracker_reply_alert *)(argp1);
  result = (int) ((arg1)->num_peers);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_tracker_reply_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_tracker_reply_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_tracker_reply_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_tracker_reply_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::tracker_reply_alert * arg1 = (libtorrent::tracker_reply_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_tracker_reply_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class tracker_reply_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_dht_reply_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_reply_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_dht_reply_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_reply_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_dht_reply_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_reply_alert *arg1 = (libtorrent::dht_reply_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_reply_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_reply_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_reply_alert_type" "', argument " "1"" of type '" "libtorrent::dht_reply_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_reply_alert *)(argp1);
  result = (int)((libtorrent::dht_reply_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_reply_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_reply_alert *arg1 = (libtorrent::dht_reply_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_reply_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_reply_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_reply_alert_category" "', argument " "1"" of type '" "libtorrent::dht_reply_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_reply_alert *)(argp1);
  result = (int)((libtorrent::dht_reply_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_reply_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_reply_alert *arg1 = (libtorrent::dht_reply_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_reply_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_reply_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_reply_alert_what" "', argument " "1"" of type '" "libtorrent::dht_reply_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_reply_alert *)(argp1);
  result = (char *)((libtorrent::dht_reply_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_reply_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_reply_alert *arg1 = (libtorrent::dht_reply_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_reply_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_reply_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_reply_alert_message" "', argument " "1"" of type '" "libtorrent::dht_reply_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_reply_alert *)(argp1);
  result = ((libtorrent::dht_reply_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_dht_reply_alert_num_peers_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_reply_alert *arg1 = (libtorrent::dht_reply_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_reply_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_reply_alert_num_peers_set" "', argument " "1"" of type '" "libtorrent::dht_reply_alert *""'"); 
  }
  arg1 = (libtorrent::dht_reply_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_reply_alert_num_peers_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->num_peers = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_reply_alert_num_peers_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_reply_alert *arg1 = (libtorrent::dht_reply_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_reply_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_reply_alert_num_peers_get" "', argument " "1"" of type '" "libtorrent::dht_reply_alert *""'"); 
  }
  arg1 = (libtorrent::dht_reply_alert *)(argp1);
  result = (int) ((arg1)->num_peers);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_dht_reply_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_dht_reply_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_dht_reply_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_dht_reply_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::dht_reply_alert * arg1 = (libtorrent::dht_reply_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_dht_reply_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class dht_reply_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_tracker_announce_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::tracker_announce_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_tracker_announce_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::tracker_announce_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tracker_announce_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::tracker_announce_alert *arg1 = (libtorrent::tracker_announce_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_tracker_announce_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__tracker_announce_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tracker_announce_alert_type" "', argument " "1"" of type '" "libtorrent::tracker_announce_alert const *""'"); 
  }
  arg1 = (libtorrent::tracker_announce_alert *)(argp1);
  result = (int)((libtorrent::tracker_announce_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tracker_announce_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::tracker_announce_alert *arg1 = (libtorrent::tracker_announce_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_tracker_announce_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__tracker_announce_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tracker_announce_alert_category" "', argument " "1"" of type '" "libtorrent::tracker_announce_alert const *""'"); 
  }
  arg1 = (libtorrent::tracker_announce_alert *)(argp1);
  result = (int)((libtorrent::tracker_announce_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tracker_announce_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::tracker_announce_alert *arg1 = (libtorrent::tracker_announce_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_tracker_announce_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__tracker_announce_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tracker_announce_alert_what" "', argument " "1"" of type '" "libtorrent::tracker_announce_alert const *""'"); 
  }
  arg1 = (libtorrent::tracker_announce_alert *)(argp1);
  result = (char *)((libtorrent::tracker_announce_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tracker_announce_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::tracker_announce_alert *arg1 = (libtorrent::tracker_announce_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_tracker_announce_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__tracker_announce_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tracker_announce_alert_message" "', argument " "1"" of type '" "libtorrent::tracker_announce_alert const *""'"); 
  }
  arg1 = (libtorrent::tracker_announce_alert *)(argp1);
  result = ((libtorrent::tracker_announce_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_tracker_announce_alert_event_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::tracker_announce_alert *arg1 = (libtorrent::tracker_announce_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__tracker_announce_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tracker_announce_alert_event_set" "', argument " "1"" of type '" "libtorrent::tracker_announce_alert *""'"); 
  }
  arg1 = (libtorrent::tracker_announce_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tracker_announce_alert_event_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->event = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_tracker_announce_alert_event_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::tracker_announce_alert *arg1 = (libtorrent::tracker_announce_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__tracker_announce_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tracker_announce_alert_event_get" "', argument " "1"" of type '" "libtorrent::tracker_announce_alert *""'"); 
  }
  arg1 = (libtorrent::tracker_announce_alert *)(argp1);
  result = (int) ((arg1)->event);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_tracker_announce_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_tracker_announce_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_tracker_announce_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_tracker_announce_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::tracker_announce_alert * arg1 = (libtorrent::tracker_announce_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_tracker_announce_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class tracker_announce_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_hash_failed_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::hash_failed_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_hash_failed_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::hash_failed_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_hash_failed_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::hash_failed_alert *arg1 = (libtorrent::hash_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_hash_failed_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__hash_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hash_failed_alert_type" "', argument " "1"" of type '" "libtorrent::hash_failed_alert const *""'"); 
  }
  arg1 = (libtorrent::hash_failed_alert *)(argp1);
  result = (int)((libtorrent::hash_failed_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_hash_failed_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::hash_failed_alert *arg1 = (libtorrent::hash_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_hash_failed_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__hash_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hash_failed_alert_category" "', argument " "1"" of type '" "libtorrent::hash_failed_alert const *""'"); 
  }
  arg1 = (libtorrent::hash_failed_alert *)(argp1);
  result = (int)((libtorrent::hash_failed_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_hash_failed_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::hash_failed_alert *arg1 = (libtorrent::hash_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_hash_failed_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__hash_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hash_failed_alert_what" "', argument " "1"" of type '" "libtorrent::hash_failed_alert const *""'"); 
  }
  arg1 = (libtorrent::hash_failed_alert *)(argp1);
  result = (char *)((libtorrent::hash_failed_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_hash_failed_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::hash_failed_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_hash_failed_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::hash_failed_alert *arg1 = (libtorrent::hash_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_hash_failed_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__hash_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hash_failed_alert_message" "', argument " "1"" of type '" "libtorrent::hash_failed_alert const *""'"); 
  }
  arg1 = (libtorrent::hash_failed_alert *)(argp1);
  result = ((libtorrent::hash_failed_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_hash_failed_alert_piece_index_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::hash_failed_alert *arg1 = (libtorrent::hash_failed_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__hash_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hash_failed_alert_piece_index_set" "', argument " "1"" of type '" "libtorrent::hash_failed_alert *""'"); 
  }
  arg1 = (libtorrent::hash_failed_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hash_failed_alert_piece_index_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->piece_index = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_hash_failed_alert_piece_index_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::hash_failed_alert *arg1 = (libtorrent::hash_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__hash_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hash_failed_alert_piece_index_get" "', argument " "1"" of type '" "libtorrent::hash_failed_alert *""'"); 
  }
  arg1 = (libtorrent::hash_failed_alert *)(argp1);
  result = (int) ((arg1)->piece_index);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_hash_failed_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_hash_failed_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_hash_failed_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_hash_failed_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::hash_failed_alert * arg1 = (libtorrent::hash_failed_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_hash_failed_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class hash_failed_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_peer_ban_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_ban_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_ban_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_ban_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_peer_ban_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_ban_alert *arg1 = (libtorrent::peer_ban_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_ban_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_ban_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_ban_alert_type" "', argument " "1"" of type '" "libtorrent::peer_ban_alert const *""'"); 
  }
  arg1 = (libtorrent::peer_ban_alert *)(argp1);
  result = (int)((libtorrent::peer_ban_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_ban_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_ban_alert *arg1 = (libtorrent::peer_ban_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_ban_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_ban_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_ban_alert_category" "', argument " "1"" of type '" "libtorrent::peer_ban_alert const *""'"); 
  }
  arg1 = (libtorrent::peer_ban_alert *)(argp1);
  result = (int)((libtorrent::peer_ban_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_ban_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_ban_alert *arg1 = (libtorrent::peer_ban_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_ban_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_ban_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_ban_alert_what" "', argument " "1"" of type '" "libtorrent::peer_ban_alert const *""'"); 
  }
  arg1 = (libtorrent::peer_ban_alert *)(argp1);
  result = (char *)((libtorrent::peer_ban_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_ban_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_ban_alert *arg1 = (libtorrent::peer_ban_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_ban_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_ban_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_ban_alert_message" "', argument " "1"" of type '" "libtorrent::peer_ban_alert const *""'"); 
  }
  arg1 = (libtorrent::peer_ban_alert *)(argp1);
  result = ((libtorrent::peer_ban_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_peer_ban_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_peer_ban_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_peer_ban_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_peer_ban_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::peer_ban_alert * arg1 = (libtorrent::peer_ban_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_peer_ban_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class peer_ban_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_peer_unsnubbed_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_unsnubbed_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_unsnubbed_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_unsnubbed_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_peer_unsnubbed_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_unsnubbed_alert *arg1 = (libtorrent::peer_unsnubbed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_unsnubbed_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_unsnubbed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_unsnubbed_alert_type" "', argument " "1"" of type '" "libtorrent::peer_unsnubbed_alert const *""'"); 
  }
  arg1 = (libtorrent::peer_unsnubbed_alert *)(argp1);
  result = (int)((libtorrent::peer_unsnubbed_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_unsnubbed_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_unsnubbed_alert *arg1 = (libtorrent::peer_unsnubbed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_unsnubbed_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_unsnubbed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_unsnubbed_alert_category" "', argument " "1"" of type '" "libtorrent::peer_unsnubbed_alert const *""'"); 
  }
  arg1 = (libtorrent::peer_unsnubbed_alert *)(argp1);
  result = (int)((libtorrent::peer_unsnubbed_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_unsnubbed_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_unsnubbed_alert *arg1 = (libtorrent::peer_unsnubbed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_unsnubbed_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_unsnubbed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_unsnubbed_alert_what" "', argument " "1"" of type '" "libtorrent::peer_unsnubbed_alert const *""'"); 
  }
  arg1 = (libtorrent::peer_unsnubbed_alert *)(argp1);
  result = (char *)((libtorrent::peer_unsnubbed_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_unsnubbed_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_unsnubbed_alert *arg1 = (libtorrent::peer_unsnubbed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_unsnubbed_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_unsnubbed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_unsnubbed_alert_message" "', argument " "1"" of type '" "libtorrent::peer_unsnubbed_alert const *""'"); 
  }
  arg1 = (libtorrent::peer_unsnubbed_alert *)(argp1);
  result = ((libtorrent::peer_unsnubbed_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_peer_unsnubbed_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_peer_unsnubbed_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_peer_unsnubbed_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_peer_unsnubbed_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::peer_unsnubbed_alert * arg1 = (libtorrent::peer_unsnubbed_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_peer_unsnubbed_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class peer_unsnubbed_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_peer_snubbed_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_snubbed_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_snubbed_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_snubbed_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_peer_snubbed_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_snubbed_alert *arg1 = (libtorrent::peer_snubbed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_snubbed_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_snubbed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_snubbed_alert_type" "', argument " "1"" of type '" "libtorrent::peer_snubbed_alert const *""'"); 
  }
  arg1 = (libtorrent::peer_snubbed_alert *)(argp1);
  result = (int)((libtorrent::peer_snubbed_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_snubbed_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_snubbed_alert *arg1 = (libtorrent::peer_snubbed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_snubbed_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_snubbed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_snubbed_alert_category" "', argument " "1"" of type '" "libtorrent::peer_snubbed_alert const *""'"); 
  }
  arg1 = (libtorrent::peer_snubbed_alert *)(argp1);
  result = (int)((libtorrent::peer_snubbed_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_snubbed_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_snubbed_alert *arg1 = (libtorrent::peer_snubbed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_snubbed_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_snubbed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_snubbed_alert_what" "', argument " "1"" of type '" "libtorrent::peer_snubbed_alert const *""'"); 
  }
  arg1 = (libtorrent::peer_snubbed_alert *)(argp1);
  result = (char *)((libtorrent::peer_snubbed_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_snubbed_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_snubbed_alert *arg1 = (libtorrent::peer_snubbed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_snubbed_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_snubbed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_snubbed_alert_message" "', argument " "1"" of type '" "libtorrent::peer_snubbed_alert const *""'"); 
  }
  arg1 = (libtorrent::peer_snubbed_alert *)(argp1);
  result = ((libtorrent::peer_snubbed_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_peer_snubbed_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_peer_snubbed_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_peer_snubbed_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_peer_snubbed_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::peer_snubbed_alert * arg1 = (libtorrent::peer_snubbed_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_peer_snubbed_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class peer_snubbed_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_peer_error_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_error_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_error_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_error_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_peer_error_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_error_alert *arg1 = (libtorrent::peer_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_error_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_error_alert_type" "', argument " "1"" of type '" "libtorrent::peer_error_alert const *""'"); 
  }
  arg1 = (libtorrent::peer_error_alert *)(argp1);
  result = (int)((libtorrent::peer_error_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_error_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_error_alert *arg1 = (libtorrent::peer_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_error_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_error_alert_category" "', argument " "1"" of type '" "libtorrent::peer_error_alert const *""'"); 
  }
  arg1 = (libtorrent::peer_error_alert *)(argp1);
  result = (int)((libtorrent::peer_error_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_error_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_error_alert *arg1 = (libtorrent::peer_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_error_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_error_alert_what" "', argument " "1"" of type '" "libtorrent::peer_error_alert const *""'"); 
  }
  arg1 = (libtorrent::peer_error_alert *)(argp1);
  result = (char *)((libtorrent::peer_error_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_peer_error_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_error_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_peer_error_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_error_alert *arg1 = (libtorrent::peer_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_error_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_error_alert_message" "', argument " "1"" of type '" "libtorrent::peer_error_alert const *""'"); 
  }
  arg1 = (libtorrent::peer_error_alert *)(argp1);
  result = ((libtorrent::peer_error_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_peer_error_alert_operation_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_error_alert *arg1 = (libtorrent::peer_error_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_error_alert_operation_set" "', argument " "1"" of type '" "libtorrent::peer_error_alert *""'"); 
  }
  arg1 = (libtorrent::peer_error_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_error_alert_operation_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->operation = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_error_alert_operation_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_error_alert *arg1 = (libtorrent::peer_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_error_alert_operation_get" "', argument " "1"" of type '" "libtorrent::peer_error_alert *""'"); 
  }
  arg1 = (libtorrent::peer_error_alert *)(argp1);
  result = (int) ((arg1)->operation);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_error_alert_error_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_error_alert *arg1 = (libtorrent::peer_error_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_error_alert_error_set" "', argument " "1"" of type '" "libtorrent::peer_error_alert *""'"); 
  }
  arg1 = (libtorrent::peer_error_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "peer_error_alert_error_set" "', argument " "2"" of type '" "libtorrent::error_code *""'"); 
  }
  arg2 = (libtorrent::error_code *)(argp2);
  if (arg1) (arg1)->error = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_error_alert_error_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_error_alert *arg1 = (libtorrent::peer_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::error_code *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_error_alert_error_get" "', argument " "1"" of type '" "libtorrent::peer_error_alert *""'"); 
  }
  arg1 = (libtorrent::peer_error_alert *)(argp1);
  result = (libtorrent::error_code *)& ((arg1)->error);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_peer_error_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_peer_error_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_peer_error_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_peer_error_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::peer_error_alert * arg1 = (libtorrent::peer_error_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_peer_error_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class peer_error_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_peer_connect_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_connect_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_connect_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_connect_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_peer_connect_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connect_alert *arg1 = (libtorrent::peer_connect_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_connect_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connect_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connect_alert_type" "', argument " "1"" of type '" "libtorrent::peer_connect_alert const *""'"); 
  }
  arg1 = (libtorrent::peer_connect_alert *)(argp1);
  result = (int)((libtorrent::peer_connect_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connect_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connect_alert *arg1 = (libtorrent::peer_connect_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_connect_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connect_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connect_alert_category" "', argument " "1"" of type '" "libtorrent::peer_connect_alert const *""'"); 
  }
  arg1 = (libtorrent::peer_connect_alert *)(argp1);
  result = (int)((libtorrent::peer_connect_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connect_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connect_alert *arg1 = (libtorrent::peer_connect_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_connect_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connect_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connect_alert_what" "', argument " "1"" of type '" "libtorrent::peer_connect_alert const *""'"); 
  }
  arg1 = (libtorrent::peer_connect_alert *)(argp1);
  result = (char *)((libtorrent::peer_connect_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_peer_connect_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_connect_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_peer_connect_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connect_alert *arg1 = (libtorrent::peer_connect_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_connect_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connect_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connect_alert_message" "', argument " "1"" of type '" "libtorrent::peer_connect_alert const *""'"); 
  }
  arg1 = (libtorrent::peer_connect_alert *)(argp1);
  result = ((libtorrent::peer_connect_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_peer_connect_alert_socket_type_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_connect_alert *arg1 = (libtorrent::peer_connect_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connect_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connect_alert_socket_type_set" "', argument " "1"" of type '" "libtorrent::peer_connect_alert *""'"); 
  }
  arg1 = (libtorrent::peer_connect_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_connect_alert_socket_type_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->socket_type = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_connect_alert_socket_type_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connect_alert *arg1 = (libtorrent::peer_connect_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connect_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connect_alert_socket_type_get" "', argument " "1"" of type '" "libtorrent::peer_connect_alert *""'"); 
  }
  arg1 = (libtorrent::peer_connect_alert *)(argp1);
  result = (int) ((arg1)->socket_type);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_peer_connect_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_peer_connect_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_peer_connect_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_peer_connect_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::peer_connect_alert * arg1 = (libtorrent::peer_connect_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_peer_connect_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class peer_connect_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_peer_disconnected_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_disconnected_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_disconnected_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_disconnected_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_peer_disconnected_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_disconnected_alert *arg1 = (libtorrent::peer_disconnected_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_disconnected_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_disconnected_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_disconnected_alert_type" "', argument " "1"" of type '" "libtorrent::peer_disconnected_alert const *""'"); 
  }
  arg1 = (libtorrent::peer_disconnected_alert *)(argp1);
  result = (int)((libtorrent::peer_disconnected_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_disconnected_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_disconnected_alert *arg1 = (libtorrent::peer_disconnected_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_disconnected_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_disconnected_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_disconnected_alert_category" "', argument " "1"" of type '" "libtorrent::peer_disconnected_alert const *""'"); 
  }
  arg1 = (libtorrent::peer_disconnected_alert *)(argp1);
  result = (int)((libtorrent::peer_disconnected_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_disconnected_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_disconnected_alert *arg1 = (libtorrent::peer_disconnected_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_disconnected_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_disconnected_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_disconnected_alert_what" "', argument " "1"" of type '" "libtorrent::peer_disconnected_alert const *""'"); 
  }
  arg1 = (libtorrent::peer_disconnected_alert *)(argp1);
  result = (char *)((libtorrent::peer_disconnected_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_peer_disconnected_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_disconnected_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_peer_disconnected_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_disconnected_alert *arg1 = (libtorrent::peer_disconnected_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_disconnected_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_disconnected_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_disconnected_alert_message" "', argument " "1"" of type '" "libtorrent::peer_disconnected_alert const *""'"); 
  }
  arg1 = (libtorrent::peer_disconnected_alert *)(argp1);
  result = ((libtorrent::peer_disconnected_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_peer_disconnected_alert_socket_type_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_disconnected_alert *arg1 = (libtorrent::peer_disconnected_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_disconnected_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_disconnected_alert_socket_type_set" "', argument " "1"" of type '" "libtorrent::peer_disconnected_alert *""'"); 
  }
  arg1 = (libtorrent::peer_disconnected_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_disconnected_alert_socket_type_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->socket_type = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_disconnected_alert_socket_type_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_disconnected_alert *arg1 = (libtorrent::peer_disconnected_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_disconnected_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_disconnected_alert_socket_type_get" "', argument " "1"" of type '" "libtorrent::peer_disconnected_alert *""'"); 
  }
  arg1 = (libtorrent::peer_disconnected_alert *)(argp1);
  result = (int) ((arg1)->socket_type);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_disconnected_alert_operation_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_disconnected_alert *arg1 = (libtorrent::peer_disconnected_alert *) 0 ;
  libtorrent::operation_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_disconnected_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_disconnected_alert_operation_set" "', argument " "1"" of type '" "libtorrent::peer_disconnected_alert *""'"); 
  }
  arg1 = (libtorrent::peer_disconnected_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_disconnected_alert_operation_set" "', argument " "2"" of type '" "libtorrent::operation_t""'");
  } 
  arg2 = (libtorrent::operation_t)(val2);
  if (arg1) (arg1)->operation = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_disconnected_alert_operation_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_disconnected_alert *arg1 = (libtorrent::peer_disconnected_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::operation_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_disconnected_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_disconnected_alert_operation_get" "', argument " "1"" of type '" "libtorrent::peer_disconnected_alert *""'"); 
  }
  arg1 = (libtorrent::peer_disconnected_alert *)(argp1);
  result = (libtorrent::operation_t) ((arg1)->operation);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_disconnected_alert_error_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_disconnected_alert *arg1 = (libtorrent::peer_disconnected_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_disconnected_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_disconnected_alert_error_set" "', argument " "1"" of type '" "libtorrent::peer_disconnected_alert *""'"); 
  }
  arg1 = (libtorrent::peer_disconnected_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "peer_disconnected_alert_error_set" "', argument " "2"" of type '" "libtorrent::error_code *""'"); 
  }
  arg2 = (libtorrent::error_code *)(argp2);
  if (arg1) (arg1)->error = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_disconnected_alert_error_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_disconnected_alert *arg1 = (libtorrent::peer_disconnected_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::error_code *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_disconnected_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_disconnected_alert_error_get" "', argument " "1"" of type '" "libtorrent::peer_disconnected_alert *""'"); 
  }
  arg1 = (libtorrent::peer_disconnected_alert *)(argp1);
  result = (libtorrent::error_code *)& ((arg1)->error);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_disconnected_alert_reason_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_disconnected_alert *arg1 = (libtorrent::peer_disconnected_alert *) 0 ;
  libtorrent::close_reason_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_disconnected_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_disconnected_alert_reason_set" "', argument " "1"" of type '" "libtorrent::peer_disconnected_alert *""'"); 
  }
  arg1 = (libtorrent::peer_disconnected_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_disconnected_alert_reason_set" "', argument " "2"" of type '" "libtorrent::close_reason_t""'");
  } 
  arg2 = (libtorrent::close_reason_t)(val2);
  if (arg1) (arg1)->reason = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_disconnected_alert_reason_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_disconnected_alert *arg1 = (libtorrent::peer_disconnected_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::close_reason_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_disconnected_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_disconnected_alert_reason_get" "', argument " "1"" of type '" "libtorrent::peer_disconnected_alert *""'"); 
  }
  arg1 = (libtorrent::peer_disconnected_alert *)(argp1);
  result = (libtorrent::close_reason_t) ((arg1)->reason);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_peer_disconnected_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_peer_disconnected_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_peer_disconnected_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_peer_disconnected_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::peer_disconnected_alert * arg1 = (libtorrent::peer_disconnected_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_peer_disconnected_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class peer_disconnected_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_invalid_request_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::invalid_request_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_invalid_request_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::invalid_request_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_invalid_request_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::invalid_request_alert *arg1 = (libtorrent::invalid_request_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_invalid_request_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__invalid_request_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "invalid_request_alert_type" "', argument " "1"" of type '" "libtorrent::invalid_request_alert const *""'"); 
  }
  arg1 = (libtorrent::invalid_request_alert *)(argp1);
  result = (int)((libtorrent::invalid_request_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_invalid_request_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::invalid_request_alert *arg1 = (libtorrent::invalid_request_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_invalid_request_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__invalid_request_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "invalid_request_alert_category" "', argument " "1"" of type '" "libtorrent::invalid_request_alert const *""'"); 
  }
  arg1 = (libtorrent::invalid_request_alert *)(argp1);
  result = (int)((libtorrent::invalid_request_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_invalid_request_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::invalid_request_alert *arg1 = (libtorrent::invalid_request_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_invalid_request_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__invalid_request_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "invalid_request_alert_what" "', argument " "1"" of type '" "libtorrent::invalid_request_alert const *""'"); 
  }
  arg1 = (libtorrent::invalid_request_alert *)(argp1);
  result = (char *)((libtorrent::invalid_request_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_invalid_request_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::invalid_request_alert *arg1 = (libtorrent::invalid_request_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_invalid_request_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__invalid_request_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "invalid_request_alert_message" "', argument " "1"" of type '" "libtorrent::invalid_request_alert const *""'"); 
  }
  arg1 = (libtorrent::invalid_request_alert *)(argp1);
  result = ((libtorrent::invalid_request_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_invalid_request_alert_request_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::invalid_request_alert *arg1 = (libtorrent::invalid_request_alert *) 0 ;
  libtorrent::peer_request *arg2 = (libtorrent::peer_request *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__invalid_request_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "invalid_request_alert_request_set" "', argument " "1"" of type '" "libtorrent::invalid_request_alert *""'"); 
  }
  arg1 = (libtorrent::invalid_request_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__peer_request, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "invalid_request_alert_request_set" "', argument " "2"" of type '" "libtorrent::peer_request *""'"); 
  }
  arg2 = (libtorrent::peer_request *)(argp2);
  if (arg1) (arg1)->request = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_invalid_request_alert_request_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::invalid_request_alert *arg1 = (libtorrent::invalid_request_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::peer_request *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__invalid_request_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "invalid_request_alert_request_get" "', argument " "1"" of type '" "libtorrent::invalid_request_alert *""'"); 
  }
  arg1 = (libtorrent::invalid_request_alert *)(argp1);
  result = (libtorrent::peer_request *)& ((arg1)->request);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__peer_request, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_invalid_request_alert_we_have_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::invalid_request_alert *arg1 = (libtorrent::invalid_request_alert *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__invalid_request_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "invalid_request_alert_we_have_set" "', argument " "1"" of type '" "libtorrent::invalid_request_alert *""'"); 
  }
  arg1 = (libtorrent::invalid_request_alert *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "invalid_request_alert_we_have_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->we_have = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_invalid_request_alert_we_have_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::invalid_request_alert *arg1 = (libtorrent::invalid_request_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__invalid_request_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "invalid_request_alert_we_have_get" "', argument " "1"" of type '" "libtorrent::invalid_request_alert *""'"); 
  }
  arg1 = (libtorrent::invalid_request_alert *)(argp1);
  result = (bool) ((arg1)->we_have);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_invalid_request_alert_peer_interested_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::invalid_request_alert *arg1 = (libtorrent::invalid_request_alert *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__invalid_request_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "invalid_request_alert_peer_interested_set" "', argument " "1"" of type '" "libtorrent::invalid_request_alert *""'"); 
  }
  arg1 = (libtorrent::invalid_request_alert *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "invalid_request_alert_peer_interested_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->peer_interested = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_invalid_request_alert_peer_interested_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::invalid_request_alert *arg1 = (libtorrent::invalid_request_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__invalid_request_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "invalid_request_alert_peer_interested_get" "', argument " "1"" of type '" "libtorrent::invalid_request_alert *""'"); 
  }
  arg1 = (libtorrent::invalid_request_alert *)(argp1);
  result = (bool) ((arg1)->peer_interested);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_invalid_request_alert_withheld_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::invalid_request_alert *arg1 = (libtorrent::invalid_request_alert *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__invalid_request_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "invalid_request_alert_withheld_set" "', argument " "1"" of type '" "libtorrent::invalid_request_alert *""'"); 
  }
  arg1 = (libtorrent::invalid_request_alert *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "invalid_request_alert_withheld_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->withheld = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_invalid_request_alert_withheld_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::invalid_request_alert *arg1 = (libtorrent::invalid_request_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__invalid_request_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "invalid_request_alert_withheld_get" "', argument " "1"" of type '" "libtorrent::invalid_request_alert *""'"); 
  }
  arg1 = (libtorrent::invalid_request_alert *)(argp1);
  result = (bool) ((arg1)->withheld);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_invalid_request_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_invalid_request_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_invalid_request_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_invalid_request_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::invalid_request_alert * arg1 = (libtorrent::invalid_request_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_invalid_request_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class invalid_request_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_finished_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_finished_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_finished_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_finished_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_torrent_finished_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_finished_alert *arg1 = (libtorrent::torrent_finished_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_finished_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_finished_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_finished_alert_type" "', argument " "1"" of type '" "libtorrent::torrent_finished_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_finished_alert *)(argp1);
  result = (int)((libtorrent::torrent_finished_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_finished_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_finished_alert *arg1 = (libtorrent::torrent_finished_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_finished_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_finished_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_finished_alert_category" "', argument " "1"" of type '" "libtorrent::torrent_finished_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_finished_alert *)(argp1);
  result = (int)((libtorrent::torrent_finished_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_finished_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_finished_alert *arg1 = (libtorrent::torrent_finished_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_finished_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_finished_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_finished_alert_what" "', argument " "1"" of type '" "libtorrent::torrent_finished_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_finished_alert *)(argp1);
  result = (char *)((libtorrent::torrent_finished_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_finished_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_finished_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_torrent_finished_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_finished_alert *arg1 = (libtorrent::torrent_finished_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_finished_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_finished_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_finished_alert_message" "', argument " "1"" of type '" "libtorrent::torrent_finished_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_finished_alert *)(argp1);
  result = ((libtorrent::torrent_finished_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_torrent_finished_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_torrent_finished_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_torrent_finished_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_torrent_finished_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::torrent_finished_alert * arg1 = (libtorrent::torrent_finished_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_torrent_finished_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class torrent_finished_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_piece_finished_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::piece_finished_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_piece_finished_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::piece_finished_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_piece_finished_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::piece_finished_alert *arg1 = (libtorrent::piece_finished_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_piece_finished_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__piece_finished_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "piece_finished_alert_type" "', argument " "1"" of type '" "libtorrent::piece_finished_alert const *""'"); 
  }
  arg1 = (libtorrent::piece_finished_alert *)(argp1);
  result = (int)((libtorrent::piece_finished_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_piece_finished_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::piece_finished_alert *arg1 = (libtorrent::piece_finished_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_piece_finished_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__piece_finished_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "piece_finished_alert_category" "', argument " "1"" of type '" "libtorrent::piece_finished_alert const *""'"); 
  }
  arg1 = (libtorrent::piece_finished_alert *)(argp1);
  result = (int)((libtorrent::piece_finished_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_piece_finished_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::piece_finished_alert *arg1 = (libtorrent::piece_finished_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_piece_finished_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__piece_finished_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "piece_finished_alert_what" "', argument " "1"" of type '" "libtorrent::piece_finished_alert const *""'"); 
  }
  arg1 = (libtorrent::piece_finished_alert *)(argp1);
  result = (char *)((libtorrent::piece_finished_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_piece_finished_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::piece_finished_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_piece_finished_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::piece_finished_alert *arg1 = (libtorrent::piece_finished_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_piece_finished_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__piece_finished_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "piece_finished_alert_message" "', argument " "1"" of type '" "libtorrent::piece_finished_alert const *""'"); 
  }
  arg1 = (libtorrent::piece_finished_alert *)(argp1);
  result = ((libtorrent::piece_finished_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_piece_finished_alert_piece_index_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::piece_finished_alert *arg1 = (libtorrent::piece_finished_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__piece_finished_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "piece_finished_alert_piece_index_set" "', argument " "1"" of type '" "libtorrent::piece_finished_alert *""'"); 
  }
  arg1 = (libtorrent::piece_finished_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "piece_finished_alert_piece_index_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->piece_index = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_piece_finished_alert_piece_index_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::piece_finished_alert *arg1 = (libtorrent::piece_finished_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__piece_finished_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "piece_finished_alert_piece_index_get" "', argument " "1"" of type '" "libtorrent::piece_finished_alert *""'"); 
  }
  arg1 = (libtorrent::piece_finished_alert *)(argp1);
  result = (int) ((arg1)->piece_index);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_piece_finished_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_piece_finished_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_piece_finished_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_piece_finished_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::piece_finished_alert * arg1 = (libtorrent::piece_finished_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_piece_finished_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class piece_finished_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_request_dropped_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::request_dropped_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_request_dropped_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::request_dropped_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_request_dropped_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::request_dropped_alert *arg1 = (libtorrent::request_dropped_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_request_dropped_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__request_dropped_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "request_dropped_alert_type" "', argument " "1"" of type '" "libtorrent::request_dropped_alert const *""'"); 
  }
  arg1 = (libtorrent::request_dropped_alert *)(argp1);
  result = (int)((libtorrent::request_dropped_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_request_dropped_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::request_dropped_alert *arg1 = (libtorrent::request_dropped_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_request_dropped_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__request_dropped_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "request_dropped_alert_category" "', argument " "1"" of type '" "libtorrent::request_dropped_alert const *""'"); 
  }
  arg1 = (libtorrent::request_dropped_alert *)(argp1);
  result = (int)((libtorrent::request_dropped_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_request_dropped_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::request_dropped_alert *arg1 = (libtorrent::request_dropped_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_request_dropped_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__request_dropped_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "request_dropped_alert_what" "', argument " "1"" of type '" "libtorrent::request_dropped_alert const *""'"); 
  }
  arg1 = (libtorrent::request_dropped_alert *)(argp1);
  result = (char *)((libtorrent::request_dropped_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_request_dropped_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::request_dropped_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_request_dropped_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::request_dropped_alert *arg1 = (libtorrent::request_dropped_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_request_dropped_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__request_dropped_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "request_dropped_alert_message" "', argument " "1"" of type '" "libtorrent::request_dropped_alert const *""'"); 
  }
  arg1 = (libtorrent::request_dropped_alert *)(argp1);
  result = ((libtorrent::request_dropped_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_request_dropped_alert_block_index_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::request_dropped_alert *arg1 = (libtorrent::request_dropped_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__request_dropped_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "request_dropped_alert_block_index_set" "', argument " "1"" of type '" "libtorrent::request_dropped_alert *""'"); 
  }
  arg1 = (libtorrent::request_dropped_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "request_dropped_alert_block_index_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->block_index = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_request_dropped_alert_block_index_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::request_dropped_alert *arg1 = (libtorrent::request_dropped_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__request_dropped_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "request_dropped_alert_block_index_get" "', argument " "1"" of type '" "libtorrent::request_dropped_alert *""'"); 
  }
  arg1 = (libtorrent::request_dropped_alert *)(argp1);
  result = (int) ((arg1)->block_index);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_request_dropped_alert_piece_index_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::request_dropped_alert *arg1 = (libtorrent::request_dropped_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__request_dropped_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "request_dropped_alert_piece_index_set" "', argument " "1"" of type '" "libtorrent::request_dropped_alert *""'"); 
  }
  arg1 = (libtorrent::request_dropped_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "request_dropped_alert_piece_index_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->piece_index = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_request_dropped_alert_piece_index_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::request_dropped_alert *arg1 = (libtorrent::request_dropped_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__request_dropped_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "request_dropped_alert_piece_index_get" "', argument " "1"" of type '" "libtorrent::request_dropped_alert *""'"); 
  }
  arg1 = (libtorrent::request_dropped_alert *)(argp1);
  result = (int) ((arg1)->piece_index);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_request_dropped_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_request_dropped_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_request_dropped_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_request_dropped_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::request_dropped_alert * arg1 = (libtorrent::request_dropped_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_request_dropped_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class request_dropped_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_block_timeout_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::block_timeout_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_block_timeout_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::block_timeout_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_block_timeout_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::block_timeout_alert *arg1 = (libtorrent::block_timeout_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_block_timeout_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__block_timeout_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_timeout_alert_type" "', argument " "1"" of type '" "libtorrent::block_timeout_alert const *""'"); 
  }
  arg1 = (libtorrent::block_timeout_alert *)(argp1);
  result = (int)((libtorrent::block_timeout_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_block_timeout_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::block_timeout_alert *arg1 = (libtorrent::block_timeout_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_block_timeout_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__block_timeout_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_timeout_alert_category" "', argument " "1"" of type '" "libtorrent::block_timeout_alert const *""'"); 
  }
  arg1 = (libtorrent::block_timeout_alert *)(argp1);
  result = (int)((libtorrent::block_timeout_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_block_timeout_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::block_timeout_alert *arg1 = (libtorrent::block_timeout_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_block_timeout_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__block_timeout_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_timeout_alert_what" "', argument " "1"" of type '" "libtorrent::block_timeout_alert const *""'"); 
  }
  arg1 = (libtorrent::block_timeout_alert *)(argp1);
  result = (char *)((libtorrent::block_timeout_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_block_timeout_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::block_timeout_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_block_timeout_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::block_timeout_alert *arg1 = (libtorrent::block_timeout_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_block_timeout_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__block_timeout_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_timeout_alert_message" "', argument " "1"" of type '" "libtorrent::block_timeout_alert const *""'"); 
  }
  arg1 = (libtorrent::block_timeout_alert *)(argp1);
  result = ((libtorrent::block_timeout_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_block_timeout_alert_block_index_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::block_timeout_alert *arg1 = (libtorrent::block_timeout_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__block_timeout_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_timeout_alert_block_index_set" "', argument " "1"" of type '" "libtorrent::block_timeout_alert *""'"); 
  }
  arg1 = (libtorrent::block_timeout_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_timeout_alert_block_index_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->block_index = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_block_timeout_alert_block_index_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::block_timeout_alert *arg1 = (libtorrent::block_timeout_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__block_timeout_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_timeout_alert_block_index_get" "', argument " "1"" of type '" "libtorrent::block_timeout_alert *""'"); 
  }
  arg1 = (libtorrent::block_timeout_alert *)(argp1);
  result = (int) ((arg1)->block_index);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_block_timeout_alert_piece_index_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::block_timeout_alert *arg1 = (libtorrent::block_timeout_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__block_timeout_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_timeout_alert_piece_index_set" "', argument " "1"" of type '" "libtorrent::block_timeout_alert *""'"); 
  }
  arg1 = (libtorrent::block_timeout_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_timeout_alert_piece_index_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->piece_index = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_block_timeout_alert_piece_index_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::block_timeout_alert *arg1 = (libtorrent::block_timeout_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__block_timeout_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_timeout_alert_piece_index_get" "', argument " "1"" of type '" "libtorrent::block_timeout_alert *""'"); 
  }
  arg1 = (libtorrent::block_timeout_alert *)(argp1);
  result = (int) ((arg1)->piece_index);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_block_timeout_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_block_timeout_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_block_timeout_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_block_timeout_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::block_timeout_alert * arg1 = (libtorrent::block_timeout_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_block_timeout_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class block_timeout_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_block_finished_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::block_finished_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_block_finished_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::block_finished_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_block_finished_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::block_finished_alert *arg1 = (libtorrent::block_finished_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_block_finished_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__block_finished_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_finished_alert_type" "', argument " "1"" of type '" "libtorrent::block_finished_alert const *""'"); 
  }
  arg1 = (libtorrent::block_finished_alert *)(argp1);
  result = (int)((libtorrent::block_finished_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_block_finished_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::block_finished_alert *arg1 = (libtorrent::block_finished_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_block_finished_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__block_finished_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_finished_alert_category" "', argument " "1"" of type '" "libtorrent::block_finished_alert const *""'"); 
  }
  arg1 = (libtorrent::block_finished_alert *)(argp1);
  result = (int)((libtorrent::block_finished_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_block_finished_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::block_finished_alert *arg1 = (libtorrent::block_finished_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_block_finished_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__block_finished_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_finished_alert_what" "', argument " "1"" of type '" "libtorrent::block_finished_alert const *""'"); 
  }
  arg1 = (libtorrent::block_finished_alert *)(argp1);
  result = (char *)((libtorrent::block_finished_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_block_finished_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::block_finished_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_block_finished_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::block_finished_alert *arg1 = (libtorrent::block_finished_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_block_finished_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__block_finished_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_finished_alert_message" "', argument " "1"" of type '" "libtorrent::block_finished_alert const *""'"); 
  }
  arg1 = (libtorrent::block_finished_alert *)(argp1);
  result = ((libtorrent::block_finished_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_block_finished_alert_block_index_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::block_finished_alert *arg1 = (libtorrent::block_finished_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__block_finished_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_finished_alert_block_index_set" "', argument " "1"" of type '" "libtorrent::block_finished_alert *""'"); 
  }
  arg1 = (libtorrent::block_finished_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_finished_alert_block_index_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->block_index = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_block_finished_alert_block_index_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::block_finished_alert *arg1 = (libtorrent::block_finished_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__block_finished_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_finished_alert_block_index_get" "', argument " "1"" of type '" "libtorrent::block_finished_alert *""'"); 
  }
  arg1 = (libtorrent::block_finished_alert *)(argp1);
  result = (int) ((arg1)->block_index);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_block_finished_alert_piece_index_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::block_finished_alert *arg1 = (libtorrent::block_finished_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__block_finished_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_finished_alert_piece_index_set" "', argument " "1"" of type '" "libtorrent::block_finished_alert *""'"); 
  }
  arg1 = (libtorrent::block_finished_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_finished_alert_piece_index_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->piece_index = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_block_finished_alert_piece_index_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::block_finished_alert *arg1 = (libtorrent::block_finished_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__block_finished_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_finished_alert_piece_index_get" "', argument " "1"" of type '" "libtorrent::block_finished_alert *""'"); 
  }
  arg1 = (libtorrent::block_finished_alert *)(argp1);
  result = (int) ((arg1)->piece_index);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_block_finished_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_block_finished_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_block_finished_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_block_finished_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::block_finished_alert * arg1 = (libtorrent::block_finished_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_block_finished_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class block_finished_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_block_downloading_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::block_downloading_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_block_downloading_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::block_downloading_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_block_downloading_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::block_downloading_alert *arg1 = (libtorrent::block_downloading_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_block_downloading_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__block_downloading_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_downloading_alert_type" "', argument " "1"" of type '" "libtorrent::block_downloading_alert const *""'"); 
  }
  arg1 = (libtorrent::block_downloading_alert *)(argp1);
  result = (int)((libtorrent::block_downloading_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_block_downloading_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::block_downloading_alert *arg1 = (libtorrent::block_downloading_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_block_downloading_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__block_downloading_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_downloading_alert_category" "', argument " "1"" of type '" "libtorrent::block_downloading_alert const *""'"); 
  }
  arg1 = (libtorrent::block_downloading_alert *)(argp1);
  result = (int)((libtorrent::block_downloading_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_block_downloading_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::block_downloading_alert *arg1 = (libtorrent::block_downloading_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_block_downloading_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__block_downloading_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_downloading_alert_what" "', argument " "1"" of type '" "libtorrent::block_downloading_alert const *""'"); 
  }
  arg1 = (libtorrent::block_downloading_alert *)(argp1);
  result = (char *)((libtorrent::block_downloading_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_block_downloading_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::block_downloading_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_block_downloading_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::block_downloading_alert *arg1 = (libtorrent::block_downloading_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_block_downloading_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__block_downloading_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_downloading_alert_message" "', argument " "1"" of type '" "libtorrent::block_downloading_alert const *""'"); 
  }
  arg1 = (libtorrent::block_downloading_alert *)(argp1);
  result = ((libtorrent::block_downloading_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_block_downloading_alert_block_index_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::block_downloading_alert *arg1 = (libtorrent::block_downloading_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__block_downloading_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_downloading_alert_block_index_set" "', argument " "1"" of type '" "libtorrent::block_downloading_alert *""'"); 
  }
  arg1 = (libtorrent::block_downloading_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_downloading_alert_block_index_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->block_index = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_block_downloading_alert_block_index_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::block_downloading_alert *arg1 = (libtorrent::block_downloading_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__block_downloading_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_downloading_alert_block_index_get" "', argument " "1"" of type '" "libtorrent::block_downloading_alert *""'"); 
  }
  arg1 = (libtorrent::block_downloading_alert *)(argp1);
  result = (int) ((arg1)->block_index);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_block_downloading_alert_piece_index_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::block_downloading_alert *arg1 = (libtorrent::block_downloading_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__block_downloading_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_downloading_alert_piece_index_set" "', argument " "1"" of type '" "libtorrent::block_downloading_alert *""'"); 
  }
  arg1 = (libtorrent::block_downloading_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_downloading_alert_piece_index_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->piece_index = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_block_downloading_alert_piece_index_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::block_downloading_alert *arg1 = (libtorrent::block_downloading_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__block_downloading_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_downloading_alert_piece_index_get" "', argument " "1"" of type '" "libtorrent::block_downloading_alert *""'"); 
  }
  arg1 = (libtorrent::block_downloading_alert *)(argp1);
  result = (int) ((arg1)->piece_index);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_block_downloading_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_block_downloading_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_block_downloading_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_block_downloading_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::block_downloading_alert * arg1 = (libtorrent::block_downloading_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_block_downloading_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class block_downloading_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_unwanted_block_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::unwanted_block_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_unwanted_block_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::unwanted_block_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_unwanted_block_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::unwanted_block_alert *arg1 = (libtorrent::unwanted_block_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_unwanted_block_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__unwanted_block_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unwanted_block_alert_type" "', argument " "1"" of type '" "libtorrent::unwanted_block_alert const *""'"); 
  }
  arg1 = (libtorrent::unwanted_block_alert *)(argp1);
  result = (int)((libtorrent::unwanted_block_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_unwanted_block_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::unwanted_block_alert *arg1 = (libtorrent::unwanted_block_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_unwanted_block_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__unwanted_block_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unwanted_block_alert_category" "', argument " "1"" of type '" "libtorrent::unwanted_block_alert const *""'"); 
  }
  arg1 = (libtorrent::unwanted_block_alert *)(argp1);
  result = (int)((libtorrent::unwanted_block_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_unwanted_block_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::unwanted_block_alert *arg1 = (libtorrent::unwanted_block_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_unwanted_block_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__unwanted_block_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unwanted_block_alert_what" "', argument " "1"" of type '" "libtorrent::unwanted_block_alert const *""'"); 
  }
  arg1 = (libtorrent::unwanted_block_alert *)(argp1);
  result = (char *)((libtorrent::unwanted_block_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_unwanted_block_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::unwanted_block_alert *arg1 = (libtorrent::unwanted_block_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_unwanted_block_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__unwanted_block_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unwanted_block_alert_message" "', argument " "1"" of type '" "libtorrent::unwanted_block_alert const *""'"); 
  }
  arg1 = (libtorrent::unwanted_block_alert *)(argp1);
  result = ((libtorrent::unwanted_block_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_unwanted_block_alert_block_index_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::unwanted_block_alert *arg1 = (libtorrent::unwanted_block_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__unwanted_block_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unwanted_block_alert_block_index_set" "', argument " "1"" of type '" "libtorrent::unwanted_block_alert *""'"); 
  }
  arg1 = (libtorrent::unwanted_block_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unwanted_block_alert_block_index_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->block_index = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_unwanted_block_alert_block_index_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::unwanted_block_alert *arg1 = (libtorrent::unwanted_block_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__unwanted_block_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unwanted_block_alert_block_index_get" "', argument " "1"" of type '" "libtorrent::unwanted_block_alert *""'"); 
  }
  arg1 = (libtorrent::unwanted_block_alert *)(argp1);
  result = (int) ((arg1)->block_index);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_unwanted_block_alert_piece_index_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::unwanted_block_alert *arg1 = (libtorrent::unwanted_block_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__unwanted_block_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unwanted_block_alert_piece_index_set" "', argument " "1"" of type '" "libtorrent::unwanted_block_alert *""'"); 
  }
  arg1 = (libtorrent::unwanted_block_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unwanted_block_alert_piece_index_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->piece_index = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_unwanted_block_alert_piece_index_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::unwanted_block_alert *arg1 = (libtorrent::unwanted_block_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__unwanted_block_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unwanted_block_alert_piece_index_get" "', argument " "1"" of type '" "libtorrent::unwanted_block_alert *""'"); 
  }
  arg1 = (libtorrent::unwanted_block_alert *)(argp1);
  result = (int) ((arg1)->piece_index);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_unwanted_block_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_unwanted_block_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_unwanted_block_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_unwanted_block_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::unwanted_block_alert * arg1 = (libtorrent::unwanted_block_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_unwanted_block_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class unwanted_block_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_storage_moved_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::storage_moved_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_storage_moved_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::storage_moved_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_storage_moved_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::storage_moved_alert *arg1 = (libtorrent::storage_moved_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_storage_moved_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__storage_moved_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_moved_alert_type" "', argument " "1"" of type '" "libtorrent::storage_moved_alert const *""'"); 
  }
  arg1 = (libtorrent::storage_moved_alert *)(argp1);
  result = (int)((libtorrent::storage_moved_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_storage_moved_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::storage_moved_alert *arg1 = (libtorrent::storage_moved_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_storage_moved_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__storage_moved_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_moved_alert_category" "', argument " "1"" of type '" "libtorrent::storage_moved_alert const *""'"); 
  }
  arg1 = (libtorrent::storage_moved_alert *)(argp1);
  result = (int)((libtorrent::storage_moved_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_storage_moved_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::storage_moved_alert *arg1 = (libtorrent::storage_moved_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_storage_moved_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__storage_moved_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_moved_alert_what" "', argument " "1"" of type '" "libtorrent::storage_moved_alert const *""'"); 
  }
  arg1 = (libtorrent::storage_moved_alert *)(argp1);
  result = (char *)((libtorrent::storage_moved_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_storage_moved_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::storage_moved_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_storage_moved_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::storage_moved_alert *arg1 = (libtorrent::storage_moved_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_storage_moved_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__storage_moved_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_moved_alert_message" "', argument " "1"" of type '" "libtorrent::storage_moved_alert const *""'"); 
  }
  arg1 = (libtorrent::storage_moved_alert *)(argp1);
  result = ((libtorrent::storage_moved_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_storage_moved_alert_storage_path(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::storage_moved_alert *arg1 = (libtorrent::storage_moved_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_storage_moved_alert_storage_path.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__storage_moved_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_moved_alert_storage_path" "', argument " "1"" of type '" "libtorrent::storage_moved_alert const *""'"); 
  }
  arg1 = (libtorrent::storage_moved_alert *)(argp1);
  result = (char *)((libtorrent::storage_moved_alert const *)arg1)->storage_path();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_storage_moved_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_storage_moved_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_storage_moved_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_storage_moved_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::storage_moved_alert * arg1 = (libtorrent::storage_moved_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_storage_moved_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class storage_moved_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_storage_moved_failed_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::storage_moved_failed_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_storage_moved_failed_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::storage_moved_failed_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_storage_moved_failed_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::storage_moved_failed_alert *arg1 = (libtorrent::storage_moved_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_storage_moved_failed_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__storage_moved_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_moved_failed_alert_type" "', argument " "1"" of type '" "libtorrent::storage_moved_failed_alert const *""'"); 
  }
  arg1 = (libtorrent::storage_moved_failed_alert *)(argp1);
  result = (int)((libtorrent::storage_moved_failed_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_storage_moved_failed_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::storage_moved_failed_alert *arg1 = (libtorrent::storage_moved_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_storage_moved_failed_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__storage_moved_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_moved_failed_alert_category" "', argument " "1"" of type '" "libtorrent::storage_moved_failed_alert const *""'"); 
  }
  arg1 = (libtorrent::storage_moved_failed_alert *)(argp1);
  result = (int)((libtorrent::storage_moved_failed_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_storage_moved_failed_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::storage_moved_failed_alert *arg1 = (libtorrent::storage_moved_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_storage_moved_failed_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__storage_moved_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_moved_failed_alert_what" "', argument " "1"" of type '" "libtorrent::storage_moved_failed_alert const *""'"); 
  }
  arg1 = (libtorrent::storage_moved_failed_alert *)(argp1);
  result = (char *)((libtorrent::storage_moved_failed_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_storage_moved_failed_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::storage_moved_failed_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_storage_moved_failed_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::storage_moved_failed_alert *arg1 = (libtorrent::storage_moved_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_storage_moved_failed_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__storage_moved_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_moved_failed_alert_message" "', argument " "1"" of type '" "libtorrent::storage_moved_failed_alert const *""'"); 
  }
  arg1 = (libtorrent::storage_moved_failed_alert *)(argp1);
  result = ((libtorrent::storage_moved_failed_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_storage_moved_failed_alert_error_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::storage_moved_failed_alert *arg1 = (libtorrent::storage_moved_failed_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__storage_moved_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_moved_failed_alert_error_set" "', argument " "1"" of type '" "libtorrent::storage_moved_failed_alert *""'"); 
  }
  arg1 = (libtorrent::storage_moved_failed_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "storage_moved_failed_alert_error_set" "', argument " "2"" of type '" "libtorrent::error_code *""'"); 
  }
  arg2 = (libtorrent::error_code *)(argp2);
  if (arg1) (arg1)->error = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_storage_moved_failed_alert_error_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::storage_moved_failed_alert *arg1 = (libtorrent::storage_moved_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::error_code *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__storage_moved_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_moved_failed_alert_error_get" "', argument " "1"" of type '" "libtorrent::storage_moved_failed_alert *""'"); 
  }
  arg1 = (libtorrent::storage_moved_failed_alert *)(argp1);
  result = (libtorrent::error_code *)& ((arg1)->error);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_storage_moved_failed_alert_file_path(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::storage_moved_failed_alert *arg1 = (libtorrent::storage_moved_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_storage_moved_failed_alert_file_path.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__storage_moved_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_moved_failed_alert_file_path" "', argument " "1"" of type '" "libtorrent::storage_moved_failed_alert const *""'"); 
  }
  arg1 = (libtorrent::storage_moved_failed_alert *)(argp1);
  result = (char *)((libtorrent::storage_moved_failed_alert const *)arg1)->file_path();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_storage_moved_failed_alert_get_operation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::storage_moved_failed_alert *arg1 = (libtorrent::storage_moved_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_storage_moved_failed_alert_get_operation.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__storage_moved_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_moved_failed_alert_get_operation" "', argument " "1"" of type '" "libtorrent::storage_moved_failed_alert *""'"); 
  }
  arg1 = (libtorrent::storage_moved_failed_alert *)(argp1);
  result = libtorrent_storage_moved_failed_alert_get_operation(arg1);
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_storage_moved_failed_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_storage_moved_failed_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_storage_moved_failed_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_storage_moved_failed_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::storage_moved_failed_alert * arg1 = (libtorrent::storage_moved_failed_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_storage_moved_failed_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class storage_moved_failed_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_deleted_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_deleted_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_deleted_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_deleted_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_torrent_deleted_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_deleted_alert *arg1 = (libtorrent::torrent_deleted_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_deleted_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_deleted_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_deleted_alert_type" "', argument " "1"" of type '" "libtorrent::torrent_deleted_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_deleted_alert *)(argp1);
  result = (int)((libtorrent::torrent_deleted_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_deleted_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_deleted_alert *arg1 = (libtorrent::torrent_deleted_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_deleted_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_deleted_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_deleted_alert_category" "', argument " "1"" of type '" "libtorrent::torrent_deleted_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_deleted_alert *)(argp1);
  result = (int)((libtorrent::torrent_deleted_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_deleted_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_deleted_alert *arg1 = (libtorrent::torrent_deleted_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_deleted_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_deleted_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_deleted_alert_what" "', argument " "1"" of type '" "libtorrent::torrent_deleted_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_deleted_alert *)(argp1);
  result = (char *)((libtorrent::torrent_deleted_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_deleted_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_deleted_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_torrent_deleted_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_deleted_alert *arg1 = (libtorrent::torrent_deleted_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_deleted_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_deleted_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_deleted_alert_message" "', argument " "1"" of type '" "libtorrent::torrent_deleted_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_deleted_alert *)(argp1);
  result = ((libtorrent::torrent_deleted_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_torrent_deleted_alert_info_hash_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_deleted_alert *arg1 = (libtorrent::torrent_deleted_alert *) 0 ;
  libtorrent::sha1_hash *arg2 = (libtorrent::sha1_hash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_deleted_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_deleted_alert_info_hash_set" "', argument " "1"" of type '" "libtorrent::torrent_deleted_alert *""'"); 
  }
  arg1 = (libtorrent::torrent_deleted_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_deleted_alert_info_hash_set" "', argument " "2"" of type '" "libtorrent::sha1_hash *""'"); 
  }
  arg2 = (libtorrent::sha1_hash *)(argp2);
  if (arg1) (arg1)->info_hash = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_deleted_alert_info_hash_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_deleted_alert *arg1 = (libtorrent::torrent_deleted_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::sha1_hash *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_deleted_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_deleted_alert_info_hash_get" "', argument " "1"" of type '" "libtorrent::torrent_deleted_alert *""'"); 
  }
  arg1 = (libtorrent::torrent_deleted_alert *)(argp1);
  result = (libtorrent::sha1_hash *)& ((arg1)->info_hash);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_torrent_deleted_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_torrent_deleted_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_torrent_deleted_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_torrent_deleted_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::torrent_deleted_alert * arg1 = (libtorrent::torrent_deleted_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_torrent_deleted_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class torrent_deleted_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_delete_failed_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_delete_failed_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_delete_failed_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_delete_failed_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_torrent_delete_failed_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_delete_failed_alert *arg1 = (libtorrent::torrent_delete_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_delete_failed_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_delete_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_delete_failed_alert_type" "', argument " "1"" of type '" "libtorrent::torrent_delete_failed_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_delete_failed_alert *)(argp1);
  result = (int)((libtorrent::torrent_delete_failed_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_delete_failed_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_delete_failed_alert *arg1 = (libtorrent::torrent_delete_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_delete_failed_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_delete_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_delete_failed_alert_category" "', argument " "1"" of type '" "libtorrent::torrent_delete_failed_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_delete_failed_alert *)(argp1);
  result = (int)((libtorrent::torrent_delete_failed_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_delete_failed_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_delete_failed_alert *arg1 = (libtorrent::torrent_delete_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_delete_failed_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_delete_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_delete_failed_alert_what" "', argument " "1"" of type '" "libtorrent::torrent_delete_failed_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_delete_failed_alert *)(argp1);
  result = (char *)((libtorrent::torrent_delete_failed_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_delete_failed_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_delete_failed_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_torrent_delete_failed_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_delete_failed_alert *arg1 = (libtorrent::torrent_delete_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_delete_failed_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_delete_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_delete_failed_alert_message" "', argument " "1"" of type '" "libtorrent::torrent_delete_failed_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_delete_failed_alert *)(argp1);
  result = ((libtorrent::torrent_delete_failed_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_torrent_delete_failed_alert_error_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_delete_failed_alert *arg1 = (libtorrent::torrent_delete_failed_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_delete_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_delete_failed_alert_error_set" "', argument " "1"" of type '" "libtorrent::torrent_delete_failed_alert *""'"); 
  }
  arg1 = (libtorrent::torrent_delete_failed_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_delete_failed_alert_error_set" "', argument " "2"" of type '" "libtorrent::error_code *""'"); 
  }
  arg2 = (libtorrent::error_code *)(argp2);
  if (arg1) (arg1)->error = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_delete_failed_alert_error_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_delete_failed_alert *arg1 = (libtorrent::torrent_delete_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::error_code *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_delete_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_delete_failed_alert_error_get" "', argument " "1"" of type '" "libtorrent::torrent_delete_failed_alert *""'"); 
  }
  arg1 = (libtorrent::torrent_delete_failed_alert *)(argp1);
  result = (libtorrent::error_code *)& ((arg1)->error);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_delete_failed_alert_info_hash_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_delete_failed_alert *arg1 = (libtorrent::torrent_delete_failed_alert *) 0 ;
  libtorrent::sha1_hash *arg2 = (libtorrent::sha1_hash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_delete_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_delete_failed_alert_info_hash_set" "', argument " "1"" of type '" "libtorrent::torrent_delete_failed_alert *""'"); 
  }
  arg1 = (libtorrent::torrent_delete_failed_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_delete_failed_alert_info_hash_set" "', argument " "2"" of type '" "libtorrent::sha1_hash *""'"); 
  }
  arg2 = (libtorrent::sha1_hash *)(argp2);
  if (arg1) (arg1)->info_hash = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_delete_failed_alert_info_hash_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_delete_failed_alert *arg1 = (libtorrent::torrent_delete_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::sha1_hash *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_delete_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_delete_failed_alert_info_hash_get" "', argument " "1"" of type '" "libtorrent::torrent_delete_failed_alert *""'"); 
  }
  arg1 = (libtorrent::torrent_delete_failed_alert *)(argp1);
  result = (libtorrent::sha1_hash *)& ((arg1)->info_hash);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_torrent_delete_failed_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_torrent_delete_failed_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_torrent_delete_failed_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_torrent_delete_failed_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::torrent_delete_failed_alert * arg1 = (libtorrent::torrent_delete_failed_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_torrent_delete_failed_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class torrent_delete_failed_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_save_resume_data_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::save_resume_data_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_save_resume_data_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::save_resume_data_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_save_resume_data_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::save_resume_data_alert *arg1 = (libtorrent::save_resume_data_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_save_resume_data_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__save_resume_data_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "save_resume_data_alert_type" "', argument " "1"" of type '" "libtorrent::save_resume_data_alert const *""'"); 
  }
  arg1 = (libtorrent::save_resume_data_alert *)(argp1);
  result = (int)((libtorrent::save_resume_data_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_save_resume_data_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::save_resume_data_alert *arg1 = (libtorrent::save_resume_data_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_save_resume_data_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__save_resume_data_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "save_resume_data_alert_category" "', argument " "1"" of type '" "libtorrent::save_resume_data_alert const *""'"); 
  }
  arg1 = (libtorrent::save_resume_data_alert *)(argp1);
  result = (int)((libtorrent::save_resume_data_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_save_resume_data_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::save_resume_data_alert *arg1 = (libtorrent::save_resume_data_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_save_resume_data_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__save_resume_data_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "save_resume_data_alert_what" "', argument " "1"" of type '" "libtorrent::save_resume_data_alert const *""'"); 
  }
  arg1 = (libtorrent::save_resume_data_alert *)(argp1);
  result = (char *)((libtorrent::save_resume_data_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_save_resume_data_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::save_resume_data_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_save_resume_data_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::save_resume_data_alert *arg1 = (libtorrent::save_resume_data_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_save_resume_data_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__save_resume_data_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "save_resume_data_alert_message" "', argument " "1"" of type '" "libtorrent::save_resume_data_alert const *""'"); 
  }
  arg1 = (libtorrent::save_resume_data_alert *)(argp1);
  result = ((libtorrent::save_resume_data_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_save_resume_data_alert_get_resume_data(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::save_resume_data_alert *arg1 = (libtorrent::save_resume_data_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::entry result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_save_resume_data_alert_get_resume_data.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__save_resume_data_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "save_resume_data_alert_get_resume_data" "', argument " "1"" of type '" "libtorrent::save_resume_data_alert *""'"); 
  }
  arg1 = (libtorrent::save_resume_data_alert *)(argp1);
  result = libtorrent_save_resume_data_alert_get_resume_data(arg1);
  jsresult = SWIG_NewPointerObj((new libtorrent::entry((const libtorrent::entry&)(result))), SWIGTYPE_p_libtorrent__entry, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_save_resume_data_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_save_resume_data_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_save_resume_data_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_save_resume_data_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::save_resume_data_alert * arg1 = (libtorrent::save_resume_data_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_save_resume_data_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class save_resume_data_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_save_resume_data_failed_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::save_resume_data_failed_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_save_resume_data_failed_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::save_resume_data_failed_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_save_resume_data_failed_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::save_resume_data_failed_alert *arg1 = (libtorrent::save_resume_data_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_save_resume_data_failed_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__save_resume_data_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "save_resume_data_failed_alert_type" "', argument " "1"" of type '" "libtorrent::save_resume_data_failed_alert const *""'"); 
  }
  arg1 = (libtorrent::save_resume_data_failed_alert *)(argp1);
  result = (int)((libtorrent::save_resume_data_failed_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_save_resume_data_failed_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::save_resume_data_failed_alert *arg1 = (libtorrent::save_resume_data_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_save_resume_data_failed_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__save_resume_data_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "save_resume_data_failed_alert_category" "', argument " "1"" of type '" "libtorrent::save_resume_data_failed_alert const *""'"); 
  }
  arg1 = (libtorrent::save_resume_data_failed_alert *)(argp1);
  result = (int)((libtorrent::save_resume_data_failed_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_save_resume_data_failed_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::save_resume_data_failed_alert *arg1 = (libtorrent::save_resume_data_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_save_resume_data_failed_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__save_resume_data_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "save_resume_data_failed_alert_what" "', argument " "1"" of type '" "libtorrent::save_resume_data_failed_alert const *""'"); 
  }
  arg1 = (libtorrent::save_resume_data_failed_alert *)(argp1);
  result = (char *)((libtorrent::save_resume_data_failed_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_save_resume_data_failed_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::save_resume_data_failed_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_save_resume_data_failed_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::save_resume_data_failed_alert *arg1 = (libtorrent::save_resume_data_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_save_resume_data_failed_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__save_resume_data_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "save_resume_data_failed_alert_message" "', argument " "1"" of type '" "libtorrent::save_resume_data_failed_alert const *""'"); 
  }
  arg1 = (libtorrent::save_resume_data_failed_alert *)(argp1);
  result = ((libtorrent::save_resume_data_failed_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_save_resume_data_failed_alert_error_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::save_resume_data_failed_alert *arg1 = (libtorrent::save_resume_data_failed_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__save_resume_data_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "save_resume_data_failed_alert_error_set" "', argument " "1"" of type '" "libtorrent::save_resume_data_failed_alert *""'"); 
  }
  arg1 = (libtorrent::save_resume_data_failed_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "save_resume_data_failed_alert_error_set" "', argument " "2"" of type '" "libtorrent::error_code *""'"); 
  }
  arg2 = (libtorrent::error_code *)(argp2);
  if (arg1) (arg1)->error = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_save_resume_data_failed_alert_error_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::save_resume_data_failed_alert *arg1 = (libtorrent::save_resume_data_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::error_code *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__save_resume_data_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "save_resume_data_failed_alert_error_get" "', argument " "1"" of type '" "libtorrent::save_resume_data_failed_alert *""'"); 
  }
  arg1 = (libtorrent::save_resume_data_failed_alert *)(argp1);
  result = (libtorrent::error_code *)& ((arg1)->error);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_save_resume_data_failed_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_save_resume_data_failed_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_save_resume_data_failed_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_save_resume_data_failed_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::save_resume_data_failed_alert * arg1 = (libtorrent::save_resume_data_failed_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_save_resume_data_failed_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class save_resume_data_failed_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_paused_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_paused_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_paused_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_paused_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_torrent_paused_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_paused_alert *arg1 = (libtorrent::torrent_paused_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_paused_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_paused_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_paused_alert_type" "', argument " "1"" of type '" "libtorrent::torrent_paused_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_paused_alert *)(argp1);
  result = (int)((libtorrent::torrent_paused_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_paused_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_paused_alert *arg1 = (libtorrent::torrent_paused_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_paused_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_paused_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_paused_alert_category" "', argument " "1"" of type '" "libtorrent::torrent_paused_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_paused_alert *)(argp1);
  result = (int)((libtorrent::torrent_paused_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_paused_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_paused_alert *arg1 = (libtorrent::torrent_paused_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_paused_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_paused_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_paused_alert_what" "', argument " "1"" of type '" "libtorrent::torrent_paused_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_paused_alert *)(argp1);
  result = (char *)((libtorrent::torrent_paused_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_paused_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_paused_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_torrent_paused_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_paused_alert *arg1 = (libtorrent::torrent_paused_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_paused_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_paused_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_paused_alert_message" "', argument " "1"" of type '" "libtorrent::torrent_paused_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_paused_alert *)(argp1);
  result = ((libtorrent::torrent_paused_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_torrent_paused_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_torrent_paused_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_torrent_paused_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_torrent_paused_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::torrent_paused_alert * arg1 = (libtorrent::torrent_paused_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_torrent_paused_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class torrent_paused_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_resumed_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_resumed_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_resumed_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_resumed_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_torrent_resumed_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_resumed_alert *arg1 = (libtorrent::torrent_resumed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_resumed_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_resumed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_resumed_alert_type" "', argument " "1"" of type '" "libtorrent::torrent_resumed_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_resumed_alert *)(argp1);
  result = (int)((libtorrent::torrent_resumed_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_resumed_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_resumed_alert *arg1 = (libtorrent::torrent_resumed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_resumed_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_resumed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_resumed_alert_category" "', argument " "1"" of type '" "libtorrent::torrent_resumed_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_resumed_alert *)(argp1);
  result = (int)((libtorrent::torrent_resumed_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_resumed_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_resumed_alert *arg1 = (libtorrent::torrent_resumed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_resumed_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_resumed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_resumed_alert_what" "', argument " "1"" of type '" "libtorrent::torrent_resumed_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_resumed_alert *)(argp1);
  result = (char *)((libtorrent::torrent_resumed_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_resumed_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_resumed_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_torrent_resumed_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_resumed_alert *arg1 = (libtorrent::torrent_resumed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_resumed_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_resumed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_resumed_alert_message" "', argument " "1"" of type '" "libtorrent::torrent_resumed_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_resumed_alert *)(argp1);
  result = ((libtorrent::torrent_resumed_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_torrent_resumed_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_torrent_resumed_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_torrent_resumed_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_torrent_resumed_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::torrent_resumed_alert * arg1 = (libtorrent::torrent_resumed_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_torrent_resumed_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class torrent_resumed_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_checked_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_checked_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_checked_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_checked_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_torrent_checked_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_checked_alert *arg1 = (libtorrent::torrent_checked_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_checked_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_checked_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_checked_alert_type" "', argument " "1"" of type '" "libtorrent::torrent_checked_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_checked_alert *)(argp1);
  result = (int)((libtorrent::torrent_checked_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_checked_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_checked_alert *arg1 = (libtorrent::torrent_checked_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_checked_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_checked_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_checked_alert_category" "', argument " "1"" of type '" "libtorrent::torrent_checked_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_checked_alert *)(argp1);
  result = (int)((libtorrent::torrent_checked_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_checked_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_checked_alert *arg1 = (libtorrent::torrent_checked_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_checked_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_checked_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_checked_alert_what" "', argument " "1"" of type '" "libtorrent::torrent_checked_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_checked_alert *)(argp1);
  result = (char *)((libtorrent::torrent_checked_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_checked_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_checked_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_torrent_checked_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_checked_alert *arg1 = (libtorrent::torrent_checked_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_checked_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_checked_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_checked_alert_message" "', argument " "1"" of type '" "libtorrent::torrent_checked_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_checked_alert *)(argp1);
  result = ((libtorrent::torrent_checked_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_torrent_checked_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_torrent_checked_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_torrent_checked_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_torrent_checked_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::torrent_checked_alert * arg1 = (libtorrent::torrent_checked_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_torrent_checked_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class torrent_checked_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_url_seed_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::url_seed_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_url_seed_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::url_seed_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_url_seed_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::url_seed_alert *arg1 = (libtorrent::url_seed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_url_seed_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__url_seed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "url_seed_alert_type" "', argument " "1"" of type '" "libtorrent::url_seed_alert const *""'"); 
  }
  arg1 = (libtorrent::url_seed_alert *)(argp1);
  result = (int)((libtorrent::url_seed_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_url_seed_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::url_seed_alert *arg1 = (libtorrent::url_seed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_url_seed_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__url_seed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "url_seed_alert_category" "', argument " "1"" of type '" "libtorrent::url_seed_alert const *""'"); 
  }
  arg1 = (libtorrent::url_seed_alert *)(argp1);
  result = (int)((libtorrent::url_seed_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_url_seed_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::url_seed_alert *arg1 = (libtorrent::url_seed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_url_seed_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__url_seed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "url_seed_alert_what" "', argument " "1"" of type '" "libtorrent::url_seed_alert const *""'"); 
  }
  arg1 = (libtorrent::url_seed_alert *)(argp1);
  result = (char *)((libtorrent::url_seed_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_url_seed_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::url_seed_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_url_seed_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::url_seed_alert *arg1 = (libtorrent::url_seed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_url_seed_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__url_seed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "url_seed_alert_message" "', argument " "1"" of type '" "libtorrent::url_seed_alert const *""'"); 
  }
  arg1 = (libtorrent::url_seed_alert *)(argp1);
  result = ((libtorrent::url_seed_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_url_seed_alert_error_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::url_seed_alert *arg1 = (libtorrent::url_seed_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__url_seed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "url_seed_alert_error_set" "', argument " "1"" of type '" "libtorrent::url_seed_alert *""'"); 
  }
  arg1 = (libtorrent::url_seed_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "url_seed_alert_error_set" "', argument " "2"" of type '" "libtorrent::error_code *""'"); 
  }
  arg2 = (libtorrent::error_code *)(argp2);
  if (arg1) (arg1)->error = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_url_seed_alert_error_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::url_seed_alert *arg1 = (libtorrent::url_seed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::error_code *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__url_seed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "url_seed_alert_error_get" "', argument " "1"" of type '" "libtorrent::url_seed_alert *""'"); 
  }
  arg1 = (libtorrent::url_seed_alert *)(argp1);
  result = (libtorrent::error_code *)& ((arg1)->error);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_url_seed_alert_server_url(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::url_seed_alert *arg1 = (libtorrent::url_seed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_url_seed_alert_server_url.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__url_seed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "url_seed_alert_server_url" "', argument " "1"" of type '" "libtorrent::url_seed_alert const *""'"); 
  }
  arg1 = (libtorrent::url_seed_alert *)(argp1);
  result = (char *)((libtorrent::url_seed_alert const *)arg1)->server_url();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_url_seed_alert_error_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::url_seed_alert *arg1 = (libtorrent::url_seed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_url_seed_alert_error_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__url_seed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "url_seed_alert_error_message" "', argument " "1"" of type '" "libtorrent::url_seed_alert const *""'"); 
  }
  arg1 = (libtorrent::url_seed_alert *)(argp1);
  result = (char *)((libtorrent::url_seed_alert const *)arg1)->error_message();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_url_seed_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_url_seed_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_url_seed_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_url_seed_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::url_seed_alert * arg1 = (libtorrent::url_seed_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_url_seed_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class url_seed_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_file_error_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::file_error_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_file_error_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::file_error_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_file_error_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_error_alert *arg1 = (libtorrent::file_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_error_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_error_alert_type" "', argument " "1"" of type '" "libtorrent::file_error_alert const *""'"); 
  }
  arg1 = (libtorrent::file_error_alert *)(argp1);
  result = (int)((libtorrent::file_error_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_error_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_error_alert *arg1 = (libtorrent::file_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_error_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_error_alert_category" "', argument " "1"" of type '" "libtorrent::file_error_alert const *""'"); 
  }
  arg1 = (libtorrent::file_error_alert *)(argp1);
  result = (int)((libtorrent::file_error_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_error_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_error_alert *arg1 = (libtorrent::file_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_error_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_error_alert_what" "', argument " "1"" of type '" "libtorrent::file_error_alert const *""'"); 
  }
  arg1 = (libtorrent::file_error_alert *)(argp1);
  result = (char *)((libtorrent::file_error_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_file_error_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::file_error_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_file_error_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_error_alert *arg1 = (libtorrent::file_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_error_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_error_alert_message" "', argument " "1"" of type '" "libtorrent::file_error_alert const *""'"); 
  }
  arg1 = (libtorrent::file_error_alert *)(argp1);
  result = ((libtorrent::file_error_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_file_error_alert_error_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::file_error_alert *arg1 = (libtorrent::file_error_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_error_alert_error_set" "', argument " "1"" of type '" "libtorrent::file_error_alert *""'"); 
  }
  arg1 = (libtorrent::file_error_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "file_error_alert_error_set" "', argument " "2"" of type '" "libtorrent::error_code *""'"); 
  }
  arg2 = (libtorrent::error_code *)(argp2);
  if (arg1) (arg1)->error = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_file_error_alert_error_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_error_alert *arg1 = (libtorrent::file_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::error_code *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_error_alert_error_get" "', argument " "1"" of type '" "libtorrent::file_error_alert *""'"); 
  }
  arg1 = (libtorrent::file_error_alert *)(argp1);
  result = (libtorrent::error_code *)& ((arg1)->error);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_file_error_alert_filename(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_error_alert *arg1 = (libtorrent::file_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_error_alert_filename.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_error_alert_filename" "', argument " "1"" of type '" "libtorrent::file_error_alert const *""'"); 
  }
  arg1 = (libtorrent::file_error_alert *)(argp1);
  result = (char *)((libtorrent::file_error_alert const *)arg1)->filename();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_file_error_alert_get_operation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_error_alert *arg1 = (libtorrent::file_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_file_error_alert_get_operation.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__file_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_error_alert_get_operation" "', argument " "1"" of type '" "libtorrent::file_error_alert *""'"); 
  }
  arg1 = (libtorrent::file_error_alert *)(argp1);
  result = libtorrent_file_error_alert_get_operation(arg1);
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_file_error_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_file_error_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_file_error_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_file_error_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::file_error_alert * arg1 = (libtorrent::file_error_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_file_error_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class file_error_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_metadata_failed_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::metadata_failed_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_metadata_failed_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::metadata_failed_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_metadata_failed_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::metadata_failed_alert *arg1 = (libtorrent::metadata_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_metadata_failed_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__metadata_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "metadata_failed_alert_type" "', argument " "1"" of type '" "libtorrent::metadata_failed_alert const *""'"); 
  }
  arg1 = (libtorrent::metadata_failed_alert *)(argp1);
  result = (int)((libtorrent::metadata_failed_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_metadata_failed_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::metadata_failed_alert *arg1 = (libtorrent::metadata_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_metadata_failed_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__metadata_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "metadata_failed_alert_category" "', argument " "1"" of type '" "libtorrent::metadata_failed_alert const *""'"); 
  }
  arg1 = (libtorrent::metadata_failed_alert *)(argp1);
  result = (int)((libtorrent::metadata_failed_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_metadata_failed_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::metadata_failed_alert *arg1 = (libtorrent::metadata_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_metadata_failed_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__metadata_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "metadata_failed_alert_what" "', argument " "1"" of type '" "libtorrent::metadata_failed_alert const *""'"); 
  }
  arg1 = (libtorrent::metadata_failed_alert *)(argp1);
  result = (char *)((libtorrent::metadata_failed_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_metadata_failed_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::metadata_failed_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_metadata_failed_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::metadata_failed_alert *arg1 = (libtorrent::metadata_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_metadata_failed_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__metadata_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "metadata_failed_alert_message" "', argument " "1"" of type '" "libtorrent::metadata_failed_alert const *""'"); 
  }
  arg1 = (libtorrent::metadata_failed_alert *)(argp1);
  result = ((libtorrent::metadata_failed_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_metadata_failed_alert_error_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::metadata_failed_alert *arg1 = (libtorrent::metadata_failed_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__metadata_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "metadata_failed_alert_error_set" "', argument " "1"" of type '" "libtorrent::metadata_failed_alert *""'"); 
  }
  arg1 = (libtorrent::metadata_failed_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "metadata_failed_alert_error_set" "', argument " "2"" of type '" "libtorrent::error_code *""'"); 
  }
  arg2 = (libtorrent::error_code *)(argp2);
  if (arg1) (arg1)->error = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_metadata_failed_alert_error_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::metadata_failed_alert *arg1 = (libtorrent::metadata_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::error_code *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__metadata_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "metadata_failed_alert_error_get" "', argument " "1"" of type '" "libtorrent::metadata_failed_alert *""'"); 
  }
  arg1 = (libtorrent::metadata_failed_alert *)(argp1);
  result = (libtorrent::error_code *)& ((arg1)->error);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_metadata_failed_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_metadata_failed_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_metadata_failed_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_metadata_failed_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::metadata_failed_alert * arg1 = (libtorrent::metadata_failed_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_metadata_failed_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class metadata_failed_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_metadata_received_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::metadata_received_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_metadata_received_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::metadata_received_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_metadata_received_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::metadata_received_alert *arg1 = (libtorrent::metadata_received_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_metadata_received_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__metadata_received_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "metadata_received_alert_type" "', argument " "1"" of type '" "libtorrent::metadata_received_alert const *""'"); 
  }
  arg1 = (libtorrent::metadata_received_alert *)(argp1);
  result = (int)((libtorrent::metadata_received_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_metadata_received_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::metadata_received_alert *arg1 = (libtorrent::metadata_received_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_metadata_received_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__metadata_received_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "metadata_received_alert_category" "', argument " "1"" of type '" "libtorrent::metadata_received_alert const *""'"); 
  }
  arg1 = (libtorrent::metadata_received_alert *)(argp1);
  result = (int)((libtorrent::metadata_received_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_metadata_received_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::metadata_received_alert *arg1 = (libtorrent::metadata_received_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_metadata_received_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__metadata_received_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "metadata_received_alert_what" "', argument " "1"" of type '" "libtorrent::metadata_received_alert const *""'"); 
  }
  arg1 = (libtorrent::metadata_received_alert *)(argp1);
  result = (char *)((libtorrent::metadata_received_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_metadata_received_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::metadata_received_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_metadata_received_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::metadata_received_alert *arg1 = (libtorrent::metadata_received_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_metadata_received_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__metadata_received_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "metadata_received_alert_message" "', argument " "1"" of type '" "libtorrent::metadata_received_alert const *""'"); 
  }
  arg1 = (libtorrent::metadata_received_alert *)(argp1);
  result = ((libtorrent::metadata_received_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_metadata_received_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_metadata_received_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_metadata_received_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_metadata_received_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::metadata_received_alert * arg1 = (libtorrent::metadata_received_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_metadata_received_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class metadata_received_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_udp_error_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::udp_error_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_udp_error_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::udp_error_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_udp_error_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::udp_error_alert *arg1 = (libtorrent::udp_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_udp_error_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__udp_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_error_alert_type" "', argument " "1"" of type '" "libtorrent::udp_error_alert const *""'"); 
  }
  arg1 = (libtorrent::udp_error_alert *)(argp1);
  result = (int)((libtorrent::udp_error_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_udp_error_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::udp_error_alert *arg1 = (libtorrent::udp_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_udp_error_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__udp_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_error_alert_category" "', argument " "1"" of type '" "libtorrent::udp_error_alert const *""'"); 
  }
  arg1 = (libtorrent::udp_error_alert *)(argp1);
  result = (int)((libtorrent::udp_error_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_udp_error_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::udp_error_alert *arg1 = (libtorrent::udp_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_udp_error_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__udp_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_error_alert_what" "', argument " "1"" of type '" "libtorrent::udp_error_alert const *""'"); 
  }
  arg1 = (libtorrent::udp_error_alert *)(argp1);
  result = (char *)((libtorrent::udp_error_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_udp_error_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::udp_error_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_udp_error_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::udp_error_alert *arg1 = (libtorrent::udp_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_udp_error_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__udp_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_error_alert_message" "', argument " "1"" of type '" "libtorrent::udp_error_alert const *""'"); 
  }
  arg1 = (libtorrent::udp_error_alert *)(argp1);
  result = ((libtorrent::udp_error_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_udp_error_alert_endpoint_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::udp_error_alert *arg1 = (libtorrent::udp_error_alert *) 0 ;
  libtorrent::udp::endpoint *arg2 = (libtorrent::udp::endpoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__udp_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_error_alert_endpoint_set" "', argument " "1"" of type '" "libtorrent::udp_error_alert *""'"); 
  }
  arg1 = (libtorrent::udp_error_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__udp__endpoint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "udp_error_alert_endpoint_set" "', argument " "2"" of type '" "libtorrent::udp::endpoint *""'"); 
  }
  arg2 = (libtorrent::udp::endpoint *)(argp2);
  if (arg1) (arg1)->endpoint = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_udp_error_alert_endpoint_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::udp_error_alert *arg1 = (libtorrent::udp_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::udp::endpoint *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__udp_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_error_alert_endpoint_get" "', argument " "1"" of type '" "libtorrent::udp_error_alert *""'"); 
  }
  arg1 = (libtorrent::udp_error_alert *)(argp1);
  result = (libtorrent::udp::endpoint *)& ((arg1)->endpoint);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__udp__endpoint, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_udp_error_alert_error_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::udp_error_alert *arg1 = (libtorrent::udp_error_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__udp_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_error_alert_error_set" "', argument " "1"" of type '" "libtorrent::udp_error_alert *""'"); 
  }
  arg1 = (libtorrent::udp_error_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "udp_error_alert_error_set" "', argument " "2"" of type '" "libtorrent::error_code *""'"); 
  }
  arg2 = (libtorrent::error_code *)(argp2);
  if (arg1) (arg1)->error = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_udp_error_alert_error_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::udp_error_alert *arg1 = (libtorrent::udp_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::error_code *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__udp_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_error_alert_error_get" "', argument " "1"" of type '" "libtorrent::udp_error_alert *""'"); 
  }
  arg1 = (libtorrent::udp_error_alert *)(argp1);
  result = (libtorrent::error_code *)& ((arg1)->error);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_udp_error_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_udp_error_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_udp_error_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_udp_error_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::udp_error_alert * arg1 = (libtorrent::udp_error_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_udp_error_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class udp_error_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_external_ip_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::external_ip_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_external_ip_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::external_ip_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_external_ip_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::external_ip_alert *arg1 = (libtorrent::external_ip_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_external_ip_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__external_ip_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "external_ip_alert_type" "', argument " "1"" of type '" "libtorrent::external_ip_alert const *""'"); 
  }
  arg1 = (libtorrent::external_ip_alert *)(argp1);
  result = (int)((libtorrent::external_ip_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_external_ip_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::external_ip_alert *arg1 = (libtorrent::external_ip_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_external_ip_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__external_ip_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "external_ip_alert_category" "', argument " "1"" of type '" "libtorrent::external_ip_alert const *""'"); 
  }
  arg1 = (libtorrent::external_ip_alert *)(argp1);
  result = (int)((libtorrent::external_ip_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_external_ip_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::external_ip_alert *arg1 = (libtorrent::external_ip_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_external_ip_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__external_ip_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "external_ip_alert_what" "', argument " "1"" of type '" "libtorrent::external_ip_alert const *""'"); 
  }
  arg1 = (libtorrent::external_ip_alert *)(argp1);
  result = (char *)((libtorrent::external_ip_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_external_ip_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::external_ip_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_external_ip_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::external_ip_alert *arg1 = (libtorrent::external_ip_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_external_ip_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__external_ip_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "external_ip_alert_message" "', argument " "1"" of type '" "libtorrent::external_ip_alert const *""'"); 
  }
  arg1 = (libtorrent::external_ip_alert *)(argp1);
  result = ((libtorrent::external_ip_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_external_ip_alert_external_address_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::external_ip_alert *arg1 = (libtorrent::external_ip_alert *) 0 ;
  libtorrent::address *arg2 = (libtorrent::address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__external_ip_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "external_ip_alert_external_address_set" "', argument " "1"" of type '" "libtorrent::external_ip_alert *""'"); 
  }
  arg1 = (libtorrent::external_ip_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__address, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "external_ip_alert_external_address_set" "', argument " "2"" of type '" "libtorrent::address *""'"); 
  }
  arg2 = (libtorrent::address *)(argp2);
  if (arg1) (arg1)->external_address = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_external_ip_alert_external_address_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::external_ip_alert *arg1 = (libtorrent::external_ip_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::address *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__external_ip_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "external_ip_alert_external_address_get" "', argument " "1"" of type '" "libtorrent::external_ip_alert *""'"); 
  }
  arg1 = (libtorrent::external_ip_alert *)(argp1);
  result = (libtorrent::address *)& ((arg1)->external_address);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__address, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_external_ip_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_external_ip_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_external_ip_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_external_ip_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::external_ip_alert * arg1 = (libtorrent::external_ip_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_external_ip_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class external_ip_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_listen_failed_alert_tcp(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::listen_failed_alert::tcp));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_listen_failed_alert_tcp_ssl(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::listen_failed_alert::tcp_ssl));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_listen_failed_alert_udp(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::listen_failed_alert::udp));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_listen_failed_alert_i2p(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::listen_failed_alert::i2p));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_listen_failed_alert_socks5(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::listen_failed_alert::socks5));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_listen_failed_alert_utp_ssl(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::listen_failed_alert::utp_ssl));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_listen_failed_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::listen_failed_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_listen_failed_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::listen_failed_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_listen_failed_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::listen_failed_alert *arg1 = (libtorrent::listen_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_listen_failed_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__listen_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "listen_failed_alert_type" "', argument " "1"" of type '" "libtorrent::listen_failed_alert const *""'"); 
  }
  arg1 = (libtorrent::listen_failed_alert *)(argp1);
  result = (int)((libtorrent::listen_failed_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_listen_failed_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::listen_failed_alert *arg1 = (libtorrent::listen_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_listen_failed_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__listen_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "listen_failed_alert_category" "', argument " "1"" of type '" "libtorrent::listen_failed_alert const *""'"); 
  }
  arg1 = (libtorrent::listen_failed_alert *)(argp1);
  result = (int)((libtorrent::listen_failed_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_listen_failed_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::listen_failed_alert *arg1 = (libtorrent::listen_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_listen_failed_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__listen_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "listen_failed_alert_what" "', argument " "1"" of type '" "libtorrent::listen_failed_alert const *""'"); 
  }
  arg1 = (libtorrent::listen_failed_alert *)(argp1);
  result = (char *)((libtorrent::listen_failed_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_listen_failed_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::listen_failed_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_listen_failed_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::listen_failed_alert *arg1 = (libtorrent::listen_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_listen_failed_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__listen_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "listen_failed_alert_message" "', argument " "1"" of type '" "libtorrent::listen_failed_alert const *""'"); 
  }
  arg1 = (libtorrent::listen_failed_alert *)(argp1);
  result = ((libtorrent::listen_failed_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_listen_failed_alert_listen_interface(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::listen_failed_alert *arg1 = (libtorrent::listen_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_listen_failed_alert_listen_interface.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__listen_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "listen_failed_alert_listen_interface" "', argument " "1"" of type '" "libtorrent::listen_failed_alert const *""'"); 
  }
  arg1 = (libtorrent::listen_failed_alert *)(argp1);
  result = (char *)((libtorrent::listen_failed_alert const *)arg1)->listen_interface();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_listen_failed_alert_error_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::listen_failed_alert *arg1 = (libtorrent::listen_failed_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__listen_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "listen_failed_alert_error_set" "', argument " "1"" of type '" "libtorrent::listen_failed_alert *""'"); 
  }
  arg1 = (libtorrent::listen_failed_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "listen_failed_alert_error_set" "', argument " "2"" of type '" "libtorrent::error_code *""'"); 
  }
  arg2 = (libtorrent::error_code *)(argp2);
  if (arg1) (arg1)->error = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_listen_failed_alert_error_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::listen_failed_alert *arg1 = (libtorrent::listen_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::error_code *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__listen_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "listen_failed_alert_error_get" "', argument " "1"" of type '" "libtorrent::listen_failed_alert *""'"); 
  }
  arg1 = (libtorrent::listen_failed_alert *)(argp1);
  result = (libtorrent::error_code *)& ((arg1)->error);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_listen_failed_alert_parse_addr(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::listen_failed_alert::parse_addr));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_listen_failed_alert_open(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::listen_failed_alert::open));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_listen_failed_alert_bind(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::listen_failed_alert::bind));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_listen_failed_alert_listen(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::listen_failed_alert::listen));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_listen_failed_alert_get_socket_name(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::listen_failed_alert::get_socket_name));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_listen_failed_alert_accept(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::listen_failed_alert::accept));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_listen_failed_alert_enum_if(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::listen_failed_alert::enum_if));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_listen_failed_alert_bind_to_device(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::listen_failed_alert::bind_to_device));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_listen_failed_alert_operation_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::listen_failed_alert *arg1 = (libtorrent::listen_failed_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__listen_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "listen_failed_alert_operation_set" "', argument " "1"" of type '" "libtorrent::listen_failed_alert *""'"); 
  }
  arg1 = (libtorrent::listen_failed_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "listen_failed_alert_operation_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->operation = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_listen_failed_alert_operation_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::listen_failed_alert *arg1 = (libtorrent::listen_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__listen_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "listen_failed_alert_operation_get" "', argument " "1"" of type '" "libtorrent::listen_failed_alert *""'"); 
  }
  arg1 = (libtorrent::listen_failed_alert *)(argp1);
  result = (int) ((arg1)->operation);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_listen_failed_alert_sock_type_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::listen_failed_alert *arg1 = (libtorrent::listen_failed_alert *) 0 ;
  libtorrent::listen_failed_alert::socket_type_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__listen_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "listen_failed_alert_sock_type_set" "', argument " "1"" of type '" "libtorrent::listen_failed_alert *""'"); 
  }
  arg1 = (libtorrent::listen_failed_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "listen_failed_alert_sock_type_set" "', argument " "2"" of type '" "libtorrent::listen_failed_alert::socket_type_t""'");
  } 
  arg2 = (libtorrent::listen_failed_alert::socket_type_t)(val2);
  if (arg1) (arg1)->sock_type = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_listen_failed_alert_sock_type_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::listen_failed_alert *arg1 = (libtorrent::listen_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::listen_failed_alert::socket_type_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__listen_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "listen_failed_alert_sock_type_get" "', argument " "1"" of type '" "libtorrent::listen_failed_alert *""'"); 
  }
  arg1 = (libtorrent::listen_failed_alert *)(argp1);
  result = (libtorrent::listen_failed_alert::socket_type_t) ((arg1)->sock_type);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_listen_failed_alert_address_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::listen_failed_alert *arg1 = (libtorrent::listen_failed_alert *) 0 ;
  libtorrent::address *arg2 = (libtorrent::address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__listen_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "listen_failed_alert_address_set" "', argument " "1"" of type '" "libtorrent::listen_failed_alert *""'"); 
  }
  arg1 = (libtorrent::listen_failed_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__address, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "listen_failed_alert_address_set" "', argument " "2"" of type '" "libtorrent::address *""'"); 
  }
  arg2 = (libtorrent::address *)(argp2);
  if (arg1) (arg1)->address = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_listen_failed_alert_address_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::listen_failed_alert *arg1 = (libtorrent::listen_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::address *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__listen_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "listen_failed_alert_address_get" "', argument " "1"" of type '" "libtorrent::listen_failed_alert *""'"); 
  }
  arg1 = (libtorrent::listen_failed_alert *)(argp1);
  result = (libtorrent::address *)& ((arg1)->address);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__address, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_listen_failed_alert_port_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::listen_failed_alert *arg1 = (libtorrent::listen_failed_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__listen_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "listen_failed_alert_port_set" "', argument " "1"" of type '" "libtorrent::listen_failed_alert *""'"); 
  }
  arg1 = (libtorrent::listen_failed_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "listen_failed_alert_port_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->port = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_listen_failed_alert_port_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::listen_failed_alert *arg1 = (libtorrent::listen_failed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__listen_failed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "listen_failed_alert_port_get" "', argument " "1"" of type '" "libtorrent::listen_failed_alert *""'"); 
  }
  arg1 = (libtorrent::listen_failed_alert *)(argp1);
  result = (int) ((arg1)->port);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_listen_failed_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_listen_failed_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_listen_failed_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_listen_failed_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::listen_failed_alert * arg1 = (libtorrent::listen_failed_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_listen_failed_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class listen_failed_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_listen_succeeded_alert_tcp(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::listen_succeeded_alert::tcp));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_listen_succeeded_alert_tcp_ssl(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::listen_succeeded_alert::tcp_ssl));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_listen_succeeded_alert_udp(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::listen_succeeded_alert::udp));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_listen_succeeded_alert_i2p(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::listen_succeeded_alert::i2p));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_listen_succeeded_alert_socks5(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::listen_succeeded_alert::socks5));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_listen_succeeded_alert_utp_ssl(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::listen_succeeded_alert::utp_ssl));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_listen_succeeded_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::listen_succeeded_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_listen_succeeded_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::listen_succeeded_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_listen_succeeded_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::listen_succeeded_alert *arg1 = (libtorrent::listen_succeeded_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_listen_succeeded_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__listen_succeeded_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "listen_succeeded_alert_type" "', argument " "1"" of type '" "libtorrent::listen_succeeded_alert const *""'"); 
  }
  arg1 = (libtorrent::listen_succeeded_alert *)(argp1);
  result = (int)((libtorrent::listen_succeeded_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_listen_succeeded_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::listen_succeeded_alert *arg1 = (libtorrent::listen_succeeded_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_listen_succeeded_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__listen_succeeded_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "listen_succeeded_alert_category" "', argument " "1"" of type '" "libtorrent::listen_succeeded_alert const *""'"); 
  }
  arg1 = (libtorrent::listen_succeeded_alert *)(argp1);
  result = (int)((libtorrent::listen_succeeded_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_listen_succeeded_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::listen_succeeded_alert *arg1 = (libtorrent::listen_succeeded_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_listen_succeeded_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__listen_succeeded_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "listen_succeeded_alert_what" "', argument " "1"" of type '" "libtorrent::listen_succeeded_alert const *""'"); 
  }
  arg1 = (libtorrent::listen_succeeded_alert *)(argp1);
  result = (char *)((libtorrent::listen_succeeded_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_listen_succeeded_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::listen_succeeded_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_listen_succeeded_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::listen_succeeded_alert *arg1 = (libtorrent::listen_succeeded_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_listen_succeeded_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__listen_succeeded_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "listen_succeeded_alert_message" "', argument " "1"" of type '" "libtorrent::listen_succeeded_alert const *""'"); 
  }
  arg1 = (libtorrent::listen_succeeded_alert *)(argp1);
  result = ((libtorrent::listen_succeeded_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_listen_succeeded_alert_address_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::listen_succeeded_alert *arg1 = (libtorrent::listen_succeeded_alert *) 0 ;
  libtorrent::address *arg2 = (libtorrent::address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__listen_succeeded_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "listen_succeeded_alert_address_set" "', argument " "1"" of type '" "libtorrent::listen_succeeded_alert *""'"); 
  }
  arg1 = (libtorrent::listen_succeeded_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__address, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "listen_succeeded_alert_address_set" "', argument " "2"" of type '" "libtorrent::address *""'"); 
  }
  arg2 = (libtorrent::address *)(argp2);
  if (arg1) (arg1)->address = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_listen_succeeded_alert_address_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::listen_succeeded_alert *arg1 = (libtorrent::listen_succeeded_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::address *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__listen_succeeded_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "listen_succeeded_alert_address_get" "', argument " "1"" of type '" "libtorrent::listen_succeeded_alert *""'"); 
  }
  arg1 = (libtorrent::listen_succeeded_alert *)(argp1);
  result = (libtorrent::address *)& ((arg1)->address);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__address, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_listen_succeeded_alert_port_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::listen_succeeded_alert *arg1 = (libtorrent::listen_succeeded_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__listen_succeeded_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "listen_succeeded_alert_port_set" "', argument " "1"" of type '" "libtorrent::listen_succeeded_alert *""'"); 
  }
  arg1 = (libtorrent::listen_succeeded_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "listen_succeeded_alert_port_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->port = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_listen_succeeded_alert_port_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::listen_succeeded_alert *arg1 = (libtorrent::listen_succeeded_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__listen_succeeded_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "listen_succeeded_alert_port_get" "', argument " "1"" of type '" "libtorrent::listen_succeeded_alert *""'"); 
  }
  arg1 = (libtorrent::listen_succeeded_alert *)(argp1);
  result = (int) ((arg1)->port);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_listen_succeeded_alert_sock_type_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::listen_succeeded_alert *arg1 = (libtorrent::listen_succeeded_alert *) 0 ;
  libtorrent::listen_succeeded_alert::socket_type_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__listen_succeeded_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "listen_succeeded_alert_sock_type_set" "', argument " "1"" of type '" "libtorrent::listen_succeeded_alert *""'"); 
  }
  arg1 = (libtorrent::listen_succeeded_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "listen_succeeded_alert_sock_type_set" "', argument " "2"" of type '" "libtorrent::listen_succeeded_alert::socket_type_t""'");
  } 
  arg2 = (libtorrent::listen_succeeded_alert::socket_type_t)(val2);
  if (arg1) (arg1)->sock_type = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_listen_succeeded_alert_sock_type_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::listen_succeeded_alert *arg1 = (libtorrent::listen_succeeded_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::listen_succeeded_alert::socket_type_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__listen_succeeded_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "listen_succeeded_alert_sock_type_get" "', argument " "1"" of type '" "libtorrent::listen_succeeded_alert *""'"); 
  }
  arg1 = (libtorrent::listen_succeeded_alert *)(argp1);
  result = (libtorrent::listen_succeeded_alert::socket_type_t) ((arg1)->sock_type);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_listen_succeeded_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_listen_succeeded_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_listen_succeeded_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_listen_succeeded_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::listen_succeeded_alert * arg1 = (libtorrent::listen_succeeded_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_listen_succeeded_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class listen_succeeded_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_portmap_error_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::portmap_error_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_portmap_error_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::portmap_error_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_portmap_error_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::portmap_error_alert *arg1 = (libtorrent::portmap_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_portmap_error_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__portmap_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "portmap_error_alert_type" "', argument " "1"" of type '" "libtorrent::portmap_error_alert const *""'"); 
  }
  arg1 = (libtorrent::portmap_error_alert *)(argp1);
  result = (int)((libtorrent::portmap_error_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_portmap_error_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::portmap_error_alert *arg1 = (libtorrent::portmap_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_portmap_error_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__portmap_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "portmap_error_alert_category" "', argument " "1"" of type '" "libtorrent::portmap_error_alert const *""'"); 
  }
  arg1 = (libtorrent::portmap_error_alert *)(argp1);
  result = (int)((libtorrent::portmap_error_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_portmap_error_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::portmap_error_alert *arg1 = (libtorrent::portmap_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_portmap_error_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__portmap_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "portmap_error_alert_what" "', argument " "1"" of type '" "libtorrent::portmap_error_alert const *""'"); 
  }
  arg1 = (libtorrent::portmap_error_alert *)(argp1);
  result = (char *)((libtorrent::portmap_error_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_portmap_error_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::portmap_error_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_portmap_error_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::portmap_error_alert *arg1 = (libtorrent::portmap_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_portmap_error_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__portmap_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "portmap_error_alert_message" "', argument " "1"" of type '" "libtorrent::portmap_error_alert const *""'"); 
  }
  arg1 = (libtorrent::portmap_error_alert *)(argp1);
  result = ((libtorrent::portmap_error_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_portmap_error_alert_mapping_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::portmap_error_alert *arg1 = (libtorrent::portmap_error_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__portmap_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "portmap_error_alert_mapping_set" "', argument " "1"" of type '" "libtorrent::portmap_error_alert *""'"); 
  }
  arg1 = (libtorrent::portmap_error_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "portmap_error_alert_mapping_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->mapping = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_portmap_error_alert_mapping_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::portmap_error_alert *arg1 = (libtorrent::portmap_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__portmap_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "portmap_error_alert_mapping_get" "', argument " "1"" of type '" "libtorrent::portmap_error_alert *""'"); 
  }
  arg1 = (libtorrent::portmap_error_alert *)(argp1);
  result = (int) ((arg1)->mapping);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_portmap_error_alert_map_type_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::portmap_error_alert *arg1 = (libtorrent::portmap_error_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__portmap_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "portmap_error_alert_map_type_set" "', argument " "1"" of type '" "libtorrent::portmap_error_alert *""'"); 
  }
  arg1 = (libtorrent::portmap_error_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "portmap_error_alert_map_type_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->map_type = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_portmap_error_alert_map_type_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::portmap_error_alert *arg1 = (libtorrent::portmap_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__portmap_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "portmap_error_alert_map_type_get" "', argument " "1"" of type '" "libtorrent::portmap_error_alert *""'"); 
  }
  arg1 = (libtorrent::portmap_error_alert *)(argp1);
  result = (int) ((arg1)->map_type);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_portmap_error_alert_error_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::portmap_error_alert *arg1 = (libtorrent::portmap_error_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__portmap_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "portmap_error_alert_error_set" "', argument " "1"" of type '" "libtorrent::portmap_error_alert *""'"); 
  }
  arg1 = (libtorrent::portmap_error_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "portmap_error_alert_error_set" "', argument " "2"" of type '" "libtorrent::error_code *""'"); 
  }
  arg2 = (libtorrent::error_code *)(argp2);
  if (arg1) (arg1)->error = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_portmap_error_alert_error_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::portmap_error_alert *arg1 = (libtorrent::portmap_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::error_code *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__portmap_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "portmap_error_alert_error_get" "', argument " "1"" of type '" "libtorrent::portmap_error_alert *""'"); 
  }
  arg1 = (libtorrent::portmap_error_alert *)(argp1);
  result = (libtorrent::error_code *)& ((arg1)->error);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_portmap_error_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_portmap_error_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_portmap_error_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_portmap_error_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::portmap_error_alert * arg1 = (libtorrent::portmap_error_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_portmap_error_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class portmap_error_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_portmap_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::portmap_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_portmap_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::portmap_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_portmap_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::portmap_alert *arg1 = (libtorrent::portmap_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_portmap_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__portmap_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "portmap_alert_type" "', argument " "1"" of type '" "libtorrent::portmap_alert const *""'"); 
  }
  arg1 = (libtorrent::portmap_alert *)(argp1);
  result = (int)((libtorrent::portmap_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_portmap_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::portmap_alert *arg1 = (libtorrent::portmap_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_portmap_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__portmap_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "portmap_alert_category" "', argument " "1"" of type '" "libtorrent::portmap_alert const *""'"); 
  }
  arg1 = (libtorrent::portmap_alert *)(argp1);
  result = (int)((libtorrent::portmap_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_portmap_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::portmap_alert *arg1 = (libtorrent::portmap_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_portmap_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__portmap_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "portmap_alert_what" "', argument " "1"" of type '" "libtorrent::portmap_alert const *""'"); 
  }
  arg1 = (libtorrent::portmap_alert *)(argp1);
  result = (char *)((libtorrent::portmap_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_portmap_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::portmap_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_portmap_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::portmap_alert *arg1 = (libtorrent::portmap_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_portmap_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__portmap_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "portmap_alert_message" "', argument " "1"" of type '" "libtorrent::portmap_alert const *""'"); 
  }
  arg1 = (libtorrent::portmap_alert *)(argp1);
  result = ((libtorrent::portmap_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_portmap_alert_mapping_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::portmap_alert *arg1 = (libtorrent::portmap_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__portmap_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "portmap_alert_mapping_set" "', argument " "1"" of type '" "libtorrent::portmap_alert *""'"); 
  }
  arg1 = (libtorrent::portmap_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "portmap_alert_mapping_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->mapping = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_portmap_alert_mapping_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::portmap_alert *arg1 = (libtorrent::portmap_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__portmap_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "portmap_alert_mapping_get" "', argument " "1"" of type '" "libtorrent::portmap_alert *""'"); 
  }
  arg1 = (libtorrent::portmap_alert *)(argp1);
  result = (int) ((arg1)->mapping);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_portmap_alert_external_port_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::portmap_alert *arg1 = (libtorrent::portmap_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__portmap_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "portmap_alert_external_port_set" "', argument " "1"" of type '" "libtorrent::portmap_alert *""'"); 
  }
  arg1 = (libtorrent::portmap_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "portmap_alert_external_port_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->external_port = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_portmap_alert_external_port_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::portmap_alert *arg1 = (libtorrent::portmap_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__portmap_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "portmap_alert_external_port_get" "', argument " "1"" of type '" "libtorrent::portmap_alert *""'"); 
  }
  arg1 = (libtorrent::portmap_alert *)(argp1);
  result = (int) ((arg1)->external_port);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_portmap_alert_map_type_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::portmap_alert *arg1 = (libtorrent::portmap_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__portmap_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "portmap_alert_map_type_set" "', argument " "1"" of type '" "libtorrent::portmap_alert *""'"); 
  }
  arg1 = (libtorrent::portmap_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "portmap_alert_map_type_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->map_type = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_portmap_alert_map_type_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::portmap_alert *arg1 = (libtorrent::portmap_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__portmap_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "portmap_alert_map_type_get" "', argument " "1"" of type '" "libtorrent::portmap_alert *""'"); 
  }
  arg1 = (libtorrent::portmap_alert *)(argp1);
  result = (int) ((arg1)->map_type);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_portmap_alert_tcp(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::portmap_alert::tcp));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_portmap_alert_udp(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::portmap_alert::udp));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_portmap_alert_protocol_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::portmap_alert *arg1 = (libtorrent::portmap_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__portmap_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "portmap_alert_protocol_set" "', argument " "1"" of type '" "libtorrent::portmap_alert *""'"); 
  }
  arg1 = (libtorrent::portmap_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "portmap_alert_protocol_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->protocol = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_portmap_alert_protocol_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::portmap_alert *arg1 = (libtorrent::portmap_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__portmap_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "portmap_alert_protocol_get" "', argument " "1"" of type '" "libtorrent::portmap_alert *""'"); 
  }
  arg1 = (libtorrent::portmap_alert *)(argp1);
  result = (int) ((arg1)->protocol);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_portmap_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_portmap_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_portmap_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_portmap_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::portmap_alert * arg1 = (libtorrent::portmap_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_portmap_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class portmap_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_portmap_log_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::portmap_log_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_portmap_log_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::portmap_log_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_portmap_log_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::portmap_log_alert *arg1 = (libtorrent::portmap_log_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_portmap_log_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__portmap_log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "portmap_log_alert_type" "', argument " "1"" of type '" "libtorrent::portmap_log_alert const *""'"); 
  }
  arg1 = (libtorrent::portmap_log_alert *)(argp1);
  result = (int)((libtorrent::portmap_log_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_portmap_log_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::portmap_log_alert *arg1 = (libtorrent::portmap_log_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_portmap_log_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__portmap_log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "portmap_log_alert_category" "', argument " "1"" of type '" "libtorrent::portmap_log_alert const *""'"); 
  }
  arg1 = (libtorrent::portmap_log_alert *)(argp1);
  result = (int)((libtorrent::portmap_log_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_portmap_log_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::portmap_log_alert *arg1 = (libtorrent::portmap_log_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_portmap_log_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__portmap_log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "portmap_log_alert_what" "', argument " "1"" of type '" "libtorrent::portmap_log_alert const *""'"); 
  }
  arg1 = (libtorrent::portmap_log_alert *)(argp1);
  result = (char *)((libtorrent::portmap_log_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_portmap_log_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::portmap_log_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_portmap_log_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::portmap_log_alert *arg1 = (libtorrent::portmap_log_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_portmap_log_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__portmap_log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "portmap_log_alert_message" "', argument " "1"" of type '" "libtorrent::portmap_log_alert const *""'"); 
  }
  arg1 = (libtorrent::portmap_log_alert *)(argp1);
  result = ((libtorrent::portmap_log_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_portmap_log_alert_map_type_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::portmap_log_alert *arg1 = (libtorrent::portmap_log_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__portmap_log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "portmap_log_alert_map_type_set" "', argument " "1"" of type '" "libtorrent::portmap_log_alert *""'"); 
  }
  arg1 = (libtorrent::portmap_log_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "portmap_log_alert_map_type_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->map_type = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_portmap_log_alert_map_type_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::portmap_log_alert *arg1 = (libtorrent::portmap_log_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__portmap_log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "portmap_log_alert_map_type_get" "', argument " "1"" of type '" "libtorrent::portmap_log_alert *""'"); 
  }
  arg1 = (libtorrent::portmap_log_alert *)(argp1);
  result = (int) ((arg1)->map_type);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_portmap_log_alert_log_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::portmap_log_alert *arg1 = (libtorrent::portmap_log_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_portmap_log_alert_log_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__portmap_log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "portmap_log_alert_log_message" "', argument " "1"" of type '" "libtorrent::portmap_log_alert const *""'"); 
  }
  arg1 = (libtorrent::portmap_log_alert *)(argp1);
  result = (char *)((libtorrent::portmap_log_alert const *)arg1)->log_message();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_portmap_log_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_portmap_log_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_portmap_log_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_portmap_log_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::portmap_log_alert * arg1 = (libtorrent::portmap_log_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_portmap_log_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class portmap_log_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_fastresume_rejected_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::fastresume_rejected_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_fastresume_rejected_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::fastresume_rejected_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_fastresume_rejected_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::fastresume_rejected_alert *arg1 = (libtorrent::fastresume_rejected_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_fastresume_rejected_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__fastresume_rejected_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fastresume_rejected_alert_type" "', argument " "1"" of type '" "libtorrent::fastresume_rejected_alert const *""'"); 
  }
  arg1 = (libtorrent::fastresume_rejected_alert *)(argp1);
  result = (int)((libtorrent::fastresume_rejected_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_fastresume_rejected_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::fastresume_rejected_alert *arg1 = (libtorrent::fastresume_rejected_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_fastresume_rejected_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__fastresume_rejected_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fastresume_rejected_alert_category" "', argument " "1"" of type '" "libtorrent::fastresume_rejected_alert const *""'"); 
  }
  arg1 = (libtorrent::fastresume_rejected_alert *)(argp1);
  result = (int)((libtorrent::fastresume_rejected_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_fastresume_rejected_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::fastresume_rejected_alert *arg1 = (libtorrent::fastresume_rejected_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_fastresume_rejected_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__fastresume_rejected_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fastresume_rejected_alert_what" "', argument " "1"" of type '" "libtorrent::fastresume_rejected_alert const *""'"); 
  }
  arg1 = (libtorrent::fastresume_rejected_alert *)(argp1);
  result = (char *)((libtorrent::fastresume_rejected_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_fastresume_rejected_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::fastresume_rejected_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_fastresume_rejected_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::fastresume_rejected_alert *arg1 = (libtorrent::fastresume_rejected_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_fastresume_rejected_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__fastresume_rejected_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fastresume_rejected_alert_message" "', argument " "1"" of type '" "libtorrent::fastresume_rejected_alert const *""'"); 
  }
  arg1 = (libtorrent::fastresume_rejected_alert *)(argp1);
  result = ((libtorrent::fastresume_rejected_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_fastresume_rejected_alert_error_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::fastresume_rejected_alert *arg1 = (libtorrent::fastresume_rejected_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__fastresume_rejected_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fastresume_rejected_alert_error_set" "', argument " "1"" of type '" "libtorrent::fastresume_rejected_alert *""'"); 
  }
  arg1 = (libtorrent::fastresume_rejected_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fastresume_rejected_alert_error_set" "', argument " "2"" of type '" "libtorrent::error_code *""'"); 
  }
  arg2 = (libtorrent::error_code *)(argp2);
  if (arg1) (arg1)->error = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_fastresume_rejected_alert_error_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::fastresume_rejected_alert *arg1 = (libtorrent::fastresume_rejected_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::error_code *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__fastresume_rejected_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fastresume_rejected_alert_error_get" "', argument " "1"" of type '" "libtorrent::fastresume_rejected_alert *""'"); 
  }
  arg1 = (libtorrent::fastresume_rejected_alert *)(argp1);
  result = (libtorrent::error_code *)& ((arg1)->error);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_fastresume_rejected_alert_file_path(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::fastresume_rejected_alert *arg1 = (libtorrent::fastresume_rejected_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_fastresume_rejected_alert_file_path.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__fastresume_rejected_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fastresume_rejected_alert_file_path" "', argument " "1"" of type '" "libtorrent::fastresume_rejected_alert const *""'"); 
  }
  arg1 = (libtorrent::fastresume_rejected_alert *)(argp1);
  result = (char *)((libtorrent::fastresume_rejected_alert const *)arg1)->file_path();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_fastresume_rejected_alert_get_operation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::fastresume_rejected_alert *arg1 = (libtorrent::fastresume_rejected_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_fastresume_rejected_alert_get_operation.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__fastresume_rejected_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fastresume_rejected_alert_get_operation" "', argument " "1"" of type '" "libtorrent::fastresume_rejected_alert *""'"); 
  }
  arg1 = (libtorrent::fastresume_rejected_alert *)(argp1);
  result = libtorrent_fastresume_rejected_alert_get_operation(arg1);
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_fastresume_rejected_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_fastresume_rejected_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_fastresume_rejected_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_fastresume_rejected_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::fastresume_rejected_alert * arg1 = (libtorrent::fastresume_rejected_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_fastresume_rejected_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class fastresume_rejected_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_peer_blocked_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_blocked_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_blocked_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_blocked_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_peer_blocked_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_blocked_alert *arg1 = (libtorrent::peer_blocked_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_blocked_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_blocked_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_blocked_alert_type" "', argument " "1"" of type '" "libtorrent::peer_blocked_alert const *""'"); 
  }
  arg1 = (libtorrent::peer_blocked_alert *)(argp1);
  result = (int)((libtorrent::peer_blocked_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_blocked_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_blocked_alert *arg1 = (libtorrent::peer_blocked_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_blocked_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_blocked_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_blocked_alert_category" "', argument " "1"" of type '" "libtorrent::peer_blocked_alert const *""'"); 
  }
  arg1 = (libtorrent::peer_blocked_alert *)(argp1);
  result = (int)((libtorrent::peer_blocked_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_blocked_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_blocked_alert *arg1 = (libtorrent::peer_blocked_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_blocked_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_blocked_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_blocked_alert_what" "', argument " "1"" of type '" "libtorrent::peer_blocked_alert const *""'"); 
  }
  arg1 = (libtorrent::peer_blocked_alert *)(argp1);
  result = (char *)((libtorrent::peer_blocked_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_peer_blocked_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_blocked_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_peer_blocked_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_blocked_alert *arg1 = (libtorrent::peer_blocked_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_blocked_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_blocked_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_blocked_alert_message" "', argument " "1"" of type '" "libtorrent::peer_blocked_alert const *""'"); 
  }
  arg1 = (libtorrent::peer_blocked_alert *)(argp1);
  result = ((libtorrent::peer_blocked_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_peer_blocked_alert_ip_filter(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_blocked_alert::ip_filter));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_blocked_alert_port_filter(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_blocked_alert::port_filter));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_blocked_alert_i2p_mixed(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_blocked_alert::i2p_mixed));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_blocked_alert_privileged_ports(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_blocked_alert::privileged_ports));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_blocked_alert_utp_disabled(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_blocked_alert::utp_disabled));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_blocked_alert_tcp_disabled(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_blocked_alert::tcp_disabled));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_blocked_alert_invalid_local_interface(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_blocked_alert::invalid_local_interface));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_blocked_alert_reason_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_blocked_alert *arg1 = (libtorrent::peer_blocked_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_blocked_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_blocked_alert_reason_set" "', argument " "1"" of type '" "libtorrent::peer_blocked_alert *""'"); 
  }
  arg1 = (libtorrent::peer_blocked_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_blocked_alert_reason_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->reason = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_blocked_alert_reason_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_blocked_alert *arg1 = (libtorrent::peer_blocked_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_blocked_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_blocked_alert_reason_get" "', argument " "1"" of type '" "libtorrent::peer_blocked_alert *""'"); 
  }
  arg1 = (libtorrent::peer_blocked_alert *)(argp1);
  result = (int) ((arg1)->reason);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_peer_blocked_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_peer_blocked_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_peer_blocked_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_peer_blocked_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::peer_blocked_alert * arg1 = (libtorrent::peer_blocked_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_peer_blocked_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class peer_blocked_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_dht_announce_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_announce_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_dht_announce_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_announce_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_dht_announce_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_announce_alert *arg1 = (libtorrent::dht_announce_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_announce_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_announce_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_announce_alert_type" "', argument " "1"" of type '" "libtorrent::dht_announce_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_announce_alert *)(argp1);
  result = (int)((libtorrent::dht_announce_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_announce_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_announce_alert *arg1 = (libtorrent::dht_announce_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_announce_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_announce_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_announce_alert_category" "', argument " "1"" of type '" "libtorrent::dht_announce_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_announce_alert *)(argp1);
  result = (int)((libtorrent::dht_announce_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_announce_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_announce_alert *arg1 = (libtorrent::dht_announce_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_announce_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_announce_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_announce_alert_what" "', argument " "1"" of type '" "libtorrent::dht_announce_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_announce_alert *)(argp1);
  result = (char *)((libtorrent::dht_announce_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_dht_announce_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_announce_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_dht_announce_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_announce_alert *arg1 = (libtorrent::dht_announce_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_announce_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_announce_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_announce_alert_message" "', argument " "1"" of type '" "libtorrent::dht_announce_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_announce_alert *)(argp1);
  result = ((libtorrent::dht_announce_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_dht_announce_alert_ip_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_announce_alert *arg1 = (libtorrent::dht_announce_alert *) 0 ;
  libtorrent::address *arg2 = (libtorrent::address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_announce_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_announce_alert_ip_set" "', argument " "1"" of type '" "libtorrent::dht_announce_alert *""'"); 
  }
  arg1 = (libtorrent::dht_announce_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__address, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dht_announce_alert_ip_set" "', argument " "2"" of type '" "libtorrent::address *""'"); 
  }
  arg2 = (libtorrent::address *)(argp2);
  if (arg1) (arg1)->ip = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_announce_alert_ip_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_announce_alert *arg1 = (libtorrent::dht_announce_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::address *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_announce_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_announce_alert_ip_get" "', argument " "1"" of type '" "libtorrent::dht_announce_alert *""'"); 
  }
  arg1 = (libtorrent::dht_announce_alert *)(argp1);
  result = (libtorrent::address *)& ((arg1)->ip);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__address, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_announce_alert_port_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_announce_alert *arg1 = (libtorrent::dht_announce_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_announce_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_announce_alert_port_set" "', argument " "1"" of type '" "libtorrent::dht_announce_alert *""'"); 
  }
  arg1 = (libtorrent::dht_announce_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_announce_alert_port_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->port = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_announce_alert_port_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_announce_alert *arg1 = (libtorrent::dht_announce_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_announce_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_announce_alert_port_get" "', argument " "1"" of type '" "libtorrent::dht_announce_alert *""'"); 
  }
  arg1 = (libtorrent::dht_announce_alert *)(argp1);
  result = (int) ((arg1)->port);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_announce_alert_info_hash_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_announce_alert *arg1 = (libtorrent::dht_announce_alert *) 0 ;
  libtorrent::sha1_hash *arg2 = (libtorrent::sha1_hash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_announce_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_announce_alert_info_hash_set" "', argument " "1"" of type '" "libtorrent::dht_announce_alert *""'"); 
  }
  arg1 = (libtorrent::dht_announce_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dht_announce_alert_info_hash_set" "', argument " "2"" of type '" "libtorrent::sha1_hash *""'"); 
  }
  arg2 = (libtorrent::sha1_hash *)(argp2);
  if (arg1) (arg1)->info_hash = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_announce_alert_info_hash_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_announce_alert *arg1 = (libtorrent::dht_announce_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::sha1_hash *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_announce_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_announce_alert_info_hash_get" "', argument " "1"" of type '" "libtorrent::dht_announce_alert *""'"); 
  }
  arg1 = (libtorrent::dht_announce_alert *)(argp1);
  result = (libtorrent::sha1_hash *)& ((arg1)->info_hash);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_dht_announce_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_dht_announce_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_dht_announce_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_dht_announce_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::dht_announce_alert * arg1 = (libtorrent::dht_announce_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_dht_announce_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class dht_announce_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_dht_get_peers_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_get_peers_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_dht_get_peers_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_get_peers_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_dht_get_peers_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_get_peers_alert *arg1 = (libtorrent::dht_get_peers_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_get_peers_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_get_peers_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_get_peers_alert_type" "', argument " "1"" of type '" "libtorrent::dht_get_peers_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_get_peers_alert *)(argp1);
  result = (int)((libtorrent::dht_get_peers_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_get_peers_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_get_peers_alert *arg1 = (libtorrent::dht_get_peers_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_get_peers_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_get_peers_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_get_peers_alert_category" "', argument " "1"" of type '" "libtorrent::dht_get_peers_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_get_peers_alert *)(argp1);
  result = (int)((libtorrent::dht_get_peers_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_get_peers_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_get_peers_alert *arg1 = (libtorrent::dht_get_peers_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_get_peers_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_get_peers_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_get_peers_alert_what" "', argument " "1"" of type '" "libtorrent::dht_get_peers_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_get_peers_alert *)(argp1);
  result = (char *)((libtorrent::dht_get_peers_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_dht_get_peers_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_get_peers_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_dht_get_peers_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_get_peers_alert *arg1 = (libtorrent::dht_get_peers_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_get_peers_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_get_peers_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_get_peers_alert_message" "', argument " "1"" of type '" "libtorrent::dht_get_peers_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_get_peers_alert *)(argp1);
  result = ((libtorrent::dht_get_peers_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_dht_get_peers_alert_info_hash_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_get_peers_alert *arg1 = (libtorrent::dht_get_peers_alert *) 0 ;
  libtorrent::sha1_hash *arg2 = (libtorrent::sha1_hash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_get_peers_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_get_peers_alert_info_hash_set" "', argument " "1"" of type '" "libtorrent::dht_get_peers_alert *""'"); 
  }
  arg1 = (libtorrent::dht_get_peers_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dht_get_peers_alert_info_hash_set" "', argument " "2"" of type '" "libtorrent::sha1_hash *""'"); 
  }
  arg2 = (libtorrent::sha1_hash *)(argp2);
  if (arg1) (arg1)->info_hash = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_get_peers_alert_info_hash_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_get_peers_alert *arg1 = (libtorrent::dht_get_peers_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::sha1_hash *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_get_peers_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_get_peers_alert_info_hash_get" "', argument " "1"" of type '" "libtorrent::dht_get_peers_alert *""'"); 
  }
  arg1 = (libtorrent::dht_get_peers_alert *)(argp1);
  result = (libtorrent::sha1_hash *)& ((arg1)->info_hash);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_dht_get_peers_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_dht_get_peers_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_dht_get_peers_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_dht_get_peers_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::dht_get_peers_alert * arg1 = (libtorrent::dht_get_peers_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_dht_get_peers_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class dht_get_peers_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_stats_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::stats_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_stats_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::stats_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_stats_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::stats_alert *arg1 = (libtorrent::stats_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_stats_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__stats_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "stats_alert_type" "', argument " "1"" of type '" "libtorrent::stats_alert const *""'"); 
  }
  arg1 = (libtorrent::stats_alert *)(argp1);
  result = (int)((libtorrent::stats_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_stats_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::stats_alert *arg1 = (libtorrent::stats_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_stats_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__stats_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "stats_alert_category" "', argument " "1"" of type '" "libtorrent::stats_alert const *""'"); 
  }
  arg1 = (libtorrent::stats_alert *)(argp1);
  result = (int)((libtorrent::stats_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_stats_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::stats_alert *arg1 = (libtorrent::stats_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_stats_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__stats_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "stats_alert_what" "', argument " "1"" of type '" "libtorrent::stats_alert const *""'"); 
  }
  arg1 = (libtorrent::stats_alert *)(argp1);
  result = (char *)((libtorrent::stats_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_stats_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::stats_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_stats_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::stats_alert *arg1 = (libtorrent::stats_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_stats_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__stats_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "stats_alert_message" "', argument " "1"" of type '" "libtorrent::stats_alert const *""'"); 
  }
  arg1 = (libtorrent::stats_alert *)(argp1);
  result = ((libtorrent::stats_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_stats_alert_upload_payload(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::stats_alert::upload_payload));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_stats_alert_upload_protocol(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::stats_alert::upload_protocol));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_stats_alert_download_payload(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::stats_alert::download_payload));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_stats_alert_download_protocol(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::stats_alert::download_protocol));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_stats_alert_upload_ip_protocol(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::stats_alert::upload_ip_protocol));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_stats_alert_download_ip_protocol(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::stats_alert::download_ip_protocol));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_stats_alert_num_channels(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::stats_alert::num_channels));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_stats_alert_interval_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::stats_alert *arg1 = (libtorrent::stats_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__stats_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "stats_alert_interval_set" "', argument " "1"" of type '" "libtorrent::stats_alert *""'"); 
  }
  arg1 = (libtorrent::stats_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "stats_alert_interval_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->interval = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_stats_alert_interval_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::stats_alert *arg1 = (libtorrent::stats_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__stats_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "stats_alert_interval_get" "', argument " "1"" of type '" "libtorrent::stats_alert *""'"); 
  }
  arg1 = (libtorrent::stats_alert *)(argp1);
  result = (int) ((arg1)->interval);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_stats_alert_get_transferred(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::stats_alert *arg1 = (libtorrent::stats_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_stats_alert_get_transferred.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__stats_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "stats_alert_get_transferred" "', argument " "1"" of type '" "libtorrent::stats_alert *""'"); 
  }
  arg1 = (libtorrent::stats_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "stats_alert_get_transferred" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (int)libtorrent_stats_alert_get_transferred(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_stats_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_stats_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_stats_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_stats_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::stats_alert * arg1 = (libtorrent::stats_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_stats_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class stats_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_cache_flushed_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::cache_flushed_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_cache_flushed_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::cache_flushed_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_cache_flushed_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::cache_flushed_alert *arg1 = (libtorrent::cache_flushed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cache_flushed_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__cache_flushed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cache_flushed_alert_type" "', argument " "1"" of type '" "libtorrent::cache_flushed_alert const *""'"); 
  }
  arg1 = (libtorrent::cache_flushed_alert *)(argp1);
  result = (int)((libtorrent::cache_flushed_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_cache_flushed_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::cache_flushed_alert *arg1 = (libtorrent::cache_flushed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cache_flushed_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__cache_flushed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cache_flushed_alert_category" "', argument " "1"" of type '" "libtorrent::cache_flushed_alert const *""'"); 
  }
  arg1 = (libtorrent::cache_flushed_alert *)(argp1);
  result = (int)((libtorrent::cache_flushed_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_cache_flushed_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::cache_flushed_alert *arg1 = (libtorrent::cache_flushed_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cache_flushed_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__cache_flushed_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cache_flushed_alert_what" "', argument " "1"" of type '" "libtorrent::cache_flushed_alert const *""'"); 
  }
  arg1 = (libtorrent::cache_flushed_alert *)(argp1);
  result = (char *)((libtorrent::cache_flushed_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_cache_flushed_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::cache_flushed_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_cache_flushed_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_cache_flushed_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_cache_flushed_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_cache_flushed_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::cache_flushed_alert * arg1 = (libtorrent::cache_flushed_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_cache_flushed_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class cache_flushed_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_anonymous_mode_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::anonymous_mode_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_anonymous_mode_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::anonymous_mode_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_anonymous_mode_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::anonymous_mode_alert *arg1 = (libtorrent::anonymous_mode_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_anonymous_mode_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__anonymous_mode_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "anonymous_mode_alert_type" "', argument " "1"" of type '" "libtorrent::anonymous_mode_alert const *""'"); 
  }
  arg1 = (libtorrent::anonymous_mode_alert *)(argp1);
  result = (int)((libtorrent::anonymous_mode_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_anonymous_mode_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::anonymous_mode_alert *arg1 = (libtorrent::anonymous_mode_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_anonymous_mode_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__anonymous_mode_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "anonymous_mode_alert_category" "', argument " "1"" of type '" "libtorrent::anonymous_mode_alert const *""'"); 
  }
  arg1 = (libtorrent::anonymous_mode_alert *)(argp1);
  result = (int)((libtorrent::anonymous_mode_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_anonymous_mode_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::anonymous_mode_alert *arg1 = (libtorrent::anonymous_mode_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_anonymous_mode_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__anonymous_mode_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "anonymous_mode_alert_what" "', argument " "1"" of type '" "libtorrent::anonymous_mode_alert const *""'"); 
  }
  arg1 = (libtorrent::anonymous_mode_alert *)(argp1);
  result = (char *)((libtorrent::anonymous_mode_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_anonymous_mode_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::anonymous_mode_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_anonymous_mode_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::anonymous_mode_alert *arg1 = (libtorrent::anonymous_mode_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_anonymous_mode_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__anonymous_mode_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "anonymous_mode_alert_message" "', argument " "1"" of type '" "libtorrent::anonymous_mode_alert const *""'"); 
  }
  arg1 = (libtorrent::anonymous_mode_alert *)(argp1);
  result = ((libtorrent::anonymous_mode_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_anonymous_mode_alert_tracker_not_anonymous(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::anonymous_mode_alert::tracker_not_anonymous));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_anonymous_mode_alert_kind_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::anonymous_mode_alert *arg1 = (libtorrent::anonymous_mode_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__anonymous_mode_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "anonymous_mode_alert_kind_set" "', argument " "1"" of type '" "libtorrent::anonymous_mode_alert *""'"); 
  }
  arg1 = (libtorrent::anonymous_mode_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "anonymous_mode_alert_kind_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->kind = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_anonymous_mode_alert_kind_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::anonymous_mode_alert *arg1 = (libtorrent::anonymous_mode_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__anonymous_mode_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "anonymous_mode_alert_kind_get" "', argument " "1"" of type '" "libtorrent::anonymous_mode_alert *""'"); 
  }
  arg1 = (libtorrent::anonymous_mode_alert *)(argp1);
  result = (int) ((arg1)->kind);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_anonymous_mode_alert_str_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::anonymous_mode_alert *arg1 = (libtorrent::anonymous_mode_alert *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__anonymous_mode_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "anonymous_mode_alert_str_set" "', argument " "1"" of type '" "libtorrent::anonymous_mode_alert *""'"); 
  }
  arg1 = (libtorrent::anonymous_mode_alert *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(value, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "anonymous_mode_alert_str_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "anonymous_mode_alert_str_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->str = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_anonymous_mode_alert_str_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::anonymous_mode_alert *arg1 = (libtorrent::anonymous_mode_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__anonymous_mode_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "anonymous_mode_alert_str_get" "', argument " "1"" of type '" "libtorrent::anonymous_mode_alert *""'"); 
  }
  arg1 = (libtorrent::anonymous_mode_alert *)(argp1);
  result = (std::string *) & ((arg1)->str);
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_anonymous_mode_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_anonymous_mode_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_anonymous_mode_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_anonymous_mode_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::anonymous_mode_alert * arg1 = (libtorrent::anonymous_mode_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_anonymous_mode_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class anonymous_mode_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_lsd_peer_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::lsd_peer_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_lsd_peer_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::lsd_peer_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lsd_peer_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::lsd_peer_alert *arg1 = (libtorrent::lsd_peer_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lsd_peer_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__lsd_peer_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lsd_peer_alert_type" "', argument " "1"" of type '" "libtorrent::lsd_peer_alert const *""'"); 
  }
  arg1 = (libtorrent::lsd_peer_alert *)(argp1);
  result = (int)((libtorrent::lsd_peer_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lsd_peer_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::lsd_peer_alert *arg1 = (libtorrent::lsd_peer_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lsd_peer_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__lsd_peer_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lsd_peer_alert_category" "', argument " "1"" of type '" "libtorrent::lsd_peer_alert const *""'"); 
  }
  arg1 = (libtorrent::lsd_peer_alert *)(argp1);
  result = (int)((libtorrent::lsd_peer_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lsd_peer_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::lsd_peer_alert *arg1 = (libtorrent::lsd_peer_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lsd_peer_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__lsd_peer_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lsd_peer_alert_what" "', argument " "1"" of type '" "libtorrent::lsd_peer_alert const *""'"); 
  }
  arg1 = (libtorrent::lsd_peer_alert *)(argp1);
  result = (char *)((libtorrent::lsd_peer_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_lsd_peer_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::lsd_peer_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lsd_peer_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::lsd_peer_alert *arg1 = (libtorrent::lsd_peer_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lsd_peer_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__lsd_peer_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lsd_peer_alert_message" "', argument " "1"" of type '" "libtorrent::lsd_peer_alert const *""'"); 
  }
  arg1 = (libtorrent::lsd_peer_alert *)(argp1);
  result = ((libtorrent::lsd_peer_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lsd_peer_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lsd_peer_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lsd_peer_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lsd_peer_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::lsd_peer_alert * arg1 = (libtorrent::lsd_peer_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_lsd_peer_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class lsd_peer_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_trackerid_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::trackerid_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_trackerid_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::trackerid_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_trackerid_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::trackerid_alert *arg1 = (libtorrent::trackerid_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_trackerid_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__trackerid_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "trackerid_alert_type" "', argument " "1"" of type '" "libtorrent::trackerid_alert const *""'"); 
  }
  arg1 = (libtorrent::trackerid_alert *)(argp1);
  result = (int)((libtorrent::trackerid_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_trackerid_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::trackerid_alert *arg1 = (libtorrent::trackerid_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_trackerid_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__trackerid_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "trackerid_alert_category" "', argument " "1"" of type '" "libtorrent::trackerid_alert const *""'"); 
  }
  arg1 = (libtorrent::trackerid_alert *)(argp1);
  result = (int)((libtorrent::trackerid_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_trackerid_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::trackerid_alert *arg1 = (libtorrent::trackerid_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_trackerid_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__trackerid_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "trackerid_alert_what" "', argument " "1"" of type '" "libtorrent::trackerid_alert const *""'"); 
  }
  arg1 = (libtorrent::trackerid_alert *)(argp1);
  result = (char *)((libtorrent::trackerid_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_trackerid_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::trackerid_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_trackerid_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::trackerid_alert *arg1 = (libtorrent::trackerid_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_trackerid_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__trackerid_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "trackerid_alert_message" "', argument " "1"" of type '" "libtorrent::trackerid_alert const *""'"); 
  }
  arg1 = (libtorrent::trackerid_alert *)(argp1);
  result = ((libtorrent::trackerid_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_trackerid_alert_tracker_id(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::trackerid_alert *arg1 = (libtorrent::trackerid_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_trackerid_alert_tracker_id.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__trackerid_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "trackerid_alert_tracker_id" "', argument " "1"" of type '" "libtorrent::trackerid_alert const *""'"); 
  }
  arg1 = (libtorrent::trackerid_alert *)(argp1);
  result = (char *)((libtorrent::trackerid_alert const *)arg1)->tracker_id();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_trackerid_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_trackerid_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_trackerid_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_trackerid_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::trackerid_alert * arg1 = (libtorrent::trackerid_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_trackerid_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class trackerid_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_dht_bootstrap_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_bootstrap_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_dht_bootstrap_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_bootstrap_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_dht_bootstrap_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_bootstrap_alert *arg1 = (libtorrent::dht_bootstrap_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_bootstrap_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_bootstrap_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_bootstrap_alert_type" "', argument " "1"" of type '" "libtorrent::dht_bootstrap_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_bootstrap_alert *)(argp1);
  result = (int)((libtorrent::dht_bootstrap_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_bootstrap_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_bootstrap_alert *arg1 = (libtorrent::dht_bootstrap_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_bootstrap_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_bootstrap_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_bootstrap_alert_category" "', argument " "1"" of type '" "libtorrent::dht_bootstrap_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_bootstrap_alert *)(argp1);
  result = (int)((libtorrent::dht_bootstrap_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_bootstrap_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_bootstrap_alert *arg1 = (libtorrent::dht_bootstrap_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_bootstrap_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_bootstrap_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_bootstrap_alert_what" "', argument " "1"" of type '" "libtorrent::dht_bootstrap_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_bootstrap_alert *)(argp1);
  result = (char *)((libtorrent::dht_bootstrap_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_dht_bootstrap_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_bootstrap_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_dht_bootstrap_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_bootstrap_alert *arg1 = (libtorrent::dht_bootstrap_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_bootstrap_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_bootstrap_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_bootstrap_alert_message" "', argument " "1"" of type '" "libtorrent::dht_bootstrap_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_bootstrap_alert *)(argp1);
  result = ((libtorrent::dht_bootstrap_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_dht_bootstrap_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_dht_bootstrap_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_dht_bootstrap_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_dht_bootstrap_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::dht_bootstrap_alert * arg1 = (libtorrent::dht_bootstrap_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_dht_bootstrap_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class dht_bootstrap_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_error_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_error_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_error_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_error_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_torrent_error_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_error_alert *arg1 = (libtorrent::torrent_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_error_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_error_alert_type" "', argument " "1"" of type '" "libtorrent::torrent_error_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_error_alert *)(argp1);
  result = (int)((libtorrent::torrent_error_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_error_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_error_alert *arg1 = (libtorrent::torrent_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_error_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_error_alert_category" "', argument " "1"" of type '" "libtorrent::torrent_error_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_error_alert *)(argp1);
  result = (int)((libtorrent::torrent_error_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_error_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_error_alert *arg1 = (libtorrent::torrent_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_error_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_error_alert_what" "', argument " "1"" of type '" "libtorrent::torrent_error_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_error_alert *)(argp1);
  result = (char *)((libtorrent::torrent_error_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_error_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_error_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_torrent_error_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_error_alert *arg1 = (libtorrent::torrent_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_error_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_error_alert_message" "', argument " "1"" of type '" "libtorrent::torrent_error_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_error_alert *)(argp1);
  result = ((libtorrent::torrent_error_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_torrent_error_alert_error_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_error_alert *arg1 = (libtorrent::torrent_error_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_error_alert_error_set" "', argument " "1"" of type '" "libtorrent::torrent_error_alert *""'"); 
  }
  arg1 = (libtorrent::torrent_error_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_error_alert_error_set" "', argument " "2"" of type '" "libtorrent::error_code *""'"); 
  }
  arg2 = (libtorrent::error_code *)(argp2);
  if (arg1) (arg1)->error = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_error_alert_error_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_error_alert *arg1 = (libtorrent::torrent_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::error_code *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_error_alert_error_get" "', argument " "1"" of type '" "libtorrent::torrent_error_alert *""'"); 
  }
  arg1 = (libtorrent::torrent_error_alert *)(argp1);
  result = (libtorrent::error_code *)& ((arg1)->error);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_torrent_error_alert_filename(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_error_alert *arg1 = (libtorrent::torrent_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_error_alert_filename.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_error_alert_filename" "', argument " "1"" of type '" "libtorrent::torrent_error_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_error_alert *)(argp1);
  result = (char *)((libtorrent::torrent_error_alert const *)arg1)->filename();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_torrent_error_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_torrent_error_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_torrent_error_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_torrent_error_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::torrent_error_alert * arg1 = (libtorrent::torrent_error_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_torrent_error_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class torrent_error_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_need_cert_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_need_cert_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_need_cert_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_need_cert_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_torrent_need_cert_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_need_cert_alert *arg1 = (libtorrent::torrent_need_cert_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_need_cert_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_need_cert_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_need_cert_alert_type" "', argument " "1"" of type '" "libtorrent::torrent_need_cert_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_need_cert_alert *)(argp1);
  result = (int)((libtorrent::torrent_need_cert_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_need_cert_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_need_cert_alert *arg1 = (libtorrent::torrent_need_cert_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_need_cert_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_need_cert_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_need_cert_alert_category" "', argument " "1"" of type '" "libtorrent::torrent_need_cert_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_need_cert_alert *)(argp1);
  result = (int)((libtorrent::torrent_need_cert_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_need_cert_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_need_cert_alert *arg1 = (libtorrent::torrent_need_cert_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_need_cert_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_need_cert_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_need_cert_alert_what" "', argument " "1"" of type '" "libtorrent::torrent_need_cert_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_need_cert_alert *)(argp1);
  result = (char *)((libtorrent::torrent_need_cert_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_need_cert_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_need_cert_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_torrent_need_cert_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_need_cert_alert *arg1 = (libtorrent::torrent_need_cert_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_need_cert_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_need_cert_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_need_cert_alert_message" "', argument " "1"" of type '" "libtorrent::torrent_need_cert_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_need_cert_alert *)(argp1);
  result = ((libtorrent::torrent_need_cert_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_torrent_need_cert_alert_error_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_need_cert_alert *arg1 = (libtorrent::torrent_need_cert_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_need_cert_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_need_cert_alert_error_set" "', argument " "1"" of type '" "libtorrent::torrent_need_cert_alert *""'"); 
  }
  arg1 = (libtorrent::torrent_need_cert_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_need_cert_alert_error_set" "', argument " "2"" of type '" "libtorrent::error_code *""'"); 
  }
  arg2 = (libtorrent::error_code *)(argp2);
  if (arg1) (arg1)->error = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_need_cert_alert_error_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_need_cert_alert *arg1 = (libtorrent::torrent_need_cert_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::error_code *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_need_cert_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_need_cert_alert_error_get" "', argument " "1"" of type '" "libtorrent::torrent_need_cert_alert *""'"); 
  }
  arg1 = (libtorrent::torrent_need_cert_alert *)(argp1);
  result = (libtorrent::error_code *)& ((arg1)->error);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_torrent_need_cert_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_torrent_need_cert_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_torrent_need_cert_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_torrent_need_cert_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::torrent_need_cert_alert * arg1 = (libtorrent::torrent_need_cert_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_torrent_need_cert_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class torrent_need_cert_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_incoming_connection_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::incoming_connection_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_incoming_connection_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::incoming_connection_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_incoming_connection_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::incoming_connection_alert *arg1 = (libtorrent::incoming_connection_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_incoming_connection_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__incoming_connection_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "incoming_connection_alert_type" "', argument " "1"" of type '" "libtorrent::incoming_connection_alert const *""'"); 
  }
  arg1 = (libtorrent::incoming_connection_alert *)(argp1);
  result = (int)((libtorrent::incoming_connection_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_incoming_connection_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::incoming_connection_alert *arg1 = (libtorrent::incoming_connection_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_incoming_connection_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__incoming_connection_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "incoming_connection_alert_category" "', argument " "1"" of type '" "libtorrent::incoming_connection_alert const *""'"); 
  }
  arg1 = (libtorrent::incoming_connection_alert *)(argp1);
  result = (int)((libtorrent::incoming_connection_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_incoming_connection_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::incoming_connection_alert *arg1 = (libtorrent::incoming_connection_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_incoming_connection_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__incoming_connection_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "incoming_connection_alert_what" "', argument " "1"" of type '" "libtorrent::incoming_connection_alert const *""'"); 
  }
  arg1 = (libtorrent::incoming_connection_alert *)(argp1);
  result = (char *)((libtorrent::incoming_connection_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_incoming_connection_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::incoming_connection_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_incoming_connection_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::incoming_connection_alert *arg1 = (libtorrent::incoming_connection_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_incoming_connection_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__incoming_connection_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "incoming_connection_alert_message" "', argument " "1"" of type '" "libtorrent::incoming_connection_alert const *""'"); 
  }
  arg1 = (libtorrent::incoming_connection_alert *)(argp1);
  result = ((libtorrent::incoming_connection_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_incoming_connection_alert_socket_type_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::incoming_connection_alert *arg1 = (libtorrent::incoming_connection_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__incoming_connection_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "incoming_connection_alert_socket_type_set" "', argument " "1"" of type '" "libtorrent::incoming_connection_alert *""'"); 
  }
  arg1 = (libtorrent::incoming_connection_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "incoming_connection_alert_socket_type_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->socket_type = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_incoming_connection_alert_socket_type_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::incoming_connection_alert *arg1 = (libtorrent::incoming_connection_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__incoming_connection_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "incoming_connection_alert_socket_type_get" "', argument " "1"" of type '" "libtorrent::incoming_connection_alert *""'"); 
  }
  arg1 = (libtorrent::incoming_connection_alert *)(argp1);
  result = (int) ((arg1)->socket_type);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_incoming_connection_alert_ip_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::incoming_connection_alert *arg1 = (libtorrent::incoming_connection_alert *) 0 ;
  libtorrent::tcp::endpoint *arg2 = (libtorrent::tcp::endpoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__incoming_connection_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "incoming_connection_alert_ip_set" "', argument " "1"" of type '" "libtorrent::incoming_connection_alert *""'"); 
  }
  arg1 = (libtorrent::incoming_connection_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__tcp__endpoint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "incoming_connection_alert_ip_set" "', argument " "2"" of type '" "libtorrent::tcp::endpoint *""'"); 
  }
  arg2 = (libtorrent::tcp::endpoint *)(argp2);
  if (arg1) (arg1)->ip = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_incoming_connection_alert_ip_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::incoming_connection_alert *arg1 = (libtorrent::incoming_connection_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::tcp::endpoint *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__incoming_connection_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "incoming_connection_alert_ip_get" "', argument " "1"" of type '" "libtorrent::incoming_connection_alert *""'"); 
  }
  arg1 = (libtorrent::incoming_connection_alert *)(argp1);
  result = (libtorrent::tcp::endpoint *)& ((arg1)->ip);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__tcp__endpoint, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_incoming_connection_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_incoming_connection_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_incoming_connection_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_incoming_connection_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::incoming_connection_alert * arg1 = (libtorrent::incoming_connection_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_incoming_connection_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class incoming_connection_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_add_torrent_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::add_torrent_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_add_torrent_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::add_torrent_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_add_torrent_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_alert *arg1 = (libtorrent::add_torrent_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_add_torrent_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_alert_type" "', argument " "1"" of type '" "libtorrent::add_torrent_alert const *""'"); 
  }
  arg1 = (libtorrent::add_torrent_alert *)(argp1);
  result = (int)((libtorrent::add_torrent_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_add_torrent_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_alert *arg1 = (libtorrent::add_torrent_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_add_torrent_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_alert_category" "', argument " "1"" of type '" "libtorrent::add_torrent_alert const *""'"); 
  }
  arg1 = (libtorrent::add_torrent_alert *)(argp1);
  result = (int)((libtorrent::add_torrent_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_add_torrent_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_alert *arg1 = (libtorrent::add_torrent_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_add_torrent_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_alert_what" "', argument " "1"" of type '" "libtorrent::add_torrent_alert const *""'"); 
  }
  arg1 = (libtorrent::add_torrent_alert *)(argp1);
  result = (char *)((libtorrent::add_torrent_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_add_torrent_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::add_torrent_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_add_torrent_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_alert *arg1 = (libtorrent::add_torrent_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_add_torrent_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_alert_message" "', argument " "1"" of type '" "libtorrent::add_torrent_alert const *""'"); 
  }
  arg1 = (libtorrent::add_torrent_alert *)(argp1);
  result = ((libtorrent::add_torrent_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_add_torrent_alert_params_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_alert *arg1 = (libtorrent::add_torrent_alert *) 0 ;
  libtorrent::add_torrent_params *arg2 = (libtorrent::add_torrent_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_alert_params_set" "', argument " "1"" of type '" "libtorrent::add_torrent_alert *""'"); 
  }
  arg1 = (libtorrent::add_torrent_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "add_torrent_alert_params_set" "', argument " "2"" of type '" "libtorrent::add_torrent_params *""'"); 
  }
  arg2 = (libtorrent::add_torrent_params *)(argp2);
  if (arg1) (arg1)->params = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_alert_params_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_alert *arg1 = (libtorrent::add_torrent_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::add_torrent_params *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_alert_params_get" "', argument " "1"" of type '" "libtorrent::add_torrent_alert *""'"); 
  }
  arg1 = (libtorrent::add_torrent_alert *)(argp1);
  result = (libtorrent::add_torrent_params *)& ((arg1)->params);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__add_torrent_params, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_add_torrent_alert_error_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::add_torrent_alert *arg1 = (libtorrent::add_torrent_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_alert_error_set" "', argument " "1"" of type '" "libtorrent::add_torrent_alert *""'"); 
  }
  arg1 = (libtorrent::add_torrent_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "add_torrent_alert_error_set" "', argument " "2"" of type '" "libtorrent::error_code *""'"); 
  }
  arg2 = (libtorrent::error_code *)(argp2);
  if (arg1) (arg1)->error = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_add_torrent_alert_error_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::add_torrent_alert *arg1 = (libtorrent::add_torrent_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::error_code *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__add_torrent_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_torrent_alert_error_get" "', argument " "1"" of type '" "libtorrent::add_torrent_alert *""'"); 
  }
  arg1 = (libtorrent::add_torrent_alert *)(argp1);
  result = (libtorrent::error_code *)& ((arg1)->error);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_add_torrent_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_add_torrent_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_add_torrent_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_add_torrent_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::add_torrent_alert * arg1 = (libtorrent::add_torrent_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_add_torrent_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class add_torrent_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_state_update_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::state_update_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_state_update_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::state_update_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_state_update_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::state_update_alert *arg1 = (libtorrent::state_update_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_state_update_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__state_update_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "state_update_alert_type" "', argument " "1"" of type '" "libtorrent::state_update_alert const *""'"); 
  }
  arg1 = (libtorrent::state_update_alert *)(argp1);
  result = (int)((libtorrent::state_update_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_state_update_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::state_update_alert *arg1 = (libtorrent::state_update_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_state_update_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__state_update_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "state_update_alert_category" "', argument " "1"" of type '" "libtorrent::state_update_alert const *""'"); 
  }
  arg1 = (libtorrent::state_update_alert *)(argp1);
  result = (int)((libtorrent::state_update_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_state_update_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::state_update_alert *arg1 = (libtorrent::state_update_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_state_update_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__state_update_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "state_update_alert_what" "', argument " "1"" of type '" "libtorrent::state_update_alert const *""'"); 
  }
  arg1 = (libtorrent::state_update_alert *)(argp1);
  result = (char *)((libtorrent::state_update_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_state_update_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::state_update_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_state_update_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::state_update_alert *arg1 = (libtorrent::state_update_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_state_update_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__state_update_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "state_update_alert_message" "', argument " "1"" of type '" "libtorrent::state_update_alert const *""'"); 
  }
  arg1 = (libtorrent::state_update_alert *)(argp1);
  result = ((libtorrent::state_update_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_state_update_alert_status_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::state_update_alert *arg1 = (libtorrent::state_update_alert *) 0 ;
  std::vector< libtorrent::torrent_status > *arg2 = (std::vector< libtorrent::torrent_status > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__state_update_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "state_update_alert_status_set" "', argument " "1"" of type '" "libtorrent::state_update_alert *""'"); 
  }
  arg1 = (libtorrent::state_update_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_std__vectorT_libtorrent__torrent_status_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "state_update_alert_status_set" "', argument " "2"" of type '" "std::vector< libtorrent::torrent_status > *""'"); 
  }
  arg2 = (std::vector< libtorrent::torrent_status > *)(argp2);
  if (arg1) (arg1)->status = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_state_update_alert_status_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::state_update_alert *arg1 = (libtorrent::state_update_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::torrent_status > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__state_update_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "state_update_alert_status_get" "', argument " "1"" of type '" "libtorrent::state_update_alert *""'"); 
  }
  arg1 = (libtorrent::state_update_alert *)(argp1);
  result = (std::vector< libtorrent::torrent_status > *)& ((arg1)->status);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_libtorrent__torrent_status_t, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_state_update_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_state_update_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_state_update_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_state_update_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::state_update_alert * arg1 = (libtorrent::state_update_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_state_update_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class state_update_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_mmap_cache_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::mmap_cache_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_mmap_cache_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::mmap_cache_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_mmap_cache_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::mmap_cache_alert *arg1 = (libtorrent::mmap_cache_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_mmap_cache_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__mmap_cache_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mmap_cache_alert_type" "', argument " "1"" of type '" "libtorrent::mmap_cache_alert const *""'"); 
  }
  arg1 = (libtorrent::mmap_cache_alert *)(argp1);
  result = (int)((libtorrent::mmap_cache_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_mmap_cache_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::mmap_cache_alert *arg1 = (libtorrent::mmap_cache_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_mmap_cache_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__mmap_cache_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mmap_cache_alert_category" "', argument " "1"" of type '" "libtorrent::mmap_cache_alert const *""'"); 
  }
  arg1 = (libtorrent::mmap_cache_alert *)(argp1);
  result = (int)((libtorrent::mmap_cache_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_mmap_cache_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::mmap_cache_alert *arg1 = (libtorrent::mmap_cache_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_mmap_cache_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__mmap_cache_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mmap_cache_alert_what" "', argument " "1"" of type '" "libtorrent::mmap_cache_alert const *""'"); 
  }
  arg1 = (libtorrent::mmap_cache_alert *)(argp1);
  result = (char *)((libtorrent::mmap_cache_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_mmap_cache_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::mmap_cache_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_mmap_cache_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::mmap_cache_alert *arg1 = (libtorrent::mmap_cache_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_mmap_cache_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__mmap_cache_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mmap_cache_alert_message" "', argument " "1"" of type '" "libtorrent::mmap_cache_alert const *""'"); 
  }
  arg1 = (libtorrent::mmap_cache_alert *)(argp1);
  result = ((libtorrent::mmap_cache_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_mmap_cache_alert_error_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::mmap_cache_alert *arg1 = (libtorrent::mmap_cache_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__mmap_cache_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mmap_cache_alert_error_set" "', argument " "1"" of type '" "libtorrent::mmap_cache_alert *""'"); 
  }
  arg1 = (libtorrent::mmap_cache_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mmap_cache_alert_error_set" "', argument " "2"" of type '" "libtorrent::error_code *""'"); 
  }
  arg2 = (libtorrent::error_code *)(argp2);
  if (arg1) (arg1)->error = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_mmap_cache_alert_error_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::mmap_cache_alert *arg1 = (libtorrent::mmap_cache_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::error_code *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__mmap_cache_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mmap_cache_alert_error_get" "', argument " "1"" of type '" "libtorrent::mmap_cache_alert *""'"); 
  }
  arg1 = (libtorrent::mmap_cache_alert *)(argp1);
  result = (libtorrent::error_code *)& ((arg1)->error);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_mmap_cache_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_mmap_cache_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_mmap_cache_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_mmap_cache_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::mmap_cache_alert * arg1 = (libtorrent::mmap_cache_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_mmap_cache_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class mmap_cache_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_session_stats_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::session_stats_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_session_stats_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::session_stats_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_session_stats_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_stats_alert *arg1 = (libtorrent::session_stats_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_stats_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_stats_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_stats_alert_type" "', argument " "1"" of type '" "libtorrent::session_stats_alert const *""'"); 
  }
  arg1 = (libtorrent::session_stats_alert *)(argp1);
  result = (int)((libtorrent::session_stats_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_stats_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_stats_alert *arg1 = (libtorrent::session_stats_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_stats_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_stats_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_stats_alert_category" "', argument " "1"" of type '" "libtorrent::session_stats_alert const *""'"); 
  }
  arg1 = (libtorrent::session_stats_alert *)(argp1);
  result = (int)((libtorrent::session_stats_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_stats_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_stats_alert *arg1 = (libtorrent::session_stats_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_stats_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_stats_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_stats_alert_what" "', argument " "1"" of type '" "libtorrent::session_stats_alert const *""'"); 
  }
  arg1 = (libtorrent::session_stats_alert *)(argp1);
  result = (char *)((libtorrent::session_stats_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_session_stats_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::session_stats_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_session_stats_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_stats_alert *arg1 = (libtorrent::session_stats_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_stats_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_stats_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_stats_alert_message" "', argument " "1"" of type '" "libtorrent::session_stats_alert const *""'"); 
  }
  arg1 = (libtorrent::session_stats_alert *)(argp1);
  result = ((libtorrent::session_stats_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_stats_alert_get_value(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_stats_alert *arg1 = (libtorrent::session_stats_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long long result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_stats_alert_get_value.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_stats_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_stats_alert_get_value" "', argument " "1"" of type '" "libtorrent::session_stats_alert *""'"); 
  }
  arg1 = (libtorrent::session_stats_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "session_stats_alert_get_value" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (long long)libtorrent_session_stats_alert_get_value(arg1,arg2);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_session_stats_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_session_stats_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_session_stats_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_session_stats_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::session_stats_alert * arg1 = (libtorrent::session_stats_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_session_stats_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class session_stats_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_dht_error_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_error_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_dht_error_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_error_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_dht_error_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_error_alert *arg1 = (libtorrent::dht_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_error_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_error_alert_type" "', argument " "1"" of type '" "libtorrent::dht_error_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_error_alert *)(argp1);
  result = (int)((libtorrent::dht_error_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_error_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_error_alert *arg1 = (libtorrent::dht_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_error_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_error_alert_category" "', argument " "1"" of type '" "libtorrent::dht_error_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_error_alert *)(argp1);
  result = (int)((libtorrent::dht_error_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_error_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_error_alert *arg1 = (libtorrent::dht_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_error_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_error_alert_what" "', argument " "1"" of type '" "libtorrent::dht_error_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_error_alert *)(argp1);
  result = (char *)((libtorrent::dht_error_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_dht_error_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_error_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_dht_error_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_error_alert *arg1 = (libtorrent::dht_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_error_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_error_alert_message" "', argument " "1"" of type '" "libtorrent::dht_error_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_error_alert *)(argp1);
  result = ((libtorrent::dht_error_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_dht_error_alert_error_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_error_alert *arg1 = (libtorrent::dht_error_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_error_alert_error_set" "', argument " "1"" of type '" "libtorrent::dht_error_alert *""'"); 
  }
  arg1 = (libtorrent::dht_error_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dht_error_alert_error_set" "', argument " "2"" of type '" "libtorrent::error_code *""'"); 
  }
  arg2 = (libtorrent::error_code *)(argp2);
  if (arg1) (arg1)->error = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_error_alert_error_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_error_alert *arg1 = (libtorrent::dht_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::error_code *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_error_alert_error_get" "', argument " "1"" of type '" "libtorrent::dht_error_alert *""'"); 
  }
  arg1 = (libtorrent::dht_error_alert *)(argp1);
  result = (libtorrent::error_code *)& ((arg1)->error);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_dht_error_alert_unknown(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_error_alert::unknown));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_dht_error_alert_hostname_lookup(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_error_alert::hostname_lookup));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_error_alert_operation_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_error_alert *arg1 = (libtorrent::dht_error_alert *) 0 ;
  libtorrent::dht_error_alert::op_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_error_alert_operation_set" "', argument " "1"" of type '" "libtorrent::dht_error_alert *""'"); 
  }
  arg1 = (libtorrent::dht_error_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_error_alert_operation_set" "', argument " "2"" of type '" "libtorrent::dht_error_alert::op_t""'");
  } 
  arg2 = (libtorrent::dht_error_alert::op_t)(val2);
  if (arg1) (arg1)->operation = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_error_alert_operation_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_error_alert *arg1 = (libtorrent::dht_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::dht_error_alert::op_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_error_alert_operation_get" "', argument " "1"" of type '" "libtorrent::dht_error_alert *""'"); 
  }
  arg1 = (libtorrent::dht_error_alert *)(argp1);
  result = (libtorrent::dht_error_alert::op_t) ((arg1)->operation);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_dht_error_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_dht_error_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_dht_error_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_dht_error_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::dht_error_alert * arg1 = (libtorrent::dht_error_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_dht_error_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class dht_error_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_dht_immutable_item_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_immutable_item_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_dht_immutable_item_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_immutable_item_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_dht_immutable_item_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_immutable_item_alert *arg1 = (libtorrent::dht_immutable_item_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_immutable_item_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_immutable_item_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_immutable_item_alert_type" "', argument " "1"" of type '" "libtorrent::dht_immutable_item_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_immutable_item_alert *)(argp1);
  result = (int)((libtorrent::dht_immutable_item_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_immutable_item_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_immutable_item_alert *arg1 = (libtorrent::dht_immutable_item_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_immutable_item_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_immutable_item_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_immutable_item_alert_category" "', argument " "1"" of type '" "libtorrent::dht_immutable_item_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_immutable_item_alert *)(argp1);
  result = (int)((libtorrent::dht_immutable_item_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_immutable_item_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_immutable_item_alert *arg1 = (libtorrent::dht_immutable_item_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_immutable_item_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_immutable_item_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_immutable_item_alert_what" "', argument " "1"" of type '" "libtorrent::dht_immutable_item_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_immutable_item_alert *)(argp1);
  result = (char *)((libtorrent::dht_immutable_item_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_dht_immutable_item_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_immutable_item_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_dht_immutable_item_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_immutable_item_alert *arg1 = (libtorrent::dht_immutable_item_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_immutable_item_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_immutable_item_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_immutable_item_alert_message" "', argument " "1"" of type '" "libtorrent::dht_immutable_item_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_immutable_item_alert *)(argp1);
  result = ((libtorrent::dht_immutable_item_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_dht_immutable_item_alert_target_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_immutable_item_alert *arg1 = (libtorrent::dht_immutable_item_alert *) 0 ;
  libtorrent::sha1_hash *arg2 = (libtorrent::sha1_hash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_immutable_item_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_immutable_item_alert_target_set" "', argument " "1"" of type '" "libtorrent::dht_immutable_item_alert *""'"); 
  }
  arg1 = (libtorrent::dht_immutable_item_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dht_immutable_item_alert_target_set" "', argument " "2"" of type '" "libtorrent::sha1_hash *""'"); 
  }
  arg2 = (libtorrent::sha1_hash *)(argp2);
  if (arg1) (arg1)->target = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_immutable_item_alert_target_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_immutable_item_alert *arg1 = (libtorrent::dht_immutable_item_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::sha1_hash *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_immutable_item_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_immutable_item_alert_target_get" "', argument " "1"" of type '" "libtorrent::dht_immutable_item_alert *""'"); 
  }
  arg1 = (libtorrent::dht_immutable_item_alert *)(argp1);
  result = (libtorrent::sha1_hash *)& ((arg1)->target);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_immutable_item_alert_item_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_immutable_item_alert *arg1 = (libtorrent::dht_immutable_item_alert *) 0 ;
  libtorrent::entry *arg2 = (libtorrent::entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_immutable_item_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_immutable_item_alert_item_set" "', argument " "1"" of type '" "libtorrent::dht_immutable_item_alert *""'"); 
  }
  arg1 = (libtorrent::dht_immutable_item_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__entry, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dht_immutable_item_alert_item_set" "', argument " "2"" of type '" "libtorrent::entry *""'"); 
  }
  arg2 = (libtorrent::entry *)(argp2);
  if (arg1) (arg1)->item = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_immutable_item_alert_item_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_immutable_item_alert *arg1 = (libtorrent::dht_immutable_item_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::entry *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_immutable_item_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_immutable_item_alert_item_get" "', argument " "1"" of type '" "libtorrent::dht_immutable_item_alert *""'"); 
  }
  arg1 = (libtorrent::dht_immutable_item_alert *)(argp1);
  result = (libtorrent::entry *)& ((arg1)->item);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__entry, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_dht_immutable_item_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_dht_immutable_item_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_dht_immutable_item_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_dht_immutable_item_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::dht_immutable_item_alert * arg1 = (libtorrent::dht_immutable_item_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_dht_immutable_item_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class dht_immutable_item_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_dht_mutable_item_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_mutable_item_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_dht_mutable_item_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_mutable_item_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_dht_mutable_item_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_mutable_item_alert *arg1 = (libtorrent::dht_mutable_item_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_mutable_item_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_mutable_item_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_mutable_item_alert_type" "', argument " "1"" of type '" "libtorrent::dht_mutable_item_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_mutable_item_alert *)(argp1);
  result = (int)((libtorrent::dht_mutable_item_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_mutable_item_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_mutable_item_alert *arg1 = (libtorrent::dht_mutable_item_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_mutable_item_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_mutable_item_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_mutable_item_alert_category" "', argument " "1"" of type '" "libtorrent::dht_mutable_item_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_mutable_item_alert *)(argp1);
  result = (int)((libtorrent::dht_mutable_item_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_mutable_item_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_mutable_item_alert *arg1 = (libtorrent::dht_mutable_item_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_mutable_item_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_mutable_item_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_mutable_item_alert_what" "', argument " "1"" of type '" "libtorrent::dht_mutable_item_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_mutable_item_alert *)(argp1);
  result = (char *)((libtorrent::dht_mutable_item_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_dht_mutable_item_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_mutable_item_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_dht_mutable_item_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_mutable_item_alert *arg1 = (libtorrent::dht_mutable_item_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_mutable_item_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_mutable_item_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_mutable_item_alert_message" "', argument " "1"" of type '" "libtorrent::dht_mutable_item_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_mutable_item_alert *)(argp1);
  result = ((libtorrent::dht_mutable_item_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_dht_mutable_item_alert_item_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_mutable_item_alert *arg1 = (libtorrent::dht_mutable_item_alert *) 0 ;
  libtorrent::entry *arg2 = (libtorrent::entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_mutable_item_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_mutable_item_alert_item_set" "', argument " "1"" of type '" "libtorrent::dht_mutable_item_alert *""'"); 
  }
  arg1 = (libtorrent::dht_mutable_item_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__entry, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dht_mutable_item_alert_item_set" "', argument " "2"" of type '" "libtorrent::entry *""'"); 
  }
  arg2 = (libtorrent::entry *)(argp2);
  if (arg1) (arg1)->item = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_mutable_item_alert_item_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_mutable_item_alert *arg1 = (libtorrent::dht_mutable_item_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::entry *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_mutable_item_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_mutable_item_alert_item_get" "', argument " "1"" of type '" "libtorrent::dht_mutable_item_alert *""'"); 
  }
  arg1 = (libtorrent::dht_mutable_item_alert *)(argp1);
  result = (libtorrent::entry *)& ((arg1)->item);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__entry, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_mutable_item_alert_authoritative_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_mutable_item_alert *arg1 = (libtorrent::dht_mutable_item_alert *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_mutable_item_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_mutable_item_alert_authoritative_set" "', argument " "1"" of type '" "libtorrent::dht_mutable_item_alert *""'"); 
  }
  arg1 = (libtorrent::dht_mutable_item_alert *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_mutable_item_alert_authoritative_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->authoritative = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_mutable_item_alert_authoritative_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_mutable_item_alert *arg1 = (libtorrent::dht_mutable_item_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_mutable_item_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_mutable_item_alert_authoritative_get" "', argument " "1"" of type '" "libtorrent::dht_mutable_item_alert *""'"); 
  }
  arg1 = (libtorrent::dht_mutable_item_alert *)(argp1);
  result = (bool) ((arg1)->authoritative);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_dht_mutable_item_alert_get_key(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_mutable_item_alert *arg1 = (libtorrent::dht_mutable_item_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int8_t > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_mutable_item_alert_get_key.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_mutable_item_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_mutable_item_alert_get_key" "', argument " "1"" of type '" "libtorrent::dht_mutable_item_alert *""'"); 
  }
  arg1 = (libtorrent::dht_mutable_item_alert *)(argp1);
  result = libtorrent_dht_mutable_item_alert_get_key(arg1);
  jsresult = SWIG_NewPointerObj((new std::vector< int8_t >((const std::vector< int8_t >&)(result))), SWIGTYPE_p_std__vectorT_signed_char_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_mutable_item_alert_get_signature(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_mutable_item_alert *arg1 = (libtorrent::dht_mutable_item_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int8_t > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_mutable_item_alert_get_signature.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_mutable_item_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_mutable_item_alert_get_signature" "', argument " "1"" of type '" "libtorrent::dht_mutable_item_alert *""'"); 
  }
  arg1 = (libtorrent::dht_mutable_item_alert *)(argp1);
  result = libtorrent_dht_mutable_item_alert_get_signature(arg1);
  jsresult = SWIG_NewPointerObj((new std::vector< int8_t >((const std::vector< int8_t >&)(result))), SWIGTYPE_p_std__vectorT_signed_char_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_mutable_item_alert_get_seq(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_mutable_item_alert *arg1 = (libtorrent::dht_mutable_item_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int64_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_mutable_item_alert_get_seq.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_mutable_item_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_mutable_item_alert_get_seq" "', argument " "1"" of type '" "libtorrent::dht_mutable_item_alert *""'"); 
  }
  arg1 = (libtorrent::dht_mutable_item_alert *)(argp1);
  result = (int64_t)libtorrent_dht_mutable_item_alert_get_seq(arg1);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_mutable_item_alert_get_salt(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_mutable_item_alert *arg1 = (libtorrent::dht_mutable_item_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int8_t > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_mutable_item_alert_get_salt.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_mutable_item_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_mutable_item_alert_get_salt" "', argument " "1"" of type '" "libtorrent::dht_mutable_item_alert *""'"); 
  }
  arg1 = (libtorrent::dht_mutable_item_alert *)(argp1);
  result = libtorrent_dht_mutable_item_alert_get_salt(arg1);
  jsresult = SWIG_NewPointerObj((new std::vector< int8_t >((const std::vector< int8_t >&)(result))), SWIGTYPE_p_std__vectorT_signed_char_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_dht_mutable_item_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_dht_mutable_item_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_dht_mutable_item_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_dht_mutable_item_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::dht_mutable_item_alert * arg1 = (libtorrent::dht_mutable_item_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_dht_mutable_item_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class dht_mutable_item_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_dht_put_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_put_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_dht_put_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_put_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_dht_put_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_put_alert *arg1 = (libtorrent::dht_put_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_put_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_put_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_put_alert_type" "', argument " "1"" of type '" "libtorrent::dht_put_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_put_alert *)(argp1);
  result = (int)((libtorrent::dht_put_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_put_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_put_alert *arg1 = (libtorrent::dht_put_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_put_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_put_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_put_alert_category" "', argument " "1"" of type '" "libtorrent::dht_put_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_put_alert *)(argp1);
  result = (int)((libtorrent::dht_put_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_put_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_put_alert *arg1 = (libtorrent::dht_put_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_put_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_put_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_put_alert_what" "', argument " "1"" of type '" "libtorrent::dht_put_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_put_alert *)(argp1);
  result = (char *)((libtorrent::dht_put_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_dht_put_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_put_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_dht_put_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_put_alert *arg1 = (libtorrent::dht_put_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_put_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_put_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_put_alert_message" "', argument " "1"" of type '" "libtorrent::dht_put_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_put_alert *)(argp1);
  result = ((libtorrent::dht_put_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_dht_put_alert_target_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_put_alert *arg1 = (libtorrent::dht_put_alert *) 0 ;
  libtorrent::sha1_hash *arg2 = (libtorrent::sha1_hash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_put_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_put_alert_target_set" "', argument " "1"" of type '" "libtorrent::dht_put_alert *""'"); 
  }
  arg1 = (libtorrent::dht_put_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dht_put_alert_target_set" "', argument " "2"" of type '" "libtorrent::sha1_hash *""'"); 
  }
  arg2 = (libtorrent::sha1_hash *)(argp2);
  if (arg1) (arg1)->target = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_put_alert_target_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_put_alert *arg1 = (libtorrent::dht_put_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::sha1_hash *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_put_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_put_alert_target_get" "', argument " "1"" of type '" "libtorrent::dht_put_alert *""'"); 
  }
  arg1 = (libtorrent::dht_put_alert *)(argp1);
  result = (libtorrent::sha1_hash *)& ((arg1)->target);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_put_alert_num_success_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_put_alert *arg1 = (libtorrent::dht_put_alert *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_put_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_put_alert_num_success_set" "', argument " "1"" of type '" "libtorrent::dht_put_alert *""'"); 
  }
  arg1 = (libtorrent::dht_put_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_put_alert_num_success_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->num_success = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_put_alert_num_success_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_put_alert *arg1 = (libtorrent::dht_put_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_put_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_put_alert_num_success_get" "', argument " "1"" of type '" "libtorrent::dht_put_alert *""'"); 
  }
  arg1 = (libtorrent::dht_put_alert *)(argp1);
  result = (int) ((arg1)->num_success);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_dht_put_alert_get_public_key(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_put_alert *arg1 = (libtorrent::dht_put_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int8_t > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_put_alert_get_public_key.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_put_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_put_alert_get_public_key" "', argument " "1"" of type '" "libtorrent::dht_put_alert *""'"); 
  }
  arg1 = (libtorrent::dht_put_alert *)(argp1);
  result = libtorrent_dht_put_alert_get_public_key(arg1);
  jsresult = SWIG_NewPointerObj((new std::vector< int8_t >((const std::vector< int8_t >&)(result))), SWIGTYPE_p_std__vectorT_signed_char_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_put_alert_get_signature(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_put_alert *arg1 = (libtorrent::dht_put_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int8_t > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_put_alert_get_signature.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_put_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_put_alert_get_signature" "', argument " "1"" of type '" "libtorrent::dht_put_alert *""'"); 
  }
  arg1 = (libtorrent::dht_put_alert *)(argp1);
  result = libtorrent_dht_put_alert_get_signature(arg1);
  jsresult = SWIG_NewPointerObj((new std::vector< int8_t >((const std::vector< int8_t >&)(result))), SWIGTYPE_p_std__vectorT_signed_char_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_put_alert_get_salt(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_put_alert *arg1 = (libtorrent::dht_put_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int8_t > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_put_alert_get_salt.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_put_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_put_alert_get_salt" "', argument " "1"" of type '" "libtorrent::dht_put_alert *""'"); 
  }
  arg1 = (libtorrent::dht_put_alert *)(argp1);
  result = libtorrent_dht_put_alert_get_salt(arg1);
  jsresult = SWIG_NewPointerObj((new std::vector< int8_t >((const std::vector< int8_t >&)(result))), SWIGTYPE_p_std__vectorT_signed_char_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_put_alert_get_seq(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_put_alert *arg1 = (libtorrent::dht_put_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int64_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_put_alert_get_seq.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_put_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_put_alert_get_seq" "', argument " "1"" of type '" "libtorrent::dht_put_alert *""'"); 
  }
  arg1 = (libtorrent::dht_put_alert *)(argp1);
  result = (int64_t)libtorrent_dht_put_alert_get_seq(arg1);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_dht_put_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_dht_put_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_dht_put_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_dht_put_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::dht_put_alert * arg1 = (libtorrent::dht_put_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_dht_put_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class dht_put_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_i2p_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::i2p_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_i2p_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::i2p_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_i2p_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::i2p_alert *arg1 = (libtorrent::i2p_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_i2p_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__i2p_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "i2p_alert_type" "', argument " "1"" of type '" "libtorrent::i2p_alert const *""'"); 
  }
  arg1 = (libtorrent::i2p_alert *)(argp1);
  result = (int)((libtorrent::i2p_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_i2p_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::i2p_alert *arg1 = (libtorrent::i2p_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_i2p_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__i2p_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "i2p_alert_category" "', argument " "1"" of type '" "libtorrent::i2p_alert const *""'"); 
  }
  arg1 = (libtorrent::i2p_alert *)(argp1);
  result = (int)((libtorrent::i2p_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_i2p_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::i2p_alert *arg1 = (libtorrent::i2p_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_i2p_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__i2p_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "i2p_alert_what" "', argument " "1"" of type '" "libtorrent::i2p_alert const *""'"); 
  }
  arg1 = (libtorrent::i2p_alert *)(argp1);
  result = (char *)((libtorrent::i2p_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_i2p_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::i2p_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_i2p_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::i2p_alert *arg1 = (libtorrent::i2p_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_i2p_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__i2p_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "i2p_alert_message" "', argument " "1"" of type '" "libtorrent::i2p_alert const *""'"); 
  }
  arg1 = (libtorrent::i2p_alert *)(argp1);
  result = ((libtorrent::i2p_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_i2p_alert_error_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::i2p_alert *arg1 = (libtorrent::i2p_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__i2p_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "i2p_alert_error_set" "', argument " "1"" of type '" "libtorrent::i2p_alert *""'"); 
  }
  arg1 = (libtorrent::i2p_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "i2p_alert_error_set" "', argument " "2"" of type '" "libtorrent::error_code *""'"); 
  }
  arg2 = (libtorrent::error_code *)(argp2);
  if (arg1) (arg1)->error = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_i2p_alert_error_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::i2p_alert *arg1 = (libtorrent::i2p_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::error_code *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__i2p_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "i2p_alert_error_get" "', argument " "1"" of type '" "libtorrent::i2p_alert *""'"); 
  }
  arg1 = (libtorrent::i2p_alert *)(argp1);
  result = (libtorrent::error_code *)& ((arg1)->error);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_i2p_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_i2p_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_i2p_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_i2p_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::i2p_alert * arg1 = (libtorrent::i2p_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_i2p_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class i2p_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_dht_outgoing_get_peers_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_outgoing_get_peers_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_dht_outgoing_get_peers_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_outgoing_get_peers_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_dht_outgoing_get_peers_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_outgoing_get_peers_alert *arg1 = (libtorrent::dht_outgoing_get_peers_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_outgoing_get_peers_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_outgoing_get_peers_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_outgoing_get_peers_alert_type" "', argument " "1"" of type '" "libtorrent::dht_outgoing_get_peers_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_outgoing_get_peers_alert *)(argp1);
  result = (int)((libtorrent::dht_outgoing_get_peers_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_outgoing_get_peers_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_outgoing_get_peers_alert *arg1 = (libtorrent::dht_outgoing_get_peers_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_outgoing_get_peers_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_outgoing_get_peers_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_outgoing_get_peers_alert_category" "', argument " "1"" of type '" "libtorrent::dht_outgoing_get_peers_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_outgoing_get_peers_alert *)(argp1);
  result = (int)((libtorrent::dht_outgoing_get_peers_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_outgoing_get_peers_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_outgoing_get_peers_alert *arg1 = (libtorrent::dht_outgoing_get_peers_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_outgoing_get_peers_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_outgoing_get_peers_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_outgoing_get_peers_alert_what" "', argument " "1"" of type '" "libtorrent::dht_outgoing_get_peers_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_outgoing_get_peers_alert *)(argp1);
  result = (char *)((libtorrent::dht_outgoing_get_peers_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_dht_outgoing_get_peers_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_outgoing_get_peers_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_dht_outgoing_get_peers_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_outgoing_get_peers_alert *arg1 = (libtorrent::dht_outgoing_get_peers_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_outgoing_get_peers_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_outgoing_get_peers_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_outgoing_get_peers_alert_message" "', argument " "1"" of type '" "libtorrent::dht_outgoing_get_peers_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_outgoing_get_peers_alert *)(argp1);
  result = ((libtorrent::dht_outgoing_get_peers_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_dht_outgoing_get_peers_alert_info_hash_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_outgoing_get_peers_alert *arg1 = (libtorrent::dht_outgoing_get_peers_alert *) 0 ;
  libtorrent::sha1_hash *arg2 = (libtorrent::sha1_hash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_outgoing_get_peers_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_outgoing_get_peers_alert_info_hash_set" "', argument " "1"" of type '" "libtorrent::dht_outgoing_get_peers_alert *""'"); 
  }
  arg1 = (libtorrent::dht_outgoing_get_peers_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dht_outgoing_get_peers_alert_info_hash_set" "', argument " "2"" of type '" "libtorrent::sha1_hash *""'"); 
  }
  arg2 = (libtorrent::sha1_hash *)(argp2);
  if (arg1) (arg1)->info_hash = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_outgoing_get_peers_alert_info_hash_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_outgoing_get_peers_alert *arg1 = (libtorrent::dht_outgoing_get_peers_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::sha1_hash *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_outgoing_get_peers_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_outgoing_get_peers_alert_info_hash_get" "', argument " "1"" of type '" "libtorrent::dht_outgoing_get_peers_alert *""'"); 
  }
  arg1 = (libtorrent::dht_outgoing_get_peers_alert *)(argp1);
  result = (libtorrent::sha1_hash *)& ((arg1)->info_hash);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_outgoing_get_peers_alert_obfuscated_info_hash_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_outgoing_get_peers_alert *arg1 = (libtorrent::dht_outgoing_get_peers_alert *) 0 ;
  libtorrent::sha1_hash *arg2 = (libtorrent::sha1_hash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_outgoing_get_peers_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_outgoing_get_peers_alert_obfuscated_info_hash_set" "', argument " "1"" of type '" "libtorrent::dht_outgoing_get_peers_alert *""'"); 
  }
  arg1 = (libtorrent::dht_outgoing_get_peers_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dht_outgoing_get_peers_alert_obfuscated_info_hash_set" "', argument " "2"" of type '" "libtorrent::sha1_hash *""'"); 
  }
  arg2 = (libtorrent::sha1_hash *)(argp2);
  if (arg1) (arg1)->obfuscated_info_hash = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_outgoing_get_peers_alert_obfuscated_info_hash_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_outgoing_get_peers_alert *arg1 = (libtorrent::dht_outgoing_get_peers_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::sha1_hash *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_outgoing_get_peers_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_outgoing_get_peers_alert_obfuscated_info_hash_get" "', argument " "1"" of type '" "libtorrent::dht_outgoing_get_peers_alert *""'"); 
  }
  arg1 = (libtorrent::dht_outgoing_get_peers_alert *)(argp1);
  result = (libtorrent::sha1_hash *)& ((arg1)->obfuscated_info_hash);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_outgoing_get_peers_alert_ip_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_outgoing_get_peers_alert *arg1 = (libtorrent::dht_outgoing_get_peers_alert *) 0 ;
  libtorrent::udp::endpoint *arg2 = (libtorrent::udp::endpoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_outgoing_get_peers_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_outgoing_get_peers_alert_ip_set" "', argument " "1"" of type '" "libtorrent::dht_outgoing_get_peers_alert *""'"); 
  }
  arg1 = (libtorrent::dht_outgoing_get_peers_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__udp__endpoint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dht_outgoing_get_peers_alert_ip_set" "', argument " "2"" of type '" "libtorrent::udp::endpoint *""'"); 
  }
  arg2 = (libtorrent::udp::endpoint *)(argp2);
  if (arg1) (arg1)->ip = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_outgoing_get_peers_alert_ip_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_outgoing_get_peers_alert *arg1 = (libtorrent::dht_outgoing_get_peers_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::udp::endpoint *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_outgoing_get_peers_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_outgoing_get_peers_alert_ip_get" "', argument " "1"" of type '" "libtorrent::dht_outgoing_get_peers_alert *""'"); 
  }
  arg1 = (libtorrent::dht_outgoing_get_peers_alert *)(argp1);
  result = (libtorrent::udp::endpoint *)& ((arg1)->ip);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__udp__endpoint, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_dht_outgoing_get_peers_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_dht_outgoing_get_peers_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_dht_outgoing_get_peers_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_dht_outgoing_get_peers_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::dht_outgoing_get_peers_alert * arg1 = (libtorrent::dht_outgoing_get_peers_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_dht_outgoing_get_peers_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class dht_outgoing_get_peers_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_log_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::log_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_log_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::log_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_log_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::log_alert *arg1 = (libtorrent::log_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_log_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "log_alert_type" "', argument " "1"" of type '" "libtorrent::log_alert const *""'"); 
  }
  arg1 = (libtorrent::log_alert *)(argp1);
  result = (int)((libtorrent::log_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_log_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::log_alert *arg1 = (libtorrent::log_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_log_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "log_alert_category" "', argument " "1"" of type '" "libtorrent::log_alert const *""'"); 
  }
  arg1 = (libtorrent::log_alert *)(argp1);
  result = (int)((libtorrent::log_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_log_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::log_alert *arg1 = (libtorrent::log_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_log_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "log_alert_what" "', argument " "1"" of type '" "libtorrent::log_alert const *""'"); 
  }
  arg1 = (libtorrent::log_alert *)(argp1);
  result = (char *)((libtorrent::log_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_log_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::log_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_log_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::log_alert *arg1 = (libtorrent::log_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_log_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "log_alert_message" "', argument " "1"" of type '" "libtorrent::log_alert const *""'"); 
  }
  arg1 = (libtorrent::log_alert *)(argp1);
  result = ((libtorrent::log_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_log_alert_msg(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::log_alert *arg1 = (libtorrent::log_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_log_alert_msg.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "log_alert_msg" "', argument " "1"" of type '" "libtorrent::log_alert const *""'"); 
  }
  arg1 = (libtorrent::log_alert *)(argp1);
  result = (char *)((libtorrent::log_alert const *)arg1)->msg();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_log_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_log_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_log_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_log_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::log_alert * arg1 = (libtorrent::log_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_log_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class log_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_log_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_log_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_log_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_log_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_torrent_log_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_log_alert *arg1 = (libtorrent::torrent_log_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_log_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_log_alert_type" "', argument " "1"" of type '" "libtorrent::torrent_log_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_log_alert *)(argp1);
  result = (int)((libtorrent::torrent_log_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_log_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_log_alert *arg1 = (libtorrent::torrent_log_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_log_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_log_alert_category" "', argument " "1"" of type '" "libtorrent::torrent_log_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_log_alert *)(argp1);
  result = (int)((libtorrent::torrent_log_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_log_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_log_alert *arg1 = (libtorrent::torrent_log_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_log_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_log_alert_what" "', argument " "1"" of type '" "libtorrent::torrent_log_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_log_alert *)(argp1);
  result = (char *)((libtorrent::torrent_log_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_log_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_log_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_torrent_log_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_log_alert *arg1 = (libtorrent::torrent_log_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_log_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_log_alert_message" "', argument " "1"" of type '" "libtorrent::torrent_log_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_log_alert *)(argp1);
  result = ((libtorrent::torrent_log_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_log_alert_msg(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_log_alert *arg1 = (libtorrent::torrent_log_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_log_alert_msg.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_log_alert_msg" "', argument " "1"" of type '" "libtorrent::torrent_log_alert const *""'"); 
  }
  arg1 = (libtorrent::torrent_log_alert *)(argp1);
  result = (char *)((libtorrent::torrent_log_alert const *)arg1)->msg();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_torrent_log_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_torrent_log_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_torrent_log_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_torrent_log_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::torrent_log_alert * arg1 = (libtorrent::torrent_log_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_torrent_log_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class torrent_log_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_peer_log_alert_incoming_message(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_log_alert::incoming_message));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_log_alert_outgoing_message(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_log_alert::outgoing_message));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_log_alert_incoming(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_log_alert::incoming));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_log_alert_outgoing(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_log_alert::outgoing));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_log_alert_info(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_log_alert::info));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_log_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_log_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_log_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_log_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_peer_log_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_log_alert *arg1 = (libtorrent::peer_log_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_log_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_log_alert_type" "', argument " "1"" of type '" "libtorrent::peer_log_alert const *""'"); 
  }
  arg1 = (libtorrent::peer_log_alert *)(argp1);
  result = (int)((libtorrent::peer_log_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_log_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_log_alert *arg1 = (libtorrent::peer_log_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_log_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_log_alert_category" "', argument " "1"" of type '" "libtorrent::peer_log_alert const *""'"); 
  }
  arg1 = (libtorrent::peer_log_alert *)(argp1);
  result = (int)((libtorrent::peer_log_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_log_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_log_alert *arg1 = (libtorrent::peer_log_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_log_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_log_alert_what" "', argument " "1"" of type '" "libtorrent::peer_log_alert const *""'"); 
  }
  arg1 = (libtorrent::peer_log_alert *)(argp1);
  result = (char *)((libtorrent::peer_log_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_peer_log_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_log_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_peer_log_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_log_alert *arg1 = (libtorrent::peer_log_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_log_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_log_alert_message" "', argument " "1"" of type '" "libtorrent::peer_log_alert const *""'"); 
  }
  arg1 = (libtorrent::peer_log_alert *)(argp1);
  result = ((libtorrent::peer_log_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_peer_log_alert_direction_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_log_alert *arg1 = (libtorrent::peer_log_alert *) 0 ;
  libtorrent::peer_log_alert::direction_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_log_alert_direction_set" "', argument " "1"" of type '" "libtorrent::peer_log_alert *""'"); 
  }
  arg1 = (libtorrent::peer_log_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_log_alert_direction_set" "', argument " "2"" of type '" "libtorrent::peer_log_alert::direction_t""'");
  } 
  arg2 = (libtorrent::peer_log_alert::direction_t)(val2);
  if (arg1) (arg1)->direction = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_log_alert_direction_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_log_alert *arg1 = (libtorrent::peer_log_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::peer_log_alert::direction_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_log_alert_direction_get" "', argument " "1"" of type '" "libtorrent::peer_log_alert *""'"); 
  }
  arg1 = (libtorrent::peer_log_alert *)(argp1);
  result = (libtorrent::peer_log_alert::direction_t) ((arg1)->direction);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_peer_log_alert_msg(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_log_alert *arg1 = (libtorrent::peer_log_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_log_alert_msg.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_log_alert_msg" "', argument " "1"" of type '" "libtorrent::peer_log_alert const *""'"); 
  }
  arg1 = (libtorrent::peer_log_alert *)(argp1);
  result = (char *)((libtorrent::peer_log_alert const *)arg1)->msg();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_log_alert_get_event_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_log_alert *arg1 = (libtorrent::peer_log_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_log_alert_get_event_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_log_alert_get_event_type" "', argument " "1"" of type '" "libtorrent::peer_log_alert *""'"); 
  }
  arg1 = (libtorrent::peer_log_alert *)(argp1);
  result = libtorrent_peer_log_alert_get_event_type(arg1);
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_peer_log_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_peer_log_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_peer_log_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_peer_log_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::peer_log_alert * arg1 = (libtorrent::peer_log_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_peer_log_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class peer_log_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_lsd_error_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::lsd_error_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_lsd_error_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::lsd_error_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lsd_error_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::lsd_error_alert *arg1 = (libtorrent::lsd_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lsd_error_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__lsd_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lsd_error_alert_type" "', argument " "1"" of type '" "libtorrent::lsd_error_alert const *""'"); 
  }
  arg1 = (libtorrent::lsd_error_alert *)(argp1);
  result = (int)((libtorrent::lsd_error_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lsd_error_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::lsd_error_alert *arg1 = (libtorrent::lsd_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lsd_error_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__lsd_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lsd_error_alert_category" "', argument " "1"" of type '" "libtorrent::lsd_error_alert const *""'"); 
  }
  arg1 = (libtorrent::lsd_error_alert *)(argp1);
  result = (int)((libtorrent::lsd_error_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lsd_error_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::lsd_error_alert *arg1 = (libtorrent::lsd_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lsd_error_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__lsd_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lsd_error_alert_what" "', argument " "1"" of type '" "libtorrent::lsd_error_alert const *""'"); 
  }
  arg1 = (libtorrent::lsd_error_alert *)(argp1);
  result = (char *)((libtorrent::lsd_error_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_lsd_error_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::lsd_error_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lsd_error_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::lsd_error_alert *arg1 = (libtorrent::lsd_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lsd_error_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__lsd_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lsd_error_alert_message" "', argument " "1"" of type '" "libtorrent::lsd_error_alert const *""'"); 
  }
  arg1 = (libtorrent::lsd_error_alert *)(argp1);
  result = ((libtorrent::lsd_error_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_lsd_error_alert_error_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::lsd_error_alert *arg1 = (libtorrent::lsd_error_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__lsd_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lsd_error_alert_error_set" "', argument " "1"" of type '" "libtorrent::lsd_error_alert *""'"); 
  }
  arg1 = (libtorrent::lsd_error_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lsd_error_alert_error_set" "', argument " "2"" of type '" "libtorrent::error_code *""'"); 
  }
  arg2 = (libtorrent::error_code *)(argp2);
  if (arg1) (arg1)->error = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lsd_error_alert_error_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::lsd_error_alert *arg1 = (libtorrent::lsd_error_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::error_code *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__lsd_error_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lsd_error_alert_error_get" "', argument " "1"" of type '" "libtorrent::lsd_error_alert *""'"); 
  }
  arg1 = (libtorrent::lsd_error_alert *)(argp1);
  result = (libtorrent::error_code *)& ((arg1)->error);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lsd_error_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lsd_error_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lsd_error_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lsd_error_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::lsd_error_alert * arg1 = (libtorrent::lsd_error_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_lsd_error_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class lsd_error_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_dht_lookup_outstanding_requests_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_lookup *arg1 = (libtorrent::dht_lookup *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_lookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_lookup_outstanding_requests_set" "', argument " "1"" of type '" "libtorrent::dht_lookup *""'"); 
  }
  arg1 = (libtorrent::dht_lookup *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_lookup_outstanding_requests_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->outstanding_requests = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_lookup_outstanding_requests_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_lookup *arg1 = (libtorrent::dht_lookup *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_lookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_lookup_outstanding_requests_get" "', argument " "1"" of type '" "libtorrent::dht_lookup *""'"); 
  }
  arg1 = (libtorrent::dht_lookup *)(argp1);
  result = (int) ((arg1)->outstanding_requests);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_lookup_timeouts_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_lookup *arg1 = (libtorrent::dht_lookup *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_lookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_lookup_timeouts_set" "', argument " "1"" of type '" "libtorrent::dht_lookup *""'"); 
  }
  arg1 = (libtorrent::dht_lookup *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_lookup_timeouts_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->timeouts = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_lookup_timeouts_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_lookup *arg1 = (libtorrent::dht_lookup *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_lookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_lookup_timeouts_get" "', argument " "1"" of type '" "libtorrent::dht_lookup *""'"); 
  }
  arg1 = (libtorrent::dht_lookup *)(argp1);
  result = (int) ((arg1)->timeouts);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_lookup_responses_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_lookup *arg1 = (libtorrent::dht_lookup *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_lookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_lookup_responses_set" "', argument " "1"" of type '" "libtorrent::dht_lookup *""'"); 
  }
  arg1 = (libtorrent::dht_lookup *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_lookup_responses_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->responses = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_lookup_responses_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_lookup *arg1 = (libtorrent::dht_lookup *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_lookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_lookup_responses_get" "', argument " "1"" of type '" "libtorrent::dht_lookup *""'"); 
  }
  arg1 = (libtorrent::dht_lookup *)(argp1);
  result = (int) ((arg1)->responses);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_lookup_branch_factor_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_lookup *arg1 = (libtorrent::dht_lookup *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_lookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_lookup_branch_factor_set" "', argument " "1"" of type '" "libtorrent::dht_lookup *""'"); 
  }
  arg1 = (libtorrent::dht_lookup *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_lookup_branch_factor_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->branch_factor = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_lookup_branch_factor_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_lookup *arg1 = (libtorrent::dht_lookup *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_lookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_lookup_branch_factor_get" "', argument " "1"" of type '" "libtorrent::dht_lookup *""'"); 
  }
  arg1 = (libtorrent::dht_lookup *)(argp1);
  result = (int) ((arg1)->branch_factor);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_lookup_nodes_left_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_lookup *arg1 = (libtorrent::dht_lookup *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_lookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_lookup_nodes_left_set" "', argument " "1"" of type '" "libtorrent::dht_lookup *""'"); 
  }
  arg1 = (libtorrent::dht_lookup *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_lookup_nodes_left_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->nodes_left = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_lookup_nodes_left_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_lookup *arg1 = (libtorrent::dht_lookup *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_lookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_lookup_nodes_left_get" "', argument " "1"" of type '" "libtorrent::dht_lookup *""'"); 
  }
  arg1 = (libtorrent::dht_lookup *)(argp1);
  result = (int) ((arg1)->nodes_left);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_lookup_last_sent_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_lookup *arg1 = (libtorrent::dht_lookup *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_lookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_lookup_last_sent_set" "', argument " "1"" of type '" "libtorrent::dht_lookup *""'"); 
  }
  arg1 = (libtorrent::dht_lookup *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_lookup_last_sent_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->last_sent = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_lookup_last_sent_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_lookup *arg1 = (libtorrent::dht_lookup *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_lookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_lookup_last_sent_get" "', argument " "1"" of type '" "libtorrent::dht_lookup *""'"); 
  }
  arg1 = (libtorrent::dht_lookup *)(argp1);
  result = (int) ((arg1)->last_sent);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_lookup_first_timeout_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_lookup *arg1 = (libtorrent::dht_lookup *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_lookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_lookup_first_timeout_set" "', argument " "1"" of type '" "libtorrent::dht_lookup *""'"); 
  }
  arg1 = (libtorrent::dht_lookup *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_lookup_first_timeout_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->first_timeout = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_lookup_first_timeout_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_lookup *arg1 = (libtorrent::dht_lookup *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_lookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_lookup_first_timeout_get" "', argument " "1"" of type '" "libtorrent::dht_lookup *""'"); 
  }
  arg1 = (libtorrent::dht_lookup *)(argp1);
  result = (int) ((arg1)->first_timeout);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_dht_lookup_get_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_lookup *arg1 = (libtorrent::dht_lookup *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_lookup_get_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_lookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_lookup_get_type" "', argument " "1"" of type '" "libtorrent::dht_lookup *""'"); 
  }
  arg1 = (libtorrent::dht_lookup *)(argp1);
  result = libtorrent_dht_lookup_get_type(arg1);
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_dht_lookup(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::dht_lookup *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_dht_lookup.");
  result = (libtorrent::dht_lookup *)new libtorrent::dht_lookup();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__dht_lookup, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_dht_lookup(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_dht_lookup(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_dht_lookup(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_dht_lookup(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::dht_lookup * arg1 = (libtorrent::dht_lookup *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap_dht_routing_bucket_num_nodes_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_routing_bucket *arg1 = (libtorrent::dht_routing_bucket *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_routing_bucket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_routing_bucket_num_nodes_set" "', argument " "1"" of type '" "libtorrent::dht_routing_bucket *""'"); 
  }
  arg1 = (libtorrent::dht_routing_bucket *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_routing_bucket_num_nodes_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->num_nodes = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_routing_bucket_num_nodes_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_routing_bucket *arg1 = (libtorrent::dht_routing_bucket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_routing_bucket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_routing_bucket_num_nodes_get" "', argument " "1"" of type '" "libtorrent::dht_routing_bucket *""'"); 
  }
  arg1 = (libtorrent::dht_routing_bucket *)(argp1);
  result = (int) ((arg1)->num_nodes);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_routing_bucket_num_replacements_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_routing_bucket *arg1 = (libtorrent::dht_routing_bucket *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_routing_bucket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_routing_bucket_num_replacements_set" "', argument " "1"" of type '" "libtorrent::dht_routing_bucket *""'"); 
  }
  arg1 = (libtorrent::dht_routing_bucket *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_routing_bucket_num_replacements_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->num_replacements = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_routing_bucket_num_replacements_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_routing_bucket *arg1 = (libtorrent::dht_routing_bucket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_routing_bucket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_routing_bucket_num_replacements_get" "', argument " "1"" of type '" "libtorrent::dht_routing_bucket *""'"); 
  }
  arg1 = (libtorrent::dht_routing_bucket *)(argp1);
  result = (int) ((arg1)->num_replacements);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_routing_bucket_last_active_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_routing_bucket *arg1 = (libtorrent::dht_routing_bucket *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_routing_bucket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_routing_bucket_last_active_set" "', argument " "1"" of type '" "libtorrent::dht_routing_bucket *""'"); 
  }
  arg1 = (libtorrent::dht_routing_bucket *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_routing_bucket_last_active_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->last_active = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_routing_bucket_last_active_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_routing_bucket *arg1 = (libtorrent::dht_routing_bucket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_routing_bucket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_routing_bucket_last_active_get" "', argument " "1"" of type '" "libtorrent::dht_routing_bucket *""'"); 
  }
  arg1 = (libtorrent::dht_routing_bucket *)(argp1);
  result = (int) ((arg1)->last_active);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_dht_routing_bucket(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::dht_routing_bucket *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_dht_routing_bucket.");
  result = (libtorrent::dht_routing_bucket *)new libtorrent::dht_routing_bucket();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__dht_routing_bucket, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_dht_routing_bucket(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_dht_routing_bucket(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_dht_routing_bucket(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_dht_routing_bucket(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::dht_routing_bucket * arg1 = (libtorrent::dht_routing_bucket *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_libtorrent_dht_stats_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_stats_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_dht_stats_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_stats_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_dht_stats_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_stats_alert *arg1 = (libtorrent::dht_stats_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_stats_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_stats_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_stats_alert_type" "', argument " "1"" of type '" "libtorrent::dht_stats_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_stats_alert *)(argp1);
  result = (int)((libtorrent::dht_stats_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_stats_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_stats_alert *arg1 = (libtorrent::dht_stats_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_stats_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_stats_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_stats_alert_category" "', argument " "1"" of type '" "libtorrent::dht_stats_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_stats_alert *)(argp1);
  result = (int)((libtorrent::dht_stats_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_stats_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_stats_alert *arg1 = (libtorrent::dht_stats_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_stats_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_stats_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_stats_alert_what" "', argument " "1"" of type '" "libtorrent::dht_stats_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_stats_alert *)(argp1);
  result = (char *)((libtorrent::dht_stats_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_dht_stats_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_stats_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_dht_stats_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_stats_alert *arg1 = (libtorrent::dht_stats_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_stats_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_stats_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_stats_alert_message" "', argument " "1"" of type '" "libtorrent::dht_stats_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_stats_alert *)(argp1);
  result = ((libtorrent::dht_stats_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_dht_stats_alert_active_requests_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_stats_alert *arg1 = (libtorrent::dht_stats_alert *) 0 ;
  std::vector< libtorrent::dht_lookup > *arg2 = (std::vector< libtorrent::dht_lookup > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_stats_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_stats_alert_active_requests_set" "', argument " "1"" of type '" "libtorrent::dht_stats_alert *""'"); 
  }
  arg1 = (libtorrent::dht_stats_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_std__vectorT_libtorrent__dht_lookup_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dht_stats_alert_active_requests_set" "', argument " "2"" of type '" "std::vector< libtorrent::dht_lookup > *""'"); 
  }
  arg2 = (std::vector< libtorrent::dht_lookup > *)(argp2);
  if (arg1) (arg1)->active_requests = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_stats_alert_active_requests_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_stats_alert *arg1 = (libtorrent::dht_stats_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::dht_lookup > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_stats_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_stats_alert_active_requests_get" "', argument " "1"" of type '" "libtorrent::dht_stats_alert *""'"); 
  }
  arg1 = (libtorrent::dht_stats_alert *)(argp1);
  result = (std::vector< libtorrent::dht_lookup > *)& ((arg1)->active_requests);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_libtorrent__dht_lookup_t, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_stats_alert_routing_table_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_stats_alert *arg1 = (libtorrent::dht_stats_alert *) 0 ;
  std::vector< libtorrent::dht_routing_bucket > *arg2 = (std::vector< libtorrent::dht_routing_bucket > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_stats_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_stats_alert_routing_table_set" "', argument " "1"" of type '" "libtorrent::dht_stats_alert *""'"); 
  }
  arg1 = (libtorrent::dht_stats_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_std__vectorT_libtorrent__dht_routing_bucket_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dht_stats_alert_routing_table_set" "', argument " "2"" of type '" "std::vector< libtorrent::dht_routing_bucket > *""'"); 
  }
  arg2 = (std::vector< libtorrent::dht_routing_bucket > *)(argp2);
  if (arg1) (arg1)->routing_table = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_stats_alert_routing_table_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_stats_alert *arg1 = (libtorrent::dht_stats_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::dht_routing_bucket > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_stats_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_stats_alert_routing_table_get" "', argument " "1"" of type '" "libtorrent::dht_stats_alert *""'"); 
  }
  arg1 = (libtorrent::dht_stats_alert *)(argp1);
  result = (std::vector< libtorrent::dht_routing_bucket > *)& ((arg1)->routing_table);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_libtorrent__dht_routing_bucket_t, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_dht_stats_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_dht_stats_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_dht_stats_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_dht_stats_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::dht_stats_alert * arg1 = (libtorrent::dht_stats_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_dht_stats_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class dht_stats_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_incoming_request_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::incoming_request_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_incoming_request_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::incoming_request_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_incoming_request_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::incoming_request_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_incoming_request_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::incoming_request_alert *arg1 = (libtorrent::incoming_request_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_incoming_request_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__incoming_request_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "incoming_request_alert_type" "', argument " "1"" of type '" "libtorrent::incoming_request_alert const *""'"); 
  }
  arg1 = (libtorrent::incoming_request_alert *)(argp1);
  result = (int)((libtorrent::incoming_request_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_incoming_request_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::incoming_request_alert *arg1 = (libtorrent::incoming_request_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_incoming_request_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__incoming_request_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "incoming_request_alert_category" "', argument " "1"" of type '" "libtorrent::incoming_request_alert const *""'"); 
  }
  arg1 = (libtorrent::incoming_request_alert *)(argp1);
  result = (int)((libtorrent::incoming_request_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_incoming_request_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::incoming_request_alert *arg1 = (libtorrent::incoming_request_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_incoming_request_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__incoming_request_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "incoming_request_alert_what" "', argument " "1"" of type '" "libtorrent::incoming_request_alert const *""'"); 
  }
  arg1 = (libtorrent::incoming_request_alert *)(argp1);
  result = (char *)((libtorrent::incoming_request_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_incoming_request_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::incoming_request_alert *arg1 = (libtorrent::incoming_request_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_incoming_request_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__incoming_request_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "incoming_request_alert_message" "', argument " "1"" of type '" "libtorrent::incoming_request_alert const *""'"); 
  }
  arg1 = (libtorrent::incoming_request_alert *)(argp1);
  result = ((libtorrent::incoming_request_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_incoming_request_alert_req_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::incoming_request_alert *arg1 = (libtorrent::incoming_request_alert *) 0 ;
  libtorrent::peer_request *arg2 = (libtorrent::peer_request *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__incoming_request_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "incoming_request_alert_req_set" "', argument " "1"" of type '" "libtorrent::incoming_request_alert *""'"); 
  }
  arg1 = (libtorrent::incoming_request_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__peer_request, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "incoming_request_alert_req_set" "', argument " "2"" of type '" "libtorrent::peer_request *""'"); 
  }
  arg2 = (libtorrent::peer_request *)(argp2);
  if (arg1) (arg1)->req = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_incoming_request_alert_req_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::incoming_request_alert *arg1 = (libtorrent::incoming_request_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::peer_request *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__incoming_request_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "incoming_request_alert_req_get" "', argument " "1"" of type '" "libtorrent::incoming_request_alert *""'"); 
  }
  arg1 = (libtorrent::incoming_request_alert *)(argp1);
  result = (libtorrent::peer_request *)& ((arg1)->req);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__peer_request, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_incoming_request_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_incoming_request_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_incoming_request_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_incoming_request_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::incoming_request_alert * arg1 = (libtorrent::incoming_request_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_incoming_request_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class incoming_request_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_dht_log_alert_tracker(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_log_alert::tracker));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_dht_log_alert_node(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_log_alert::node));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_dht_log_alert_routing_table(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_log_alert::routing_table));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_dht_log_alert_rpc_manager(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_log_alert::rpc_manager));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_dht_log_alert_traversal(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_log_alert::traversal));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_dht_log_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_log_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_dht_log_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_log_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_dht_log_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_log_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_dht_log_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_log_alert *arg1 = (libtorrent::dht_log_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_log_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_log_alert_type" "', argument " "1"" of type '" "libtorrent::dht_log_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_log_alert *)(argp1);
  result = (int)((libtorrent::dht_log_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_log_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_log_alert *arg1 = (libtorrent::dht_log_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_log_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_log_alert_category" "', argument " "1"" of type '" "libtorrent::dht_log_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_log_alert *)(argp1);
  result = (int)((libtorrent::dht_log_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_log_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_log_alert *arg1 = (libtorrent::dht_log_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_log_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_log_alert_what" "', argument " "1"" of type '" "libtorrent::dht_log_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_log_alert *)(argp1);
  result = (char *)((libtorrent::dht_log_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_log_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_log_alert *arg1 = (libtorrent::dht_log_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_log_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_log_alert_message" "', argument " "1"" of type '" "libtorrent::dht_log_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_log_alert *)(argp1);
  result = ((libtorrent::dht_log_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_log_alert_log_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_log_alert *arg1 = (libtorrent::dht_log_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_log_alert_log_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_log_alert_log_message" "', argument " "1"" of type '" "libtorrent::dht_log_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_log_alert *)(argp1);
  result = (char *)((libtorrent::dht_log_alert const *)arg1)->log_message();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_dht_log_alert_module_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_log_alert *arg1 = (libtorrent::dht_log_alert *) 0 ;
  libtorrent::dht_log_alert::dht_module_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_log_alert_module_set" "', argument " "1"" of type '" "libtorrent::dht_log_alert *""'"); 
  }
  arg1 = (libtorrent::dht_log_alert *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_log_alert_module_set" "', argument " "2"" of type '" "libtorrent::dht_log_alert::dht_module_t""'");
  } 
  arg2 = (libtorrent::dht_log_alert::dht_module_t)(val2);
  if (arg1) (arg1)->module = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_log_alert_module_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_log_alert *arg1 = (libtorrent::dht_log_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::dht_log_alert::dht_module_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_log_alert_module_get" "', argument " "1"" of type '" "libtorrent::dht_log_alert *""'"); 
  }
  arg1 = (libtorrent::dht_log_alert *)(argp1);
  result = (libtorrent::dht_log_alert::dht_module_t) ((arg1)->module);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_dht_log_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_dht_log_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_dht_log_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_dht_log_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::dht_log_alert * arg1 = (libtorrent::dht_log_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_dht_log_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class dht_log_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_dht_pkt_alert_incoming(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_pkt_alert::incoming));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_dht_pkt_alert_outgoing(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_pkt_alert::outgoing));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_dht_pkt_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_pkt_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_dht_pkt_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_pkt_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_dht_pkt_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_pkt_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_dht_pkt_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_pkt_alert *arg1 = (libtorrent::dht_pkt_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_pkt_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_pkt_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_pkt_alert_type" "', argument " "1"" of type '" "libtorrent::dht_pkt_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_pkt_alert *)(argp1);
  result = (int)((libtorrent::dht_pkt_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_pkt_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_pkt_alert *arg1 = (libtorrent::dht_pkt_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_pkt_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_pkt_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_pkt_alert_category" "', argument " "1"" of type '" "libtorrent::dht_pkt_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_pkt_alert *)(argp1);
  result = (int)((libtorrent::dht_pkt_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_pkt_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_pkt_alert *arg1 = (libtorrent::dht_pkt_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_pkt_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_pkt_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_pkt_alert_what" "', argument " "1"" of type '" "libtorrent::dht_pkt_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_pkt_alert *)(argp1);
  result = (char *)((libtorrent::dht_pkt_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_pkt_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_pkt_alert *arg1 = (libtorrent::dht_pkt_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_pkt_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_pkt_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_pkt_alert_message" "', argument " "1"" of type '" "libtorrent::dht_pkt_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_pkt_alert *)(argp1);
  result = ((libtorrent::dht_pkt_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_pkt_alert_pkt_buf(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_pkt_alert *arg1 = (libtorrent::dht_pkt_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::span< char const > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_pkt_alert_pkt_buf.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_pkt_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_pkt_alert_pkt_buf" "', argument " "1"" of type '" "libtorrent::dht_pkt_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_pkt_alert *)(argp1);
  result = ((libtorrent::dht_pkt_alert const *)arg1)->pkt_buf();
  jsresult = SWIG_NewPointerObj((new libtorrent::span< char const >((const libtorrent::span< char const >&)(result))), SWIGTYPE_p_libtorrent__spanT_char_const_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_pkt_alert_dir_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_pkt_alert *arg1 = (libtorrent::dht_pkt_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::dht_pkt_alert::direction_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_pkt_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_pkt_alert_dir_get" "', argument " "1"" of type '" "libtorrent::dht_pkt_alert *""'"); 
  }
  arg1 = (libtorrent::dht_pkt_alert *)(argp1);
  result = (libtorrent::dht_pkt_alert::direction_t)(libtorrent::dht_pkt_alert::direction_t) ((arg1)->dir);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_dht_pkt_alert_node_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_pkt_alert *arg1 = (libtorrent::dht_pkt_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::udp::endpoint *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_pkt_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_pkt_alert_node_get" "', argument " "1"" of type '" "libtorrent::dht_pkt_alert *""'"); 
  }
  arg1 = (libtorrent::dht_pkt_alert *)(argp1);
  result = (libtorrent::udp::endpoint *)& ((arg1)->node);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__udp__endpoint, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_dht_pkt_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_dht_pkt_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_dht_pkt_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_dht_pkt_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::dht_pkt_alert * arg1 = (libtorrent::dht_pkt_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_dht_pkt_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class dht_pkt_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_dht_get_peers_reply_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_get_peers_reply_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_dht_get_peers_reply_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_get_peers_reply_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_dht_get_peers_reply_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_get_peers_reply_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_dht_get_peers_reply_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_get_peers_reply_alert *arg1 = (libtorrent::dht_get_peers_reply_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_get_peers_reply_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_get_peers_reply_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_get_peers_reply_alert_type" "', argument " "1"" of type '" "libtorrent::dht_get_peers_reply_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_get_peers_reply_alert *)(argp1);
  result = (int)((libtorrent::dht_get_peers_reply_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_get_peers_reply_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_get_peers_reply_alert *arg1 = (libtorrent::dht_get_peers_reply_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_get_peers_reply_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_get_peers_reply_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_get_peers_reply_alert_category" "', argument " "1"" of type '" "libtorrent::dht_get_peers_reply_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_get_peers_reply_alert *)(argp1);
  result = (int)((libtorrent::dht_get_peers_reply_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_get_peers_reply_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_get_peers_reply_alert *arg1 = (libtorrent::dht_get_peers_reply_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_get_peers_reply_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_get_peers_reply_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_get_peers_reply_alert_what" "', argument " "1"" of type '" "libtorrent::dht_get_peers_reply_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_get_peers_reply_alert *)(argp1);
  result = (char *)((libtorrent::dht_get_peers_reply_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_get_peers_reply_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_get_peers_reply_alert *arg1 = (libtorrent::dht_get_peers_reply_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_get_peers_reply_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_get_peers_reply_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_get_peers_reply_alert_message" "', argument " "1"" of type '" "libtorrent::dht_get_peers_reply_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_get_peers_reply_alert *)(argp1);
  result = ((libtorrent::dht_get_peers_reply_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_dht_get_peers_reply_alert_info_hash_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_get_peers_reply_alert *arg1 = (libtorrent::dht_get_peers_reply_alert *) 0 ;
  libtorrent::sha1_hash *arg2 = (libtorrent::sha1_hash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_get_peers_reply_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_get_peers_reply_alert_info_hash_set" "', argument " "1"" of type '" "libtorrent::dht_get_peers_reply_alert *""'"); 
  }
  arg1 = (libtorrent::dht_get_peers_reply_alert *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dht_get_peers_reply_alert_info_hash_set" "', argument " "2"" of type '" "libtorrent::sha1_hash *""'"); 
  }
  arg2 = (libtorrent::sha1_hash *)(argp2);
  if (arg1) (arg1)->info_hash = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_get_peers_reply_alert_info_hash_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_get_peers_reply_alert *arg1 = (libtorrent::dht_get_peers_reply_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::sha1_hash *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_get_peers_reply_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_get_peers_reply_alert_info_hash_get" "', argument " "1"" of type '" "libtorrent::dht_get_peers_reply_alert *""'"); 
  }
  arg1 = (libtorrent::dht_get_peers_reply_alert *)(argp1);
  result = (libtorrent::sha1_hash *)& ((arg1)->info_hash);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_dht_get_peers_reply_alert_num_peers(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_get_peers_reply_alert *arg1 = (libtorrent::dht_get_peers_reply_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_get_peers_reply_alert_num_peers.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_get_peers_reply_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_get_peers_reply_alert_num_peers" "', argument " "1"" of type '" "libtorrent::dht_get_peers_reply_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_get_peers_reply_alert *)(argp1);
  result = (int)((libtorrent::dht_get_peers_reply_alert const *)arg1)->num_peers();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_get_peers_reply_alert_peers(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_get_peers_reply_alert *arg1 = (libtorrent::dht_get_peers_reply_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::tcp::endpoint > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_get_peers_reply_alert_peers.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_get_peers_reply_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_get_peers_reply_alert_peers" "', argument " "1"" of type '" "libtorrent::dht_get_peers_reply_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_get_peers_reply_alert *)(argp1);
  result = ((libtorrent::dht_get_peers_reply_alert const *)arg1)->peers();
  jsresult = SWIG_NewPointerObj((new std::vector< libtorrent::tcp::endpoint >((const std::vector< libtorrent::tcp::endpoint >&)(result))), SWIGTYPE_p_std__vectorT_libtorrent__tcp__endpoint_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_dht_get_peers_reply_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_dht_get_peers_reply_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_dht_get_peers_reply_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_dht_get_peers_reply_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::dht_get_peers_reply_alert * arg1 = (libtorrent::dht_get_peers_reply_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_dht_get_peers_reply_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class dht_get_peers_reply_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_dht_direct_response_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_direct_response_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_dht_direct_response_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_direct_response_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_dht_direct_response_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_direct_response_alert *arg1 = (libtorrent::dht_direct_response_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_direct_response_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_direct_response_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_direct_response_alert_type" "', argument " "1"" of type '" "libtorrent::dht_direct_response_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_direct_response_alert *)(argp1);
  result = (int)((libtorrent::dht_direct_response_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_direct_response_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_direct_response_alert *arg1 = (libtorrent::dht_direct_response_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_direct_response_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_direct_response_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_direct_response_alert_category" "', argument " "1"" of type '" "libtorrent::dht_direct_response_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_direct_response_alert *)(argp1);
  result = (int)((libtorrent::dht_direct_response_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_direct_response_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_direct_response_alert *arg1 = (libtorrent::dht_direct_response_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_direct_response_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_direct_response_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_direct_response_alert_what" "', argument " "1"" of type '" "libtorrent::dht_direct_response_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_direct_response_alert *)(argp1);
  result = (char *)((libtorrent::dht_direct_response_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_dht_direct_response_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::dht_direct_response_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_dht_direct_response_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_direct_response_alert *arg1 = (libtorrent::dht_direct_response_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_direct_response_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_direct_response_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_direct_response_alert_message" "', argument " "1"" of type '" "libtorrent::dht_direct_response_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_direct_response_alert *)(argp1);
  result = ((libtorrent::dht_direct_response_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_direct_response_alert_addr_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_direct_response_alert *arg1 = (libtorrent::dht_direct_response_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::udp::endpoint *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_direct_response_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_direct_response_alert_addr_get" "', argument " "1"" of type '" "libtorrent::dht_direct_response_alert *""'"); 
  }
  arg1 = (libtorrent::dht_direct_response_alert *)(argp1);
  result = (libtorrent::udp::endpoint *)& ((arg1)->addr);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__udp__endpoint, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_dht_direct_response_alert_response(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_direct_response_alert *arg1 = (libtorrent::dht_direct_response_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::bdecode_node result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_direct_response_alert_response.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_direct_response_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_direct_response_alert_response" "', argument " "1"" of type '" "libtorrent::dht_direct_response_alert const *""'"); 
  }
  arg1 = (libtorrent::dht_direct_response_alert *)(argp1);
  result = ((libtorrent::dht_direct_response_alert const *)arg1)->response();
  jsresult = SWIG_NewPointerObj((new libtorrent::bdecode_node((const libtorrent::bdecode_node&)(result))), SWIGTYPE_p_libtorrent__bdecode_node, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dht_direct_response_alert_get_userdata(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_direct_response_alert *arg1 = (libtorrent::dht_direct_response_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int64_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_direct_response_alert_get_userdata.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_direct_response_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_direct_response_alert_get_userdata" "', argument " "1"" of type '" "libtorrent::dht_direct_response_alert *""'"); 
  }
  arg1 = (libtorrent::dht_direct_response_alert *)(argp1);
  result = (int64_t)libtorrent_dht_direct_response_alert_get_userdata(arg1);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_dht_direct_response_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_dht_direct_response_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_dht_direct_response_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_dht_direct_response_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::dht_direct_response_alert * arg1 = (libtorrent::dht_direct_response_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_dht_direct_response_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class dht_direct_response_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_picker_log_alert_priority(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::picker_log_alert::priority));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_picker_log_alert_alert_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::picker_log_alert::alert_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_picker_log_alert_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::picker_log_alert *arg1 = (libtorrent::picker_log_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_picker_log_alert_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__picker_log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "picker_log_alert_type" "', argument " "1"" of type '" "libtorrent::picker_log_alert const *""'"); 
  }
  arg1 = (libtorrent::picker_log_alert *)(argp1);
  result = (int)((libtorrent::picker_log_alert const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_picker_log_alert_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::picker_log_alert *arg1 = (libtorrent::picker_log_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_picker_log_alert_category.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__picker_log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "picker_log_alert_category" "', argument " "1"" of type '" "libtorrent::picker_log_alert const *""'"); 
  }
  arg1 = (libtorrent::picker_log_alert *)(argp1);
  result = (int)((libtorrent::picker_log_alert const *)arg1)->category();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_picker_log_alert_what(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::picker_log_alert *arg1 = (libtorrent::picker_log_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_picker_log_alert_what.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__picker_log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "picker_log_alert_what" "', argument " "1"" of type '" "libtorrent::picker_log_alert const *""'"); 
  }
  arg1 = (libtorrent::picker_log_alert *)(argp1);
  result = (char *)((libtorrent::picker_log_alert const *)arg1)->what();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_picker_log_alert_static_category(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::picker_log_alert::static_category));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_picker_log_alert_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::picker_log_alert *arg1 = (libtorrent::picker_log_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_picker_log_alert_message.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__picker_log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "picker_log_alert_message" "', argument " "1"" of type '" "libtorrent::picker_log_alert const *""'"); 
  }
  arg1 = (libtorrent::picker_log_alert *)(argp1);
  result = ((libtorrent::picker_log_alert const *)arg1)->message();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_picker_log_alert_partial_ratio(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::picker_log_alert::partial_ratio));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_picker_log_alert_prioritize_partials(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::picker_log_alert::prioritize_partials));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_picker_log_alert_rarest_first_partials(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::picker_log_alert::rarest_first_partials));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_picker_log_alert_rarest_first(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::picker_log_alert::rarest_first));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_picker_log_alert_reverse_rarest_first(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::picker_log_alert::reverse_rarest_first));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_picker_log_alert_suggested_pieces(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::picker_log_alert::suggested_pieces));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_picker_log_alert_prio_sequential_pieces(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::picker_log_alert::prio_sequential_pieces));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_picker_log_alert_sequential_pieces(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::picker_log_alert::sequential_pieces));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_picker_log_alert_reverse_pieces(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::picker_log_alert::reverse_pieces));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_picker_log_alert_time_critical(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::picker_log_alert::time_critical));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_picker_log_alert_random_pieces(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::picker_log_alert::random_pieces));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_picker_log_alert_prefer_contiguous(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::picker_log_alert::prefer_contiguous));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_picker_log_alert_reverse_sequential(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::picker_log_alert::reverse_sequential));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_picker_log_alert_backup1(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::picker_log_alert::backup1));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_picker_log_alert_backup2(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::picker_log_alert::backup2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_picker_log_alert_end_game(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::picker_log_alert::end_game));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_picker_log_alert_picker_flags_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::picker_log_alert *arg1 = (libtorrent::picker_log_alert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__picker_log_alert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "picker_log_alert_picker_flags_get" "', argument " "1"" of type '" "libtorrent::picker_log_alert *""'"); 
  }
  arg1 = (libtorrent::picker_log_alert *)(argp1);
  result = (std::uint32_t)(std::uint32_t) ((arg1)->picker_flags);
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_picker_log_alert(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_picker_log_alert(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_picker_log_alert(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_picker_log_alert(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::picker_log_alert * arg1 = (libtorrent::picker_log_alert *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_picker_log_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class picker_log_alert can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_num_alert_types(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::num_alert_types));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_client_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_client_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(value, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "peer_info_client_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "peer_info_client_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->client = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_client_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_client_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (std::string *) & ((arg1)->client);
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_pieces_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  libtorrent::bitfield *arg2 = (libtorrent::bitfield *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_pieces_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__bitfield, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "peer_info_pieces_set" "', argument " "2"" of type '" "libtorrent::bitfield *""'"); 
  }
  arg2 = (libtorrent::bitfield *)(argp2);
  if (arg1) (arg1)->pieces = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_pieces_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::bitfield *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_pieces_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (libtorrent::bitfield *)& ((arg1)->pieces);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__bitfield, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_total_download_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  std::int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_total_download_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_total_download_set" "', argument " "2"" of type '" "std::int64_t""'");
  } 
  arg2 = (std::int64_t)(val2);
  if (arg1) (arg1)->total_download = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_total_download_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::int64_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_total_download_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (std::int64_t) ((arg1)->total_download);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_total_upload_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  std::int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_total_upload_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_total_upload_set" "', argument " "2"" of type '" "std::int64_t""'");
  } 
  arg2 = (std::int64_t)(val2);
  if (arg1) (arg1)->total_upload = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_total_upload_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::int64_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_total_upload_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (std::int64_t) ((arg1)->total_upload);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_info_interesting(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_info::interesting));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_info_choked(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_info::choked));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_info_remote_interested(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_info::remote_interested));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_info_remote_choked(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_info::remote_choked));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_info_supports_extensions(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_info::supports_extensions));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_info_local_connection(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_info::local_connection));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_info_handshake(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_info::handshake));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_info_connecting(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_info::connecting));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_info_on_parole(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_info::on_parole));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_info_seed(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_info::seed));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_info_optimistic_unchoke(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_info::optimistic_unchoke));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_info_snubbed(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_info::snubbed));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_info_upload_only(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_info::upload_only));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_info_endgame_mode(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_info::endgame_mode));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_info_holepunched(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_info::holepunched));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_info_i2p_socket(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_info::i2p_socket));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_info_utp_socket(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_info::utp_socket));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_info_ssl_socket(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_info::ssl_socket));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_info_rc4_encrypted(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_info::rc4_encrypted));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_info_plaintext_encrypted(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_info::plaintext_encrypted));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_flags_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  std::uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_flags_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_flags_set" "', argument " "2"" of type '" "std::uint32_t""'");
  } 
  arg2 = (std::uint32_t)(val2);
  if (arg1) (arg1)->flags = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_flags_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_flags_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (std::uint32_t) ((arg1)->flags);
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_info_tracker(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_info::tracker));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_info_dht(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_info::dht));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_info_pex(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_info::pex));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_info_lsd(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_info::lsd));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_info_resume_data(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_info::resume_data));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_info_incoming(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_info::incoming));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_source_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  std::uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_source_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_source_set" "', argument " "2"" of type '" "std::uint32_t""'");
  } 
  arg2 = (std::uint32_t)(val2);
  if (arg1) (arg1)->source = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_source_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_source_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (std::uint32_t) ((arg1)->source);
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_up_speed_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_up_speed_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_up_speed_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->up_speed = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_up_speed_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_up_speed_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int) ((arg1)->up_speed);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_down_speed_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_down_speed_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_down_speed_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->down_speed = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_down_speed_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_down_speed_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int) ((arg1)->down_speed);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_payload_up_speed_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_payload_up_speed_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_payload_up_speed_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->payload_up_speed = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_payload_up_speed_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_payload_up_speed_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int) ((arg1)->payload_up_speed);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_payload_down_speed_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_payload_down_speed_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_payload_down_speed_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->payload_down_speed = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_payload_down_speed_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_payload_down_speed_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int) ((arg1)->payload_down_speed);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_pid_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  libtorrent::peer_id *arg2 = (libtorrent::peer_id *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_pid_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "peer_info_pid_set" "', argument " "2"" of type '" "libtorrent::peer_id *""'"); 
  }
  arg2 = (libtorrent::peer_id *)(argp2);
  if (arg1) (arg1)->pid = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_pid_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::peer_id *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_pid_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (libtorrent::peer_id *)& ((arg1)->pid);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_queue_bytes_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_queue_bytes_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_queue_bytes_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->queue_bytes = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_queue_bytes_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_queue_bytes_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int) ((arg1)->queue_bytes);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_request_timeout_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_request_timeout_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_request_timeout_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->request_timeout = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_request_timeout_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_request_timeout_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int) ((arg1)->request_timeout);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_send_buffer_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_send_buffer_size_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_send_buffer_size_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->send_buffer_size = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_send_buffer_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_send_buffer_size_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int) ((arg1)->send_buffer_size);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_used_send_buffer_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_used_send_buffer_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_used_send_buffer_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->used_send_buffer = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_used_send_buffer_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_used_send_buffer_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int) ((arg1)->used_send_buffer);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_receive_buffer_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_receive_buffer_size_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_receive_buffer_size_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->receive_buffer_size = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_receive_buffer_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_receive_buffer_size_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int) ((arg1)->receive_buffer_size);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_used_receive_buffer_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_used_receive_buffer_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_used_receive_buffer_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->used_receive_buffer = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_used_receive_buffer_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_used_receive_buffer_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int) ((arg1)->used_receive_buffer);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_receive_buffer_watermark_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_receive_buffer_watermark_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_receive_buffer_watermark_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->receive_buffer_watermark = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_receive_buffer_watermark_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_receive_buffer_watermark_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int) ((arg1)->receive_buffer_watermark);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_num_hashfails_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_num_hashfails_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_num_hashfails_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->num_hashfails = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_num_hashfails_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_num_hashfails_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int) ((arg1)->num_hashfails);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_download_queue_length_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_download_queue_length_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_download_queue_length_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->download_queue_length = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_download_queue_length_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_download_queue_length_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int) ((arg1)->download_queue_length);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_timed_out_requests_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_timed_out_requests_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_timed_out_requests_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->timed_out_requests = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_timed_out_requests_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_timed_out_requests_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int) ((arg1)->timed_out_requests);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_busy_requests_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_busy_requests_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_busy_requests_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->busy_requests = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_busy_requests_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_busy_requests_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int) ((arg1)->busy_requests);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_requests_in_buffer_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_requests_in_buffer_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_requests_in_buffer_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->requests_in_buffer = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_requests_in_buffer_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_requests_in_buffer_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int) ((arg1)->requests_in_buffer);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_target_dl_queue_length_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_target_dl_queue_length_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_target_dl_queue_length_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->target_dl_queue_length = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_target_dl_queue_length_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_target_dl_queue_length_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int) ((arg1)->target_dl_queue_length);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_upload_queue_length_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_upload_queue_length_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_upload_queue_length_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->upload_queue_length = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_upload_queue_length_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_upload_queue_length_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int) ((arg1)->upload_queue_length);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_failcount_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_failcount_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_failcount_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->failcount = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_failcount_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_failcount_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int) ((arg1)->failcount);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_downloading_piece_index_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_downloading_piece_index_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_downloading_piece_index_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->downloading_piece_index = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_downloading_piece_index_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_downloading_piece_index_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int) ((arg1)->downloading_piece_index);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_downloading_block_index_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_downloading_block_index_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_downloading_block_index_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->downloading_block_index = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_downloading_block_index_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_downloading_block_index_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int) ((arg1)->downloading_block_index);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_downloading_progress_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_downloading_progress_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_downloading_progress_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->downloading_progress = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_downloading_progress_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_downloading_progress_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int) ((arg1)->downloading_progress);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_downloading_total_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_downloading_total_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_downloading_total_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->downloading_total = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_downloading_total_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_downloading_total_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int) ((arg1)->downloading_total);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_info_standard_bittorrent(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_info::standard_bittorrent));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_info_web_seed(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_info::web_seed));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_info_http_seed(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_info::http_seed));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_connection_type_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_connection_type_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_connection_type_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->connection_type = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_connection_type_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_connection_type_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int) ((arg1)->connection_type);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_pending_disk_bytes_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_pending_disk_bytes_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_pending_disk_bytes_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->pending_disk_bytes = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_pending_disk_bytes_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_pending_disk_bytes_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int) ((arg1)->pending_disk_bytes);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_pending_disk_read_bytes_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_pending_disk_read_bytes_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_pending_disk_read_bytes_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->pending_disk_read_bytes = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_pending_disk_read_bytes_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_pending_disk_read_bytes_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int) ((arg1)->pending_disk_read_bytes);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_send_quota_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_send_quota_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_send_quota_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->send_quota = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_send_quota_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_send_quota_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int) ((arg1)->send_quota);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_receive_quota_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_receive_quota_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_receive_quota_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->receive_quota = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_receive_quota_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_receive_quota_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int) ((arg1)->receive_quota);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_rtt_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_rtt_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_rtt_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->rtt = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_rtt_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_rtt_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int) ((arg1)->rtt);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_num_pieces_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_num_pieces_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_num_pieces_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->num_pieces = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_num_pieces_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_num_pieces_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int) ((arg1)->num_pieces);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_download_rate_peak_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_download_rate_peak_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_download_rate_peak_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->download_rate_peak = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_download_rate_peak_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_download_rate_peak_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int) ((arg1)->download_rate_peak);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_upload_rate_peak_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_upload_rate_peak_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_upload_rate_peak_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->upload_rate_peak = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_upload_rate_peak_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_upload_rate_peak_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int) ((arg1)->upload_rate_peak);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_progress_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_progress_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_progress_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->progress = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_progress_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_progress_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (float) ((arg1)->progress);
  jsresult = SWIG_From_float((float)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_progress_ppm_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_progress_ppm_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_progress_ppm_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->progress_ppm = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_progress_ppm_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_progress_ppm_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int) ((arg1)->progress_ppm);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_estimated_reciprocation_rate_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_estimated_reciprocation_rate_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_estimated_reciprocation_rate_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->estimated_reciprocation_rate = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_estimated_reciprocation_rate_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_estimated_reciprocation_rate_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int) ((arg1)->estimated_reciprocation_rate);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_ip_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  libtorrent::tcp::endpoint *arg2 = (libtorrent::tcp::endpoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_ip_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__tcp__endpoint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "peer_info_ip_set" "', argument " "2"" of type '" "libtorrent::tcp::endpoint *""'"); 
  }
  arg2 = (libtorrent::tcp::endpoint *)(argp2);
  if (arg1) (arg1)->ip = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_ip_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::tcp::endpoint *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_ip_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (libtorrent::tcp::endpoint *)& ((arg1)->ip);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__tcp__endpoint, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_local_endpoint_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  libtorrent::tcp::endpoint *arg2 = (libtorrent::tcp::endpoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_local_endpoint_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__tcp__endpoint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "peer_info_local_endpoint_set" "', argument " "2"" of type '" "libtorrent::tcp::endpoint *""'"); 
  }
  arg2 = (libtorrent::tcp::endpoint *)(argp2);
  if (arg1) (arg1)->local_endpoint = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_local_endpoint_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::tcp::endpoint *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_local_endpoint_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (libtorrent::tcp::endpoint *)& ((arg1)->local_endpoint);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__tcp__endpoint, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_info_bw_idle(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_info::bw_idle));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_info_bw_limit(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_info::bw_limit));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_info_bw_network(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_info::bw_network));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_info_bw_disk(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_info::bw_disk));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_read_state_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_read_state_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_read_state_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = (char)(val2);
  if (arg1) (arg1)->read_state = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_read_state_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_read_state_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (char) ((arg1)->read_state);
  jsresult = SWIG_From_signed_SS_char((signed char)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_info_write_state_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_write_state_set" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_info_write_state_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = (char)(val2);
  if (arg1) (arg1)->write_state = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_info_write_state_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_write_state_get" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (char) ((arg1)->write_state);
  jsresult = SWIG_From_signed_SS_char((signed char)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_peer_info_get_last_request(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int64_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_info_get_last_request.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_get_last_request" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int64_t)libtorrent_peer_info_get_last_request(arg1);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_info_get_last_active(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int64_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_info_get_last_active.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_get_last_active" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int64_t)libtorrent_peer_info_get_last_active(arg1);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_info_get_download_queue_time(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int64_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_info_get_download_queue_time.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_info_get_download_queue_time" "', argument " "1"" of type '" "libtorrent::peer_info *""'"); 
  }
  arg1 = (libtorrent::peer_info *)(argp1);
  result = (int64_t)libtorrent_peer_info_get_download_queue_time(arg1);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_peer_info(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::peer_info *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_peer_info.");
  result = (libtorrent::peer_info *)new libtorrent::peer_info();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__peer_info, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_peer_info(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_peer_info(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_peer_info(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_peer_info(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::peer_info * arg1 = (libtorrent::peer_info *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_dht_settings(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::dht_settings *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_dht_settings.");
  result = (libtorrent::dht_settings *)new libtorrent::dht_settings();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__dht_settings, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_dht_settings_max_peers_reply_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_max_peers_reply_set" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_settings_max_peers_reply_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->max_peers_reply = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_settings_max_peers_reply_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_max_peers_reply_get" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  result = (int) ((arg1)->max_peers_reply);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_settings_search_branching_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_search_branching_set" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_settings_search_branching_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->search_branching = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_settings_search_branching_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_search_branching_get" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  result = (int) ((arg1)->search_branching);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_settings_max_fail_count_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_max_fail_count_set" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_settings_max_fail_count_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->max_fail_count = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_settings_max_fail_count_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_max_fail_count_get" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  result = (int) ((arg1)->max_fail_count);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_settings_max_torrents_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_max_torrents_set" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_settings_max_torrents_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->max_torrents = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_settings_max_torrents_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_max_torrents_get" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  result = (int) ((arg1)->max_torrents);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_settings_max_dht_items_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_max_dht_items_set" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_settings_max_dht_items_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->max_dht_items = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_settings_max_dht_items_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_max_dht_items_get" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  result = (int) ((arg1)->max_dht_items);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_settings_max_peers_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_max_peers_set" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_settings_max_peers_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->max_peers = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_settings_max_peers_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_max_peers_get" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  result = (int) ((arg1)->max_peers);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_settings_max_torrent_search_reply_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_max_torrent_search_reply_set" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_settings_max_torrent_search_reply_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->max_torrent_search_reply = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_settings_max_torrent_search_reply_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_max_torrent_search_reply_get" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  result = (int) ((arg1)->max_torrent_search_reply);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_settings_restrict_routing_ips_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_restrict_routing_ips_set" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_settings_restrict_routing_ips_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->restrict_routing_ips = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_settings_restrict_routing_ips_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_restrict_routing_ips_get" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  result = (bool) ((arg1)->restrict_routing_ips);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_settings_restrict_search_ips_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_restrict_search_ips_set" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_settings_restrict_search_ips_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->restrict_search_ips = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_settings_restrict_search_ips_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_restrict_search_ips_get" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  result = (bool) ((arg1)->restrict_search_ips);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_settings_extended_routing_table_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_extended_routing_table_set" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_settings_extended_routing_table_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->extended_routing_table = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_settings_extended_routing_table_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_extended_routing_table_get" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  result = (bool) ((arg1)->extended_routing_table);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_settings_aggressive_lookups_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_aggressive_lookups_set" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_settings_aggressive_lookups_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->aggressive_lookups = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_settings_aggressive_lookups_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_aggressive_lookups_get" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  result = (bool) ((arg1)->aggressive_lookups);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_settings_privacy_lookups_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_privacy_lookups_set" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_settings_privacy_lookups_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->privacy_lookups = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_settings_privacy_lookups_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_privacy_lookups_get" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  result = (bool) ((arg1)->privacy_lookups);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_settings_enforce_node_id_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_enforce_node_id_set" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_settings_enforce_node_id_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->enforce_node_id = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_settings_enforce_node_id_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_enforce_node_id_get" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  result = (bool) ((arg1)->enforce_node_id);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_settings_ignore_dark_internet_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_ignore_dark_internet_set" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_settings_ignore_dark_internet_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->ignore_dark_internet = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_settings_ignore_dark_internet_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_ignore_dark_internet_get" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  result = (bool) ((arg1)->ignore_dark_internet);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_settings_block_timeout_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_block_timeout_set" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_settings_block_timeout_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->block_timeout = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_settings_block_timeout_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_block_timeout_get" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  result = (int) ((arg1)->block_timeout);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_settings_block_ratelimit_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_block_ratelimit_set" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_settings_block_ratelimit_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->block_ratelimit = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_settings_block_ratelimit_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_block_ratelimit_get" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  result = (int) ((arg1)->block_ratelimit);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_settings_read_only_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_read_only_set" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_settings_read_only_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->read_only = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_settings_read_only_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_read_only_get" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  result = (bool) ((arg1)->read_only);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_settings_item_lifetime_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_item_lifetime_set" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_settings_item_lifetime_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->item_lifetime = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_settings_item_lifetime_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_item_lifetime_get" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  result = (int) ((arg1)->item_lifetime);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_settings_upload_rate_limit_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_upload_rate_limit_set" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dht_settings_upload_rate_limit_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->upload_rate_limit = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_settings_upload_rate_limit_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_settings_upload_rate_limit_get" "', argument " "1"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg1 = (libtorrent::dht_settings *)(argp1);
  result = (int) ((arg1)->upload_rate_limit);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_dht_settings(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_dht_settings(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_dht_settings(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_dht_settings(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::dht_settings * arg1 = (libtorrent::dht_settings *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_setting_by_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_setting_by_name.");
  
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setting_by_name" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setting_by_name" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (int)libtorrent::setting_by_name((std::string const &)*arg1);
  jsresult = SWIG_From_int((int)(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_name_for_setting(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_name_for_setting.");
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "name_for_setting" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  result = (char *)libtorrent::name_for_setting(arg1);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_settings_pack__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::settings_pack *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_settings_pack__SWIG_0.");
  result = (libtorrent::settings_pack *)new libtorrent::settings_pack();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__settings_pack, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_settings_pack__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::settings_pack *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libtorrent::settings_pack *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_settings_pack__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__settings_pack,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_settings_pack" "', argument " "1"" of type '" "libtorrent::settings_pack const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_settings_pack" "', argument " "1"" of type '" "libtorrent::settings_pack const &""'"); 
  }
  arg1 = (libtorrent::settings_pack *)(argp1);
  result = (libtorrent::settings_pack *)new libtorrent::settings_pack((libtorrent::settings_pack const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__settings_pack, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_settings_pack(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_settings_pack__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_settings_pack__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_settings_pack__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_settings_pack__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_settings_pack");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_settings_pack_set_str(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::settings_pack *arg1 = (libtorrent::settings_pack *) 0 ;
  int arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_settings_pack_set_str.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__settings_pack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "settings_pack_set_str" "', argument " "1"" of type '" "libtorrent::settings_pack *""'"); 
  }
  arg1 = (libtorrent::settings_pack *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "settings_pack_set_str" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "settings_pack_set_str" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->set_str(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_settings_pack_set_int(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::settings_pack *arg1 = (libtorrent::settings_pack *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_settings_pack_set_int.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__settings_pack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "settings_pack_set_int" "', argument " "1"" of type '" "libtorrent::settings_pack *""'"); 
  }
  arg1 = (libtorrent::settings_pack *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "settings_pack_set_int" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "settings_pack_set_int" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->set_int(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_settings_pack_set_bool(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::settings_pack *arg1 = (libtorrent::settings_pack *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_settings_pack_set_bool.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__settings_pack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "settings_pack_set_bool" "', argument " "1"" of type '" "libtorrent::settings_pack *""'"); 
  }
  arg1 = (libtorrent::settings_pack *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "settings_pack_set_bool" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "settings_pack_set_bool" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  (arg1)->set_bool(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_settings_pack_has_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::settings_pack *arg1 = (libtorrent::settings_pack *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_settings_pack_has_val.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__settings_pack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "settings_pack_has_val" "', argument " "1"" of type '" "libtorrent::settings_pack const *""'"); 
  }
  arg1 = (libtorrent::settings_pack *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "settings_pack_has_val" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (bool)((libtorrent::settings_pack const *)arg1)->has_val(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_settings_pack_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::settings_pack *arg1 = (libtorrent::settings_pack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_settings_pack_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__settings_pack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "settings_pack_clear" "', argument " "1"" of type '" "libtorrent::settings_pack *""'"); 
  }
  arg1 = (libtorrent::settings_pack *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_settings_pack_get_str(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::settings_pack *arg1 = (libtorrent::settings_pack *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::string *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_settings_pack_get_str.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__settings_pack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "settings_pack_get_str" "', argument " "1"" of type '" "libtorrent::settings_pack const *""'"); 
  }
  arg1 = (libtorrent::settings_pack *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "settings_pack_get_str" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (std::string *) &((libtorrent::settings_pack const *)arg1)->get_str(arg2);
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_settings_pack_get_int(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::settings_pack *arg1 = (libtorrent::settings_pack *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_settings_pack_get_int.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__settings_pack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "settings_pack_get_int" "', argument " "1"" of type '" "libtorrent::settings_pack const *""'"); 
  }
  arg1 = (libtorrent::settings_pack *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "settings_pack_get_int" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (int)((libtorrent::settings_pack const *)arg1)->get_int(arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_settings_pack_get_bool(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::settings_pack *arg1 = (libtorrent::settings_pack *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_settings_pack_get_bool.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__settings_pack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "settings_pack_get_bool" "', argument " "1"" of type '" "libtorrent::settings_pack const *""'"); 
  }
  arg1 = (libtorrent::settings_pack *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "settings_pack_get_bool" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (bool)((libtorrent::settings_pack const *)arg1)->get_bool(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_string_type_base(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::string_type_base));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_int_type_base(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::int_type_base));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_bool_type_base(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::bool_type_base));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_type_mask(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::type_mask));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_index_mask(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::index_mask));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_user_agent(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::user_agent));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_announce_ip(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::announce_ip));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_mmap_cache(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::mmap_cache));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_handshake_client_version(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::handshake_client_version));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_outgoing_interfaces(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::outgoing_interfaces));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_listen_interfaces(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::listen_interfaces));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_proxy_hostname(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::proxy_hostname));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_proxy_username(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::proxy_username));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_proxy_password(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::proxy_password));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_i2p_hostname(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::i2p_hostname));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_peer_fingerprint(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::peer_fingerprint));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_dht_bootstrap_nodes(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::dht_bootstrap_nodes));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_max_string_setting_internal(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::max_string_setting_internal));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_allow_multiple_connections_per_ip(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::allow_multiple_connections_per_ip));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_send_redundant_have(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::send_redundant_have));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_use_dht_as_fallback(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::use_dht_as_fallback));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_upnp_ignore_nonrouters(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::upnp_ignore_nonrouters));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_use_parole_mode(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::use_parole_mode));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_use_read_cache(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::use_read_cache));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_dont_flush_write_cache(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::dont_flush_write_cache));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_coalesce_reads(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::coalesce_reads));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_coalesce_writes(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::coalesce_writes));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_auto_manage_prefer_seeds(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::auto_manage_prefer_seeds));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_dont_count_slow_torrents(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::dont_count_slow_torrents));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_close_redundant_connections(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::close_redundant_connections));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_prioritize_partial_pieces(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::prioritize_partial_pieces));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_rate_limit_ip_overhead(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::rate_limit_ip_overhead));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_announce_to_all_tiers(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::announce_to_all_tiers));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_announce_to_all_trackers(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::announce_to_all_trackers));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_prefer_udp_trackers(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::prefer_udp_trackers));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_strict_super_seeding(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::strict_super_seeding));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_disable_hash_checks(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::disable_hash_checks));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_allow_i2p_mixed(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::allow_i2p_mixed));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_volatile_read_cache(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::volatile_read_cache));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_no_atime_storage(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::no_atime_storage));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_incoming_starts_queued_torrents(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::incoming_starts_queued_torrents));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_report_true_downloaded(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::report_true_downloaded));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_strict_end_game_mode(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::strict_end_game_mode));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_broadcast_lsd(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::broadcast_lsd));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_enable_outgoing_utp(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::enable_outgoing_utp));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_enable_incoming_utp(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::enable_incoming_utp));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_enable_outgoing_tcp(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::enable_outgoing_tcp));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_enable_incoming_tcp(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::enable_incoming_tcp));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_no_recheck_incomplete_resume(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::no_recheck_incomplete_resume));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_anonymous_mode(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::anonymous_mode));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_report_web_seed_downloads(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::report_web_seed_downloads));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_seeding_outgoing_connections(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::seeding_outgoing_connections));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_no_connect_privileged_ports(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::no_connect_privileged_ports));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_smooth_connects(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::smooth_connects));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_always_send_user_agent(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::always_send_user_agent));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_apply_ip_filter_to_trackers(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::apply_ip_filter_to_trackers));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_deprecated19(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::deprecated19));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_lock_files(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::lock_files));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_ban_web_seeds(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::ban_web_seeds));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_allow_partial_disk_writes(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::allow_partial_disk_writes));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_force_proxy(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::force_proxy));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_support_share_mode(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::support_share_mode));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_support_merkle_torrents(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::support_merkle_torrents));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_report_redundant_bytes(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::report_redundant_bytes));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_listen_system_port_fallback(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::listen_system_port_fallback));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_use_disk_cache_pool(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::use_disk_cache_pool));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_announce_crypto_support(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::announce_crypto_support));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_enable_upnp(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::enable_upnp));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_enable_natpmp(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::enable_natpmp));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_enable_lsd(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::enable_lsd));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_enable_dht(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::enable_dht));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_prefer_rc4(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::prefer_rc4));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_proxy_hostnames(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::proxy_hostnames));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_proxy_peer_connections(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::proxy_peer_connections));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_auto_sequential(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::auto_sequential));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_proxy_tracker_connections(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::proxy_tracker_connections));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_max_bool_setting_internal(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::max_bool_setting_internal));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_tracker_completion_timeout(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::tracker_completion_timeout));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_tracker_receive_timeout(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::tracker_receive_timeout));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_stop_tracker_timeout(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::stop_tracker_timeout));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_tracker_maximum_response_length(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::tracker_maximum_response_length));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_piece_timeout(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::piece_timeout));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_request_timeout(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::request_timeout));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_request_queue_time(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::request_queue_time));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_max_allowed_in_request_queue(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::max_allowed_in_request_queue));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_max_out_request_queue(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::max_out_request_queue));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_whole_pieces_threshold(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::whole_pieces_threshold));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_peer_timeout(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::peer_timeout));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_urlseed_timeout(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::urlseed_timeout));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_urlseed_pipeline_size(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::urlseed_pipeline_size));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_urlseed_wait_retry(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::urlseed_wait_retry));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_file_pool_size(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::file_pool_size));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_max_failcount(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::max_failcount));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_min_reconnect_time(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::min_reconnect_time));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_peer_connect_timeout(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::peer_connect_timeout));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_connection_speed(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::connection_speed));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_inactivity_timeout(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::inactivity_timeout));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_unchoke_interval(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::unchoke_interval));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_optimistic_unchoke_interval(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::optimistic_unchoke_interval));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_num_want(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::num_want));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_initial_picker_threshold(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::initial_picker_threshold));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_allowed_fast_set_size(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::allowed_fast_set_size));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_suggest_mode(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::suggest_mode));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_max_queued_disk_bytes(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::max_queued_disk_bytes));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_handshake_timeout(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::handshake_timeout));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_send_buffer_low_watermark(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::send_buffer_low_watermark));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_send_buffer_watermark(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::send_buffer_watermark));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_send_buffer_watermark_factor(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::send_buffer_watermark_factor));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_choking_algorithm(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::choking_algorithm));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_seed_choking_algorithm(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::seed_choking_algorithm));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_cache_size(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::cache_size));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_cache_buffer_chunk_size(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::cache_buffer_chunk_size));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_cache_expiry(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::cache_expiry));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_disk_io_write_mode(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::disk_io_write_mode));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_disk_io_read_mode(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::disk_io_read_mode));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_outgoing_port(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::outgoing_port));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_num_outgoing_ports(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::num_outgoing_ports));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_peer_tos(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::peer_tos));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_active_downloads(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::active_downloads));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_active_seeds(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::active_seeds));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_active_checking(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::active_checking));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_active_dht_limit(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::active_dht_limit));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_active_tracker_limit(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::active_tracker_limit));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_active_lsd_limit(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::active_lsd_limit));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_active_limit(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::active_limit));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_active_loaded_limit(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::active_loaded_limit));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_auto_manage_interval(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::auto_manage_interval));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_seed_time_limit(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::seed_time_limit));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_auto_scrape_interval(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::auto_scrape_interval));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_auto_scrape_min_interval(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::auto_scrape_min_interval));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_max_peerlist_size(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::max_peerlist_size));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_max_paused_peerlist_size(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::max_paused_peerlist_size));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_min_announce_interval(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::min_announce_interval));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_auto_manage_startup(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::auto_manage_startup));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_seeding_piece_quota(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::seeding_piece_quota));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_max_rejects(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::max_rejects));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_recv_socket_buffer_size(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::recv_socket_buffer_size));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_send_socket_buffer_size(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::send_socket_buffer_size));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_max_peer_recv_buffer_size(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::max_peer_recv_buffer_size));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_file_checks_delay_per_block(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::file_checks_delay_per_block));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_read_cache_line_size(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::read_cache_line_size));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_write_cache_line_size(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::write_cache_line_size));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_optimistic_disk_retry(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::optimistic_disk_retry));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_max_suggest_pieces(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::max_suggest_pieces));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_local_service_announce_interval(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::local_service_announce_interval));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_dht_announce_interval(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::dht_announce_interval));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_udp_tracker_token_expiry(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::udp_tracker_token_expiry));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_num_optimistic_unchoke_slots(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::num_optimistic_unchoke_slots));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_default_est_reciprocation_rate(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::default_est_reciprocation_rate));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_increase_est_reciprocation_rate(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::increase_est_reciprocation_rate));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_decrease_est_reciprocation_rate(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::decrease_est_reciprocation_rate));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_max_pex_peers(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::max_pex_peers));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_tick_interval(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::tick_interval));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_share_mode_target(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::share_mode_target));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_upload_rate_limit(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::upload_rate_limit));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_download_rate_limit(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::download_rate_limit));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_unchoke_slots_limit(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::unchoke_slots_limit));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_connections_limit(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::connections_limit));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_connections_slack(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::connections_slack));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_utp_target_delay(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::utp_target_delay));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_utp_gain_factor(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::utp_gain_factor));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_utp_min_timeout(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::utp_min_timeout));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_utp_syn_resends(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::utp_syn_resends));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_utp_fin_resends(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::utp_fin_resends));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_utp_num_resends(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::utp_num_resends));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_utp_connect_timeout(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::utp_connect_timeout));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_utp_loss_multiplier(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::utp_loss_multiplier));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_mixed_mode_algorithm(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::mixed_mode_algorithm));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_listen_queue_size(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::listen_queue_size));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_torrent_connect_boost(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::torrent_connect_boost));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_alert_queue_size(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::alert_queue_size));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_max_metadata_size(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::max_metadata_size));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_checking_mem_usage(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::checking_mem_usage));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_predictive_piece_announce(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::predictive_piece_announce));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_aio_threads(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::aio_threads));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_aio_max(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::aio_max));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_network_threads(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::network_threads));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_tracker_backoff(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::tracker_backoff));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_share_ratio_limit(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::share_ratio_limit));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_seed_time_ratio_limit(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::seed_time_ratio_limit));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_peer_turnover(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::peer_turnover));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_peer_turnover_cutoff(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::peer_turnover_cutoff));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_peer_turnover_interval(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::peer_turnover_interval));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_connect_seed_every_n_download(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::connect_seed_every_n_download));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_max_http_recv_buffer_size(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::max_http_recv_buffer_size));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_max_retry_port_bind(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::max_retry_port_bind));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_alert_mask(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::alert_mask));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_out_enc_policy(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::out_enc_policy));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_in_enc_policy(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::in_enc_policy));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_allowed_enc_level(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::allowed_enc_level));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_inactive_down_rate(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::inactive_down_rate));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_inactive_up_rate(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::inactive_up_rate));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_proxy_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::proxy_type));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_proxy_port(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::proxy_port));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_i2p_port(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::i2p_port));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_cache_size_volatile(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::cache_size_volatile));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_max_int_setting_internal(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::max_int_setting_internal));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_num_string_settings(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::num_string_settings));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_num_bool_settings(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::num_bool_settings));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_num_int_settings(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::num_int_settings));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_no_piece_suggestions(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::no_piece_suggestions));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_suggest_read_cache(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::suggest_read_cache));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_fixed_slots_choker(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::fixed_slots_choker));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_rate_based_choker(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::rate_based_choker));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_bittyrant_choker(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::bittyrant_choker));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_round_robin(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::round_robin));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_fastest_upload(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::fastest_upload));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_anti_leech(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::anti_leech));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_enable_os_cache(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::enable_os_cache));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_disable_os_cache(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::disable_os_cache));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_prefer_tcp(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::prefer_tcp));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_peer_proportional(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::peer_proportional));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_pe_forced(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::pe_forced));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_pe_enabled(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::pe_enabled));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_pe_disabled(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::pe_disabled));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_pe_plaintext(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::pe_plaintext));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_pe_rc4(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::pe_rc4));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_pe_both(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::pe_both));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_none(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::none));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_socks4(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::socks4));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_socks5(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::socks5));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_socks5_pw(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::socks5_pw));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_http(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::http));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_http_pw(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::http_pw));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_settings_pack_i2p_proxy(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::settings_pack::i2p_proxy));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_settings_pack(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_settings_pack(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_settings_pack(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_settings_pack(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::settings_pack * arg1 = (libtorrent::settings_pack *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap_peer_class_info_ignore_unchoke_slots_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_class_info *arg1 = (libtorrent::peer_class_info *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_class_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_class_info_ignore_unchoke_slots_set" "', argument " "1"" of type '" "libtorrent::peer_class_info *""'"); 
  }
  arg1 = (libtorrent::peer_class_info *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_class_info_ignore_unchoke_slots_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->ignore_unchoke_slots = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_class_info_ignore_unchoke_slots_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_class_info *arg1 = (libtorrent::peer_class_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_class_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_class_info_ignore_unchoke_slots_get" "', argument " "1"" of type '" "libtorrent::peer_class_info *""'"); 
  }
  arg1 = (libtorrent::peer_class_info *)(argp1);
  result = (bool) ((arg1)->ignore_unchoke_slots);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_class_info_connection_limit_factor_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_class_info *arg1 = (libtorrent::peer_class_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_class_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_class_info_connection_limit_factor_set" "', argument " "1"" of type '" "libtorrent::peer_class_info *""'"); 
  }
  arg1 = (libtorrent::peer_class_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_class_info_connection_limit_factor_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->connection_limit_factor = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_class_info_connection_limit_factor_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_class_info *arg1 = (libtorrent::peer_class_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_class_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_class_info_connection_limit_factor_get" "', argument " "1"" of type '" "libtorrent::peer_class_info *""'"); 
  }
  arg1 = (libtorrent::peer_class_info *)(argp1);
  result = (int) ((arg1)->connection_limit_factor);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_class_info_label_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_class_info *arg1 = (libtorrent::peer_class_info *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_class_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_class_info_label_set" "', argument " "1"" of type '" "libtorrent::peer_class_info *""'"); 
  }
  arg1 = (libtorrent::peer_class_info *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(value, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "peer_class_info_label_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "peer_class_info_label_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->label = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_class_info_label_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_class_info *arg1 = (libtorrent::peer_class_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_class_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_class_info_label_get" "', argument " "1"" of type '" "libtorrent::peer_class_info *""'"); 
  }
  arg1 = (libtorrent::peer_class_info *)(argp1);
  result = (std::string *) & ((arg1)->label);
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_class_info_upload_limit_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_class_info *arg1 = (libtorrent::peer_class_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_class_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_class_info_upload_limit_set" "', argument " "1"" of type '" "libtorrent::peer_class_info *""'"); 
  }
  arg1 = (libtorrent::peer_class_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_class_info_upload_limit_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->upload_limit = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_class_info_upload_limit_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_class_info *arg1 = (libtorrent::peer_class_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_class_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_class_info_upload_limit_get" "', argument " "1"" of type '" "libtorrent::peer_class_info *""'"); 
  }
  arg1 = (libtorrent::peer_class_info *)(argp1);
  result = (int) ((arg1)->upload_limit);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_class_info_download_limit_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_class_info *arg1 = (libtorrent::peer_class_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_class_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_class_info_download_limit_set" "', argument " "1"" of type '" "libtorrent::peer_class_info *""'"); 
  }
  arg1 = (libtorrent::peer_class_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_class_info_download_limit_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->download_limit = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_class_info_download_limit_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_class_info *arg1 = (libtorrent::peer_class_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_class_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_class_info_download_limit_get" "', argument " "1"" of type '" "libtorrent::peer_class_info *""'"); 
  }
  arg1 = (libtorrent::peer_class_info *)(argp1);
  result = (int) ((arg1)->download_limit);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_class_info_upload_priority_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_class_info *arg1 = (libtorrent::peer_class_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_class_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_class_info_upload_priority_set" "', argument " "1"" of type '" "libtorrent::peer_class_info *""'"); 
  }
  arg1 = (libtorrent::peer_class_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_class_info_upload_priority_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->upload_priority = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_class_info_upload_priority_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_class_info *arg1 = (libtorrent::peer_class_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_class_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_class_info_upload_priority_get" "', argument " "1"" of type '" "libtorrent::peer_class_info *""'"); 
  }
  arg1 = (libtorrent::peer_class_info *)(argp1);
  result = (int) ((arg1)->upload_priority);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_peer_class_info_download_priority_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::peer_class_info *arg1 = (libtorrent::peer_class_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_class_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_class_info_download_priority_set" "', argument " "1"" of type '" "libtorrent::peer_class_info *""'"); 
  }
  arg1 = (libtorrent::peer_class_info *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_class_info_download_priority_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->download_priority = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_peer_class_info_download_priority_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_class_info *arg1 = (libtorrent::peer_class_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_class_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_class_info_download_priority_get" "', argument " "1"" of type '" "libtorrent::peer_class_info *""'"); 
  }
  arg1 = (libtorrent::peer_class_info *)(argp1);
  result = (int) ((arg1)->download_priority);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_peer_class_info(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::peer_class_info *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_peer_class_info.");
  result = (libtorrent::peer_class_info *)new libtorrent::peer_class_info();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__peer_class_info, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_peer_class_info(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_peer_class_info(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_peer_class_info(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_peer_class_info(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::peer_class_info * arg1 = (libtorrent::peer_class_info *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_peer_class_type_filter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::peer_class_type_filter *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_peer_class_type_filter.");
  result = (libtorrent::peer_class_type_filter *)new libtorrent::peer_class_type_filter();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__peer_class_type_filter, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_peer_class_type_filter_tcp_socket(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_class_type_filter::tcp_socket));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_class_type_filter_utp_socket(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_class_type_filter::utp_socket));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_class_type_filter_ssl_tcp_socket(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_class_type_filter::ssl_tcp_socket));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_class_type_filter_ssl_utp_socket(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_class_type_filter::ssl_utp_socket));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_class_type_filter_i2p_socket(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_class_type_filter::i2p_socket));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_peer_class_type_filter_num_socket_types(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::peer_class_type_filter::num_socket_types));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_peer_class_type_filter_add(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_class_type_filter *arg1 = (libtorrent::peer_class_type_filter *) 0 ;
  libtorrent::peer_class_type_filter::socket_type_t arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_class_type_filter_add.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_class_type_filter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_class_type_filter_add" "', argument " "1"" of type '" "libtorrent::peer_class_type_filter *""'"); 
  }
  arg1 = (libtorrent::peer_class_type_filter *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_class_type_filter_add" "', argument " "2"" of type '" "libtorrent::peer_class_type_filter::socket_type_t""'");
  } 
  arg2 = (libtorrent::peer_class_type_filter::socket_type_t)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "peer_class_type_filter_add" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->add(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_class_type_filter_remove(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_class_type_filter *arg1 = (libtorrent::peer_class_type_filter *) 0 ;
  libtorrent::peer_class_type_filter::socket_type_t arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_class_type_filter_remove.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_class_type_filter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_class_type_filter_remove" "', argument " "1"" of type '" "libtorrent::peer_class_type_filter *""'"); 
  }
  arg1 = (libtorrent::peer_class_type_filter *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_class_type_filter_remove" "', argument " "2"" of type '" "libtorrent::peer_class_type_filter::socket_type_t""'");
  } 
  arg2 = (libtorrent::peer_class_type_filter::socket_type_t)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "peer_class_type_filter_remove" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->remove(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_class_type_filter_disallow(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_class_type_filter *arg1 = (libtorrent::peer_class_type_filter *) 0 ;
  libtorrent::peer_class_type_filter::socket_type_t arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_class_type_filter_disallow.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_class_type_filter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_class_type_filter_disallow" "', argument " "1"" of type '" "libtorrent::peer_class_type_filter *""'"); 
  }
  arg1 = (libtorrent::peer_class_type_filter *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_class_type_filter_disallow" "', argument " "2"" of type '" "libtorrent::peer_class_type_filter::socket_type_t""'");
  } 
  arg2 = (libtorrent::peer_class_type_filter::socket_type_t)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "peer_class_type_filter_disallow" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->disallow(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_class_type_filter_allow(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_class_type_filter *arg1 = (libtorrent::peer_class_type_filter *) 0 ;
  libtorrent::peer_class_type_filter::socket_type_t arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_class_type_filter_allow.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_class_type_filter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_class_type_filter_allow" "', argument " "1"" of type '" "libtorrent::peer_class_type_filter *""'"); 
  }
  arg1 = (libtorrent::peer_class_type_filter *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_class_type_filter_allow" "', argument " "2"" of type '" "libtorrent::peer_class_type_filter::socket_type_t""'");
  } 
  arg2 = (libtorrent::peer_class_type_filter::socket_type_t)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "peer_class_type_filter_allow" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->allow(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_class_type_filter_apply(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_class_type_filter *arg1 = (libtorrent::peer_class_type_filter *) 0 ;
  int arg2 ;
  std::uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  std::uint32_t result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_class_type_filter_apply.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_class_type_filter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_class_type_filter_apply" "', argument " "1"" of type '" "libtorrent::peer_class_type_filter *""'"); 
  }
  arg1 = (libtorrent::peer_class_type_filter *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_class_type_filter_apply" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "peer_class_type_filter_apply" "', argument " "3"" of type '" "std::uint32_t""'");
  } 
  arg3 = (std::uint32_t)(val3);
  result = (std::uint32_t)(arg1)->apply(arg2,arg3);
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_peer_class_type_filter(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_peer_class_type_filter(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_peer_class_type_filter(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_peer_class_type_filter(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::peer_class_type_filter * arg1 = (libtorrent::peer_class_type_filter *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_session_handle__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::session_handle *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_session_handle__SWIG_0.");
  result = (libtorrent::session_handle *)new libtorrent::session_handle();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__session_handle, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_session_handle__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::session_handle *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::session_handle *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_session_handle__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__session_handle,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_session_handle" "', argument " "1"" of type '" "libtorrent::session_handle &&""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_session_handle" "', argument " "1"" of type '" "libtorrent::session_handle &&""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  result = (libtorrent::session_handle *)new libtorrent::session_handle((libtorrent::session_handle &&)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__session_handle, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_session_handle(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_session_handle__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_session_handle__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_session_handle__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_session_handle__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_session_handle");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_is_valid(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_is_valid.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_is_valid" "', argument " "1"" of type '" "libtorrent::session_handle const *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  result = (bool)((libtorrent::session_handle const *)arg1)->is_valid();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_session_handle_save_settings(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::session_handle::save_settings));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_session_handle_save_dht_settings(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::session_handle::save_dht_settings));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_session_handle_save_dht_state(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::session_handle::save_dht_state));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_session_handle_save_encryption_settings(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::session_handle::save_encryption_settings));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_session_handle_save_state__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  libtorrent::entry *arg2 = 0 ;
  std::uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_save_state" "', argument " "1"" of type '" "libtorrent::session_handle const *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__entry,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_handle_save_state" "', argument " "2"" of type '" "libtorrent::entry &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "session_handle_save_state" "', argument " "2"" of type '" "libtorrent::entry &""'"); 
  }
  arg2 = (libtorrent::entry *)(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "session_handle_save_state" "', argument " "3"" of type '" "std::uint32_t""'");
  } 
  arg3 = (std::uint32_t)(val3);
  ((libtorrent::session_handle const *)arg1)->save_state(*arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_save_state__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  libtorrent::entry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_save_state" "', argument " "1"" of type '" "libtorrent::session_handle const *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__entry,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_handle_save_state" "', argument " "2"" of type '" "libtorrent::entry &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "session_handle_save_state" "', argument " "2"" of type '" "libtorrent::entry &""'"); 
  }
  arg2 = (libtorrent::entry *)(argp2);
  ((libtorrent::session_handle const *)arg1)->save_state(*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle__wrap_session_handle_save_state(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_session_handle_save_state__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_session_handle_save_state__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_session_handle_save_state__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_session_handle_save_state__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function save_state.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_load_state__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  libtorrent::bdecode_node *arg2 = 0 ;
  std::uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_load_state" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__bdecode_node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_handle_load_state" "', argument " "2"" of type '" "libtorrent::bdecode_node const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "session_handle_load_state" "', argument " "2"" of type '" "libtorrent::bdecode_node const &""'"); 
  }
  arg2 = (libtorrent::bdecode_node *)(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "session_handle_load_state" "', argument " "3"" of type '" "std::uint32_t""'");
  } 
  arg3 = (std::uint32_t)(val3);
  (arg1)->load_state((libtorrent::bdecode_node const &)*arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_load_state__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  libtorrent::bdecode_node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_load_state" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__bdecode_node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_handle_load_state" "', argument " "2"" of type '" "libtorrent::bdecode_node const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "session_handle_load_state" "', argument " "2"" of type '" "libtorrent::bdecode_node const &""'"); 
  }
  arg2 = (libtorrent::bdecode_node *)(argp2);
  (arg1)->load_state((libtorrent::bdecode_node const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle__wrap_session_handle_load_state(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_session_handle_load_state__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_session_handle_load_state__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_session_handle_load_state__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_session_handle_load_state__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function load_state.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_refresh_torrent_status__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  std::vector< libtorrent::torrent_status > *arg2 = (std::vector< libtorrent::torrent_status > *) 0 ;
  std::uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_refresh_torrent_status" "', argument " "1"" of type '" "libtorrent::session_handle const *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__vectorT_libtorrent__torrent_status_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_handle_refresh_torrent_status" "', argument " "2"" of type '" "std::vector< libtorrent::torrent_status > *""'"); 
  }
  arg2 = (std::vector< libtorrent::torrent_status > *)(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "session_handle_refresh_torrent_status" "', argument " "3"" of type '" "std::uint32_t""'");
  } 
  arg3 = (std::uint32_t)(val3);
  ((libtorrent::session_handle const *)arg1)->refresh_torrent_status(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_refresh_torrent_status__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  std::vector< libtorrent::torrent_status > *arg2 = (std::vector< libtorrent::torrent_status > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_refresh_torrent_status" "', argument " "1"" of type '" "libtorrent::session_handle const *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__vectorT_libtorrent__torrent_status_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_handle_refresh_torrent_status" "', argument " "2"" of type '" "std::vector< libtorrent::torrent_status > *""'"); 
  }
  arg2 = (std::vector< libtorrent::torrent_status > *)(argp2);
  ((libtorrent::session_handle const *)arg1)->refresh_torrent_status(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle__wrap_session_handle_refresh_torrent_status(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_session_handle_refresh_torrent_status__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_session_handle_refresh_torrent_status__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_session_handle_refresh_torrent_status__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_session_handle_refresh_torrent_status__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function refresh_torrent_status.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_post_torrent_updates__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  std::uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_post_torrent_updates" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "session_handle_post_torrent_updates" "', argument " "2"" of type '" "std::uint32_t""'");
  } 
  arg2 = (std::uint32_t)(val2);
  (arg1)->post_torrent_updates(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_post_torrent_updates__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_post_torrent_updates" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  (arg1)->post_torrent_updates();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle__wrap_session_handle_post_torrent_updates(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_session_handle_post_torrent_updates__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_session_handle_post_torrent_updates__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_session_handle_post_torrent_updates__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_session_handle_post_torrent_updates__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function post_torrent_updates.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_post_session_stats(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_post_session_stats.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_post_session_stats" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  (arg1)->post_session_stats();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_post_dht_stats(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_post_dht_stats.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_post_dht_stats" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  (arg1)->post_dht_stats();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_find_torrent(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  libtorrent::sha1_hash *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  libtorrent::torrent_handle result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_find_torrent.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_find_torrent" "', argument " "1"" of type '" "libtorrent::session_handle const *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__sha1_hash,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_handle_find_torrent" "', argument " "2"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "session_handle_find_torrent" "', argument " "2"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  arg2 = (libtorrent::sha1_hash *)(argp2);
  result = ((libtorrent::session_handle const *)arg1)->find_torrent((libtorrent::sha1_hash const &)*arg2);
  jsresult = SWIG_NewPointerObj((new libtorrent::torrent_handle((const libtorrent::torrent_handle&)(result))), SWIGTYPE_p_libtorrent__torrent_handle, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_get_torrents(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::torrent_handle > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_get_torrents.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_get_torrents" "', argument " "1"" of type '" "libtorrent::session_handle const *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  result = ((libtorrent::session_handle const *)arg1)->get_torrents();
  jsresult = SWIG_NewPointerObj((new std::vector< libtorrent::torrent_handle >((const std::vector< libtorrent::torrent_handle >&)(result))), SWIGTYPE_p_std__vectorT_libtorrent__torrent_handle_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_add_torrent(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  libtorrent::add_torrent_params *arg2 = 0 ;
  libtorrent::error_code *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  libtorrent::torrent_handle result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_add_torrent.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_add_torrent" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__add_torrent_params,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_handle_add_torrent" "', argument " "2"" of type '" "libtorrent::add_torrent_params const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "session_handle_add_torrent" "', argument " "2"" of type '" "libtorrent::add_torrent_params const &""'"); 
  }
  arg2 = (libtorrent::add_torrent_params *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_boost__system__error_code,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "session_handle_add_torrent" "', argument " "3"" of type '" "libtorrent::error_code &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "session_handle_add_torrent" "', argument " "3"" of type '" "libtorrent::error_code &""'"); 
  }
  arg3 = (libtorrent::error_code *)(argp3);
  result = (arg1)->add_torrent((libtorrent::add_torrent_params const &)*arg2,*arg3);
  jsresult = SWIG_NewPointerObj((new libtorrent::torrent_handle((const libtorrent::torrent_handle&)(result))), SWIGTYPE_p_libtorrent__torrent_handle, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_async_add_torrent(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  libtorrent::add_torrent_params *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_async_add_torrent.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_async_add_torrent" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__add_torrent_params,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_handle_async_add_torrent" "', argument " "2"" of type '" "libtorrent::add_torrent_params const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "session_handle_async_add_torrent" "', argument " "2"" of type '" "libtorrent::add_torrent_params const &""'"); 
  }
  arg2 = (libtorrent::add_torrent_params *)(argp2);
  (arg1)->async_add_torrent((libtorrent::add_torrent_params const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_pause(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_pause.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_pause" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  (arg1)->pause();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_resume(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_resume.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_resume" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  (arg1)->resume();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_is_paused(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_is_paused.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_is_paused" "', argument " "1"" of type '" "libtorrent::session_handle const *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  result = (bool)((libtorrent::session_handle const *)arg1)->is_paused();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_session_handle_disk_cache_no_pieces(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::session_handle::disk_cache_no_pieces));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_session_handle_set_dht_settings(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  libtorrent::dht_settings *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_set_dht_settings.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_set_dht_settings" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__dht_settings,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_handle_set_dht_settings" "', argument " "2"" of type '" "libtorrent::dht_settings const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "session_handle_set_dht_settings" "', argument " "2"" of type '" "libtorrent::dht_settings const &""'"); 
  }
  arg2 = (libtorrent::dht_settings *)(argp2);
  (arg1)->set_dht_settings((libtorrent::dht_settings const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_is_dht_running(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_is_dht_running.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_is_dht_running" "', argument " "1"" of type '" "libtorrent::session_handle const *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  result = (bool)((libtorrent::session_handle const *)arg1)->is_dht_running();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_get_dht_settings(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::dht_settings result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_get_dht_settings.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_get_dht_settings" "', argument " "1"" of type '" "libtorrent::session_handle const *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  result = ((libtorrent::session_handle const *)arg1)->get_dht_settings();
  jsresult = SWIG_NewPointerObj((new libtorrent::dht_settings((const libtorrent::dht_settings&)(result))), SWIGTYPE_p_libtorrent__dht_settings, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_add_dht_node(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  std::pair< std::string,int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_add_dht_node.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_add_dht_node" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__pairT_std__string_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_handle_add_dht_node" "', argument " "2"" of type '" "std::pair< std::string,int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "session_handle_add_dht_node" "', argument " "2"" of type '" "std::pair< std::string,int > const &""'"); 
  }
  arg2 = (std::pair< std::string,int > *)(argp2);
  (arg1)->add_dht_node((std::pair< std::string,int > const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_add_dht_router(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  std::pair< std::string,int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_add_dht_router.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_add_dht_router" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__pairT_std__string_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_handle_add_dht_router" "', argument " "2"" of type '" "std::pair< std::string,int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "session_handle_add_dht_router" "', argument " "2"" of type '" "std::pair< std::string,int > const &""'"); 
  }
  arg2 = (std::pair< std::string,int > *)(argp2);
  (arg1)->add_dht_router((std::pair< std::string,int > const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_dht_get_item__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  libtorrent::sha1_hash *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_dht_get_item" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__sha1_hash,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_handle_dht_get_item" "', argument " "2"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "session_handle_dht_get_item" "', argument " "2"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  arg2 = (libtorrent::sha1_hash *)(argp2);
  (arg1)->dht_get_item((libtorrent::sha1_hash const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_dht_put_item__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  libtorrent::entry arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  libtorrent::sha1_hash result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_dht_put_item" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__entry,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_handle_dht_put_item" "', argument " "2"" of type '" "libtorrent::entry""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "session_handle_dht_put_item" "', argument " "2"" of type '" "libtorrent::entry""'");
    } else {
      arg2 = *((libtorrent::entry *)(argp2));
    }
  }
  result = (arg1)->dht_put_item(arg2);
  jsresult = SWIG_NewPointerObj((new libtorrent::sha1_hash((const libtorrent::sha1_hash&)(result))), SWIGTYPE_p_libtorrent__sha1_hash, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_dht_get_peers(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  libtorrent::sha1_hash *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_dht_get_peers.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_dht_get_peers" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__sha1_hash,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_handle_dht_get_peers" "', argument " "2"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "session_handle_dht_get_peers" "', argument " "2"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  arg2 = (libtorrent::sha1_hash *)(argp2);
  (arg1)->dht_get_peers((libtorrent::sha1_hash const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_dht_announce__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  libtorrent::sha1_hash *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_dht_announce" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__sha1_hash,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_handle_dht_announce" "', argument " "2"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "session_handle_dht_announce" "', argument " "2"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  arg2 = (libtorrent::sha1_hash *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "session_handle_dht_announce" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "session_handle_dht_announce" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  (arg1)->dht_announce((libtorrent::sha1_hash const &)*arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_dht_announce__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  libtorrent::sha1_hash *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_dht_announce" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__sha1_hash,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_handle_dht_announce" "', argument " "2"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "session_handle_dht_announce" "', argument " "2"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  arg2 = (libtorrent::sha1_hash *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "session_handle_dht_announce" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->dht_announce((libtorrent::sha1_hash const &)*arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_dht_announce__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  libtorrent::sha1_hash *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_dht_announce" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__sha1_hash,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_handle_dht_announce" "', argument " "2"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "session_handle_dht_announce" "', argument " "2"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  arg2 = (libtorrent::sha1_hash *)(argp2);
  (arg1)->dht_announce((libtorrent::sha1_hash const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle__wrap_session_handle_dht_announce(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_session_handle_dht_announce__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_session_handle_dht_announce__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_session_handle_dht_announce__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_session_handle_dht_announce__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_session_handle_dht_announce__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_session_handle_dht_announce__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function dht_announce.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_dht_direct_request__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  libtorrent::udp::endpoint arg2 ;
  libtorrent::entry *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_dht_direct_request" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__udp__endpoint,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_handle_dht_direct_request" "', argument " "2"" of type '" "libtorrent::udp::endpoint""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "session_handle_dht_direct_request" "', argument " "2"" of type '" "libtorrent::udp::endpoint""'");
    } else {
      arg2 = *((libtorrent::udp::endpoint *)(argp2));
    }
  }
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_libtorrent__entry,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "session_handle_dht_direct_request" "', argument " "3"" of type '" "libtorrent::entry const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "session_handle_dht_direct_request" "', argument " "3"" of type '" "libtorrent::entry const &""'"); 
  }
  arg3 = (libtorrent::entry *)(argp3);
  (arg1)->dht_direct_request(arg2,(libtorrent::entry const &)*arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_set_ip_filter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  libtorrent::ip_filter *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_set_ip_filter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_set_ip_filter" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__ip_filter,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_handle_set_ip_filter" "', argument " "2"" of type '" "libtorrent::ip_filter const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "session_handle_set_ip_filter" "', argument " "2"" of type '" "libtorrent::ip_filter const &""'"); 
  }
  arg2 = (libtorrent::ip_filter *)(argp2);
  (arg1)->set_ip_filter((libtorrent::ip_filter const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_get_ip_filter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::ip_filter result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_get_ip_filter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_get_ip_filter" "', argument " "1"" of type '" "libtorrent::session_handle const *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  result = ((libtorrent::session_handle const *)arg1)->get_ip_filter();
  jsresult = SWIG_NewPointerObj((new libtorrent::ip_filter((const libtorrent::ip_filter&)(result))), SWIGTYPE_p_libtorrent__ip_filter, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_set_port_filter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  libtorrent::port_filter *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_set_port_filter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_set_port_filter" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__port_filter,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_handle_set_port_filter" "', argument " "2"" of type '" "libtorrent::port_filter const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "session_handle_set_port_filter" "', argument " "2"" of type '" "libtorrent::port_filter const &""'"); 
  }
  arg2 = (libtorrent::port_filter *)(argp2);
  (arg1)->set_port_filter((libtorrent::port_filter const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_id(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::peer_id result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_id.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_id" "', argument " "1"" of type '" "libtorrent::session_handle const *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  result = ((libtorrent::session_handle const *)arg1)->id();
  jsresult = SWIG_NewPointerObj((new libtorrent::peer_id((const libtorrent::peer_id&)(result))), SWIGTYPE_p_libtorrent__sha1_hash, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_set_key(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_set_key.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_set_key" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "session_handle_set_key" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->set_key(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_session_handle_global_peer_class_id(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::session_handle::global_peer_class_id));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_session_handle_tcp_peer_class_id(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::session_handle::tcp_peer_class_id));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_session_handle_local_peer_class_id(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::session_handle::local_peer_class_id));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_session_handle_listen_port(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_listen_port.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_listen_port" "', argument " "1"" of type '" "libtorrent::session_handle const *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  result = (unsigned short)((libtorrent::session_handle const *)arg1)->listen_port();
  jsresult = SWIG_From_unsigned_SS_short((unsigned short)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_ssl_listen_port(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_ssl_listen_port.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_ssl_listen_port" "', argument " "1"" of type '" "libtorrent::session_handle const *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  result = (unsigned short)((libtorrent::session_handle const *)arg1)->ssl_listen_port();
  jsresult = SWIG_From_unsigned_SS_short((unsigned short)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_is_listening(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_is_listening.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_is_listening" "', argument " "1"" of type '" "libtorrent::session_handle const *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  result = (bool)((libtorrent::session_handle const *)arg1)->is_listening();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_set_peer_class_filter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  libtorrent::ip_filter *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_set_peer_class_filter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_set_peer_class_filter" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__ip_filter,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_handle_set_peer_class_filter" "', argument " "2"" of type '" "libtorrent::ip_filter const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "session_handle_set_peer_class_filter" "', argument " "2"" of type '" "libtorrent::ip_filter const &""'"); 
  }
  arg2 = (libtorrent::ip_filter *)(argp2);
  (arg1)->set_peer_class_filter((libtorrent::ip_filter const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_set_peer_class_type_filter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  libtorrent::peer_class_type_filter *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_set_peer_class_type_filter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_set_peer_class_type_filter" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__peer_class_type_filter,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_handle_set_peer_class_type_filter" "', argument " "2"" of type '" "libtorrent::peer_class_type_filter const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "session_handle_set_peer_class_type_filter" "', argument " "2"" of type '" "libtorrent::peer_class_type_filter const &""'"); 
  }
  arg2 = (libtorrent::peer_class_type_filter *)(argp2);
  (arg1)->set_peer_class_type_filter((libtorrent::peer_class_type_filter const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_create_peer_class(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_create_peer_class.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_create_peer_class" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_handle_create_peer_class" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (int)(arg1)->create_peer_class((char const *)arg2);
  jsresult = SWIG_From_int((int)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_delete_peer_class(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_delete_peer_class.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_delete_peer_class" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "session_handle_delete_peer_class" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->delete_peer_class(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_get_peer_class(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  libtorrent::peer_class_info result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_get_peer_class.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_get_peer_class" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "session_handle_get_peer_class" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (arg1)->get_peer_class(arg2);
  jsresult = SWIG_NewPointerObj((new libtorrent::peer_class_info((const libtorrent::peer_class_info&)(result))), SWIGTYPE_p_libtorrent__peer_class_info, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_set_peer_class(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  int arg2 ;
  libtorrent::peer_class_info *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_set_peer_class.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_set_peer_class" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "session_handle_set_peer_class" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_libtorrent__peer_class_info,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "session_handle_set_peer_class" "', argument " "3"" of type '" "libtorrent::peer_class_info const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "session_handle_set_peer_class" "', argument " "3"" of type '" "libtorrent::peer_class_info const &""'"); 
  }
  arg3 = (libtorrent::peer_class_info *)(argp3);
  (arg1)->set_peer_class(arg2,(libtorrent::peer_class_info const &)*arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_session_handle_delete_files(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::session_handle::delete_files));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_session_handle_delete_partfile(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::session_handle::delete_partfile));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_session_handle_add_default_plugins(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::session_handle::add_default_plugins));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_session_handle_start_default_features(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::session_handle::start_default_features));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_session_handle_remove_torrent__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  libtorrent::torrent_handle *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_remove_torrent" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__torrent_handle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_handle_remove_torrent" "', argument " "2"" of type '" "libtorrent::torrent_handle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "session_handle_remove_torrent" "', argument " "2"" of type '" "libtorrent::torrent_handle const &""'"); 
  }
  arg2 = (libtorrent::torrent_handle *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "session_handle_remove_torrent" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->remove_torrent((libtorrent::torrent_handle const &)*arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_remove_torrent__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  libtorrent::torrent_handle *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_remove_torrent" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__torrent_handle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_handle_remove_torrent" "', argument " "2"" of type '" "libtorrent::torrent_handle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "session_handle_remove_torrent" "', argument " "2"" of type '" "libtorrent::torrent_handle const &""'"); 
  }
  arg2 = (libtorrent::torrent_handle *)(argp2);
  (arg1)->remove_torrent((libtorrent::torrent_handle const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle__wrap_session_handle_remove_torrent(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_session_handle_remove_torrent__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_session_handle_remove_torrent__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_session_handle_remove_torrent__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_session_handle_remove_torrent__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function remove_torrent.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_apply_settings(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  libtorrent::settings_pack arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_apply_settings.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_apply_settings" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__settings_pack,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_handle_apply_settings" "', argument " "2"" of type '" "libtorrent::settings_pack""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "session_handle_apply_settings" "', argument " "2"" of type '" "libtorrent::settings_pack""'");
    } else {
      arg2 = *((libtorrent::settings_pack *)(argp2));
    }
  }
  (arg1)->apply_settings(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_get_settings(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::settings_pack result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_get_settings.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_get_settings" "', argument " "1"" of type '" "libtorrent::session_handle const *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  result = ((libtorrent::session_handle const *)arg1)->get_settings();
  jsresult = SWIG_NewPointerObj((new libtorrent::settings_pack((const libtorrent::settings_pack&)(result))), SWIGTYPE_p_libtorrent__settings_pack, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_pop_alerts(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  std::vector< libtorrent::alert * > *arg2 = (std::vector< libtorrent::alert * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_pop_alerts.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_pop_alerts" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__vectorT_libtorrent__alert_p_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_handle_pop_alerts" "', argument " "2"" of type '" "std::vector< libtorrent::alert * > *""'"); 
  }
  arg2 = (std::vector< libtorrent::alert * > *)(argp2);
  (arg1)->pop_alerts(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_session_handle_udp(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::session_handle::udp));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_session_handle_tcp(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::session_handle::tcp));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_session_handle_add_port_mapping(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  libtorrent::session_handle::protocol_type arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_add_port_mapping.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_add_port_mapping" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "session_handle_add_port_mapping" "', argument " "2"" of type '" "libtorrent::session_handle::protocol_type""'");
  } 
  arg2 = (libtorrent::session_handle::protocol_type)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "session_handle_add_port_mapping" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "session_handle_add_port_mapping" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  result = (int)(arg1)->add_port_mapping(arg2,arg3,arg4);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_delete_port_mapping(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_delete_port_mapping.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_delete_port_mapping" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "session_handle_delete_port_mapping" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->delete_port_mapping(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_dht_get_item__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  std::vector< int8_t > *arg2 = 0 ;
  std::vector< int8_t > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_dht_get_item" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_signed_char_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_handle_dht_get_item" "', argument " "2"" of type '" "std::vector< int8_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "session_handle_dht_get_item" "', argument " "2"" of type '" "std::vector< int8_t > &""'"); 
  }
  arg2 = (std::vector< int8_t > *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_std__vectorT_signed_char_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "session_handle_dht_get_item" "', argument " "3"" of type '" "std::vector< int8_t > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "session_handle_dht_get_item" "', argument " "3"" of type '" "std::vector< int8_t > &""'"); 
  }
  arg3 = (std::vector< int8_t > *)(argp3);
  libtorrent_session_handle_dht_get_item__SWIG_1(arg1,*arg2,*arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle__wrap_session_handle_dht_get_item(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_session_handle_dht_get_item__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_session_handle_dht_get_item__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_session_handle_dht_get_item__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_session_handle_dht_get_item__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function dht_get_item.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_dht_put_item__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  std::vector< int8_t > *arg2 = 0 ;
  std::vector< int8_t > *arg3 = 0 ;
  libtorrent::entry *arg4 = 0 ;
  std::vector< int8_t > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_dht_put_item" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_signed_char_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_handle_dht_put_item" "', argument " "2"" of type '" "std::vector< int8_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "session_handle_dht_put_item" "', argument " "2"" of type '" "std::vector< int8_t > &""'"); 
  }
  arg2 = (std::vector< int8_t > *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_std__vectorT_signed_char_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "session_handle_dht_put_item" "', argument " "3"" of type '" "std::vector< int8_t > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "session_handle_dht_put_item" "', argument " "3"" of type '" "std::vector< int8_t > &""'"); 
  }
  arg3 = (std::vector< int8_t > *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_libtorrent__entry,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "session_handle_dht_put_item" "', argument " "4"" of type '" "libtorrent::entry &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "session_handle_dht_put_item" "', argument " "4"" of type '" "libtorrent::entry &""'"); 
  }
  arg4 = (libtorrent::entry *)(argp4);
  res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_std__vectorT_signed_char_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "session_handle_dht_put_item" "', argument " "5"" of type '" "std::vector< int8_t > &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "session_handle_dht_put_item" "', argument " "5"" of type '" "std::vector< int8_t > &""'"); 
  }
  arg5 = (std::vector< int8_t > *)(argp5);
  libtorrent_session_handle_dht_put_item__SWIG_1(arg1,*arg2,*arg3,*arg4,*arg5);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle__wrap_session_handle_dht_put_item(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_session_handle_dht_put_item__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_session_handle_dht_put_item__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_session_handle_dht_put_item__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_session_handle_dht_put_item__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function dht_put_item.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_dht_direct_request__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  libtorrent::udp::endpoint arg2 ;
  libtorrent::entry *arg3 = 0 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  long long val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_dht_direct_request" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__udp__endpoint,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_handle_dht_direct_request" "', argument " "2"" of type '" "libtorrent::udp::endpoint""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "session_handle_dht_direct_request" "', argument " "2"" of type '" "libtorrent::udp::endpoint""'");
    } else {
      arg2 = *((libtorrent::udp::endpoint *)(argp2));
    }
  }
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_libtorrent__entry,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "session_handle_dht_direct_request" "', argument " "3"" of type '" "libtorrent::entry const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "session_handle_dht_direct_request" "', argument " "3"" of type '" "libtorrent::entry const &""'"); 
  }
  arg3 = (libtorrent::entry *)(argp3);
  ecode4 = SWIG_AsVal_long_SS_long(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "session_handle_dht_direct_request" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = (int64_t)(val4);
  libtorrent_session_handle_dht_direct_request__SWIG_1(arg1,arg2,(libtorrent::entry const &)*arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle__wrap_session_handle_dht_direct_request(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_session_handle_dht_direct_request__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_session_handle_dht_direct_request__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_session_handle_dht_direct_request__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_session_handle_dht_direct_request__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function dht_direct_request.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_wait_for_alert_ms(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  libtorrent::alert *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_wait_for_alert_ms.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_wait_for_alert_ms" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "session_handle_wait_for_alert_ms" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = (int64_t)(val2);
  result = (libtorrent::alert *)libtorrent_session_handle_wait_for_alert_ms(arg1,arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__alert, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_set_alert_notify_callback(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  alert_notify_callback *arg2 = (alert_notify_callback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_set_alert_notify_callback.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_set_alert_notify_callback" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_alert_notify_callback, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_handle_set_alert_notify_callback" "', argument " "2"" of type '" "alert_notify_callback *""'"); 
  }
  arg2 = (alert_notify_callback *)(argp2);
  libtorrent_session_handle_set_alert_notify_callback(arg1,arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_session_handle_add_extension(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_handle *arg1 = (libtorrent::session_handle *) 0 ;
  swig_plugin *arg2 = (swig_plugin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_handle_add_extension.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_handle_add_extension" "', argument " "1"" of type '" "libtorrent::session_handle *""'"); 
  }
  arg1 = (libtorrent::session_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_swig_plugin, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_handle_add_extension" "', argument " "2"" of type '" "swig_plugin *""'"); 
  }
  arg2 = (swig_plugin *)(argp2);
  libtorrent_session_handle_add_extension(arg1,arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_session_handle(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_session_handle(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_session_handle(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_session_handle(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::session_handle * arg1 = (libtorrent::session_handle *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap_dht_state_nid_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht::dht_state *arg1 = (libtorrent::dht::dht_state *) 0 ;
  libtorrent::dht::node_id *arg2 = (libtorrent::dht::node_id *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht__dht_state, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_state_nid_set" "', argument " "1"" of type '" "libtorrent::dht::dht_state *""'"); 
  }
  arg1 = (libtorrent::dht::dht_state *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dht_state_nid_set" "', argument " "2"" of type '" "libtorrent::dht::node_id *""'"); 
  }
  arg2 = (libtorrent::dht::node_id *)(argp2);
  if (arg1) (arg1)->nid = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_state_nid_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht::dht_state *arg1 = (libtorrent::dht::dht_state *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::dht::node_id *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht__dht_state, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_state_nid_get" "', argument " "1"" of type '" "libtorrent::dht::dht_state *""'"); 
  }
  arg1 = (libtorrent::dht::dht_state *)(argp1);
  result = (libtorrent::dht::node_id *)& ((arg1)->nid);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_state_nid6_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht::dht_state *arg1 = (libtorrent::dht::dht_state *) 0 ;
  libtorrent::dht::node_id *arg2 = (libtorrent::dht::node_id *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht__dht_state, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_state_nid6_set" "', argument " "1"" of type '" "libtorrent::dht::dht_state *""'"); 
  }
  arg1 = (libtorrent::dht::dht_state *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dht_state_nid6_set" "', argument " "2"" of type '" "libtorrent::dht::node_id *""'"); 
  }
  arg2 = (libtorrent::dht::node_id *)(argp2);
  if (arg1) (arg1)->nid6 = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_state_nid6_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht::dht_state *arg1 = (libtorrent::dht::dht_state *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::dht::node_id *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht__dht_state, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_state_nid6_get" "', argument " "1"" of type '" "libtorrent::dht::dht_state *""'"); 
  }
  arg1 = (libtorrent::dht::dht_state *)(argp1);
  result = (libtorrent::dht::node_id *)& ((arg1)->nid6);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_state_nodes_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht::dht_state *arg1 = (libtorrent::dht::dht_state *) 0 ;
  std::vector< libtorrent::udp::endpoint > *arg2 = (std::vector< libtorrent::udp::endpoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht__dht_state, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_state_nodes_set" "', argument " "1"" of type '" "libtorrent::dht::dht_state *""'"); 
  }
  arg1 = (libtorrent::dht::dht_state *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_std__vectorT_libtorrent__udp__endpoint_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dht_state_nodes_set" "', argument " "2"" of type '" "std::vector< libtorrent::udp::endpoint > *""'"); 
  }
  arg2 = (std::vector< libtorrent::udp::endpoint > *)(argp2);
  if (arg1) (arg1)->nodes = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_state_nodes_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht::dht_state *arg1 = (libtorrent::dht::dht_state *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::udp::endpoint > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht__dht_state, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_state_nodes_get" "', argument " "1"" of type '" "libtorrent::dht::dht_state *""'"); 
  }
  arg1 = (libtorrent::dht::dht_state *)(argp1);
  result = (std::vector< libtorrent::udp::endpoint > *)& ((arg1)->nodes);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_libtorrent__udp__endpoint_t, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dht_state_nodes6_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::dht::dht_state *arg1 = (libtorrent::dht::dht_state *) 0 ;
  std::vector< libtorrent::udp::endpoint > *arg2 = (std::vector< libtorrent::udp::endpoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht__dht_state, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_state_nodes6_set" "', argument " "1"" of type '" "libtorrent::dht::dht_state *""'"); 
  }
  arg1 = (libtorrent::dht::dht_state *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_std__vectorT_libtorrent__udp__endpoint_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dht_state_nodes6_set" "', argument " "2"" of type '" "std::vector< libtorrent::udp::endpoint > *""'"); 
  }
  arg2 = (std::vector< libtorrent::udp::endpoint > *)(argp2);
  if (arg1) (arg1)->nodes6 = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dht_state_nodes6_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht::dht_state *arg1 = (libtorrent::dht::dht_state *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::udp::endpoint > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht__dht_state, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_state_nodes6_get" "', argument " "1"" of type '" "libtorrent::dht::dht_state *""'"); 
  }
  arg1 = (libtorrent::dht::dht_state *)(argp1);
  result = (std::vector< libtorrent::udp::endpoint > *)& ((arg1)->nodes6);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_libtorrent__udp__endpoint_t, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_dht_state_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht::dht_state *arg1 = (libtorrent::dht::dht_state *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dht_state_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__dht__dht_state, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dht_state_clear" "', argument " "1"" of type '" "libtorrent::dht::dht_state *""'"); 
  }
  arg1 = (libtorrent::dht::dht_state *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_dht_state(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::dht::dht_state *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_dht_state.");
  result = (libtorrent::dht::dht_state *)new libtorrent::dht::dht_state();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__dht__dht_state, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_dht_state(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_dht_state(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_dht_state(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_dht_state(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::dht::dht_state * arg1 = (libtorrent::dht::dht_state *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_read_dht_state(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bdecode_node *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libtorrent::dht::dht_state result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_read_dht_state.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__bdecode_node,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "read_dht_state" "', argument " "1"" of type '" "libtorrent::bdecode_node const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "read_dht_state" "', argument " "1"" of type '" "libtorrent::bdecode_node const &""'"); 
  }
  arg1 = (libtorrent::bdecode_node *)(argp1);
  result = libtorrent::dht::read_dht_state((libtorrent::bdecode_node const &)*arg1);
  jsresult = SWIG_NewPointerObj((new libtorrent::dht::dht_state((const libtorrent::dht::dht_state&)(result))), SWIGTYPE_p_libtorrent__dht__dht_state, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_save_dht_state(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::dht::dht_state *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libtorrent::entry result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_save_dht_state.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__dht__dht_state,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "save_dht_state" "', argument " "1"" of type '" "libtorrent::dht::dht_state const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "save_dht_state" "', argument " "1"" of type '" "libtorrent::dht::dht_state const &""'"); 
  }
  arg1 = (libtorrent::dht::dht_state *)(argp1);
  result = libtorrent::dht::save_dht_state((libtorrent::dht::dht_state const &)*arg1);
  jsresult = SWIG_NewPointerObj((new libtorrent::entry((const libtorrent::entry&)(result))), SWIGTYPE_p_libtorrent__entry, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_min_memory_usage(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::settings_pack result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_min_memory_usage.");
  
  result = libtorrent::min_memory_usage();
  jsresult = SWIG_NewPointerObj((new libtorrent::settings_pack((const libtorrent::settings_pack&)(result))), SWIGTYPE_p_libtorrent__settings_pack, SWIG_POINTER_OWN |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_high_performance_seed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::settings_pack result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_high_performance_seed.");
  
  result = libtorrent::high_performance_seed();
  jsresult = SWIG_NewPointerObj((new libtorrent::settings_pack((const libtorrent::settings_pack&)(result))), SWIGTYPE_p_libtorrent__settings_pack, SWIG_POINTER_OWN |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_session_proxy__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::session_proxy *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_session_proxy__SWIG_0.");
  result = (libtorrent::session_proxy *)new libtorrent::session_proxy();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__session_proxy, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_session_proxy(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_session_proxy(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_session_proxy(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_session_proxy(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::session_proxy * arg1 = (libtorrent::session_proxy *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_session_proxy__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::session_proxy *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libtorrent::session_proxy *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_session_proxy__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__session_proxy,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_session_proxy" "', argument " "1"" of type '" "libtorrent::session_proxy const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_session_proxy" "', argument " "1"" of type '" "libtorrent::session_proxy const &""'"); 
  }
  arg1 = (libtorrent::session_proxy *)(argp1);
  result = (libtorrent::session_proxy *)new libtorrent::session_proxy((libtorrent::session_proxy const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__session_proxy, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_session_proxy(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_session_proxy__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_session_proxy__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_session_proxy__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_session_proxy__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_session_proxy");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_session_params__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::settings_pack arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  libtorrent::session_params *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_session_params__SWIG_0.");
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__settings_pack,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_session_params" "', argument " "1"" of type '" "libtorrent::settings_pack""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_session_params" "', argument " "1"" of type '" "libtorrent::settings_pack""'");
    } else {
      arg1 = *((libtorrent::settings_pack *)(argp1));
    }
  }
  result = (libtorrent::session_params *)new libtorrent::session_params(arg1);
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__session_params, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_session_params__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::session_params *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_session_params__SWIG_1.");
  result = (libtorrent::session_params *)new libtorrent::session_params();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__session_params, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_session_params__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::session_params *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libtorrent::session_params *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_session_params__SWIG_2.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__session_params,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_session_params" "', argument " "1"" of type '" "libtorrent::session_params const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_session_params" "', argument " "1"" of type '" "libtorrent::session_params const &""'"); 
  }
  arg1 = (libtorrent::session_params *)(argp1);
  result = (libtorrent::session_params *)new libtorrent::session_params((libtorrent::session_params const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__session_params, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_session_params(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_session_params__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_session_params__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_session_params__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_session_params__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_session_params__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_session_params__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_session_params");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_session_params_settings_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::session_params *arg1 = (libtorrent::session_params *) 0 ;
  libtorrent::settings_pack *arg2 = (libtorrent::settings_pack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_params_settings_set" "', argument " "1"" of type '" "libtorrent::session_params *""'"); 
  }
  arg1 = (libtorrent::session_params *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__settings_pack, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_params_settings_set" "', argument " "2"" of type '" "libtorrent::settings_pack *""'"); 
  }
  arg2 = (libtorrent::settings_pack *)(argp2);
  if (arg1) (arg1)->settings = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_session_params_settings_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_params *arg1 = (libtorrent::session_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::settings_pack *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_params_settings_get" "', argument " "1"" of type '" "libtorrent::session_params *""'"); 
  }
  arg1 = (libtorrent::session_params *)(argp1);
  result = (libtorrent::settings_pack *)& ((arg1)->settings);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__settings_pack, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_session_params_dht_settings_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::session_params *arg1 = (libtorrent::session_params *) 0 ;
  libtorrent::dht_settings *arg2 = (libtorrent::dht_settings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_params_dht_settings_set" "', argument " "1"" of type '" "libtorrent::session_params *""'"); 
  }
  arg1 = (libtorrent::session_params *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_params_dht_settings_set" "', argument " "2"" of type '" "libtorrent::dht_settings *""'"); 
  }
  arg2 = (libtorrent::dht_settings *)(argp2);
  if (arg1) (arg1)->dht_settings = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_session_params_dht_settings_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_params *arg1 = (libtorrent::session_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::dht_settings *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_params_dht_settings_get" "', argument " "1"" of type '" "libtorrent::session_params *""'"); 
  }
  arg1 = (libtorrent::session_params *)(argp1);
  result = (libtorrent::dht_settings *)& ((arg1)->dht_settings);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__dht_settings, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_session_params_dht_state_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::session_params *arg1 = (libtorrent::session_params *) 0 ;
  libtorrent::dht::dht_state *arg2 = (libtorrent::dht::dht_state *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_params_dht_state_set" "', argument " "1"" of type '" "libtorrent::session_params *""'"); 
  }
  arg1 = (libtorrent::session_params *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__dht__dht_state, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "session_params_dht_state_set" "', argument " "2"" of type '" "libtorrent::dht::dht_state *""'"); 
  }
  arg2 = (libtorrent::dht::dht_state *)(argp2);
  if (arg1) (arg1)->dht_state = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_session_params_dht_state_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session_params *arg1 = (libtorrent::session_params *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::dht::dht_state *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__session_params, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_params_dht_state_get" "', argument " "1"" of type '" "libtorrent::session_params *""'"); 
  }
  arg1 = (libtorrent::session_params *)(argp1);
  result = (libtorrent::dht::dht_state *)& ((arg1)->dht_state);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__dht__dht_state, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_session_params(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_session_params(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_session_params(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_session_params(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::session_params * arg1 = (libtorrent::session_params *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_read_session_params__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bdecode_node *arg1 = 0 ;
  std::uint32_t arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  libtorrent::session_params result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__bdecode_node,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "read_session_params" "', argument " "1"" of type '" "libtorrent::bdecode_node const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "read_session_params" "', argument " "1"" of type '" "libtorrent::bdecode_node const &""'"); 
  }
  arg1 = (libtorrent::bdecode_node *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "read_session_params" "', argument " "2"" of type '" "std::uint32_t""'");
  } 
  arg2 = (std::uint32_t)(val2);
  result = libtorrent::read_session_params((libtorrent::bdecode_node const &)*arg1,arg2);
  jsresult = SWIG_NewPointerObj((new libtorrent::session_params((const libtorrent::session_params&)(result))), SWIGTYPE_p_libtorrent__session_params, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_read_session_params__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bdecode_node *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libtorrent::session_params result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__bdecode_node,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "read_session_params" "', argument " "1"" of type '" "libtorrent::bdecode_node const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "read_session_params" "', argument " "1"" of type '" "libtorrent::bdecode_node const &""'"); 
  }
  arg1 = (libtorrent::bdecode_node *)(argp1);
  result = libtorrent::read_session_params((libtorrent::bdecode_node const &)*arg1);
  jsresult = SWIG_NewPointerObj((new libtorrent::session_params((const libtorrent::session_params&)(result))), SWIGTYPE_p_libtorrent__session_params, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent__wrap_read_session_params(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_read_session_params__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_read_session_params__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_read_session_params__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_read_session_params__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function read_session_params.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_session__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::session_params arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  libtorrent::session *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_session__SWIG_0.");
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__session_params,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_session" "', argument " "1"" of type '" "libtorrent::session_params""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_session" "', argument " "1"" of type '" "libtorrent::session_params""'");
    } else {
      arg1 = *((libtorrent::session_params *)(argp1));
    }
  }
  result = (libtorrent::session *)new libtorrent::session(arg1);
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__session, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_session__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::session *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_session__SWIG_1.");
  result = (libtorrent::session *)new libtorrent::session();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__session, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_session__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::settings_pack arg1 ;
  int arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  libtorrent::session *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_session__SWIG_2.");
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__settings_pack,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_session" "', argument " "1"" of type '" "libtorrent::settings_pack""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_session" "', argument " "1"" of type '" "libtorrent::settings_pack""'");
    } else {
      arg1 = *((libtorrent::settings_pack *)(argp1));
    }
  }
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_session" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (libtorrent::session *)new libtorrent::session(arg1,arg2);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__session, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_session__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::settings_pack arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  libtorrent::session *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_session__SWIG_3.");
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__settings_pack,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_session" "', argument " "1"" of type '" "libtorrent::settings_pack""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_session" "', argument " "1"" of type '" "libtorrent::settings_pack""'");
    } else {
      arg1 = *((libtorrent::settings_pack *)(argp1));
    }
  }
  result = (libtorrent::session *)new libtorrent::session(arg1);
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__session, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_session__SWIG_4(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::session *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::session *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_session__SWIG_4.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__session,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_session" "', argument " "1"" of type '" "libtorrent::session &&""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_session" "', argument " "1"" of type '" "libtorrent::session &&""'"); 
  }
  arg1 = (libtorrent::session *)(argp1);
  result = (libtorrent::session *)new libtorrent::session((libtorrent::session &&)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__session, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_session(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_session__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_session__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_session__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_session__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_session__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_session__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_session__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_session__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_session__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_session__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_session");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_session(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_session(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_session(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_session(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::session * arg1 = (libtorrent::session *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_session_abort(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::session_proxy result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_session_abort.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "session_abort" "', argument " "1"" of type '" "libtorrent::session *""'"); 
  }
  arg1 = (libtorrent::session *)(argp1);
  result = (arg1)->abort();
  jsresult = SWIG_NewPointerObj((new libtorrent::session_proxy((const libtorrent::session_proxy&)(result))), SWIGTYPE_p_libtorrent__session_proxy, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connection_handle_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connection_handle *arg1 = (libtorrent::peer_connection_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::connection_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_connection_handle_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connection_handle_type" "', argument " "1"" of type '" "libtorrent::peer_connection_handle const *""'"); 
  }
  arg1 = (libtorrent::peer_connection_handle *)(argp1);
  result = (libtorrent::connection_type)((libtorrent::peer_connection_handle const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connection_handle_is_seed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connection_handle *arg1 = (libtorrent::peer_connection_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_connection_handle_is_seed.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connection_handle_is_seed" "', argument " "1"" of type '" "libtorrent::peer_connection_handle const *""'"); 
  }
  arg1 = (libtorrent::peer_connection_handle *)(argp1);
  result = (bool)((libtorrent::peer_connection_handle const *)arg1)->is_seed();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connection_handle_upload_only(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connection_handle *arg1 = (libtorrent::peer_connection_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_connection_handle_upload_only.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connection_handle_upload_only" "', argument " "1"" of type '" "libtorrent::peer_connection_handle const *""'"); 
  }
  arg1 = (libtorrent::peer_connection_handle *)(argp1);
  result = (bool)((libtorrent::peer_connection_handle const *)arg1)->upload_only();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connection_handle_pid(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connection_handle *arg1 = (libtorrent::peer_connection_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::peer_id *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_connection_handle_pid.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connection_handle_pid" "', argument " "1"" of type '" "libtorrent::peer_connection_handle const *""'"); 
  }
  arg1 = (libtorrent::peer_connection_handle *)(argp1);
  result = (libtorrent::peer_id *) &((libtorrent::peer_connection_handle const *)arg1)->pid();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connection_handle_has_piece(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connection_handle *arg1 = (libtorrent::peer_connection_handle *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_connection_handle_has_piece.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connection_handle_has_piece" "', argument " "1"" of type '" "libtorrent::peer_connection_handle const *""'"); 
  }
  arg1 = (libtorrent::peer_connection_handle *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "peer_connection_handle_has_piece" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (bool)((libtorrent::peer_connection_handle const *)arg1)->has_piece(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connection_handle_is_interesting(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connection_handle *arg1 = (libtorrent::peer_connection_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_connection_handle_is_interesting.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connection_handle_is_interesting" "', argument " "1"" of type '" "libtorrent::peer_connection_handle const *""'"); 
  }
  arg1 = (libtorrent::peer_connection_handle *)(argp1);
  result = (bool)((libtorrent::peer_connection_handle const *)arg1)->is_interesting();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connection_handle_is_choked(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connection_handle *arg1 = (libtorrent::peer_connection_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_connection_handle_is_choked.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connection_handle_is_choked" "', argument " "1"" of type '" "libtorrent::peer_connection_handle const *""'"); 
  }
  arg1 = (libtorrent::peer_connection_handle *)(argp1);
  result = (bool)((libtorrent::peer_connection_handle const *)arg1)->is_choked();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connection_handle_is_peer_interested(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connection_handle *arg1 = (libtorrent::peer_connection_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_connection_handle_is_peer_interested.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connection_handle_is_peer_interested" "', argument " "1"" of type '" "libtorrent::peer_connection_handle const *""'"); 
  }
  arg1 = (libtorrent::peer_connection_handle *)(argp1);
  result = (bool)((libtorrent::peer_connection_handle const *)arg1)->is_peer_interested();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connection_handle_has_peer_choked(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connection_handle *arg1 = (libtorrent::peer_connection_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_connection_handle_has_peer_choked.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connection_handle_has_peer_choked" "', argument " "1"" of type '" "libtorrent::peer_connection_handle const *""'"); 
  }
  arg1 = (libtorrent::peer_connection_handle *)(argp1);
  result = (bool)((libtorrent::peer_connection_handle const *)arg1)->has_peer_choked();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connection_handle_choke_this_peer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connection_handle *arg1 = (libtorrent::peer_connection_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_connection_handle_choke_this_peer.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connection_handle_choke_this_peer" "', argument " "1"" of type '" "libtorrent::peer_connection_handle *""'"); 
  }
  arg1 = (libtorrent::peer_connection_handle *)(argp1);
  (arg1)->choke_this_peer();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connection_handle_maybe_unchoke_this_peer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connection_handle *arg1 = (libtorrent::peer_connection_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_connection_handle_maybe_unchoke_this_peer.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connection_handle_maybe_unchoke_this_peer" "', argument " "1"" of type '" "libtorrent::peer_connection_handle *""'"); 
  }
  arg1 = (libtorrent::peer_connection_handle *)(argp1);
  (arg1)->maybe_unchoke_this_peer();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connection_handle_get_peer_info(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connection_handle *arg1 = (libtorrent::peer_connection_handle *) 0 ;
  libtorrent::peer_info *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_connection_handle_get_peer_info.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connection_handle_get_peer_info" "', argument " "1"" of type '" "libtorrent::peer_connection_handle const *""'"); 
  }
  arg1 = (libtorrent::peer_connection_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__peer_info,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "peer_connection_handle_get_peer_info" "', argument " "2"" of type '" "libtorrent::peer_info &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "peer_connection_handle_get_peer_info" "', argument " "2"" of type '" "libtorrent::peer_info &""'"); 
  }
  arg2 = (libtorrent::peer_info *)(argp2);
  ((libtorrent::peer_connection_handle const *)arg1)->get_peer_info(*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connection_handle_associated_torrent(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connection_handle *arg1 = (libtorrent::peer_connection_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::torrent_handle result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_connection_handle_associated_torrent.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connection_handle_associated_torrent" "', argument " "1"" of type '" "libtorrent::peer_connection_handle const *""'"); 
  }
  arg1 = (libtorrent::peer_connection_handle *)(argp1);
  result = ((libtorrent::peer_connection_handle const *)arg1)->associated_torrent();
  jsresult = SWIG_NewPointerObj((new libtorrent::torrent_handle((const libtorrent::torrent_handle&)(result))), SWIGTYPE_p_libtorrent__torrent_handle, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connection_handle_remote(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connection_handle *arg1 = (libtorrent::peer_connection_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::tcp::endpoint *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_connection_handle_remote.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connection_handle_remote" "', argument " "1"" of type '" "libtorrent::peer_connection_handle const *""'"); 
  }
  arg1 = (libtorrent::peer_connection_handle *)(argp1);
  result = (libtorrent::tcp::endpoint *) &((libtorrent::peer_connection_handle const *)arg1)->remote();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__tcp__endpoint, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connection_handle_local_endpoint(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connection_handle *arg1 = (libtorrent::peer_connection_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::tcp::endpoint result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_connection_handle_local_endpoint.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connection_handle_local_endpoint" "', argument " "1"" of type '" "libtorrent::peer_connection_handle const *""'"); 
  }
  arg1 = (libtorrent::peer_connection_handle *)(argp1);
  result = ((libtorrent::peer_connection_handle const *)arg1)->local_endpoint();
  jsresult = SWIG_NewPointerObj((new libtorrent::tcp::endpoint((const libtorrent::tcp::endpoint&)(result))), SWIGTYPE_p_libtorrent__tcp__endpoint, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connection_handle_disconnect__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connection_handle *arg1 = (libtorrent::peer_connection_handle *) 0 ;
  libtorrent::error_code *arg2 = 0 ;
  libtorrent::operation_t arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connection_handle_disconnect" "', argument " "1"" of type '" "libtorrent::peer_connection_handle *""'"); 
  }
  arg1 = (libtorrent::peer_connection_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_boost__system__error_code,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "peer_connection_handle_disconnect" "', argument " "2"" of type '" "libtorrent::error_code const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "peer_connection_handle_disconnect" "', argument " "2"" of type '" "libtorrent::error_code const &""'"); 
  }
  arg2 = (libtorrent::error_code *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "peer_connection_handle_disconnect" "', argument " "3"" of type '" "libtorrent::operation_t""'");
  } 
  arg3 = (libtorrent::operation_t)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "peer_connection_handle_disconnect" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  (arg1)->disconnect((libtorrent::error_code const &)*arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connection_handle_disconnect__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connection_handle *arg1 = (libtorrent::peer_connection_handle *) 0 ;
  libtorrent::error_code *arg2 = 0 ;
  libtorrent::operation_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connection_handle_disconnect" "', argument " "1"" of type '" "libtorrent::peer_connection_handle *""'"); 
  }
  arg1 = (libtorrent::peer_connection_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_boost__system__error_code,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "peer_connection_handle_disconnect" "', argument " "2"" of type '" "libtorrent::error_code const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "peer_connection_handle_disconnect" "', argument " "2"" of type '" "libtorrent::error_code const &""'"); 
  }
  arg2 = (libtorrent::error_code *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "peer_connection_handle_disconnect" "', argument " "3"" of type '" "libtorrent::operation_t""'");
  } 
  arg3 = (libtorrent::operation_t)(val3);
  (arg1)->disconnect((libtorrent::error_code const &)*arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connection_handle__wrap_peer_connection_handle_disconnect(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_peer_connection_handle_disconnect__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_peer_connection_handle_disconnect__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_peer_connection_handle_disconnect__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_peer_connection_handle_disconnect__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function disconnect.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connection_handle_is_disconnecting(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connection_handle *arg1 = (libtorrent::peer_connection_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_connection_handle_is_disconnecting.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connection_handle_is_disconnecting" "', argument " "1"" of type '" "libtorrent::peer_connection_handle const *""'"); 
  }
  arg1 = (libtorrent::peer_connection_handle *)(argp1);
  result = (bool)((libtorrent::peer_connection_handle const *)arg1)->is_disconnecting();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connection_handle_is_connecting(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connection_handle *arg1 = (libtorrent::peer_connection_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_connection_handle_is_connecting.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connection_handle_is_connecting" "', argument " "1"" of type '" "libtorrent::peer_connection_handle const *""'"); 
  }
  arg1 = (libtorrent::peer_connection_handle *)(argp1);
  result = (bool)((libtorrent::peer_connection_handle const *)arg1)->is_connecting();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connection_handle_is_outgoing(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connection_handle *arg1 = (libtorrent::peer_connection_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_connection_handle_is_outgoing.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connection_handle_is_outgoing" "', argument " "1"" of type '" "libtorrent::peer_connection_handle const *""'"); 
  }
  arg1 = (libtorrent::peer_connection_handle *)(argp1);
  result = (bool)((libtorrent::peer_connection_handle const *)arg1)->is_outgoing();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connection_handle_on_local_network(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connection_handle *arg1 = (libtorrent::peer_connection_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_connection_handle_on_local_network.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connection_handle_on_local_network" "', argument " "1"" of type '" "libtorrent::peer_connection_handle const *""'"); 
  }
  arg1 = (libtorrent::peer_connection_handle *)(argp1);
  result = (bool)((libtorrent::peer_connection_handle const *)arg1)->on_local_network();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connection_handle_ignore_unchoke_slots(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connection_handle *arg1 = (libtorrent::peer_connection_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_connection_handle_ignore_unchoke_slots.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connection_handle_ignore_unchoke_slots" "', argument " "1"" of type '" "libtorrent::peer_connection_handle const *""'"); 
  }
  arg1 = (libtorrent::peer_connection_handle *)(argp1);
  result = (bool)((libtorrent::peer_connection_handle const *)arg1)->ignore_unchoke_slots();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connection_handle_failed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connection_handle *arg1 = (libtorrent::peer_connection_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_connection_handle_failed.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connection_handle_failed" "', argument " "1"" of type '" "libtorrent::peer_connection_handle const *""'"); 
  }
  arg1 = (libtorrent::peer_connection_handle *)(argp1);
  result = (bool)((libtorrent::peer_connection_handle const *)arg1)->failed();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connection_handle_can_disconnect(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connection_handle *arg1 = (libtorrent::peer_connection_handle *) 0 ;
  libtorrent::error_code *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_connection_handle_can_disconnect.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connection_handle_can_disconnect" "', argument " "1"" of type '" "libtorrent::peer_connection_handle const *""'"); 
  }
  arg1 = (libtorrent::peer_connection_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_boost__system__error_code,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "peer_connection_handle_can_disconnect" "', argument " "2"" of type '" "libtorrent::error_code const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "peer_connection_handle_can_disconnect" "', argument " "2"" of type '" "libtorrent::error_code const &""'"); 
  }
  arg2 = (libtorrent::error_code *)(argp2);
  result = (bool)((libtorrent::peer_connection_handle const *)arg1)->can_disconnect((libtorrent::error_code const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connection_handle_has_metadata(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connection_handle *arg1 = (libtorrent::peer_connection_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_connection_handle_has_metadata.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connection_handle_has_metadata" "', argument " "1"" of type '" "libtorrent::peer_connection_handle const *""'"); 
  }
  arg1 = (libtorrent::peer_connection_handle *)(argp1);
  result = (bool)((libtorrent::peer_connection_handle const *)arg1)->has_metadata();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connection_handle_in_handshake(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connection_handle *arg1 = (libtorrent::peer_connection_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_connection_handle_in_handshake.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connection_handle_in_handshake" "', argument " "1"" of type '" "libtorrent::peer_connection_handle const *""'"); 
  }
  arg1 = (libtorrent::peer_connection_handle *)(argp1);
  result = (bool)((libtorrent::peer_connection_handle const *)arg1)->in_handshake();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connection_handle_send_buffer__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connection_handle *arg1 = (libtorrent::peer_connection_handle *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connection_handle_send_buffer" "', argument " "1"" of type '" "libtorrent::peer_connection_handle *""'"); 
  }
  arg1 = (libtorrent::peer_connection_handle *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "peer_connection_handle_send_buffer" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "peer_connection_handle_send_buffer" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "peer_connection_handle_send_buffer" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  (arg1)->send_buffer((char const *)arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connection_handle_send_buffer__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connection_handle *arg1 = (libtorrent::peer_connection_handle *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connection_handle_send_buffer" "', argument " "1"" of type '" "libtorrent::peer_connection_handle *""'"); 
  }
  arg1 = (libtorrent::peer_connection_handle *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "peer_connection_handle_send_buffer" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "peer_connection_handle_send_buffer" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->send_buffer((char const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connection_handle__wrap_peer_connection_handle_send_buffer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_peer_connection_handle_send_buffer__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_peer_connection_handle_send_buffer__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_peer_connection_handle_send_buffer__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_peer_connection_handle_send_buffer__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function send_buffer.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connection_handle_last_seen_complete(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connection_handle *arg1 = (libtorrent::peer_connection_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  time_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_connection_handle_last_seen_complete.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connection_handle_last_seen_complete" "', argument " "1"" of type '" "libtorrent::peer_connection_handle const *""'"); 
  }
  arg1 = (libtorrent::peer_connection_handle *)(argp1);
  result = (time_t)((libtorrent::peer_connection_handle const *)arg1)->last_seen_complete();
  jsresult = SWIG_From_long((long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connection_handle_op_eq(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connection_handle *arg1 = (libtorrent::peer_connection_handle *) 0 ;
  libtorrent::peer_connection_handle *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_connection_handle_op_eq.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connection_handle_op_eq" "', argument " "1"" of type '" "libtorrent::peer_connection_handle const *""'"); 
  }
  arg1 = (libtorrent::peer_connection_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__peer_connection_handle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "peer_connection_handle_op_eq" "', argument " "2"" of type '" "libtorrent::peer_connection_handle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "peer_connection_handle_op_eq" "', argument " "2"" of type '" "libtorrent::peer_connection_handle const &""'"); 
  }
  arg2 = (libtorrent::peer_connection_handle *)(argp2);
  result = (bool)((libtorrent::peer_connection_handle const *)arg1)->operator ==((libtorrent::peer_connection_handle const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connection_handle_op_ne(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connection_handle *arg1 = (libtorrent::peer_connection_handle *) 0 ;
  libtorrent::peer_connection_handle *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_connection_handle_op_ne.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connection_handle_op_ne" "', argument " "1"" of type '" "libtorrent::peer_connection_handle const *""'"); 
  }
  arg1 = (libtorrent::peer_connection_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__peer_connection_handle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "peer_connection_handle_op_ne" "', argument " "2"" of type '" "libtorrent::peer_connection_handle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "peer_connection_handle_op_ne" "', argument " "2"" of type '" "libtorrent::peer_connection_handle const &""'"); 
  }
  arg2 = (libtorrent::peer_connection_handle *)(argp2);
  result = (bool)((libtorrent::peer_connection_handle const *)arg1)->operator !=((libtorrent::peer_connection_handle const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connection_handle_op_lt(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connection_handle *arg1 = (libtorrent::peer_connection_handle *) 0 ;
  libtorrent::peer_connection_handle *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_connection_handle_op_lt.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connection_handle_op_lt" "', argument " "1"" of type '" "libtorrent::peer_connection_handle const *""'"); 
  }
  arg1 = (libtorrent::peer_connection_handle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__peer_connection_handle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "peer_connection_handle_op_lt" "', argument " "2"" of type '" "libtorrent::peer_connection_handle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "peer_connection_handle_op_lt" "', argument " "2"" of type '" "libtorrent::peer_connection_handle const &""'"); 
  }
  arg2 = (libtorrent::peer_connection_handle *)(argp2);
  result = (bool)((libtorrent::peer_connection_handle const *)arg1)->operator <((libtorrent::peer_connection_handle const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_peer_connection_handle_get_time_of_last_unchoke(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::peer_connection_handle *arg1 = (libtorrent::peer_connection_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int64_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_peer_connection_handle_get_time_of_last_unchoke.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peer_connection_handle_get_time_of_last_unchoke" "', argument " "1"" of type '" "libtorrent::peer_connection_handle *""'"); 
  }
  arg1 = (libtorrent::peer_connection_handle *)(argp1);
  result = (int64_t)libtorrent_peer_connection_handle_get_time_of_last_unchoke(arg1);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_peer_connection_handle(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_peer_connection_handle(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_peer_connection_handle(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_peer_connection_handle(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::peer_connection_handle * arg1 = (libtorrent::peer_connection_handle *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_peer_connection_handle(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class peer_connection_handle can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_bt_peer_connection_handle(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  SwigValueWrapper< libtorrent::peer_connection_handle > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  libtorrent::bt_peer_connection_handle *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_bt_peer_connection_handle.");
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__peer_connection_handle,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_bt_peer_connection_handle" "', argument " "1"" of type '" "libtorrent::peer_connection_handle""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_bt_peer_connection_handle" "', argument " "1"" of type '" "libtorrent::peer_connection_handle""'");
    } else {
      arg1 = *((libtorrent::peer_connection_handle *)(argp1));
    }
  }
  result = (libtorrent::bt_peer_connection_handle *)new libtorrent::bt_peer_connection_handle(arg1);
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__bt_peer_connection_handle, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bt_peer_connection_handle_packet_finished(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bt_peer_connection_handle *arg1 = (libtorrent::bt_peer_connection_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bt_peer_connection_handle_packet_finished.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bt_peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bt_peer_connection_handle_packet_finished" "', argument " "1"" of type '" "libtorrent::bt_peer_connection_handle const *""'"); 
  }
  arg1 = (libtorrent::bt_peer_connection_handle *)(argp1);
  result = (bool)((libtorrent::bt_peer_connection_handle const *)arg1)->packet_finished();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bt_peer_connection_handle_support_extensions(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bt_peer_connection_handle *arg1 = (libtorrent::bt_peer_connection_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bt_peer_connection_handle_support_extensions.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bt_peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bt_peer_connection_handle_support_extensions" "', argument " "1"" of type '" "libtorrent::bt_peer_connection_handle const *""'"); 
  }
  arg1 = (libtorrent::bt_peer_connection_handle *)(argp1);
  result = (bool)((libtorrent::bt_peer_connection_handle const *)arg1)->support_extensions();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bt_peer_connection_handle_supports_encryption(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bt_peer_connection_handle *arg1 = (libtorrent::bt_peer_connection_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bt_peer_connection_handle_supports_encryption.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bt_peer_connection_handle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bt_peer_connection_handle_supports_encryption" "', argument " "1"" of type '" "libtorrent::bt_peer_connection_handle const *""'"); 
  }
  arg1 = (libtorrent::bt_peer_connection_handle *)(argp1);
  result = (bool)((libtorrent::bt_peer_connection_handle const *)arg1)->supports_encryption();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_bt_peer_connection_handle(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_bt_peer_connection_handle(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_bt_peer_connection_handle(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_bt_peer_connection_handle(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::bt_peer_connection_handle * arg1 = (libtorrent::bt_peer_connection_handle *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_op_lte(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::address *arg1 = 0 ;
  libtorrent::address *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_op_lte.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__address,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "op_lte" "', argument " "1"" of type '" "libtorrent::address const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "op_lte" "', argument " "1"" of type '" "libtorrent::address const &""'"); 
  }
  arg1 = (libtorrent::address *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_libtorrent__address,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "op_lte" "', argument " "2"" of type '" "libtorrent::address const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "op_lte" "', argument " "2"" of type '" "libtorrent::address const &""'"); 
  }
  arg2 = (libtorrent::address *)(argp2);
  result = (bool)libtorrent::operator <=((libtorrent::address const &)*arg1,(libtorrent::address const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_ip_filter_blocked(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::ip_filter::blocked));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_ip_filter_add_rule(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::ip_filter *arg1 = (libtorrent::ip_filter *) 0 ;
  libtorrent::address arg2 ;
  libtorrent::address arg3 ;
  std::uint32_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ip_filter_add_rule.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__ip_filter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ip_filter_add_rule" "', argument " "1"" of type '" "libtorrent::ip_filter *""'"); 
  }
  arg1 = (libtorrent::ip_filter *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__address,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ip_filter_add_rule" "', argument " "2"" of type '" "libtorrent::address""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ip_filter_add_rule" "', argument " "2"" of type '" "libtorrent::address""'");
    } else {
      arg2 = *((libtorrent::address *)(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_libtorrent__address,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ip_filter_add_rule" "', argument " "3"" of type '" "libtorrent::address""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ip_filter_add_rule" "', argument " "3"" of type '" "libtorrent::address""'");
    } else {
      arg3 = *((libtorrent::address *)(argp3));
    }
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ip_filter_add_rule" "', argument " "4"" of type '" "std::uint32_t""'");
  } 
  arg4 = (std::uint32_t)(val4);
  (arg1)->add_rule(arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ip_filter_access(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::ip_filter *arg1 = (libtorrent::ip_filter *) 0 ;
  libtorrent::address *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ip_filter_access.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__ip_filter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ip_filter_access" "', argument " "1"" of type '" "libtorrent::ip_filter const *""'"); 
  }
  arg1 = (libtorrent::ip_filter *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__address,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ip_filter_access" "', argument " "2"" of type '" "libtorrent::address const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ip_filter_access" "', argument " "2"" of type '" "libtorrent::address const &""'"); 
  }
  arg2 = (libtorrent::address *)(argp2);
  result = (int)((libtorrent::ip_filter const *)arg1)->access((libtorrent::address const &)*arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_ip_filter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::ip_filter *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ip_filter.");
  result = (libtorrent::ip_filter *)new libtorrent::ip_filter();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__ip_filter, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_ip_filter(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_ip_filter(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_ip_filter(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_ip_filter(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::ip_filter * arg1 = (libtorrent::ip_filter *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_libtorrent_port_filter_blocked(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::port_filter::blocked));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_port_filter_add_rule(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::port_filter *arg1 = (libtorrent::port_filter *) 0 ;
  std::uint16_t arg2 ;
  std::uint16_t arg3 ;
  std::uint32_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_port_filter_add_rule.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__port_filter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "port_filter_add_rule" "', argument " "1"" of type '" "libtorrent::port_filter *""'"); 
  }
  arg1 = (libtorrent::port_filter *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "port_filter_add_rule" "', argument " "2"" of type '" "std::uint16_t""'");
  } 
  arg2 = (std::uint16_t)(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "port_filter_add_rule" "', argument " "3"" of type '" "std::uint16_t""'");
  } 
  arg3 = (std::uint16_t)(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "port_filter_add_rule" "', argument " "4"" of type '" "std::uint32_t""'");
  } 
  arg4 = (std::uint32_t)(val4);
  (arg1)->add_rule(arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_port_filter_access(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::port_filter *arg1 = (libtorrent::port_filter *) 0 ;
  std::uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_port_filter_access.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__port_filter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "port_filter_access" "', argument " "1"" of type '" "libtorrent::port_filter const *""'"); 
  }
  arg1 = (libtorrent::port_filter *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "port_filter_access" "', argument " "2"" of type '" "std::uint16_t""'");
  } 
  arg2 = (std::uint16_t)(val2);
  result = (int)((libtorrent::port_filter const *)arg1)->access(arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_port_filter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::port_filter *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_port_filter.");
  result = (libtorrent::port_filter *)new libtorrent::port_filter();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__port_filter, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_port_filter(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_port_filter(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_port_filter(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_port_filter(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::port_filter * arg1 = (libtorrent::port_filter *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_bdecode_category(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  boost::system::error_category *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bdecode_category.");
  
  result = (boost::system::error_category *) &libtorrent::bdecode_category();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__system__error_category, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_bdecode_errors_no_error(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::bdecode_errors::no_error));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_bdecode_errors_expected_digit(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::bdecode_errors::expected_digit));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_bdecode_errors_expected_colon(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::bdecode_errors::expected_colon));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_bdecode_errors_unexpected_eof(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::bdecode_errors::unexpected_eof));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_bdecode_errors_expected_value(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::bdecode_errors::expected_value));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_bdecode_errors_depth_exceeded(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::bdecode_errors::depth_exceeded));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_bdecode_errors_limit_exceeded(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::bdecode_errors::limit_exceeded));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_bdecode_errors_overflow(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::bdecode_errors::overflow));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_bdecode_errors_error_code_max(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::bdecode_errors::error_code_max));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_bdecode_node__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::bdecode_node *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_bdecode_node__SWIG_0.");
  result = (libtorrent::bdecode_node *)new libtorrent::bdecode_node();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__bdecode_node, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_bdecode_node__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::bdecode_node *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libtorrent::bdecode_node *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_bdecode_node__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__bdecode_node,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_bdecode_node" "', argument " "1"" of type '" "libtorrent::bdecode_node const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_bdecode_node" "', argument " "1"" of type '" "libtorrent::bdecode_node const &""'"); 
  }
  arg1 = (libtorrent::bdecode_node *)(argp1);
  result = (libtorrent::bdecode_node *)new libtorrent::bdecode_node((libtorrent::bdecode_node const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__bdecode_node, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_bdecode_node(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_bdecode_node__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_bdecode_node__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_bdecode_node__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_bdecode_node__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_bdecode_node");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_bdecode_node_none_t(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::bdecode_node::none_t));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_bdecode_node_dict_t(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::bdecode_node::dict_t));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_bdecode_node_list_t(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::bdecode_node::list_t));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_bdecode_node_string_t(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::bdecode_node::string_t));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_bdecode_node_int_t(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::bdecode_node::int_t));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_bdecode_node_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::bdecode_node::type_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bdecode_node_type.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bdecode_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bdecode_node_type" "', argument " "1"" of type '" "libtorrent::bdecode_node const *""'"); 
  }
  arg1 = (libtorrent::bdecode_node *)(argp1);
  result = (libtorrent::bdecode_node::type_t)((libtorrent::bdecode_node const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bdecode_node_op_bool(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bdecode_node_op_bool.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bdecode_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bdecode_node_op_bool" "', argument " "1"" of type '" "libtorrent::bdecode_node const *""'"); 
  }
  arg1 = (libtorrent::bdecode_node *)(argp1);
  result = (bool)((libtorrent::bdecode_node const *)arg1)->operator bool();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bdecode_node_list_at(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  libtorrent::bdecode_node result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bdecode_node_list_at.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bdecode_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bdecode_node_list_at" "', argument " "1"" of type '" "libtorrent::bdecode_node const *""'"); 
  }
  arg1 = (libtorrent::bdecode_node *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bdecode_node_list_at" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = ((libtorrent::bdecode_node const *)arg1)->list_at(arg2);
  jsresult = SWIG_NewPointerObj((new libtorrent::bdecode_node((const libtorrent::bdecode_node&)(result))), SWIGTYPE_p_libtorrent__bdecode_node, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bdecode_node_list_string_value_at__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  int arg2 ;
  SwigValueWrapper< libtorrent::string_view > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  SwigValueWrapper< libtorrent::string_view > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bdecode_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bdecode_node_list_string_value_at" "', argument " "1"" of type '" "libtorrent::bdecode_node *""'"); 
  }
  arg1 = (libtorrent::bdecode_node *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bdecode_node_list_string_value_at" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_libtorrent__string_view,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "bdecode_node_list_string_value_at" "', argument " "3"" of type '" "libtorrent::string_view""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bdecode_node_list_string_value_at" "', argument " "3"" of type '" "libtorrent::string_view""'");
    } else {
      arg3 = *((libtorrent::string_view *)(argp3));
    }
  }
  result = (arg1)->list_string_value_at(arg2,arg3);
  jsresult = SWIG_NewPointerObj((new libtorrent::string_view((const libtorrent::string_view&)(result))), SWIGTYPE_p_libtorrent__string_view, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bdecode_node_list_string_value_at__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< libtorrent::string_view > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bdecode_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bdecode_node_list_string_value_at" "', argument " "1"" of type '" "libtorrent::bdecode_node *""'"); 
  }
  arg1 = (libtorrent::bdecode_node *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bdecode_node_list_string_value_at" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (arg1)->list_string_value_at(arg2);
  jsresult = SWIG_NewPointerObj((new libtorrent::string_view((const libtorrent::string_view&)(result))), SWIGTYPE_p_libtorrent__string_view, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bdecode_node__wrap_bdecode_node_list_string_value_at(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_bdecode_node_list_string_value_at__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_bdecode_node_list_string_value_at__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_bdecode_node_list_string_value_at__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_bdecode_node_list_string_value_at__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function list_string_value_at.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bdecode_node_list_int_value_at__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  int arg2 ;
  std::int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long long val3 ;
  int ecode3 = 0 ;
  std::int64_t result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bdecode_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bdecode_node_list_int_value_at" "', argument " "1"" of type '" "libtorrent::bdecode_node *""'"); 
  }
  arg1 = (libtorrent::bdecode_node *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bdecode_node_list_int_value_at" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_long_SS_long(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "bdecode_node_list_int_value_at" "', argument " "3"" of type '" "std::int64_t""'");
  } 
  arg3 = (std::int64_t)(val3);
  result = (std::int64_t)(arg1)->list_int_value_at(arg2,arg3);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bdecode_node_list_int_value_at__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::int64_t result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bdecode_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bdecode_node_list_int_value_at" "', argument " "1"" of type '" "libtorrent::bdecode_node *""'"); 
  }
  arg1 = (libtorrent::bdecode_node *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bdecode_node_list_int_value_at" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (std::int64_t)(arg1)->list_int_value_at(arg2);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bdecode_node__wrap_bdecode_node_list_int_value_at(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_bdecode_node_list_int_value_at__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_bdecode_node_list_int_value_at__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_bdecode_node_list_int_value_at__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_bdecode_node_list_int_value_at__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function list_int_value_at.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bdecode_node_list_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bdecode_node_list_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bdecode_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bdecode_node_list_size" "', argument " "1"" of type '" "libtorrent::bdecode_node const *""'"); 
  }
  arg1 = (libtorrent::bdecode_node *)(argp1);
  result = (int)((libtorrent::bdecode_node const *)arg1)->list_size();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bdecode_node_dict_find(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  SwigValueWrapper< libtorrent::string_view > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  libtorrent::bdecode_node result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bdecode_node_dict_find.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bdecode_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bdecode_node_dict_find" "', argument " "1"" of type '" "libtorrent::bdecode_node const *""'"); 
  }
  arg1 = (libtorrent::bdecode_node *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__string_view,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bdecode_node_dict_find" "', argument " "2"" of type '" "libtorrent::string_view""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bdecode_node_dict_find" "', argument " "2"" of type '" "libtorrent::string_view""'");
    } else {
      arg2 = *((libtorrent::string_view *)(argp2));
    }
  }
  result = ((libtorrent::bdecode_node const *)arg1)->dict_find(arg2);
  jsresult = SWIG_NewPointerObj((new libtorrent::bdecode_node((const libtorrent::bdecode_node&)(result))), SWIGTYPE_p_libtorrent__bdecode_node, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bdecode_node_dict_at(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::pair< libtorrent::string_view,libtorrent::bdecode_node > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bdecode_node_dict_at.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bdecode_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bdecode_node_dict_at" "', argument " "1"" of type '" "libtorrent::bdecode_node const *""'"); 
  }
  arg1 = (libtorrent::bdecode_node *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bdecode_node_dict_at" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = ((libtorrent::bdecode_node const *)arg1)->dict_at(arg2);
  jsresult = SWIG_NewPointerObj((new std::pair< libtorrent::string_view,libtorrent::bdecode_node >((const std::pair< libtorrent::string_view,libtorrent::bdecode_node >&)(result))), SWIGTYPE_p_std__pairT_libtorrent__string_view_libtorrent__bdecode_node_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bdecode_node_dict_find_dict(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  SwigValueWrapper< libtorrent::string_view > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  libtorrent::bdecode_node result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bdecode_node_dict_find_dict.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bdecode_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bdecode_node_dict_find_dict" "', argument " "1"" of type '" "libtorrent::bdecode_node const *""'"); 
  }
  arg1 = (libtorrent::bdecode_node *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__string_view,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bdecode_node_dict_find_dict" "', argument " "2"" of type '" "libtorrent::string_view""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bdecode_node_dict_find_dict" "', argument " "2"" of type '" "libtorrent::string_view""'");
    } else {
      arg2 = *((libtorrent::string_view *)(argp2));
    }
  }
  result = ((libtorrent::bdecode_node const *)arg1)->dict_find_dict(arg2);
  jsresult = SWIG_NewPointerObj((new libtorrent::bdecode_node((const libtorrent::bdecode_node&)(result))), SWIGTYPE_p_libtorrent__bdecode_node, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bdecode_node_dict_find_list(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  SwigValueWrapper< libtorrent::string_view > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  libtorrent::bdecode_node result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bdecode_node_dict_find_list.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bdecode_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bdecode_node_dict_find_list" "', argument " "1"" of type '" "libtorrent::bdecode_node const *""'"); 
  }
  arg1 = (libtorrent::bdecode_node *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__string_view,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bdecode_node_dict_find_list" "', argument " "2"" of type '" "libtorrent::string_view""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bdecode_node_dict_find_list" "', argument " "2"" of type '" "libtorrent::string_view""'");
    } else {
      arg2 = *((libtorrent::string_view *)(argp2));
    }
  }
  result = ((libtorrent::bdecode_node const *)arg1)->dict_find_list(arg2);
  jsresult = SWIG_NewPointerObj((new libtorrent::bdecode_node((const libtorrent::bdecode_node&)(result))), SWIGTYPE_p_libtorrent__bdecode_node, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bdecode_node_dict_find_string(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  SwigValueWrapper< libtorrent::string_view > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  libtorrent::bdecode_node result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bdecode_node_dict_find_string.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bdecode_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bdecode_node_dict_find_string" "', argument " "1"" of type '" "libtorrent::bdecode_node const *""'"); 
  }
  arg1 = (libtorrent::bdecode_node *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__string_view,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bdecode_node_dict_find_string" "', argument " "2"" of type '" "libtorrent::string_view""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bdecode_node_dict_find_string" "', argument " "2"" of type '" "libtorrent::string_view""'");
    } else {
      arg2 = *((libtorrent::string_view *)(argp2));
    }
  }
  result = ((libtorrent::bdecode_node const *)arg1)->dict_find_string(arg2);
  jsresult = SWIG_NewPointerObj((new libtorrent::bdecode_node((const libtorrent::bdecode_node&)(result))), SWIGTYPE_p_libtorrent__bdecode_node, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bdecode_node_dict_find_int(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  SwigValueWrapper< libtorrent::string_view > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  libtorrent::bdecode_node result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bdecode_node_dict_find_int.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bdecode_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bdecode_node_dict_find_int" "', argument " "1"" of type '" "libtorrent::bdecode_node const *""'"); 
  }
  arg1 = (libtorrent::bdecode_node *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__string_view,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bdecode_node_dict_find_int" "', argument " "2"" of type '" "libtorrent::string_view""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bdecode_node_dict_find_int" "', argument " "2"" of type '" "libtorrent::string_view""'");
    } else {
      arg2 = *((libtorrent::string_view *)(argp2));
    }
  }
  result = ((libtorrent::bdecode_node const *)arg1)->dict_find_int(arg2);
  jsresult = SWIG_NewPointerObj((new libtorrent::bdecode_node((const libtorrent::bdecode_node&)(result))), SWIGTYPE_p_libtorrent__bdecode_node, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bdecode_node_dict_find_string_value__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  SwigValueWrapper< libtorrent::string_view > arg2 ;
  SwigValueWrapper< libtorrent::string_view > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  SwigValueWrapper< libtorrent::string_view > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bdecode_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bdecode_node_dict_find_string_value" "', argument " "1"" of type '" "libtorrent::bdecode_node const *""'"); 
  }
  arg1 = (libtorrent::bdecode_node *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__string_view,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bdecode_node_dict_find_string_value" "', argument " "2"" of type '" "libtorrent::string_view""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bdecode_node_dict_find_string_value" "', argument " "2"" of type '" "libtorrent::string_view""'");
    } else {
      arg2 = *((libtorrent::string_view *)(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_libtorrent__string_view,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "bdecode_node_dict_find_string_value" "', argument " "3"" of type '" "libtorrent::string_view""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bdecode_node_dict_find_string_value" "', argument " "3"" of type '" "libtorrent::string_view""'");
    } else {
      arg3 = *((libtorrent::string_view *)(argp3));
    }
  }
  result = ((libtorrent::bdecode_node const *)arg1)->dict_find_string_value(arg2,arg3);
  jsresult = SWIG_NewPointerObj((new libtorrent::string_view((const libtorrent::string_view&)(result))), SWIGTYPE_p_libtorrent__string_view, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bdecode_node_dict_find_string_value__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  SwigValueWrapper< libtorrent::string_view > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< libtorrent::string_view > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bdecode_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bdecode_node_dict_find_string_value" "', argument " "1"" of type '" "libtorrent::bdecode_node const *""'"); 
  }
  arg1 = (libtorrent::bdecode_node *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__string_view,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bdecode_node_dict_find_string_value" "', argument " "2"" of type '" "libtorrent::string_view""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bdecode_node_dict_find_string_value" "', argument " "2"" of type '" "libtorrent::string_view""'");
    } else {
      arg2 = *((libtorrent::string_view *)(argp2));
    }
  }
  result = ((libtorrent::bdecode_node const *)arg1)->dict_find_string_value(arg2);
  jsresult = SWIG_NewPointerObj((new libtorrent::string_view((const libtorrent::string_view&)(result))), SWIGTYPE_p_libtorrent__string_view, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bdecode_node__wrap_bdecode_node_dict_find_string_value(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_bdecode_node_dict_find_string_value__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_bdecode_node_dict_find_string_value__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_bdecode_node_dict_find_string_value__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_bdecode_node_dict_find_string_value__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function dict_find_string_value.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bdecode_node_dict_find_int_value__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  SwigValueWrapper< libtorrent::string_view > arg2 ;
  std::int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  long long val3 ;
  int ecode3 = 0 ;
  std::int64_t result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bdecode_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bdecode_node_dict_find_int_value" "', argument " "1"" of type '" "libtorrent::bdecode_node const *""'"); 
  }
  arg1 = (libtorrent::bdecode_node *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__string_view,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bdecode_node_dict_find_int_value" "', argument " "2"" of type '" "libtorrent::string_view""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bdecode_node_dict_find_int_value" "', argument " "2"" of type '" "libtorrent::string_view""'");
    } else {
      arg2 = *((libtorrent::string_view *)(argp2));
    }
  }
  ecode3 = SWIG_AsVal_long_SS_long(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "bdecode_node_dict_find_int_value" "', argument " "3"" of type '" "std::int64_t""'");
  } 
  arg3 = (std::int64_t)(val3);
  result = (std::int64_t)((libtorrent::bdecode_node const *)arg1)->dict_find_int_value(arg2,arg3);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bdecode_node_dict_find_int_value__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  SwigValueWrapper< libtorrent::string_view > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::int64_t result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bdecode_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bdecode_node_dict_find_int_value" "', argument " "1"" of type '" "libtorrent::bdecode_node const *""'"); 
  }
  arg1 = (libtorrent::bdecode_node *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__string_view,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bdecode_node_dict_find_int_value" "', argument " "2"" of type '" "libtorrent::string_view""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bdecode_node_dict_find_int_value" "', argument " "2"" of type '" "libtorrent::string_view""'");
    } else {
      arg2 = *((libtorrent::string_view *)(argp2));
    }
  }
  result = (std::int64_t)((libtorrent::bdecode_node const *)arg1)->dict_find_int_value(arg2);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bdecode_node__wrap_bdecode_node_dict_find_int_value(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_bdecode_node_dict_find_int_value__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_bdecode_node_dict_find_int_value__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_bdecode_node_dict_find_int_value__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_bdecode_node_dict_find_int_value__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function dict_find_int_value.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bdecode_node_dict_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bdecode_node_dict_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bdecode_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bdecode_node_dict_size" "', argument " "1"" of type '" "libtorrent::bdecode_node const *""'"); 
  }
  arg1 = (libtorrent::bdecode_node *)(argp1);
  result = (int)((libtorrent::bdecode_node const *)arg1)->dict_size();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bdecode_node_int_value(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::int64_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bdecode_node_int_value.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bdecode_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bdecode_node_int_value" "', argument " "1"" of type '" "libtorrent::bdecode_node const *""'"); 
  }
  arg1 = (libtorrent::bdecode_node *)(argp1);
  result = (std::int64_t)((libtorrent::bdecode_node const *)arg1)->int_value();
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bdecode_node_string_value(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< libtorrent::string_view > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bdecode_node_string_value.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bdecode_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bdecode_node_string_value" "', argument " "1"" of type '" "libtorrent::bdecode_node const *""'"); 
  }
  arg1 = (libtorrent::bdecode_node *)(argp1);
  result = ((libtorrent::bdecode_node const *)arg1)->string_value();
  jsresult = SWIG_NewPointerObj((new libtorrent::string_view((const libtorrent::string_view&)(result))), SWIGTYPE_p_libtorrent__string_view, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bdecode_node_string_length(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bdecode_node_string_length.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__bdecode_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bdecode_node_string_length" "', argument " "1"" of type '" "libtorrent::bdecode_node const *""'"); 
  }
  arg1 = (libtorrent::bdecode_node *)(argp1);
  result = (int)((libtorrent::bdecode_node const *)arg1)->string_length();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bdecode_node_to_string(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::bdecode_node *arg1 = 0 ;
  bool arg2 ;
  int arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  std::string result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bdecode_node_to_string.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__bdecode_node,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bdecode_node_to_string" "', argument " "1"" of type '" "libtorrent::bdecode_node const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bdecode_node_to_string" "', argument " "1"" of type '" "libtorrent::bdecode_node const &""'"); 
  }
  arg1 = (libtorrent::bdecode_node *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bdecode_node_to_string" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "bdecode_node_to_string" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = libtorrent_bdecode_node_to_string((libtorrent::bdecode_node const &)*arg1,arg2,arg3);
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bdecode_node_bdecode(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int8_t > *arg1 = 0 ;
  libtorrent::bdecode_node *arg2 = 0 ;
  libtorrent::error_code *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bdecode_node_bdecode.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_signed_char_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bdecode_node_bdecode" "', argument " "1"" of type '" "std::vector< int8_t > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bdecode_node_bdecode" "', argument " "1"" of type '" "std::vector< int8_t > &""'"); 
  }
  arg1 = (std::vector< int8_t > *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_libtorrent__bdecode_node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bdecode_node_bdecode" "', argument " "2"" of type '" "libtorrent::bdecode_node &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bdecode_node_bdecode" "', argument " "2"" of type '" "libtorrent::bdecode_node &""'"); 
  }
  arg2 = (libtorrent::bdecode_node *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_boost__system__error_code,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "bdecode_node_bdecode" "', argument " "3"" of type '" "libtorrent::error_code &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bdecode_node_bdecode" "', argument " "3"" of type '" "libtorrent::error_code &""'"); 
  }
  arg3 = (libtorrent::error_code *)(argp3);
  result = (int)libtorrent_bdecode_node_bdecode(*arg1,*arg2,*arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_bdecode_node(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_bdecode_node(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_bdecode_node(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_bdecode_node(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::bdecode_node * arg1 = (libtorrent::bdecode_node *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_make_magnet_uri__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_handle *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::string result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__torrent_handle,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "make_magnet_uri" "', argument " "1"" of type '" "libtorrent::torrent_handle const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "make_magnet_uri" "', argument " "1"" of type '" "libtorrent::torrent_handle const &""'"); 
  }
  arg1 = (libtorrent::torrent_handle *)(argp1);
  result = libtorrent::make_magnet_uri((libtorrent::torrent_handle const &)*arg1);
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_make_magnet_uri__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_info *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::string result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__torrent_info,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "make_magnet_uri" "', argument " "1"" of type '" "libtorrent::torrent_info const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "make_magnet_uri" "', argument " "1"" of type '" "libtorrent::torrent_info const &""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  result = libtorrent::make_magnet_uri((libtorrent::torrent_info const &)*arg1);
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent__wrap_make_magnet_uri(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_make_magnet_uri__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_make_magnet_uri__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_make_magnet_uri__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_make_magnet_uri__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function make_magnet_uri.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_parse_magnet_uri(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::string *arg1 = 0 ;
  libtorrent::add_torrent_params *arg2 = 0 ;
  libtorrent::error_code *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_parse_magnet_uri.");
  
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse_magnet_uri" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse_magnet_uri" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_libtorrent__add_torrent_params,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse_magnet_uri" "', argument " "2"" of type '" "libtorrent::add_torrent_params &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse_magnet_uri" "', argument " "2"" of type '" "libtorrent::add_torrent_params &""'"); 
  }
  arg2 = (libtorrent::add_torrent_params *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_boost__system__error_code,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "parse_magnet_uri" "', argument " "3"" of type '" "libtorrent::error_code &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse_magnet_uri" "', argument " "3"" of type '" "libtorrent::error_code &""'"); 
  }
  arg3 = (libtorrent::error_code *)(argp3);
  libtorrent::parse_magnet_uri((std::string const &)*arg1,*arg2,*arg3);
  jsresult = SWIGV8_UNDEFINED();
  if (SWIG_IsNewObj(res1)) delete arg1;
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent_create_torrent_optimize_alignment(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::create_torrent::optimize_alignment));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_create_torrent_merkle(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::create_torrent::merkle));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_create_torrent_modification_time(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::create_torrent::modification_time));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_create_torrent_symlinks(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::create_torrent::symlinks));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_create_torrent_mutable_torrent_support(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::create_torrent::mutable_torrent_support));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_create_torrent__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::file_storage *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  libtorrent::create_torrent *result;
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_create_torrent__SWIG_0.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__file_storage,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_create_torrent" "', argument " "1"" of type '" "libtorrent::file_storage &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_create_torrent" "', argument " "1"" of type '" "libtorrent::file_storage &""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_create_torrent" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_create_torrent" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_create_torrent" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_create_torrent" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  result = (libtorrent::create_torrent *)new libtorrent::create_torrent(*arg1,arg2,arg3,arg4,arg5);
  
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__create_torrent, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_create_torrent__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::file_storage *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  libtorrent::create_torrent *result;
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_create_torrent__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__file_storage,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_create_torrent" "', argument " "1"" of type '" "libtorrent::file_storage &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_create_torrent" "', argument " "1"" of type '" "libtorrent::file_storage &""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_create_torrent" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_create_torrent" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_create_torrent" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  result = (libtorrent::create_torrent *)new libtorrent::create_torrent(*arg1,arg2,arg3,arg4);
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__create_torrent, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_create_torrent__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::file_storage *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  libtorrent::create_torrent *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_create_torrent__SWIG_2.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__file_storage,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_create_torrent" "', argument " "1"" of type '" "libtorrent::file_storage &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_create_torrent" "', argument " "1"" of type '" "libtorrent::file_storage &""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_create_torrent" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_create_torrent" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (libtorrent::create_torrent *)new libtorrent::create_torrent(*arg1,arg2,arg3);
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__create_torrent, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_create_torrent__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::file_storage *arg1 = 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  libtorrent::create_torrent *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_create_torrent__SWIG_3.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__file_storage,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_create_torrent" "', argument " "1"" of type '" "libtorrent::file_storage &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_create_torrent" "', argument " "1"" of type '" "libtorrent::file_storage &""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_create_torrent" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (libtorrent::create_torrent *)new libtorrent::create_torrent(*arg1,arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__create_torrent, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_create_torrent__SWIG_4(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::file_storage *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::create_torrent *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_create_torrent__SWIG_4.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__file_storage,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_create_torrent" "', argument " "1"" of type '" "libtorrent::file_storage &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_create_torrent" "', argument " "1"" of type '" "libtorrent::file_storage &""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  result = (libtorrent::create_torrent *)new libtorrent::create_torrent(*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__create_torrent, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_create_torrent__SWIG_5(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::torrent_info *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libtorrent::create_torrent *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_create_torrent__SWIG_5.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__torrent_info,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_create_torrent" "', argument " "1"" of type '" "libtorrent::torrent_info const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_create_torrent" "', argument " "1"" of type '" "libtorrent::torrent_info const &""'"); 
  }
  arg1 = (libtorrent::torrent_info *)(argp1);
  result = (libtorrent::create_torrent *)new libtorrent::create_torrent((libtorrent::torrent_info const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__create_torrent, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_create_torrent(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_create_torrent__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_create_torrent__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_create_torrent__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_create_torrent__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_create_torrent__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_create_torrent__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_create_torrent__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_create_torrent__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_create_torrent__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_create_torrent__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_create_torrent__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_create_torrent__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_create_torrent");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_create_torrent(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_create_torrent(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_create_torrent(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_create_torrent(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::create_torrent * arg1 = (libtorrent::create_torrent *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_create_torrent_generate(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::entry result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_create_torrent_generate.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__create_torrent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "create_torrent_generate" "', argument " "1"" of type '" "libtorrent::create_torrent const *""'"); 
  }
  arg1 = (libtorrent::create_torrent *)(argp1);
  result = ((libtorrent::create_torrent const *)arg1)->generate();
  jsresult = SWIG_NewPointerObj((new libtorrent::entry((const libtorrent::entry&)(result))), SWIGTYPE_p_libtorrent__entry, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_create_torrent_files(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::file_storage *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_create_torrent_files.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__create_torrent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "create_torrent_files" "', argument " "1"" of type '" "libtorrent::create_torrent const *""'"); 
  }
  arg1 = (libtorrent::create_torrent *)(argp1);
  result = (libtorrent::file_storage *) &((libtorrent::create_torrent const *)arg1)->files();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__file_storage, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_create_torrent_set_comment(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_create_torrent_set_comment.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__create_torrent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "create_torrent_set_comment" "', argument " "1"" of type '" "libtorrent::create_torrent *""'"); 
  }
  arg1 = (libtorrent::create_torrent *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "create_torrent_set_comment" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  (arg1)->set_comment((char const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_create_torrent_set_creator(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_create_torrent_set_creator.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__create_torrent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "create_torrent_set_creator" "', argument " "1"" of type '" "libtorrent::create_torrent *""'"); 
  }
  arg1 = (libtorrent::create_torrent *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "create_torrent_set_creator" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  (arg1)->set_creator((char const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_create_torrent_set_hash(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  int arg2 ;
  libtorrent::sha1_hash *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_create_torrent_set_hash.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__create_torrent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "create_torrent_set_hash" "', argument " "1"" of type '" "libtorrent::create_torrent *""'"); 
  }
  arg1 = (libtorrent::create_torrent *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "create_torrent_set_hash" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_libtorrent__sha1_hash,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "create_torrent_set_hash" "', argument " "3"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "create_torrent_set_hash" "', argument " "3"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  arg3 = (libtorrent::sha1_hash *)(argp3);
  (arg1)->set_hash(arg2,(libtorrent::sha1_hash const &)*arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_create_torrent_set_file_hash(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  int arg2 ;
  libtorrent::sha1_hash *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_create_torrent_set_file_hash.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__create_torrent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "create_torrent_set_file_hash" "', argument " "1"" of type '" "libtorrent::create_torrent *""'"); 
  }
  arg1 = (libtorrent::create_torrent *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "create_torrent_set_file_hash" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_libtorrent__sha1_hash,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "create_torrent_set_file_hash" "', argument " "3"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "create_torrent_set_file_hash" "', argument " "3"" of type '" "libtorrent::sha1_hash const &""'"); 
  }
  arg3 = (libtorrent::sha1_hash *)(argp3);
  (arg1)->set_file_hash(arg2,(libtorrent::sha1_hash const &)*arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_create_torrent_add_url_seed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  SwigValueWrapper< libtorrent::string_view > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_create_torrent_add_url_seed.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__create_torrent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "create_torrent_add_url_seed" "', argument " "1"" of type '" "libtorrent::create_torrent *""'"); 
  }
  arg1 = (libtorrent::create_torrent *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__string_view,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "create_torrent_add_url_seed" "', argument " "2"" of type '" "libtorrent::string_view""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "create_torrent_add_url_seed" "', argument " "2"" of type '" "libtorrent::string_view""'");
    } else {
      arg2 = *((libtorrent::string_view *)(argp2));
    }
  }
  (arg1)->add_url_seed(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_create_torrent_add_http_seed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  SwigValueWrapper< libtorrent::string_view > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_create_torrent_add_http_seed.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__create_torrent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "create_torrent_add_http_seed" "', argument " "1"" of type '" "libtorrent::create_torrent *""'"); 
  }
  arg1 = (libtorrent::create_torrent *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__string_view,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "create_torrent_add_http_seed" "', argument " "2"" of type '" "libtorrent::string_view""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "create_torrent_add_http_seed" "', argument " "2"" of type '" "libtorrent::string_view""'");
    } else {
      arg2 = *((libtorrent::string_view *)(argp2));
    }
  }
  (arg1)->add_http_seed(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_create_torrent_add_node(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  std::pair< std::string,int > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_create_torrent_add_node.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__create_torrent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "create_torrent_add_node" "', argument " "1"" of type '" "libtorrent::create_torrent *""'"); 
  }
  arg1 = (libtorrent::create_torrent *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__pairT_std__string_int_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "create_torrent_add_node" "', argument " "2"" of type '" "std::pair< std::string,int >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "create_torrent_add_node" "', argument " "2"" of type '" "std::pair< std::string,int >""'");
    } else {
      arg2 = *((std::pair< std::string,int > *)(argp2));
    }
  }
  (arg1)->add_node(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_create_torrent_add_tracker__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  SwigValueWrapper< libtorrent::string_view > arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__create_torrent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "create_torrent_add_tracker" "', argument " "1"" of type '" "libtorrent::create_torrent *""'"); 
  }
  arg1 = (libtorrent::create_torrent *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__string_view,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "create_torrent_add_tracker" "', argument " "2"" of type '" "libtorrent::string_view""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "create_torrent_add_tracker" "', argument " "2"" of type '" "libtorrent::string_view""'");
    } else {
      arg2 = *((libtorrent::string_view *)(argp2));
    }
  }
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "create_torrent_add_tracker" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->add_tracker(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_create_torrent_add_tracker__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  SwigValueWrapper< libtorrent::string_view > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__create_torrent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "create_torrent_add_tracker" "', argument " "1"" of type '" "libtorrent::create_torrent *""'"); 
  }
  arg1 = (libtorrent::create_torrent *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__string_view,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "create_torrent_add_tracker" "', argument " "2"" of type '" "libtorrent::string_view""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "create_torrent_add_tracker" "', argument " "2"" of type '" "libtorrent::string_view""'");
    } else {
      arg2 = *((libtorrent::string_view *)(argp2));
    }
  }
  (arg1)->add_tracker(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_create_torrent__wrap_create_torrent_add_tracker(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_create_torrent_add_tracker__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_create_torrent_add_tracker__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_create_torrent_add_tracker__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_create_torrent_add_tracker__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function add_tracker.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_create_torrent_set_priv(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_create_torrent_set_priv.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__create_torrent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "create_torrent_set_priv" "', argument " "1"" of type '" "libtorrent::create_torrent *""'"); 
  }
  arg1 = (libtorrent::create_torrent *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "create_torrent_set_priv" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->set_priv(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_create_torrent_priv(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_create_torrent_priv.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__create_torrent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "create_torrent_priv" "', argument " "1"" of type '" "libtorrent::create_torrent const *""'"); 
  }
  arg1 = (libtorrent::create_torrent *)(argp1);
  result = (bool)((libtorrent::create_torrent const *)arg1)->priv();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_create_torrent_num_pieces(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_create_torrent_num_pieces.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__create_torrent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "create_torrent_num_pieces" "', argument " "1"" of type '" "libtorrent::create_torrent const *""'"); 
  }
  arg1 = (libtorrent::create_torrent *)(argp1);
  result = (int)((libtorrent::create_torrent const *)arg1)->num_pieces();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_create_torrent_piece_length(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_create_torrent_piece_length.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__create_torrent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "create_torrent_piece_length" "', argument " "1"" of type '" "libtorrent::create_torrent const *""'"); 
  }
  arg1 = (libtorrent::create_torrent *)(argp1);
  result = (int)((libtorrent::create_torrent const *)arg1)->piece_length();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_create_torrent_piece_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_create_torrent_piece_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__create_torrent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "create_torrent_piece_size" "', argument " "1"" of type '" "libtorrent::create_torrent const *""'"); 
  }
  arg1 = (libtorrent::create_torrent *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "create_torrent_piece_size" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (int)((libtorrent::create_torrent const *)arg1)->piece_size(arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_create_torrent_merkle_tree(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< libtorrent::sha1_hash > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_create_torrent_merkle_tree.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__create_torrent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "create_torrent_merkle_tree" "', argument " "1"" of type '" "libtorrent::create_torrent const *""'"); 
  }
  arg1 = (libtorrent::create_torrent *)(argp1);
  result = (std::vector< libtorrent::sha1_hash > *) &((libtorrent::create_torrent const *)arg1)->merkle_tree();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_libtorrent__sha1_hash_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_create_torrent_add_similar_torrent(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  libtorrent::sha1_hash arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_create_torrent_add_similar_torrent.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__create_torrent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "create_torrent_add_similar_torrent" "', argument " "1"" of type '" "libtorrent::create_torrent *""'"); 
  }
  arg1 = (libtorrent::create_torrent *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__sha1_hash,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "create_torrent_add_similar_torrent" "', argument " "2"" of type '" "libtorrent::sha1_hash""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "create_torrent_add_similar_torrent" "', argument " "2"" of type '" "libtorrent::sha1_hash""'");
    } else {
      arg2 = *((libtorrent::sha1_hash *)(argp2));
    }
  }
  (arg1)->add_similar_torrent(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_create_torrent_add_collection(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  SwigValueWrapper< libtorrent::string_view > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_create_torrent_add_collection.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__create_torrent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "create_torrent_add_collection" "', argument " "1"" of type '" "libtorrent::create_torrent *""'"); 
  }
  arg1 = (libtorrent::create_torrent *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__string_view,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "create_torrent_add_collection" "', argument " "2"" of type '" "libtorrent::string_view""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "create_torrent_add_collection" "', argument " "2"" of type '" "libtorrent::string_view""'");
    } else {
      arg2 = *((libtorrent::string_view *)(argp2));
    }
  }
  (arg1)->add_collection(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_add_files__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__file_storage,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_files" "', argument " "1"" of type '" "libtorrent::file_storage &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "add_files" "', argument " "1"" of type '" "libtorrent::file_storage &""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "add_files" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "add_files" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "add_files" "', argument " "3"" of type '" "std::uint32_t""'");
  } 
  arg3 = (std::uint32_t)(val3);
  libtorrent::add_files(*arg1,(std::string const &)*arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_add_files__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__file_storage,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_files" "', argument " "1"" of type '" "libtorrent::file_storage &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "add_files" "', argument " "1"" of type '" "libtorrent::file_storage &""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "add_files" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "add_files" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  libtorrent::add_files(*arg1,(std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_libtorrent__wrap_add_files(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_add_files__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_add_files__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_add_files__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_add_files__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function add_files.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_set_piece_hashes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::create_torrent *arg1 = 0 ;
  std::string *arg2 = 0 ;
  libtorrent::error_code *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_set_piece_hashes.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__create_torrent,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_piece_hashes" "', argument " "1"" of type '" "libtorrent::create_torrent &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "set_piece_hashes" "', argument " "1"" of type '" "libtorrent::create_torrent &""'"); 
  }
  arg1 = (libtorrent::create_torrent *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "set_piece_hashes" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "set_piece_hashes" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_boost__system__error_code,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "set_piece_hashes" "', argument " "3"" of type '" "libtorrent::error_code &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "set_piece_hashes" "', argument " "3"" of type '" "libtorrent::error_code &""'"); 
  }
  arg3 = (libtorrent::error_code *)(argp3);
  libtorrent::set_piece_hashes(*arg1,(std::string const &)*arg2,*arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_announce_entry__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::string arg1 ;
  libtorrent::announce_entry *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_announce_entry__SWIG_0.");
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_announce_entry" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (libtorrent::announce_entry *)new libtorrent::announce_entry(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__announce_entry, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_announce_entry__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::announce_entry *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_announce_entry__SWIG_1.");
  result = (libtorrent::announce_entry *)new libtorrent::announce_entry();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__announce_entry, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_announce_entry(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_announce_entry(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_announce_entry(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_announce_entry(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::announce_entry * arg1 = (libtorrent::announce_entry *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_announce_entry__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::announce_entry *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libtorrent::announce_entry *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_announce_entry__SWIG_2.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__announce_entry,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_announce_entry" "', argument " "1"" of type '" "libtorrent::announce_entry const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_announce_entry" "', argument " "1"" of type '" "libtorrent::announce_entry const &""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  result = (libtorrent::announce_entry *)new libtorrent::announce_entry((libtorrent::announce_entry const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__announce_entry, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_announce_entry(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_announce_entry__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_announce_entry__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_announce_entry__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_announce_entry__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_announce_entry__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_announce_entry__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_announce_entry");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_announce_entry_url_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_url_set" "', argument " "1"" of type '" "libtorrent::announce_entry *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(value, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "announce_entry_url_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "announce_entry_url_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->url = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_announce_entry_url_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_url_get" "', argument " "1"" of type '" "libtorrent::announce_entry *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  result = (std::string *) & ((arg1)->url);
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_announce_entry_trackerid_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_trackerid_set" "', argument " "1"" of type '" "libtorrent::announce_entry *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(value, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "announce_entry_trackerid_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "announce_entry_trackerid_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->trackerid = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_announce_entry_trackerid_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_trackerid_get" "', argument " "1"" of type '" "libtorrent::announce_entry *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  result = (std::string *) & ((arg1)->trackerid);
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_announce_entry_message_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_message_set" "', argument " "1"" of type '" "libtorrent::announce_entry *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(value, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "announce_entry_message_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "announce_entry_message_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->message = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_announce_entry_message_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_message_get" "', argument " "1"" of type '" "libtorrent::announce_entry *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  result = (std::string *) & ((arg1)->message);
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_announce_entry_last_error_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_last_error_set" "', argument " "1"" of type '" "libtorrent::announce_entry *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "announce_entry_last_error_set" "', argument " "2"" of type '" "libtorrent::error_code *""'"); 
  }
  arg2 = (libtorrent::error_code *)(argp2);
  if (arg1) (arg1)->last_error = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_announce_entry_last_error_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::error_code *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_last_error_get" "', argument " "1"" of type '" "libtorrent::announce_entry *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  result = (libtorrent::error_code *)& ((arg1)->last_error);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_announce_entry_next_announce_in(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_announce_entry_next_announce_in.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_next_announce_in" "', argument " "1"" of type '" "libtorrent::announce_entry const *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  result = (int)((libtorrent::announce_entry const *)arg1)->next_announce_in();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_announce_entry_min_announce_in(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_announce_entry_min_announce_in.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_min_announce_in" "', argument " "1"" of type '" "libtorrent::announce_entry const *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  result = (int)((libtorrent::announce_entry const *)arg1)->min_announce_in();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_announce_entry_scrape_incomplete_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_scrape_incomplete_set" "', argument " "1"" of type '" "libtorrent::announce_entry *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "announce_entry_scrape_incomplete_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->scrape_incomplete = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_announce_entry_scrape_incomplete_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_scrape_incomplete_get" "', argument " "1"" of type '" "libtorrent::announce_entry *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  result = (int) ((arg1)->scrape_incomplete);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_announce_entry_scrape_complete_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_scrape_complete_set" "', argument " "1"" of type '" "libtorrent::announce_entry *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "announce_entry_scrape_complete_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->scrape_complete = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_announce_entry_scrape_complete_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_scrape_complete_get" "', argument " "1"" of type '" "libtorrent::announce_entry *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  result = (int) ((arg1)->scrape_complete);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_announce_entry_scrape_downloaded_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_scrape_downloaded_set" "', argument " "1"" of type '" "libtorrent::announce_entry *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "announce_entry_scrape_downloaded_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->scrape_downloaded = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_announce_entry_scrape_downloaded_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_scrape_downloaded_get" "', argument " "1"" of type '" "libtorrent::announce_entry *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  result = (int) ((arg1)->scrape_downloaded);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_announce_entry_tier_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  std::uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_tier_set" "', argument " "1"" of type '" "libtorrent::announce_entry *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "announce_entry_tier_set" "', argument " "2"" of type '" "std::uint8_t""'");
  } 
  arg2 = (std::uint8_t)(val2);
  if (arg1) (arg1)->tier = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_announce_entry_tier_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_tier_get" "', argument " "1"" of type '" "libtorrent::announce_entry *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  result = (std::uint8_t) ((arg1)->tier);
  jsresult = SWIG_From_signed_SS_char((signed char)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_announce_entry_fail_limit_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  std::uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_fail_limit_set" "', argument " "1"" of type '" "libtorrent::announce_entry *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "announce_entry_fail_limit_set" "', argument " "2"" of type '" "std::uint8_t""'");
  } 
  arg2 = (std::uint8_t)(val2);
  if (arg1) (arg1)->fail_limit = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_announce_entry_fail_limit_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_fail_limit_get" "', argument " "1"" of type '" "libtorrent::announce_entry *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  result = (std::uint8_t) ((arg1)->fail_limit);
  jsresult = SWIG_From_signed_SS_char((signed char)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_announce_entry_fails_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  std::uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_fails_set" "', argument " "1"" of type '" "libtorrent::announce_entry *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "announce_entry_fails_set" "', argument " "2"" of type '" "std::uint8_t""'");
  } 
  arg2 = (std::uint8_t)(val2);
  if (arg1) (arg1)->fails = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_announce_entry_fails_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_fails_get" "', argument " "1"" of type '" "libtorrent::announce_entry *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  result = (std::uint8_t) ((arg1)->fails);
  jsresult = SWIG_From_signed_SS_char((signed char)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_announce_entry_updating_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_updating_set" "', argument " "1"" of type '" "libtorrent::announce_entry *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "announce_entry_updating_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->updating = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_announce_entry_updating_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_updating_get" "', argument " "1"" of type '" "libtorrent::announce_entry *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  result = (bool) ((arg1)->updating);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_announce_entry_source_torrent(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::announce_entry::source_torrent));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_announce_entry_source_client(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::announce_entry::source_client));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_announce_entry_source_magnet_link(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::announce_entry::source_magnet_link));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_announce_entry_source_tex(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::announce_entry::source_tex));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_announce_entry_source_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  std::uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_source_set" "', argument " "1"" of type '" "libtorrent::announce_entry *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "announce_entry_source_set" "', argument " "2"" of type '" "std::uint8_t""'");
  } 
  arg2 = (std::uint8_t)(val2);
  if (arg1) (arg1)->source = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_announce_entry_source_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_source_get" "', argument " "1"" of type '" "libtorrent::announce_entry *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  result = (std::uint8_t) ((arg1)->source);
  jsresult = SWIG_From_signed_SS_char((signed char)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_announce_entry_verified_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_verified_set" "', argument " "1"" of type '" "libtorrent::announce_entry *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "announce_entry_verified_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->verified = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_announce_entry_verified_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_verified_get" "', argument " "1"" of type '" "libtorrent::announce_entry *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  result = (bool) ((arg1)->verified);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_announce_entry_start_sent_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_start_sent_set" "', argument " "1"" of type '" "libtorrent::announce_entry *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "announce_entry_start_sent_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->start_sent = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_announce_entry_start_sent_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_start_sent_get" "', argument " "1"" of type '" "libtorrent::announce_entry *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  result = (bool) ((arg1)->start_sent);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_announce_entry_complete_sent_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_complete_sent_set" "', argument " "1"" of type '" "libtorrent::announce_entry *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "announce_entry_complete_sent_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->complete_sent = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_announce_entry_complete_sent_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_complete_sent_get" "', argument " "1"" of type '" "libtorrent::announce_entry *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  result = (bool) ((arg1)->complete_sent);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_announce_entry_triggered_manually_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_triggered_manually_set" "', argument " "1"" of type '" "libtorrent::announce_entry *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "announce_entry_triggered_manually_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->triggered_manually = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_announce_entry_triggered_manually_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_triggered_manually_get" "', argument " "1"" of type '" "libtorrent::announce_entry *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  result = (bool) ((arg1)->triggered_manually);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_announce_entry_reset(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_announce_entry_reset.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_reset" "', argument " "1"" of type '" "libtorrent::announce_entry *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  (arg1)->reset();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_announce_entry_is_working(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_announce_entry_is_working.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_is_working" "', argument " "1"" of type '" "libtorrent::announce_entry const *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  result = (bool)((libtorrent::announce_entry const *)arg1)->is_working();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_announce_entry_trim(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_announce_entry_trim.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__announce_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "announce_entry_trim" "', argument " "1"" of type '" "libtorrent::announce_entry *""'"); 
  }
  arg1 = (libtorrent::announce_entry *)(argp1);
  (arg1)->trim();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_torrent_status__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::torrent_status *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_torrent_status__SWIG_0.");
  result = (libtorrent::torrent_status *)new libtorrent::torrent_status();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__torrent_status, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_torrent_status(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_torrent_status(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_torrent_status(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_torrent_status(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          libtorrent::torrent_status * arg1 = (libtorrent::torrent_status *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_torrent_status__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  libtorrent::torrent_status *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libtorrent::torrent_status *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_torrent_status__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__torrent_status,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_torrent_status" "', argument " "1"" of type '" "libtorrent::torrent_status const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_torrent_status" "', argument " "1"" of type '" "libtorrent::torrent_status const &""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (libtorrent::torrent_status *)new libtorrent::torrent_status((libtorrent::torrent_status const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_libtorrent__torrent_status, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_torrent_status(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_torrent_status__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_torrent_status__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_torrent_status__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_torrent_status__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_torrent_status");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_status_op_eq(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  libtorrent::torrent_status *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_status_op_eq.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_op_eq" "', argument " "1"" of type '" "libtorrent::torrent_status const *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__torrent_status,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_status_op_eq" "', argument " "2"" of type '" "libtorrent::torrent_status const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_status_op_eq" "', argument " "2"" of type '" "libtorrent::torrent_status const &""'"); 
  }
  arg2 = (libtorrent::torrent_status *)(argp2);
  result = (bool)((libtorrent::torrent_status const *)arg1)->operator ==((libtorrent::torrent_status const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_torrent_status_handle_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  libtorrent::torrent_handle *arg2 = (libtorrent::torrent_handle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_handle_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_status_handle_set" "', argument " "2"" of type '" "libtorrent::torrent_handle *""'"); 
  }
  arg2 = (libtorrent::torrent_handle *)(argp2);
  if (arg1) (arg1)->handle = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_handle_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::torrent_handle *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_handle_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (libtorrent::torrent_handle *)& ((arg1)->handle);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__torrent_handle, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_status_checking_files(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_status::checking_files));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_status_downloading_metadata(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_status::downloading_metadata));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_status_downloading(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_status::downloading));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_status_finished(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_status::finished));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_status_seeding(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_status::seeding));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_status_allocating(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_status::allocating));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_status_checking_resume_data(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_status::checking_resume_data));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_errc_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_errc_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_status_errc_set" "', argument " "2"" of type '" "libtorrent::error_code *""'"); 
  }
  arg2 = (libtorrent::error_code *)(argp2);
  if (arg1) (arg1)->errc = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_errc_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::error_code *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_errc_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (libtorrent::error_code *)& ((arg1)->errc);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__system__error_code, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_error_file_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_error_file_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_error_file_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->error_file = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_error_file_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_error_file_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (int) ((arg1)->error_file);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_status_error_file_none(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_status::error_file_none));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_status_error_file_url(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_status::error_file_url));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_status_error_file_ssl_ctx(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_status::error_file_ssl_ctx));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_libtorrent_torrent_status_error_file_metadata(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(libtorrent::torrent_status::error_file_metadata));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_save_path_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_save_path_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(value, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_status_save_path_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_status_save_path_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->save_path = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_save_path_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_save_path_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (std::string *) & ((arg1)->save_path);
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_name_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_name_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(value, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_status_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_status_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->name = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_name_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_name_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (std::string *) & ((arg1)->name);
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_current_tracker_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_current_tracker_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(value, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_status_current_tracker_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "torrent_status_current_tracker_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->current_tracker = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_current_tracker_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_current_tracker_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (std::string *) & ((arg1)->current_tracker);
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_total_download_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  std::int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_total_download_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_total_download_set" "', argument " "2"" of type '" "std::int64_t""'");
  } 
  arg2 = (std::int64_t)(val2);
  if (arg1) (arg1)->total_download = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_total_download_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::int64_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_total_download_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (std::int64_t) ((arg1)->total_download);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_total_upload_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  std::int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_total_upload_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_total_upload_set" "', argument " "2"" of type '" "std::int64_t""'");
  } 
  arg2 = (std::int64_t)(val2);
  if (arg1) (arg1)->total_upload = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_total_upload_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::int64_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_total_upload_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (std::int64_t) ((arg1)->total_upload);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_total_payload_download_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  std::int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_total_payload_download_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_total_payload_download_set" "', argument " "2"" of type '" "std::int64_t""'");
  } 
  arg2 = (std::int64_t)(val2);
  if (arg1) (arg1)->total_payload_download = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_total_payload_download_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::int64_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_total_payload_download_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (std::int64_t) ((arg1)->total_payload_download);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_total_payload_upload_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  std::int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_total_payload_upload_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_total_payload_upload_set" "', argument " "2"" of type '" "std::int64_t""'");
  } 
  arg2 = (std::int64_t)(val2);
  if (arg1) (arg1)->total_payload_upload = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_total_payload_upload_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::int64_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_total_payload_upload_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (std::int64_t) ((arg1)->total_payload_upload);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_total_failed_bytes_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  std::int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_total_failed_bytes_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_total_failed_bytes_set" "', argument " "2"" of type '" "std::int64_t""'");
  } 
  arg2 = (std::int64_t)(val2);
  if (arg1) (arg1)->total_failed_bytes = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_total_failed_bytes_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::int64_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_total_failed_bytes_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (std::int64_t) ((arg1)->total_failed_bytes);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_total_redundant_bytes_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  std::int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_total_redundant_bytes_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_total_redundant_bytes_set" "', argument " "2"" of type '" "std::int64_t""'");
  } 
  arg2 = (std::int64_t)(val2);
  if (arg1) (arg1)->total_redundant_bytes = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_total_redundant_bytes_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::int64_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_total_redundant_bytes_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (std::int64_t) ((arg1)->total_redundant_bytes);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_pieces_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  libtorrent::bitfield *arg2 = (libtorrent::bitfield *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_pieces_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__bitfield, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_status_pieces_set" "', argument " "2"" of type '" "libtorrent::bitfield *""'"); 
  }
  arg2 = (libtorrent::bitfield *)(argp2);
  if (arg1) (arg1)->pieces = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_pieces_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::bitfield *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_pieces_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (libtorrent::bitfield *)& ((arg1)->pieces);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__bitfield, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_verified_pieces_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  libtorrent::bitfield *arg2 = (libtorrent::bitfield *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_verified_pieces_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__bitfield, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_status_verified_pieces_set" "', argument " "2"" of type '" "libtorrent::bitfield *""'"); 
  }
  arg2 = (libtorrent::bitfield *)(argp2);
  if (arg1) (arg1)->verified_pieces = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_verified_pieces_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::bitfield *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_verified_pieces_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (libtorrent::bitfield *)& ((arg1)->verified_pieces);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__bitfield, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_total_done_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  std::int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_total_done_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_total_done_set" "', argument " "2"" of type '" "std::int64_t""'");
  } 
  arg2 = (std::int64_t)(val2);
  if (arg1) (arg1)->total_done = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_total_done_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::int64_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_total_done_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (std::int64_t) ((arg1)->total_done);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_total_wanted_done_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  std::int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_total_wanted_done_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_total_wanted_done_set" "', argument " "2"" of type '" "std::int64_t""'");
  } 
  arg2 = (std::int64_t)(val2);
  if (arg1) (arg1)->total_wanted_done = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_total_wanted_done_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::int64_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_total_wanted_done_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (std::int64_t) ((arg1)->total_wanted_done);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_total_wanted_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  std::int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_total_wanted_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_total_wanted_set" "', argument " "2"" of type '" "std::int64_t""'");
  } 
  arg2 = (std::int64_t)(val2);
  if (arg1) (arg1)->total_wanted = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_total_wanted_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::int64_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_total_wanted_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (std::int64_t) ((arg1)->total_wanted);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_all_time_upload_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  std::int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_all_time_upload_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_all_time_upload_set" "', argument " "2"" of type '" "std::int64_t""'");
  } 
  arg2 = (std::int64_t)(val2);
  if (arg1) (arg1)->all_time_upload = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_all_time_upload_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::int64_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_all_time_upload_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (std::int64_t) ((arg1)->all_time_upload);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_all_time_download_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  std::int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_all_time_download_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_all_time_download_set" "', argument " "2"" of type '" "std::int64_t""'");
  } 
  arg2 = (std::int64_t)(val2);
  if (arg1) (arg1)->all_time_download = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_all_time_download_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::int64_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_all_time_download_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (std::int64_t) ((arg1)->all_time_download);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_added_time_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  time_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_added_time_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_added_time_set" "', argument " "2"" of type '" "time_t""'");
  } 
  arg2 = (time_t)(val2);
  if (arg1) (arg1)->added_time = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_added_time_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  time_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_added_time_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (time_t) ((arg1)->added_time);
  jsresult = SWIG_From_long((long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_completed_time_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  time_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_completed_time_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_completed_time_set" "', argument " "2"" of type '" "time_t""'");
  } 
  arg2 = (time_t)(val2);
  if (arg1) (arg1)->completed_time = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_completed_time_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  time_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_completed_time_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (time_t) ((arg1)->completed_time);
  jsresult = SWIG_From_long((long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_last_seen_complete_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  time_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_last_seen_complete_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_last_seen_complete_set" "', argument " "2"" of type '" "time_t""'");
  } 
  arg2 = (time_t)(val2);
  if (arg1) (arg1)->last_seen_complete = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_last_seen_complete_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  time_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_last_seen_complete_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (time_t) ((arg1)->last_seen_complete);
  jsresult = SWIG_From_long((long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_storage_mode_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  libtorrent::storage_mode_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_storage_mode_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_storage_mode_set" "', argument " "2"" of type '" "libtorrent::storage_mode_t""'");
  } 
  arg2 = (libtorrent::storage_mode_t)(val2);
  if (arg1) (arg1)->storage_mode = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_storage_mode_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::storage_mode_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_storage_mode_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (libtorrent::storage_mode_t) ((arg1)->storage_mode);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_progress_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_progress_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_progress_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->progress = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_progress_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_progress_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (float) ((arg1)->progress);
  jsresult = SWIG_From_float((float)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_progress_ppm_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_progress_ppm_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_progress_ppm_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->progress_ppm = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_progress_ppm_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_progress_ppm_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (int) ((arg1)->progress_ppm);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_queue_position_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_queue_position_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_queue_position_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->queue_position = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_queue_position_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_queue_position_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (int) ((arg1)->queue_position);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_download_rate_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_download_rate_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_download_rate_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->download_rate = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_download_rate_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_download_rate_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (int) ((arg1)->download_rate);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_upload_rate_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_upload_rate_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_upload_rate_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->upload_rate = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_upload_rate_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_upload_rate_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (int) ((arg1)->upload_rate);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_download_payload_rate_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_download_payload_rate_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_download_payload_rate_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->download_payload_rate = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_download_payload_rate_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_download_payload_rate_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (int) ((arg1)->download_payload_rate);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_upload_payload_rate_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_upload_payload_rate_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_upload_payload_rate_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->upload_payload_rate = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_upload_payload_rate_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_upload_payload_rate_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (int) ((arg1)->upload_payload_rate);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_num_seeds_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_num_seeds_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_num_seeds_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->num_seeds = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_num_seeds_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_num_seeds_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (int) ((arg1)->num_seeds);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_num_peers_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_num_peers_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_num_peers_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->num_peers = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_num_peers_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_num_peers_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (int) ((arg1)->num_peers);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_num_complete_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_num_complete_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_num_complete_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->num_complete = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_num_complete_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_num_complete_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (int) ((arg1)->num_complete);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_num_incomplete_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_num_incomplete_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_num_incomplete_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->num_incomplete = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_num_incomplete_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_num_incomplete_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (int) ((arg1)->num_incomplete);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_list_seeds_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_list_seeds_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_list_seeds_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->list_seeds = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_list_seeds_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_list_seeds_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (int) ((arg1)->list_seeds);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_list_peers_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_list_peers_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_list_peers_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->list_peers = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_list_peers_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_list_peers_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (int) ((arg1)->list_peers);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_connect_candidates_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_connect_candidates_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_connect_candidates_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->connect_candidates = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_connect_candidates_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_connect_candidates_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (int) ((arg1)->connect_candidates);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_num_pieces_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_num_pieces_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_num_pieces_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->num_pieces = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_num_pieces_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_num_pieces_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (int) ((arg1)->num_pieces);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_distributed_full_copies_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_distributed_full_copies_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_distributed_full_copies_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->distributed_full_copies = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_distributed_full_copies_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_distributed_full_copies_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (int) ((arg1)->distributed_full_copies);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_distributed_fraction_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_distributed_fraction_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_distributed_fraction_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->distributed_fraction = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_distributed_fraction_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_distributed_fraction_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (int) ((arg1)->distributed_fraction);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_distributed_copies_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_distributed_copies_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_distributed_copies_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->distributed_copies = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_distributed_copies_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_distributed_copies_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (float) ((arg1)->distributed_copies);
  jsresult = SWIG_From_float((float)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_block_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_block_size_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_block_size_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->block_size = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_block_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_block_size_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (int) ((arg1)->block_size);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_num_uploads_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_num_uploads_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_num_uploads_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->num_uploads = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_num_uploads_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_num_uploads_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (int) ((arg1)->num_uploads);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_num_connections_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_num_connections_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_num_connections_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->num_connections = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_num_connections_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_num_connections_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (int) ((arg1)->num_connections);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_uploads_limit_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_uploads_limit_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_uploads_limit_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->uploads_limit = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_uploads_limit_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_uploads_limit_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (int) ((arg1)->uploads_limit);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_connections_limit_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_connections_limit_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_connections_limit_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->connections_limit = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_connections_limit_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_connections_limit_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (int) ((arg1)->connections_limit);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_up_bandwidth_queue_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_up_bandwidth_queue_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_up_bandwidth_queue_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->up_bandwidth_queue = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_up_bandwidth_queue_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_up_bandwidth_queue_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (int) ((arg1)->up_bandwidth_queue);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_down_bandwidth_queue_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_down_bandwidth_queue_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_down_bandwidth_queue_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->down_bandwidth_queue = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_down_bandwidth_queue_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_down_bandwidth_queue_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (int) ((arg1)->down_bandwidth_queue);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_time_since_upload_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_time_since_upload_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_time_since_upload_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->time_since_upload = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_time_since_upload_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_time_since_upload_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (int) ((arg1)->time_since_upload);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_time_since_download_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_time_since_download_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_time_since_download_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->time_since_download = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_time_since_download_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_time_since_download_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (int) ((arg1)->time_since_download);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_active_time_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_active_time_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_active_time_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->active_time = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_active_time_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_active_time_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (int) ((arg1)->active_time);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_finished_time_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_finished_time_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_finished_time_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->finished_time = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_finished_time_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_finished_time_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (int) ((arg1)->finished_time);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_seeding_time_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_seeding_time_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_seeding_time_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->seeding_time = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_seeding_time_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_seeding_time_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (int) ((arg1)->seeding_time);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_seed_rank_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_seed_rank_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_seed_rank_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->seed_rank = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_seed_rank_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_seed_rank_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (int) ((arg1)->seed_rank);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_last_scrape_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_last_scrape_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_last_scrape_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->last_scrape = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_last_scrape_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_last_scrape_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (int) ((arg1)->last_scrape);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_state_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  libtorrent::torrent_status::state_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_state_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_state_set" "', argument " "2"" of type '" "libtorrent::torrent_status::state_t""'");
  } 
  arg2 = (libtorrent::torrent_status::state_t)(val2);
  if (arg1) (arg1)->state = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_state_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::torrent_status::state_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_state_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (libtorrent::torrent_status::state_t) ((arg1)->state);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_need_save_resume_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_need_save_resume_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_need_save_resume_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->need_save_resume = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_need_save_resume_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_need_save_resume_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (bool) ((arg1)->need_save_resume);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_ip_filter_applies_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_ip_filter_applies_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_ip_filter_applies_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->ip_filter_applies = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_ip_filter_applies_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_ip_filter_applies_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (bool) ((arg1)->ip_filter_applies);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_upload_mode_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_upload_mode_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_upload_mode_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->upload_mode = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_upload_mode_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_upload_mode_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (bool) ((arg1)->upload_mode);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_share_mode_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_share_mode_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_share_mode_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->share_mode = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_share_mode_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_share_mode_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (bool) ((arg1)->share_mode);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_super_seeding_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_super_seeding_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_super_seeding_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->super_seeding = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_super_seeding_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_super_seeding_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (bool) ((arg1)->super_seeding);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_paused_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_paused_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_paused_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->paused = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_paused_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_paused_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (bool) ((arg1)->paused);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_auto_managed_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_auto_managed_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_auto_managed_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->auto_managed = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_auto_managed_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_auto_managed_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (bool) ((arg1)->auto_managed);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_sequential_download_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_sequential_download_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_sequential_download_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->sequential_download = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_sequential_download_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_sequential_download_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (bool) ((arg1)->sequential_download);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_is_seeding_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_is_seeding_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_is_seeding_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->is_seeding = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_is_seeding_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_is_seeding_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (bool) ((arg1)->is_seeding);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_is_finished_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_is_finished_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_is_finished_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->is_finished = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_is_finished_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_is_finished_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (bool) ((arg1)->is_finished);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_has_metadata_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_has_metadata_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_has_metadata_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->has_metadata = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_has_metadata_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_has_metadata_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (bool) ((arg1)->has_metadata);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_has_incoming_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_has_incoming_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_has_incoming_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->has_incoming = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_has_incoming_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_has_incoming_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (bool) ((arg1)->has_incoming);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_seed_mode_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_seed_mode_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_seed_mode_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->seed_mode = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_seed_mode_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_seed_mode_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (bool) ((arg1)->seed_mode);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_moving_storage_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_moving_storage_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_moving_storage_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->moving_storage = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_moving_storage_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_moving_storage_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (bool) ((arg1)->moving_storage);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_is_loaded_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_is_loaded_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_is_loaded_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->is_loaded = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_is_loaded_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_is_loaded_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (bool) ((arg1)->is_loaded);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_announcing_to_trackers_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_announcing_to_trackers_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_announcing_to_trackers_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->announcing_to_trackers = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_announcing_to_trackers_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_announcing_to_trackers_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (bool) ((arg1)->announcing_to_trackers);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_announcing_to_lsd_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_announcing_to_lsd_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_announcing_to_lsd_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->announcing_to_lsd = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_announcing_to_lsd_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_announcing_to_lsd_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (bool) ((arg1)->announcing_to_lsd);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_announcing_to_dht_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_announcing_to_dht_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_announcing_to_dht_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->announcing_to_dht = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_announcing_to_dht_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_announcing_to_dht_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (bool) ((arg1)->announcing_to_dht);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_stop_when_ready_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_stop_when_ready_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "torrent_status_stop_when_ready_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->stop_when_ready = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_stop_when_ready_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_stop_when_ready_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (bool) ((arg1)->stop_when_ready);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_torrent_status_info_hash_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  libtorrent::sha1_hash *arg2 = (libtorrent::sha1_hash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_info_hash_set" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "torrent_status_info_hash_set" "', argument " "2"" of type '" "libtorrent::sha1_hash *""'"); 
  }
  arg2 = (libtorrent::sha1_hash *)(argp2);
  if (arg1) (arg1)->info_hash = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_torrent_status_info_hash_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::sha1_hash *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_info_hash_get" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (libtorrent::sha1_hash *)& ((arg1)->info_hash);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__sha1_hash, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_torrent_status_torrent_file_ptr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libtorrent::torrent_info *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_status_torrent_file_ptr.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_torrent_file_ptr" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (libtorrent::torrent_info *)libtorrent_torrent_status_torrent_file_ptr(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libtorrent__torrent_info, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_torrent_status_get_next_announce(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int64_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_torrent_status_get_next_announce.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_libtorrent__torrent_status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "torrent_status_get_next_announce" "', argument " "1"" of type '" "libtorrent::torrent_status *""'"); 
  }
  arg1 = (libtorrent::torrent_status *)(argp1);
  result = (int64_t)libtorrent_torrent_status_get_next_announce(arg1);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ed25519_create_seed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int8_t > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ed25519_create_seed.");
  
  result = ed25519_create_seed();
  jsresult = SWIG_NewPointerObj((new std::vector< int8_t >((const std::vector< int8_t >&)(result))), SWIGTYPE_p_std__vectorT_signed_char_t, SWIG_POINTER_OWN |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ed25519_create_keypair(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int8_t > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< std::vector< int8_t >,std::vector< int8_t > > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ed25519_create_keypair.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_signed_char_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ed25519_create_keypair" "', argument " "1"" of type '" "std::vector< int8_t > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ed25519_create_keypair" "', argument " "1"" of type '" "std::vector< int8_t > &""'"); 
  }
  arg1 = (std::vector< int8_t > *)(argp1);
  result = ed25519_create_keypair(*arg1);
  jsresult = SWIG_NewPointerObj((new std::pair< std::vector< int8_t >,std::vector< int8_t > >((const std::pair< std::vector< int8_t >,std::vector< int8_t > >&)(result))), SWIGTYPE_p_std__pairT_std__vectorT_int8_t_t_std__vectorT_int8_t_t_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ed25519_sign(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int8_t > *arg1 = 0 ;
  std::vector< int8_t > *arg2 = 0 ;
  std::vector< int8_t > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< int8_t > result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ed25519_sign.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_signed_char_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ed25519_sign" "', argument " "1"" of type '" "std::vector< int8_t > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ed25519_sign" "', argument " "1"" of type '" "std::vector< int8_t > &""'"); 
  }
  arg1 = (std::vector< int8_t > *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__vectorT_signed_char_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ed25519_sign" "', argument " "2"" of type '" "std::vector< int8_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ed25519_sign" "', argument " "2"" of type '" "std::vector< int8_t > &""'"); 
  }
  arg2 = (std::vector< int8_t > *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_std__vectorT_signed_char_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ed25519_sign" "', argument " "3"" of type '" "std::vector< int8_t > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ed25519_sign" "', argument " "3"" of type '" "std::vector< int8_t > &""'"); 
  }
  arg3 = (std::vector< int8_t > *)(argp3);
  result = ed25519_sign(*arg1,*arg2,*arg3);
  jsresult = SWIG_NewPointerObj((new std::vector< int8_t >((const std::vector< int8_t >&)(result))), SWIGTYPE_p_std__vectorT_signed_char_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ed25519_verify(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int8_t > *arg1 = 0 ;
  std::vector< int8_t > *arg2 = 0 ;
  std::vector< int8_t > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ed25519_verify.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_signed_char_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ed25519_verify" "', argument " "1"" of type '" "std::vector< int8_t > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ed25519_verify" "', argument " "1"" of type '" "std::vector< int8_t > &""'"); 
  }
  arg1 = (std::vector< int8_t > *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__vectorT_signed_char_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ed25519_verify" "', argument " "2"" of type '" "std::vector< int8_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ed25519_verify" "', argument " "2"" of type '" "std::vector< int8_t > &""'"); 
  }
  arg2 = (std::vector< int8_t > *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_std__vectorT_signed_char_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ed25519_verify" "', argument " "3"" of type '" "std::vector< int8_t > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ed25519_verify" "', argument " "3"" of type '" "std::vector< int8_t > &""'"); 
  }
  arg3 = (std::vector< int8_t > *)(argp3);
  result = (bool)ed25519_verify(*arg1,*arg2,*arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ed25519_add_scalar_public(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int8_t > *arg1 = 0 ;
  std::vector< int8_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< int8_t > result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ed25519_add_scalar_public.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_signed_char_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ed25519_add_scalar_public" "', argument " "1"" of type '" "std::vector< int8_t > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ed25519_add_scalar_public" "', argument " "1"" of type '" "std::vector< int8_t > &""'"); 
  }
  arg1 = (std::vector< int8_t > *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__vectorT_signed_char_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ed25519_add_scalar_public" "', argument " "2"" of type '" "std::vector< int8_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ed25519_add_scalar_public" "', argument " "2"" of type '" "std::vector< int8_t > &""'"); 
  }
  arg2 = (std::vector< int8_t > *)(argp2);
  result = ed25519_add_scalar_public(*arg1,*arg2);
  jsresult = SWIG_NewPointerObj((new std::vector< int8_t >((const std::vector< int8_t >&)(result))), SWIGTYPE_p_std__vectorT_signed_char_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ed25519_add_scalar_secret(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int8_t > *arg1 = 0 ;
  std::vector< int8_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< int8_t > result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ed25519_add_scalar_secret.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_signed_char_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ed25519_add_scalar_secret" "', argument " "1"" of type '" "std::vector< int8_t > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ed25519_add_scalar_secret" "', argument " "1"" of type '" "std::vector< int8_t > &""'"); 
  }
  arg1 = (std::vector< int8_t > *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__vectorT_signed_char_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ed25519_add_scalar_secret" "', argument " "2"" of type '" "std::vector< int8_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ed25519_add_scalar_secret" "', argument " "2"" of type '" "std::vector< int8_t > &""'"); 
  }
  arg2 = (std::vector< int8_t > *)(argp2);
  result = ed25519_add_scalar_secret(*arg1,*arg2);
  jsresult = SWIG_NewPointerObj((new std::vector< int8_t >((const std::vector< int8_t >&)(result))), SWIGTYPE_p_std__vectorT_signed_char_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ed25519_key_exchange(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int8_t > *arg1 = 0 ;
  std::vector< int8_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< int8_t > result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ed25519_key_exchange.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_signed_char_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ed25519_key_exchange" "', argument " "1"" of type '" "std::vector< int8_t > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ed25519_key_exchange" "', argument " "1"" of type '" "std::vector< int8_t > &""'"); 
  }
  arg1 = (std::vector< int8_t > *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__vectorT_signed_char_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ed25519_key_exchange" "', argument " "2"" of type '" "std::vector< int8_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ed25519_key_exchange" "', argument " "2"" of type '" "std::vector< int8_t > &""'"); 
  }
  arg2 = (std::vector< int8_t > *)(argp2);
  result = ed25519_key_exchange(*arg1,*arg2);
  jsresult = SWIG_NewPointerObj((new std::vector< int8_t >((const std::vector< int8_t >&)(result))), SWIGTYPE_p_std__vectorT_signed_char_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_default_storage_disk_write_access_log__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  bool result;
  
  result = (bool)default_storage_disk_write_access_log();
  jsresult = SWIG_From_bool((bool)(result));
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_default_storage_disk_write_access_log__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  
  ecode1 = SWIG_AsVal_bool(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "default_storage_disk_write_access_log" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = (bool)(val1);
  default_storage_disk_write_access_log(arg1);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap___wrap_default_storage_disk_write_access_log(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_default_storage_disk_write_access_log__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_default_storage_disk_write_access_log__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_default_storage_disk_write_access_log__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_default_storage_disk_write_access_log__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function default_storage_disk_write_access_log.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_alert_notify_callback(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_alert_notify_callback(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_alert_notify_callback(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_alert_notify_callback(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          alert_notify_callback * arg1 = (alert_notify_callback *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_alert_notify_callback_on_alert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  alert_notify_callback *arg1 = (alert_notify_callback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_alert_notify_callback_on_alert.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_alert_notify_callback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alert_notify_callback_on_alert" "', argument " "1"" of type '" "alert_notify_callback *""'"); 
  }
  arg1 = (alert_notify_callback *)(argp1);
  (arg1)->on_alert();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_alert_notify_callback(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  alert_notify_callback *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_alert_notify_callback.");
  result = (alert_notify_callback *)new alert_notify_callback();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_alert_notify_callback, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_add_files_listener(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_add_files_listener(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_add_files_listener(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_add_files_listener(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          add_files_listener * arg1 = (add_files_listener *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_add_files_listener_pred(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  add_files_listener *arg1 = (add_files_listener *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_add_files_listener_pred.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_add_files_listener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_files_listener_pred" "', argument " "1"" of type '" "add_files_listener *""'"); 
  }
  arg1 = (add_files_listener *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "add_files_listener_pred" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "add_files_listener_pred" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->pred((std::string const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_add_files_listener(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  add_files_listener *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_add_files_listener.");
  result = (add_files_listener *)new add_files_listener();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_add_files_listener, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_add_files(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::file_storage *arg1 = 0 ;
  std::string *arg2 = 0 ;
  add_files_listener *arg3 = (add_files_listener *) 0 ;
  std::uint32_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_add_files.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__file_storage,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_files" "', argument " "1"" of type '" "libtorrent::file_storage &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "add_files" "', argument " "1"" of type '" "libtorrent::file_storage &""'"); 
  }
  arg1 = (libtorrent::file_storage *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "add_files" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "add_files" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_add_files_listener, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "add_files" "', argument " "3"" of type '" "add_files_listener *""'"); 
  }
  arg3 = (add_files_listener *)(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "add_files" "', argument " "4"" of type '" "std::uint32_t""'");
  } 
  arg4 = (std::uint32_t)(val4);
  add_files(*arg1,(std::string const &)*arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_set_piece_hashes_listener(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_set_piece_hashes_listener(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_set_piece_hashes_listener(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_set_piece_hashes_listener(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          set_piece_hashes_listener * arg1 = (set_piece_hashes_listener *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_set_piece_hashes_listener_progress(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  set_piece_hashes_listener *arg1 = (set_piece_hashes_listener *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_set_piece_hashes_listener_progress.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_set_piece_hashes_listener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_piece_hashes_listener_progress" "', argument " "1"" of type '" "set_piece_hashes_listener *""'"); 
  }
  arg1 = (set_piece_hashes_listener *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "set_piece_hashes_listener_progress" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->progress(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_set_piece_hashes_listener(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  set_piece_hashes_listener *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_set_piece_hashes_listener.");
  result = (set_piece_hashes_listener *)new set_piece_hashes_listener();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_set_piece_hashes_listener, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_set_piece_hashes_ex(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  libtorrent::create_torrent *arg1 = 0 ;
  std::string *arg2 = 0 ;
  set_piece_hashes_listener *arg3 = (set_piece_hashes_listener *) 0 ;
  libtorrent::error_code *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_set_piece_hashes_ex.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_libtorrent__create_torrent,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_piece_hashes_ex" "', argument " "1"" of type '" "libtorrent::create_torrent &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "set_piece_hashes_ex" "', argument " "1"" of type '" "libtorrent::create_torrent &""'"); 
  }
  arg1 = (libtorrent::create_torrent *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "set_piece_hashes_ex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "set_piece_hashes_ex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_set_piece_hashes_listener, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "set_piece_hashes_ex" "', argument " "3"" of type '" "set_piece_hashes_listener *""'"); 
  }
  arg3 = (set_piece_hashes_listener *)(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_boost__system__error_code,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "set_piece_hashes_ex" "', argument " "4"" of type '" "libtorrent::error_code &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "set_piece_hashes_ex" "', argument " "4"" of type '" "libtorrent::error_code &""'"); 
  }
  arg4 = (libtorrent::error_code *)(argp4);
  set_piece_hashes_ex(*arg1,(std::string const &)*arg2,arg3,*arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_boost_version(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_boost_version.");
  
  result = (int)boost_version();
  jsresult = SWIG_From_int((int)(result));
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_boost_lib_version(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_boost_lib_version.");
  
  result = (char *)boost_lib_version();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_openssl_version_number(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_openssl_version_number.");
  
  result = (int)openssl_version_number();
  jsresult = SWIG_From_int((int)(result));
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_openssl_version_text(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_openssl_version_text.");
  
  result = (char *)openssl_version_text();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_swig_plugin(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_swig_plugin(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_swig_plugin(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_swig_plugin(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          swig_plugin * arg1 = (swig_plugin *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_swig_plugin_on_dht_request(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  swig_plugin *arg1 = (swig_plugin *) 0 ;
  SwigValueWrapper< libtorrent::string_view > arg2 ;
  libtorrent::udp::endpoint *arg3 = 0 ;
  libtorrent::bdecode_node *arg4 = 0 ;
  libtorrent::entry *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  bool result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_swig_plugin_on_dht_request.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_swig_plugin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "swig_plugin_on_dht_request" "', argument " "1"" of type '" "swig_plugin *""'"); 
  }
  arg1 = (swig_plugin *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_libtorrent__string_view,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "swig_plugin_on_dht_request" "', argument " "2"" of type '" "libtorrent::string_view""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "swig_plugin_on_dht_request" "', argument " "2"" of type '" "libtorrent::string_view""'");
    } else {
      arg2 = *((libtorrent::string_view *)(argp2));
    }
  }
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_libtorrent__udp__endpoint,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "swig_plugin_on_dht_request" "', argument " "3"" of type '" "libtorrent::udp::endpoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "swig_plugin_on_dht_request" "', argument " "3"" of type '" "libtorrent::udp::endpoint const &""'"); 
  }
  arg3 = (libtorrent::udp::endpoint *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_libtorrent__bdecode_node,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "swig_plugin_on_dht_request" "', argument " "4"" of type '" "libtorrent::bdecode_node const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "swig_plugin_on_dht_request" "', argument " "4"" of type '" "libtorrent::bdecode_node const &""'"); 
  }
  arg4 = (libtorrent::bdecode_node *)(argp4);
  res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_libtorrent__entry,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "swig_plugin_on_dht_request" "', argument " "5"" of type '" "libtorrent::entry &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "swig_plugin_on_dht_request" "', argument " "5"" of type '" "libtorrent::entry &""'"); 
  }
  arg5 = (libtorrent::entry *)(argp5);
  result = (bool)(arg1)->on_dht_request(arg2,(libtorrent::udp::endpoint const &)*arg3,(libtorrent::bdecode_node const &)*arg4,*arg5);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_swig_plugin(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  swig_plugin *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_swig_plugin.");
  result = (swig_plugin *)new swig_plugin();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_swig_plugin, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_posix_stat_t_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  posix_stat_t *arg1 = (posix_stat_t *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_posix_stat_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "posix_stat_t_size_set" "', argument " "1"" of type '" "posix_stat_t *""'"); 
  }
  arg1 = (posix_stat_t *)(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "posix_stat_t_size_set" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = (int64_t)(val2);
  if (arg1) (arg1)->size = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_posix_stat_t_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  posix_stat_t *arg1 = (posix_stat_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int64_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_posix_stat_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "posix_stat_t_size_get" "', argument " "1"" of type '" "posix_stat_t *""'"); 
  }
  arg1 = (posix_stat_t *)(argp1);
  result = (int64_t) ((arg1)->size);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_posix_stat_t_atime_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  posix_stat_t *arg1 = (posix_stat_t *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_posix_stat_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "posix_stat_t_atime_set" "', argument " "1"" of type '" "posix_stat_t *""'"); 
  }
  arg1 = (posix_stat_t *)(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "posix_stat_t_atime_set" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = (int64_t)(val2);
  if (arg1) (arg1)->atime = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_posix_stat_t_atime_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  posix_stat_t *arg1 = (posix_stat_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int64_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_posix_stat_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "posix_stat_t_atime_get" "', argument " "1"" of type '" "posix_stat_t *""'"); 
  }
  arg1 = (posix_stat_t *)(argp1);
  result = (int64_t) ((arg1)->atime);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_posix_stat_t_mtime_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  posix_stat_t *arg1 = (posix_stat_t *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_posix_stat_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "posix_stat_t_mtime_set" "', argument " "1"" of type '" "posix_stat_t *""'"); 
  }
  arg1 = (posix_stat_t *)(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "posix_stat_t_mtime_set" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = (int64_t)(val2);
  if (arg1) (arg1)->mtime = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_posix_stat_t_mtime_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  posix_stat_t *arg1 = (posix_stat_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int64_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_posix_stat_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "posix_stat_t_mtime_get" "', argument " "1"" of type '" "posix_stat_t *""'"); 
  }
  arg1 = (posix_stat_t *)(argp1);
  result = (int64_t) ((arg1)->mtime);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_posix_stat_t_ctime_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  posix_stat_t *arg1 = (posix_stat_t *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_posix_stat_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "posix_stat_t_ctime_set" "', argument " "1"" of type '" "posix_stat_t *""'"); 
  }
  arg1 = (posix_stat_t *)(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "posix_stat_t_ctime_set" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = (int64_t)(val2);
  if (arg1) (arg1)->ctime = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_posix_stat_t_ctime_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  posix_stat_t *arg1 = (posix_stat_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int64_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_posix_stat_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "posix_stat_t_ctime_get" "', argument " "1"" of type '" "posix_stat_t *""'"); 
  }
  arg1 = (posix_stat_t *)(argp1);
  result = (int64_t) ((arg1)->ctime);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_posix_stat_t_mode_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  posix_stat_t *arg1 = (posix_stat_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_posix_stat_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "posix_stat_t_mode_set" "', argument " "1"" of type '" "posix_stat_t *""'"); 
  }
  arg1 = (posix_stat_t *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "posix_stat_t_mode_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->mode = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_posix_stat_t_mode_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  posix_stat_t *arg1 = (posix_stat_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_posix_stat_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "posix_stat_t_mode_get" "', argument " "1"" of type '" "posix_stat_t *""'"); 
  }
  arg1 = (posix_stat_t *)(argp1);
  result = (int) ((arg1)->mode);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_posix_stat_t(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  posix_stat_t *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_posix_stat_t.");
  result = (posix_stat_t *)new posix_stat_t();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_posix_stat_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_posix_stat_t(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_posix_stat_t(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_posix_stat_t(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_posix_stat_t(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          posix_stat_t * arg1 = (posix_stat_t *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_posix_wrapper(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_posix_wrapper(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_posix_wrapper(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_posix_wrapper(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          posix_wrapper * arg1 = (posix_wrapper *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_posix_wrapper_open(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  posix_wrapper *arg1 = (posix_wrapper *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_posix_wrapper_open.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_posix_wrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "posix_wrapper_open" "', argument " "1"" of type '" "posix_wrapper *""'"); 
  }
  arg1 = (posix_wrapper *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "posix_wrapper_open" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "posix_wrapper_open" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "posix_wrapper_open" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  result = (int)(arg1)->open((char const *)arg2,arg3,arg4);
  jsresult = SWIG_From_int((int)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_posix_wrapper_stat(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  posix_wrapper *arg1 = (posix_wrapper *) 0 ;
  char *arg2 = (char *) 0 ;
  posix_stat_t *arg3 = (posix_stat_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_posix_wrapper_stat.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_posix_wrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "posix_wrapper_stat" "', argument " "1"" of type '" "posix_wrapper *""'"); 
  }
  arg1 = (posix_wrapper *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "posix_wrapper_stat" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_posix_stat_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "posix_wrapper_stat" "', argument " "3"" of type '" "posix_stat_t *""'"); 
  }
  arg3 = (posix_stat_t *)(argp3);
  result = (int)(arg1)->stat((char const *)arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_posix_wrapper_mkdir(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  posix_wrapper *arg1 = (posix_wrapper *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_posix_wrapper_mkdir.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_posix_wrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "posix_wrapper_mkdir" "', argument " "1"" of type '" "posix_wrapper *""'"); 
  }
  arg1 = (posix_wrapper *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "posix_wrapper_mkdir" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "posix_wrapper_mkdir" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (int)(arg1)->mkdir((char const *)arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_posix_wrapper_rename(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  posix_wrapper *arg1 = (posix_wrapper *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_posix_wrapper_rename.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_posix_wrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "posix_wrapper_rename" "', argument " "1"" of type '" "posix_wrapper *""'"); 
  }
  arg1 = (posix_wrapper *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "posix_wrapper_rename" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_AsCharPtrAndSize(args[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "posix_wrapper_rename" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  result = (int)(arg1)->rename((char const *)arg2,(char const *)arg3);
  jsresult = SWIG_From_int((int)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_posix_wrapper_remove(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  posix_wrapper *arg1 = (posix_wrapper *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_posix_wrapper_remove.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_posix_wrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "posix_wrapper_remove" "', argument " "1"" of type '" "posix_wrapper *""'"); 
  }
  arg1 = (posix_wrapper *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "posix_wrapper_remove" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (int)(arg1)->remove((char const *)arg2);
  jsresult = SWIG_From_int((int)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_posix_wrapper(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  posix_wrapper *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_posix_wrapper.");
  result = (posix_wrapper *)new posix_wrapper();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_posix_wrapper, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_set_posix_wrapper(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  posix_wrapper *arg1 = (posix_wrapper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_set_posix_wrapper.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_posix_wrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_posix_wrapper" "', argument " "1"" of type '" "posix_wrapper *""'"); 
  }
  arg1 = (posix_wrapper *)(argp1);
  set_posix_wrapper(arg1);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_is_utp_stream_logging(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_is_utp_stream_logging.");
  
  result = (bool)libtorrent::is_utp_stream_logging();
  jsresult = SWIG_From_bool((bool)(result));
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_set_utp_stream_logging(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_set_utp_stream_logging.");
  
  ecode1 = SWIG_AsVal_bool(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "set_utp_stream_logging" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = (bool)(val1);
  libtorrent::set_utp_stream_logging(arg1);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_libtorrent__lsd_peer_alertTo_p_libtorrent__peer_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::peer_alert *)  ((libtorrent::lsd_peer_alert *) x));
}
static void *_p_libtorrent__peer_blocked_alertTo_p_libtorrent__peer_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::peer_alert *)  ((libtorrent::peer_blocked_alert *) x));
}
static void *_p_libtorrent__block_finished_alertTo_p_libtorrent__peer_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::peer_alert *)  ((libtorrent::block_finished_alert *) x));
}
static void *_p_libtorrent__block_timeout_alertTo_p_libtorrent__peer_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::peer_alert *)  ((libtorrent::block_timeout_alert *) x));
}
static void *_p_libtorrent__request_dropped_alertTo_p_libtorrent__peer_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::peer_alert *)  ((libtorrent::request_dropped_alert *) x));
}
static void *_p_libtorrent__invalid_request_alertTo_p_libtorrent__peer_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::peer_alert *)  ((libtorrent::invalid_request_alert *) x));
}
static void *_p_libtorrent__peer_disconnected_alertTo_p_libtorrent__peer_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::peer_alert *)  ((libtorrent::peer_disconnected_alert *) x));
}
static void *_p_libtorrent__peer_connect_alertTo_p_libtorrent__peer_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::peer_alert *)  ((libtorrent::peer_connect_alert *) x));
}
static void *_p_libtorrent__peer_error_alertTo_p_libtorrent__peer_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::peer_alert *)  ((libtorrent::peer_error_alert *) x));
}
static void *_p_libtorrent__peer_snubbed_alertTo_p_libtorrent__peer_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::peer_alert *)  ((libtorrent::peer_snubbed_alert *) x));
}
static void *_p_libtorrent__peer_unsnubbed_alertTo_p_libtorrent__peer_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::peer_alert *)  ((libtorrent::peer_unsnubbed_alert *) x));
}
static void *_p_libtorrent__peer_ban_alertTo_p_libtorrent__peer_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::peer_alert *)  ((libtorrent::peer_ban_alert *) x));
}
static void *_p_libtorrent__incoming_request_alertTo_p_libtorrent__peer_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::peer_alert *)  ((libtorrent::incoming_request_alert *) x));
}
static void *_p_libtorrent__unwanted_block_alertTo_p_libtorrent__peer_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::peer_alert *)  ((libtorrent::unwanted_block_alert *) x));
}
static void *_p_libtorrent__block_downloading_alertTo_p_libtorrent__peer_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::peer_alert *)  ((libtorrent::block_downloading_alert *) x));
}
static void *_p_libtorrent__peer_log_alertTo_p_libtorrent__peer_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::peer_alert *)  ((libtorrent::peer_log_alert *) x));
}
static void *_p_libtorrent__picker_log_alertTo_p_libtorrent__peer_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::peer_alert *)  ((libtorrent::picker_log_alert *) x));
}
static void *_p_libtorrent__tracker_warning_alertTo_p_libtorrent__tracker_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::tracker_alert *)  ((libtorrent::tracker_warning_alert *) x));
}
static void *_p_libtorrent__scrape_reply_alertTo_p_libtorrent__tracker_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::tracker_alert *)  ((libtorrent::scrape_reply_alert *) x));
}
static void *_p_libtorrent__tracker_reply_alertTo_p_libtorrent__tracker_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::tracker_alert *)  ((libtorrent::tracker_reply_alert *) x));
}
static void *_p_libtorrent__dht_reply_alertTo_p_libtorrent__tracker_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::tracker_alert *)  ((libtorrent::dht_reply_alert *) x));
}
static void *_p_libtorrent__tracker_announce_alertTo_p_libtorrent__tracker_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::tracker_alert *)  ((libtorrent::tracker_announce_alert *) x));
}
static void *_p_libtorrent__tracker_error_alertTo_p_libtorrent__tracker_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::tracker_alert *)  ((libtorrent::tracker_error_alert *) x));
}
static void *_p_libtorrent__scrape_failed_alertTo_p_libtorrent__tracker_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::tracker_alert *)  ((libtorrent::scrape_failed_alert *) x));
}
static void *_p_libtorrent__trackerid_alertTo_p_libtorrent__tracker_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::tracker_alert *)  ((libtorrent::trackerid_alert *) x));
}
static void *_p_libtorrent__unwanted_block_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *) (libtorrent::peer_alert *) ((libtorrent::unwanted_block_alert *) x));
}
static void *_p_libtorrent__block_downloading_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *) (libtorrent::peer_alert *) ((libtorrent::block_downloading_alert *) x));
}
static void *_p_libtorrent__tracker_announce_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *) (libtorrent::tracker_alert *) ((libtorrent::tracker_announce_alert *) x));
}
static void *_p_libtorrent__dht_reply_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *) (libtorrent::tracker_alert *) ((libtorrent::dht_reply_alert *) x));
}
static void *_p_libtorrent__tracker_reply_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *) (libtorrent::tracker_alert *) ((libtorrent::tracker_reply_alert *) x));
}
static void *_p_libtorrent__read_piece_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *)  ((libtorrent::read_piece_alert *) x));
}
static void *_p_libtorrent__performance_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *)  ((libtorrent::performance_alert *) x));
}
static void *_p_libtorrent__tracker_warning_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *) (libtorrent::tracker_alert *) ((libtorrent::tracker_warning_alert *) x));
}
static void *_p_libtorrent__scrape_reply_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *) (libtorrent::tracker_alert *) ((libtorrent::scrape_reply_alert *) x));
}
static void *_p_libtorrent__save_resume_data_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *)  ((libtorrent::save_resume_data_alert *) x));
}
static void *_p_libtorrent__stats_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *)  ((libtorrent::stats_alert *) x));
}
static void *_p_libtorrent__anonymous_mode_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *)  ((libtorrent::anonymous_mode_alert *) x));
}
static void *_p_libtorrent__torrent_log_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *)  ((libtorrent::torrent_log_alert *) x));
}
static void *_p_libtorrent__peer_log_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *) (libtorrent::peer_alert *) ((libtorrent::peer_log_alert *) x));
}
static void *_p_libtorrent__picker_log_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *) (libtorrent::peer_alert *) ((libtorrent::picker_log_alert *) x));
}
static void *_p_libtorrent__storage_moved_failed_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *)  ((libtorrent::storage_moved_failed_alert *) x));
}
static void *_p_libtorrent__storage_moved_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *)  ((libtorrent::storage_moved_alert *) x));
}
static void *_p_libtorrent__block_finished_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *) (libtorrent::peer_alert *) ((libtorrent::block_finished_alert *) x));
}
static void *_p_libtorrent__block_timeout_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *) (libtorrent::peer_alert *) ((libtorrent::block_timeout_alert *) x));
}
static void *_p_libtorrent__request_dropped_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *) (libtorrent::peer_alert *) ((libtorrent::request_dropped_alert *) x));
}
static void *_p_libtorrent__piece_finished_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *)  ((libtorrent::piece_finished_alert *) x));
}
static void *_p_libtorrent__torrent_finished_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *)  ((libtorrent::torrent_finished_alert *) x));
}
static void *_p_libtorrent__invalid_request_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *) (libtorrent::peer_alert *) ((libtorrent::invalid_request_alert *) x));
}
static void *_p_libtorrent__peer_disconnected_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *) (libtorrent::peer_alert *) ((libtorrent::peer_disconnected_alert *) x));
}
static void *_p_libtorrent__peer_connect_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *) (libtorrent::peer_alert *) ((libtorrent::peer_connect_alert *) x));
}
static void *_p_libtorrent__peer_error_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *) (libtorrent::peer_alert *) ((libtorrent::peer_error_alert *) x));
}
static void *_p_libtorrent__peer_snubbed_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *) (libtorrent::peer_alert *) ((libtorrent::peer_snubbed_alert *) x));
}
static void *_p_libtorrent__peer_unsnubbed_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *) (libtorrent::peer_alert *) ((libtorrent::peer_unsnubbed_alert *) x));
}
static void *_p_libtorrent__peer_ban_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *) (libtorrent::peer_alert *) ((libtorrent::peer_ban_alert *) x));
}
static void *_p_libtorrent__hash_failed_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *)  ((libtorrent::hash_failed_alert *) x));
}
static void *_p_libtorrent__peer_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *)  ((libtorrent::peer_alert *) x));
}
static void *_p_libtorrent__tracker_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *)  ((libtorrent::tracker_alert *) x));
}
static void *_p_libtorrent__torrent_added_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *)  ((libtorrent::torrent_added_alert *) x));
}
static void *_p_libtorrent__torrent_removed_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *)  ((libtorrent::torrent_removed_alert *) x));
}
static void *_p_libtorrent__file_completed_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *)  ((libtorrent::file_completed_alert *) x));
}
static void *_p_libtorrent__file_renamed_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *)  ((libtorrent::file_renamed_alert *) x));
}
static void *_p_libtorrent__file_rename_failed_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *)  ((libtorrent::file_rename_failed_alert *) x));
}
static void *_p_libtorrent__state_changed_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *)  ((libtorrent::state_changed_alert *) x));
}
static void *_p_libtorrent__tracker_error_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *) (libtorrent::tracker_alert *) ((libtorrent::tracker_error_alert *) x));
}
static void *_p_libtorrent__scrape_failed_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *) (libtorrent::tracker_alert *) ((libtorrent::scrape_failed_alert *) x));
}
static void *_p_libtorrent__torrent_deleted_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *)  ((libtorrent::torrent_deleted_alert *) x));
}
static void *_p_libtorrent__torrent_delete_failed_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *)  ((libtorrent::torrent_delete_failed_alert *) x));
}
static void *_p_libtorrent__save_resume_data_failed_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *)  ((libtorrent::save_resume_data_failed_alert *) x));
}
static void *_p_libtorrent__torrent_paused_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *)  ((libtorrent::torrent_paused_alert *) x));
}
static void *_p_libtorrent__torrent_resumed_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *)  ((libtorrent::torrent_resumed_alert *) x));
}
static void *_p_libtorrent__torrent_checked_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *)  ((libtorrent::torrent_checked_alert *) x));
}
static void *_p_libtorrent__url_seed_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *)  ((libtorrent::url_seed_alert *) x));
}
static void *_p_libtorrent__file_error_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *)  ((libtorrent::file_error_alert *) x));
}
static void *_p_libtorrent__metadata_failed_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *)  ((libtorrent::metadata_failed_alert *) x));
}
static void *_p_libtorrent__metadata_received_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *)  ((libtorrent::metadata_received_alert *) x));
}
static void *_p_libtorrent__fastresume_rejected_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *)  ((libtorrent::fastresume_rejected_alert *) x));
}
static void *_p_libtorrent__peer_blocked_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *) (libtorrent::peer_alert *) ((libtorrent::peer_blocked_alert *) x));
}
static void *_p_libtorrent__cache_flushed_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *)  ((libtorrent::cache_flushed_alert *) x));
}
static void *_p_libtorrent__lsd_peer_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *) (libtorrent::peer_alert *) ((libtorrent::lsd_peer_alert *) x));
}
static void *_p_libtorrent__trackerid_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *) (libtorrent::tracker_alert *) ((libtorrent::trackerid_alert *) x));
}
static void *_p_libtorrent__torrent_error_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *)  ((libtorrent::torrent_error_alert *) x));
}
static void *_p_libtorrent__torrent_need_cert_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *)  ((libtorrent::torrent_need_cert_alert *) x));
}
static void *_p_libtorrent__add_torrent_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *)  ((libtorrent::add_torrent_alert *) x));
}
static void *_p_libtorrent__incoming_request_alertTo_p_libtorrent__torrent_alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::torrent_alert *) (libtorrent::peer_alert *) ((libtorrent::incoming_request_alert *) x));
}
static void *_p_libtorrent__bt_peer_connection_handleTo_p_libtorrent__peer_connection_handle(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::peer_connection_handle *)  ((libtorrent::bt_peer_connection_handle *) x));
}
static void *_p_libtorrent__sessionTo_p_libtorrent__session_handle(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::session_handle *)  ((libtorrent::session *) x));
}
static void *_p_libtorrent__dht_put_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *)  ((libtorrent::dht_put_alert *) x));
}
static void *_p_libtorrent__dht_error_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *)  ((libtorrent::dht_error_alert *) x));
}
static void *_p_libtorrent__add_torrent_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *) ((libtorrent::add_torrent_alert *) x));
}
static void *_p_libtorrent__incoming_connection_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *)  ((libtorrent::incoming_connection_alert *) x));
}
static void *_p_libtorrent__torrent_need_cert_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *) ((libtorrent::torrent_need_cert_alert *) x));
}
static void *_p_libtorrent__torrent_error_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *) ((libtorrent::torrent_error_alert *) x));
}
static void *_p_libtorrent__dht_bootstrap_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *)  ((libtorrent::dht_bootstrap_alert *) x));
}
static void *_p_libtorrent__trackerid_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *)(libtorrent::tracker_alert *) ((libtorrent::trackerid_alert *) x));
}
static void *_p_libtorrent__lsd_peer_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *)(libtorrent::peer_alert *) ((libtorrent::lsd_peer_alert *) x));
}
static void *_p_libtorrent__cache_flushed_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *) ((libtorrent::cache_flushed_alert *) x));
}
static void *_p_libtorrent__peer_blocked_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *)(libtorrent::peer_alert *) ((libtorrent::peer_blocked_alert *) x));
}
static void *_p_libtorrent__fastresume_rejected_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *) ((libtorrent::fastresume_rejected_alert *) x));
}
static void *_p_libtorrent__portmap_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *)  ((libtorrent::portmap_alert *) x));
}
static void *_p_libtorrent__portmap_error_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *)  ((libtorrent::portmap_error_alert *) x));
}
static void *_p_libtorrent__listen_succeeded_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *)  ((libtorrent::listen_succeeded_alert *) x));
}
static void *_p_libtorrent__listen_failed_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *)  ((libtorrent::listen_failed_alert *) x));
}
static void *_p_libtorrent__external_ip_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *)  ((libtorrent::external_ip_alert *) x));
}
static void *_p_libtorrent__udp_error_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *)  ((libtorrent::udp_error_alert *) x));
}
static void *_p_libtorrent__metadata_received_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *) ((libtorrent::metadata_received_alert *) x));
}
static void *_p_libtorrent__metadata_failed_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *) ((libtorrent::metadata_failed_alert *) x));
}
static void *_p_libtorrent__file_error_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *) ((libtorrent::file_error_alert *) x));
}
static void *_p_libtorrent__url_seed_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *) ((libtorrent::url_seed_alert *) x));
}
static void *_p_libtorrent__torrent_checked_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *) ((libtorrent::torrent_checked_alert *) x));
}
static void *_p_libtorrent__torrent_resumed_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *) ((libtorrent::torrent_resumed_alert *) x));
}
static void *_p_libtorrent__torrent_paused_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *) ((libtorrent::torrent_paused_alert *) x));
}
static void *_p_libtorrent__save_resume_data_failed_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *) ((libtorrent::save_resume_data_failed_alert *) x));
}
static void *_p_libtorrent__torrent_delete_failed_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *) ((libtorrent::torrent_delete_failed_alert *) x));
}
static void *_p_libtorrent__torrent_deleted_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *) ((libtorrent::torrent_deleted_alert *) x));
}
static void *_p_libtorrent__storage_moved_failed_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *) ((libtorrent::storage_moved_failed_alert *) x));
}
static void *_p_libtorrent__tracker_error_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *)(libtorrent::tracker_alert *) ((libtorrent::tracker_error_alert *) x));
}
static void *_p_libtorrent__state_changed_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *) ((libtorrent::state_changed_alert *) x));
}
static void *_p_libtorrent__file_rename_failed_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *) ((libtorrent::file_rename_failed_alert *) x));
}
static void *_p_libtorrent__file_renamed_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *) ((libtorrent::file_renamed_alert *) x));
}
static void *_p_libtorrent__file_completed_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *) ((libtorrent::file_completed_alert *) x));
}
static void *_p_libtorrent__torrent_removed_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *) ((libtorrent::torrent_removed_alert *) x));
}
static void *_p_libtorrent__torrent_added_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *) ((libtorrent::torrent_added_alert *) x));
}
static void *_p_libtorrent__tracker_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *) ((libtorrent::tracker_alert *) x));
}
static void *_p_libtorrent__peer_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *) ((libtorrent::peer_alert *) x));
}
static void *_p_libtorrent__torrent_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *)  ((libtorrent::torrent_alert *) x));
}
static void *_p_libtorrent__scrape_failed_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *)(libtorrent::tracker_alert *) ((libtorrent::scrape_failed_alert *) x));
}
static void *_p_libtorrent__hash_failed_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *) ((libtorrent::hash_failed_alert *) x));
}
static void *_p_libtorrent__peer_ban_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *)(libtorrent::peer_alert *) ((libtorrent::peer_ban_alert *) x));
}
static void *_p_libtorrent__peer_unsnubbed_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *)(libtorrent::peer_alert *) ((libtorrent::peer_unsnubbed_alert *) x));
}
static void *_p_libtorrent__peer_snubbed_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *)(libtorrent::peer_alert *) ((libtorrent::peer_snubbed_alert *) x));
}
static void *_p_libtorrent__peer_error_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *)(libtorrent::peer_alert *) ((libtorrent::peer_error_alert *) x));
}
static void *_p_libtorrent__peer_connect_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *)(libtorrent::peer_alert *) ((libtorrent::peer_connect_alert *) x));
}
static void *_p_libtorrent__peer_disconnected_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *)(libtorrent::peer_alert *) ((libtorrent::peer_disconnected_alert *) x));
}
static void *_p_libtorrent__invalid_request_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *)(libtorrent::peer_alert *) ((libtorrent::invalid_request_alert *) x));
}
static void *_p_libtorrent__torrent_finished_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *) ((libtorrent::torrent_finished_alert *) x));
}
static void *_p_libtorrent__piece_finished_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *) ((libtorrent::piece_finished_alert *) x));
}
static void *_p_libtorrent__request_dropped_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *)(libtorrent::peer_alert *) ((libtorrent::request_dropped_alert *) x));
}
static void *_p_libtorrent__block_timeout_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *)(libtorrent::peer_alert *) ((libtorrent::block_timeout_alert *) x));
}
static void *_p_libtorrent__block_finished_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *)(libtorrent::peer_alert *) ((libtorrent::block_finished_alert *) x));
}
static void *_p_libtorrent__storage_moved_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *) ((libtorrent::storage_moved_alert *) x));
}
static void *_p_libtorrent__i2p_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *)  ((libtorrent::i2p_alert *) x));
}
static void *_p_libtorrent__lsd_error_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *)  ((libtorrent::lsd_error_alert *) x));
}
static void *_p_libtorrent__incoming_request_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *)(libtorrent::peer_alert *) ((libtorrent::incoming_request_alert *) x));
}
static void *_p_libtorrent__dht_pkt_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *)  ((libtorrent::dht_pkt_alert *) x));
}
static void *_p_libtorrent__dht_mutable_item_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *)  ((libtorrent::dht_mutable_item_alert *) x));
}
static void *_p_libtorrent__dht_immutable_item_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *)  ((libtorrent::dht_immutable_item_alert *) x));
}
static void *_p_libtorrent__session_stats_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *)  ((libtorrent::session_stats_alert *) x));
}
static void *_p_libtorrent__mmap_cache_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *)  ((libtorrent::mmap_cache_alert *) x));
}
static void *_p_libtorrent__state_update_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *)  ((libtorrent::state_update_alert *) x));
}
static void *_p_libtorrent__anonymous_mode_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *) ((libtorrent::anonymous_mode_alert *) x));
}
static void *_p_libtorrent__stats_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *) ((libtorrent::stats_alert *) x));
}
static void *_p_libtorrent__dht_get_peers_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *)  ((libtorrent::dht_get_peers_alert *) x));
}
static void *_p_libtorrent__dht_announce_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *)  ((libtorrent::dht_announce_alert *) x));
}
static void *_p_libtorrent__portmap_log_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *)  ((libtorrent::portmap_log_alert *) x));
}
static void *_p_libtorrent__save_resume_data_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *) ((libtorrent::save_resume_data_alert *) x));
}
static void *_p_libtorrent__scrape_reply_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *)(libtorrent::tracker_alert *) ((libtorrent::scrape_reply_alert *) x));
}
static void *_p_libtorrent__tracker_warning_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *)(libtorrent::tracker_alert *) ((libtorrent::tracker_warning_alert *) x));
}
static void *_p_libtorrent__performance_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *) ((libtorrent::performance_alert *) x));
}
static void *_p_libtorrent__read_piece_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *) ((libtorrent::read_piece_alert *) x));
}
static void *_p_libtorrent__tracker_reply_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *)(libtorrent::tracker_alert *) ((libtorrent::tracker_reply_alert *) x));
}
static void *_p_libtorrent__dht_reply_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *)(libtorrent::tracker_alert *) ((libtorrent::dht_reply_alert *) x));
}
static void *_p_libtorrent__tracker_announce_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *)(libtorrent::tracker_alert *) ((libtorrent::tracker_announce_alert *) x));
}
static void *_p_libtorrent__block_downloading_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *)(libtorrent::peer_alert *) ((libtorrent::block_downloading_alert *) x));
}
static void *_p_libtorrent__unwanted_block_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *)(libtorrent::peer_alert *) ((libtorrent::unwanted_block_alert *) x));
}
static void *_p_libtorrent__dht_outgoing_get_peers_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *)  ((libtorrent::dht_outgoing_get_peers_alert *) x));
}
static void *_p_libtorrent__log_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *)  ((libtorrent::log_alert *) x));
}
static void *_p_libtorrent__torrent_log_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *) ((libtorrent::torrent_log_alert *) x));
}
static void *_p_libtorrent__peer_log_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *)(libtorrent::peer_alert *) ((libtorrent::peer_log_alert *) x));
}
static void *_p_libtorrent__dht_stats_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *)  ((libtorrent::dht_stats_alert *) x));
}
static void *_p_libtorrent__dht_log_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *)  ((libtorrent::dht_log_alert *) x));
}
static void *_p_libtorrent__dht_get_peers_reply_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *)  ((libtorrent::dht_get_peers_reply_alert *) x));
}
static void *_p_libtorrent__dht_direct_response_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *)  ((libtorrent::dht_direct_response_alert *) x));
}
static void *_p_libtorrent__picker_log_alertTo_p_libtorrent__alert(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libtorrent::alert *) (libtorrent::torrent_alert *)(libtorrent::peer_alert *) ((libtorrent::picker_log_alert *) x));
}
static swig_type_info _swigt__p_add_files_listener = {"_p_add_files_listener", "p_add_files_listener|add_files_listener *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_alert_notify_callback = {"_p_alert_notify_callback", "alert_notify_callback *|p_alert_notify_callback", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__system__error_category = {"_p_boost__system__error_category", "p_boost__system__error_category|boost::system::error_category *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__system__error_code = {"_p_boost__system__error_code", "boost::system::error_code *|libtorrent::error_code *|p_boost__system__error_code", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__system__error_condition = {"_p_boost__system__error_condition", "p_boost__system__error_condition|boost::system::error_condition *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_reference = {"_p_const_reference", "const_reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dictionary_type = {"_p_dictionary_type", "dictionary_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_headers_t = {"_p_headers_t", "headers_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_integer_type = {"_p_integer_type", "integer_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__add_torrent_alert = {"_p_libtorrent__add_torrent_alert", "p_libtorrent__add_torrent_alert|libtorrent::add_torrent_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__add_torrent_params = {"_p_libtorrent__add_torrent_params", "libtorrent::add_torrent_params *|p_libtorrent__add_torrent_params", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__address = {"_p_libtorrent__address", "libtorrent::address *|p_libtorrent__address", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__alert = {"_p_libtorrent__alert", "p_libtorrent__alert|std::vector< libtorrent::alert * >::value_type|libtorrent::alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__announce_entry = {"_p_libtorrent__announce_entry", "libtorrent::announce_entry *|std::vector< libtorrent::announce_entry >::value_type *|p_libtorrent__announce_entry", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__anonymous_mode_alert = {"_p_libtorrent__anonymous_mode_alert", "p_libtorrent__anonymous_mode_alert|libtorrent::anonymous_mode_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__bdecode_node = {"_p_libtorrent__bdecode_node", "libtorrent::bdecode_node *|p_libtorrent__bdecode_node", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__bitfield = {"_p_libtorrent__bitfield", "libtorrent::bitfield *|p_libtorrent__bitfield", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__block_downloading_alert = {"_p_libtorrent__block_downloading_alert", "p_libtorrent__block_downloading_alert|libtorrent::block_downloading_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__block_finished_alert = {"_p_libtorrent__block_finished_alert", "p_libtorrent__block_finished_alert|libtorrent::block_finished_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__block_info = {"_p_libtorrent__block_info", "libtorrent::block_info *|p_libtorrent__block_info|std::vector< libtorrent::block_info >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__block_timeout_alert = {"_p_libtorrent__block_timeout_alert", "p_libtorrent__block_timeout_alert|libtorrent::block_timeout_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__bloom_filterT_128_t = {"_p_libtorrent__bloom_filterT_128_t", "libtorrent::bloom_filter< 128 > *|p_libtorrent__bloom_filterT_128_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__bloom_filterT_256_t = {"_p_libtorrent__bloom_filterT_256_t", "p_libtorrent__bloom_filterT_256_t|libtorrent::bloom_filter< 256 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__bt_peer_connection_handle = {"_p_libtorrent__bt_peer_connection_handle", "p_libtorrent__bt_peer_connection_handle|libtorrent::bt_peer_connection_handle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__cache_flushed_alert = {"_p_libtorrent__cache_flushed_alert", "p_libtorrent__cache_flushed_alert|libtorrent::cache_flushed_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__create_torrent = {"_p_libtorrent__create_torrent", "libtorrent::create_torrent *|p_libtorrent__create_torrent", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__dht__dht_state = {"_p_libtorrent__dht__dht_state", "p_libtorrent__dht__dht_state|libtorrent::dht::dht_state *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__dht_announce_alert = {"_p_libtorrent__dht_announce_alert", "p_libtorrent__dht_announce_alert|libtorrent::dht_announce_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__dht_bootstrap_alert = {"_p_libtorrent__dht_bootstrap_alert", "p_libtorrent__dht_bootstrap_alert|libtorrent::dht_bootstrap_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__dht_direct_response_alert = {"_p_libtorrent__dht_direct_response_alert", "p_libtorrent__dht_direct_response_alert|libtorrent::dht_direct_response_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__dht_error_alert = {"_p_libtorrent__dht_error_alert", "p_libtorrent__dht_error_alert|libtorrent::dht_error_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__dht_get_peers_alert = {"_p_libtorrent__dht_get_peers_alert", "p_libtorrent__dht_get_peers_alert|libtorrent::dht_get_peers_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__dht_get_peers_reply_alert = {"_p_libtorrent__dht_get_peers_reply_alert", "p_libtorrent__dht_get_peers_reply_alert|libtorrent::dht_get_peers_reply_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__dht_immutable_item_alert = {"_p_libtorrent__dht_immutable_item_alert", "p_libtorrent__dht_immutable_item_alert|libtorrent::dht_immutable_item_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__dht_log_alert = {"_p_libtorrent__dht_log_alert", "p_libtorrent__dht_log_alert|libtorrent::dht_log_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__dht_lookup = {"_p_libtorrent__dht_lookup", "p_libtorrent__dht_lookup|libtorrent::dht_lookup *|std::vector< libtorrent::dht_lookup >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__dht_mutable_item_alert = {"_p_libtorrent__dht_mutable_item_alert", "p_libtorrent__dht_mutable_item_alert|libtorrent::dht_mutable_item_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__dht_outgoing_get_peers_alert = {"_p_libtorrent__dht_outgoing_get_peers_alert", "p_libtorrent__dht_outgoing_get_peers_alert|libtorrent::dht_outgoing_get_peers_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__dht_pkt_alert = {"_p_libtorrent__dht_pkt_alert", "p_libtorrent__dht_pkt_alert|libtorrent::dht_pkt_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__dht_put_alert = {"_p_libtorrent__dht_put_alert", "p_libtorrent__dht_put_alert|libtorrent::dht_put_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__dht_reply_alert = {"_p_libtorrent__dht_reply_alert", "p_libtorrent__dht_reply_alert|libtorrent::dht_reply_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__dht_routing_bucket = {"_p_libtorrent__dht_routing_bucket", "p_libtorrent__dht_routing_bucket|std::vector< libtorrent::dht_routing_bucket >::value_type *|libtorrent::dht_routing_bucket *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__dht_settings = {"_p_libtorrent__dht_settings", "libtorrent::dht_settings *|p_libtorrent__dht_settings", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__dht_stats_alert = {"_p_libtorrent__dht_stats_alert", "p_libtorrent__dht_stats_alert|libtorrent::dht_stats_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__entry = {"_p_libtorrent__entry", "std::vector< libtorrent::entry >::value_type *|libtorrent::entry *|p_libtorrent__entry", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__external_ip_alert = {"_p_libtorrent__external_ip_alert", "p_libtorrent__external_ip_alert|libtorrent::external_ip_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__fastresume_rejected_alert = {"_p_libtorrent__fastresume_rejected_alert", "p_libtorrent__fastresume_rejected_alert|libtorrent::fastresume_rejected_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__file__iovec_t = {"_p_libtorrent__file__iovec_t", "libtorrent::file::iovec_t *|p_libtorrent__file__iovec_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__file_completed_alert = {"_p_libtorrent__file_completed_alert", "p_libtorrent__file_completed_alert|libtorrent::file_completed_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__file_error_alert = {"_p_libtorrent__file_error_alert", "p_libtorrent__file_error_alert|libtorrent::file_error_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__file_rename_failed_alert = {"_p_libtorrent__file_rename_failed_alert", "p_libtorrent__file_rename_failed_alert|libtorrent::file_rename_failed_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__file_renamed_alert = {"_p_libtorrent__file_renamed_alert", "p_libtorrent__file_renamed_alert|libtorrent::file_renamed_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__file_slice = {"_p_libtorrent__file_slice", "std::vector< libtorrent::file_slice >::value_type *|libtorrent::file_slice *|p_libtorrent__file_slice", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__file_storage = {"_p_libtorrent__file_storage", "libtorrent::file_storage *|p_libtorrent__file_storage", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__hash_failed_alert = {"_p_libtorrent__hash_failed_alert", "p_libtorrent__hash_failed_alert|libtorrent::hash_failed_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__i2p_alert = {"_p_libtorrent__i2p_alert", "p_libtorrent__i2p_alert|libtorrent::i2p_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__incoming_connection_alert = {"_p_libtorrent__incoming_connection_alert", "p_libtorrent__incoming_connection_alert|libtorrent::incoming_connection_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__incoming_request_alert = {"_p_libtorrent__incoming_request_alert", "p_libtorrent__incoming_request_alert|libtorrent::incoming_request_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__invalid_request_alert = {"_p_libtorrent__invalid_request_alert", "p_libtorrent__invalid_request_alert|libtorrent::invalid_request_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__ip_filter = {"_p_libtorrent__ip_filter", "libtorrent::ip_filter *|p_libtorrent__ip_filter", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__listen_failed_alert = {"_p_libtorrent__listen_failed_alert", "p_libtorrent__listen_failed_alert|libtorrent::listen_failed_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__listen_succeeded_alert = {"_p_libtorrent__listen_succeeded_alert", "p_libtorrent__listen_succeeded_alert|libtorrent::listen_succeeded_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__log_alert = {"_p_libtorrent__log_alert", "p_libtorrent__log_alert|libtorrent::log_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__lsd_error_alert = {"_p_libtorrent__lsd_error_alert", "p_libtorrent__lsd_error_alert|libtorrent::lsd_error_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__lsd_peer_alert = {"_p_libtorrent__lsd_peer_alert", "p_libtorrent__lsd_peer_alert|libtorrent::lsd_peer_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__metadata_failed_alert = {"_p_libtorrent__metadata_failed_alert", "p_libtorrent__metadata_failed_alert|libtorrent::metadata_failed_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__metadata_received_alert = {"_p_libtorrent__metadata_received_alert", "p_libtorrent__metadata_received_alert|libtorrent::metadata_received_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__mmap_cache_alert = {"_p_libtorrent__mmap_cache_alert", "p_libtorrent__mmap_cache_alert|libtorrent::mmap_cache_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__partial_piece_info = {"_p_libtorrent__partial_piece_info", "libtorrent::partial_piece_info *|p_libtorrent__partial_piece_info|std::vector< libtorrent::partial_piece_info >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__peer_alert = {"_p_libtorrent__peer_alert", "p_libtorrent__peer_alert|libtorrent::peer_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__peer_ban_alert = {"_p_libtorrent__peer_ban_alert", "p_libtorrent__peer_ban_alert|libtorrent::peer_ban_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__peer_blocked_alert = {"_p_libtorrent__peer_blocked_alert", "p_libtorrent__peer_blocked_alert|libtorrent::peer_blocked_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__peer_class_info = {"_p_libtorrent__peer_class_info", "libtorrent::peer_class_info *|p_libtorrent__peer_class_info", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__peer_class_type_filter = {"_p_libtorrent__peer_class_type_filter", "libtorrent::peer_class_type_filter *|p_libtorrent__peer_class_type_filter", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__peer_connect_alert = {"_p_libtorrent__peer_connect_alert", "p_libtorrent__peer_connect_alert|libtorrent::peer_connect_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__peer_connection_handle = {"_p_libtorrent__peer_connection_handle", "p_libtorrent__peer_connection_handle|libtorrent::peer_connection_handle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__peer_disconnected_alert = {"_p_libtorrent__peer_disconnected_alert", "p_libtorrent__peer_disconnected_alert|libtorrent::peer_disconnected_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__peer_error_alert = {"_p_libtorrent__peer_error_alert", "p_libtorrent__peer_error_alert|libtorrent::peer_error_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__peer_info = {"_p_libtorrent__peer_info", "libtorrent::peer_info *|p_libtorrent__peer_info|std::vector< libtorrent::peer_info >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__peer_log_alert = {"_p_libtorrent__peer_log_alert", "p_libtorrent__peer_log_alert|libtorrent::peer_log_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__peer_request = {"_p_libtorrent__peer_request", "p_libtorrent__peer_request|libtorrent::peer_request *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__peer_snubbed_alert = {"_p_libtorrent__peer_snubbed_alert", "p_libtorrent__peer_snubbed_alert|libtorrent::peer_snubbed_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__peer_unsnubbed_alert = {"_p_libtorrent__peer_unsnubbed_alert", "p_libtorrent__peer_unsnubbed_alert|libtorrent::peer_unsnubbed_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__performance_alert = {"_p_libtorrent__performance_alert", "p_libtorrent__performance_alert|libtorrent::performance_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__picker_log_alert = {"_p_libtorrent__picker_log_alert", "p_libtorrent__picker_log_alert|libtorrent::picker_log_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__piece_finished_alert = {"_p_libtorrent__piece_finished_alert", "p_libtorrent__piece_finished_alert|libtorrent::piece_finished_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__port_filter = {"_p_libtorrent__port_filter", "libtorrent::port_filter *|p_libtorrent__port_filter", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__portmap_alert = {"_p_libtorrent__portmap_alert", "p_libtorrent__portmap_alert|libtorrent::portmap_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__portmap_error_alert = {"_p_libtorrent__portmap_error_alert", "p_libtorrent__portmap_error_alert|libtorrent::portmap_error_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__portmap_log_alert = {"_p_libtorrent__portmap_log_alert", "p_libtorrent__portmap_log_alert|libtorrent::portmap_log_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__read_piece_alert = {"_p_libtorrent__read_piece_alert", "p_libtorrent__read_piece_alert|libtorrent::read_piece_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__request_dropped_alert = {"_p_libtorrent__request_dropped_alert", "p_libtorrent__request_dropped_alert|libtorrent::request_dropped_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__save_resume_data_alert = {"_p_libtorrent__save_resume_data_alert", "p_libtorrent__save_resume_data_alert|libtorrent::save_resume_data_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__save_resume_data_failed_alert = {"_p_libtorrent__save_resume_data_failed_alert", "p_libtorrent__save_resume_data_failed_alert|libtorrent::save_resume_data_failed_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__scrape_failed_alert = {"_p_libtorrent__scrape_failed_alert", "p_libtorrent__scrape_failed_alert|libtorrent::scrape_failed_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__scrape_reply_alert = {"_p_libtorrent__scrape_reply_alert", "p_libtorrent__scrape_reply_alert|libtorrent::scrape_reply_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__session = {"_p_libtorrent__session", "libtorrent::session *|p_libtorrent__session", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__session_handle = {"_p_libtorrent__session_handle", "p_libtorrent__session_handle|libtorrent::session_handle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__session_params = {"_p_libtorrent__session_params", "libtorrent::session_params *|p_libtorrent__session_params", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__session_proxy = {"_p_libtorrent__session_proxy", "libtorrent::session_proxy *|p_libtorrent__session_proxy", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__session_stats_alert = {"_p_libtorrent__session_stats_alert", "p_libtorrent__session_stats_alert|libtorrent::session_stats_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__settings_pack = {"_p_libtorrent__settings_pack", "libtorrent::settings_pack *|p_libtorrent__settings_pack", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__sha1_hash = {"_p_libtorrent__sha1_hash", "std::vector< libtorrent::sha1_hash >::value_type *|libtorrent::sha1_hash *|libtorrent::peer_id *|p_libtorrent__sha1_hash|libtorrent::dht::node_id *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__spanT_char_const_t = {"_p_libtorrent__spanT_char_const_t", "libtorrent::span< char const > *|p_libtorrent__spanT_char_const_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__spanT_char_t = {"_p_libtorrent__spanT_char_t", "libtorrent::span< char > *|p_libtorrent__spanT_char_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__spanT_libtorrent__file__iovec_t_const_t = {"_p_libtorrent__spanT_libtorrent__file__iovec_t_const_t", "p_libtorrent__spanT_libtorrent__file__iovec_t_const_t|libtorrent::span< libtorrent::file::iovec_t const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__state_changed_alert = {"_p_libtorrent__state_changed_alert", "p_libtorrent__state_changed_alert|libtorrent::state_changed_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__state_update_alert = {"_p_libtorrent__state_update_alert", "p_libtorrent__state_update_alert|libtorrent::state_update_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__stats_alert = {"_p_libtorrent__stats_alert", "p_libtorrent__stats_alert|libtorrent::stats_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__stats_metric = {"_p_libtorrent__stats_metric", "libtorrent::stats_metric *|std::vector< libtorrent::stats_metric >::value_type *|p_libtorrent__stats_metric", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__storage_moved_alert = {"_p_libtorrent__storage_moved_alert", "p_libtorrent__storage_moved_alert|libtorrent::storage_moved_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__storage_moved_failed_alert = {"_p_libtorrent__storage_moved_failed_alert", "p_libtorrent__storage_moved_failed_alert|libtorrent::storage_moved_failed_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__string_view = {"_p_libtorrent__string_view", "libtorrent::string_view *|p_libtorrent__string_view", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__tcp__endpoint = {"_p_libtorrent__tcp__endpoint", "std::vector< libtorrent::tcp::endpoint >::value_type *|libtorrent::tcp::endpoint *|p_libtorrent__tcp__endpoint", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__torrent_added_alert = {"_p_libtorrent__torrent_added_alert", "p_libtorrent__torrent_added_alert|libtorrent::torrent_added_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__torrent_alert = {"_p_libtorrent__torrent_alert", "p_libtorrent__torrent_alert|libtorrent::torrent_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__torrent_checked_alert = {"_p_libtorrent__torrent_checked_alert", "p_libtorrent__torrent_checked_alert|libtorrent::torrent_checked_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__torrent_delete_failed_alert = {"_p_libtorrent__torrent_delete_failed_alert", "p_libtorrent__torrent_delete_failed_alert|libtorrent::torrent_delete_failed_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__torrent_deleted_alert = {"_p_libtorrent__torrent_deleted_alert", "p_libtorrent__torrent_deleted_alert|libtorrent::torrent_deleted_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__torrent_error_alert = {"_p_libtorrent__torrent_error_alert", "p_libtorrent__torrent_error_alert|libtorrent::torrent_error_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__torrent_finished_alert = {"_p_libtorrent__torrent_finished_alert", "p_libtorrent__torrent_finished_alert|libtorrent::torrent_finished_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__torrent_handle = {"_p_libtorrent__torrent_handle", "p_libtorrent__torrent_handle|std::vector< libtorrent::torrent_handle >::value_type *|libtorrent::torrent_handle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__torrent_info = {"_p_libtorrent__torrent_info", "libtorrent::torrent_info *|p_libtorrent__torrent_info", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__torrent_log_alert = {"_p_libtorrent__torrent_log_alert", "p_libtorrent__torrent_log_alert|libtorrent::torrent_log_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__torrent_need_cert_alert = {"_p_libtorrent__torrent_need_cert_alert", "p_libtorrent__torrent_need_cert_alert|libtorrent::torrent_need_cert_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__torrent_paused_alert = {"_p_libtorrent__torrent_paused_alert", "p_libtorrent__torrent_paused_alert|libtorrent::torrent_paused_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__torrent_removed_alert = {"_p_libtorrent__torrent_removed_alert", "p_libtorrent__torrent_removed_alert|libtorrent::torrent_removed_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__torrent_resumed_alert = {"_p_libtorrent__torrent_resumed_alert", "p_libtorrent__torrent_resumed_alert|libtorrent::torrent_resumed_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__torrent_status = {"_p_libtorrent__torrent_status", "p_libtorrent__torrent_status|libtorrent::torrent_status *|std::vector< libtorrent::torrent_status >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__tracker_alert = {"_p_libtorrent__tracker_alert", "p_libtorrent__tracker_alert|libtorrent::tracker_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__tracker_announce_alert = {"_p_libtorrent__tracker_announce_alert", "p_libtorrent__tracker_announce_alert|libtorrent::tracker_announce_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__tracker_error_alert = {"_p_libtorrent__tracker_error_alert", "p_libtorrent__tracker_error_alert|libtorrent::tracker_error_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__tracker_reply_alert = {"_p_libtorrent__tracker_reply_alert", "p_libtorrent__tracker_reply_alert|libtorrent::tracker_reply_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__tracker_warning_alert = {"_p_libtorrent__tracker_warning_alert", "p_libtorrent__tracker_warning_alert|libtorrent::tracker_warning_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__trackerid_alert = {"_p_libtorrent__trackerid_alert", "p_libtorrent__trackerid_alert|libtorrent::trackerid_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__udp__endpoint = {"_p_libtorrent__udp__endpoint", "std::vector< libtorrent::udp::endpoint >::value_type *|libtorrent::udp::endpoint *|p_libtorrent__udp__endpoint", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__udp_error_alert = {"_p_libtorrent__udp_error_alert", "p_libtorrent__udp_error_alert|libtorrent::udp_error_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__unwanted_block_alert = {"_p_libtorrent__unwanted_block_alert", "p_libtorrent__unwanted_block_alert|libtorrent::unwanted_block_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__url_seed_alert = {"_p_libtorrent__url_seed_alert", "p_libtorrent__url_seed_alert|libtorrent::url_seed_alert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libtorrent__web_seed_entry = {"_p_libtorrent__web_seed_entry", "libtorrent::web_seed_entry *|std::vector< libtorrent::web_seed_entry >::value_type *|p_libtorrent__web_seed_entry", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_list_type = {"_p_list_type", "list_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "long *|time_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|int64_t *|std::uint64_t *|long long *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapped_type = {"_p_mapped_type", "mapped_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_posix_stat_t = {"_p_posix_stat_t", "p_posix_stat_t|posix_stat_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_posix_wrapper = {"_p_posix_wrapper", "p_posix_wrapper|posix_wrapper *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_preformatted_type = {"_p_preformatted_type", "preformatted_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_set_piece_hashes_listener = {"_p_set_piece_hashes_listener", "p_set_piece_hashes_listener|set_piece_hashes_listener *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int_least8_t *|int_fast8_t *|int8_t *|std::uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_flibtorrent__sha1_hash_const_R_std__vectorT_char_t_R_boost__system__error_code_RF_t = {"_p_std__functionT_void_flibtorrent__sha1_hash_const_R_std__vectorT_char_t_R_boost__system__error_code_RF_t", "libtorrent::user_load_function_t *|std::function< void (libtorrent::sha1_hash const &,std::vector< char > &,boost::system::error_code &) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_int_libtorrent__bitfield_t = {"_p_std__mapT_int_libtorrent__bitfield_t", "std::map< int,libtorrent::bitfield > *|p_std__mapT_int_libtorrent__bitfield_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_int_std__string_t = {"_p_std__mapT_int_std__string_t", "p_std__mapT_int_std__string_t|std::map< int,std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_libtorrent__entry_t = {"_p_std__mapT_std__string_libtorrent__entry_t", "p_std__mapT_std__string_libtorrent__entry_t|std::map< std::string,libtorrent::entry > *|libtorrent::entry::dictionary_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_long_t = {"_p_std__mapT_std__string_long_t", "std::map< std::string,long > *|p_std__mapT_std__string_long_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_int_int_t = {"_p_std__pairT_int_int_t", "std::vector< std::pair< int,int > >::value_type *|p_std__pairT_int_int_t|std::pair< int,int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_libtorrent__string_view_libtorrent__bdecode_node_t = {"_p_std__pairT_libtorrent__string_view_libtorrent__bdecode_node_t", "p_std__pairT_libtorrent__string_view_libtorrent__bdecode_node_t|std::pair< libtorrent::string_view,libtorrent::bdecode_node > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_std__string_int_t = {"_p_std__pairT_std__string_int_t", "std::vector< std::pair< std::string,int > >::value_type *|p_std__pairT_std__string_int_t|std::pair< std::string,int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_std__string_std__string_t = {"_p_std__pairT_std__string_std__string_t", "p_std__pairT_std__string_std__string_t|std::pair< std::string,std::string > *|std::vector< std::pair< std::string,std::string > >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_std__vectorT_int8_t_t_std__vectorT_int8_t_t_t = {"_p_std__pairT_std__vectorT_int8_t_t_std__vectorT_int8_t_t_t", "std::pair< std::vector< signed char >,std::vector< signed char > > *|std::pair< std::vector< int8_t >,std::vector< int8_t > > *|p_std__pairT_std__vectorT_int8_t_t_std__vectorT_int8_t_t_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_t = {"_p_std__vectorT_int_t", "p_std__vectorT_int_t|std::vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_libtorrent__alert_p_t = {"_p_std__vectorT_libtorrent__alert_p_t", "std::vector< libtorrent::alert * > *|p_std__vectorT_libtorrent__alert_p_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_libtorrent__announce_entry_t = {"_p_std__vectorT_libtorrent__announce_entry_t", "p_std__vectorT_libtorrent__announce_entry_t|std::vector< libtorrent::announce_entry > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_libtorrent__block_info_t = {"_p_std__vectorT_libtorrent__block_info_t", "p_std__vectorT_libtorrent__block_info_t|std::vector< libtorrent::block_info > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_libtorrent__dht_lookup_t = {"_p_std__vectorT_libtorrent__dht_lookup_t", "p_std__vectorT_libtorrent__dht_lookup_t|std::vector< libtorrent::dht_lookup > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_libtorrent__dht_routing_bucket_t = {"_p_std__vectorT_libtorrent__dht_routing_bucket_t", "std::vector< libtorrent::dht_routing_bucket > *|p_std__vectorT_libtorrent__dht_routing_bucket_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_libtorrent__entry_t = {"_p_std__vectorT_libtorrent__entry_t", "p_std__vectorT_libtorrent__entry_t|std::vector< libtorrent::entry > *|libtorrent::entry::list_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_libtorrent__file_slice_t = {"_p_std__vectorT_libtorrent__file_slice_t", "std::vector< libtorrent::file_slice > *|p_std__vectorT_libtorrent__file_slice_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_libtorrent__partial_piece_info_t = {"_p_std__vectorT_libtorrent__partial_piece_info_t", "p_std__vectorT_libtorrent__partial_piece_info_t|std::vector< libtorrent::partial_piece_info > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_libtorrent__peer_info_t = {"_p_std__vectorT_libtorrent__peer_info_t", "p_std__vectorT_libtorrent__peer_info_t|std::vector< libtorrent::peer_info > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_libtorrent__sha1_hash_t = {"_p_std__vectorT_libtorrent__sha1_hash_t", "std::vector< libtorrent::sha1_hash > *|p_std__vectorT_libtorrent__sha1_hash_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_libtorrent__stats_metric_t = {"_p_std__vectorT_libtorrent__stats_metric_t", "p_std__vectorT_libtorrent__stats_metric_t|std::vector< libtorrent::stats_metric > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_libtorrent__tcp__endpoint_t = {"_p_std__vectorT_libtorrent__tcp__endpoint_t", "p_std__vectorT_libtorrent__tcp__endpoint_t|std::vector< libtorrent::tcp::endpoint > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_libtorrent__torrent_handle_t = {"_p_std__vectorT_libtorrent__torrent_handle_t", "p_std__vectorT_libtorrent__torrent_handle_t|std::vector< libtorrent::torrent_handle > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_libtorrent__torrent_status_t = {"_p_std__vectorT_libtorrent__torrent_status_t", "p_std__vectorT_libtorrent__torrent_status_t|std::vector< libtorrent::torrent_status > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_libtorrent__udp__endpoint_t = {"_p_std__vectorT_libtorrent__udp__endpoint_t", "p_std__vectorT_libtorrent__udp__endpoint_t|std::vector< libtorrent::udp::endpoint > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_libtorrent__web_seed_entry_t = {"_p_std__vectorT_libtorrent__web_seed_entry_t", "p_std__vectorT_libtorrent__web_seed_entry_t|std::vector< libtorrent::web_seed_entry > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_long_long_t = {"_p_std__vectorT_long_long_t", "std::vector< long long > *|std::vector< std::int64_t > *|p_std__vectorT_long_long_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_signed_char_t = {"_p_std__vectorT_signed_char_t", "std::vector< signed char > *|p_std__vectorT_signed_char_t|std::vector< int8_t > *|std::vector< std::uint8_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__pairT_int_int_t_t = {"_p_std__vectorT_std__pairT_int_int_t_t", "std::vector< std::pair< int,int > > *|p_std__vectorT_std__pairT_int_int_t_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__pairT_std__string_int_t_t = {"_p_std__vectorT_std__pairT_std__string_int_t_t", "std::vector< std::pair< std::string,int > > *|p_std__vectorT_std__pairT_std__string_int_t_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__pairT_std__string_std__string_t_t = {"_p_std__vectorT_std__pairT_std__string_std__string_t_t", "std::vector< std::pair< std::string,std::string > > *|p_std__vectorT_std__pairT_std__string_std__string_t_t|libtorrent::web_seed_entry::headers_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "p_std__vectorT_std__string_t|std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_string_type = {"_p_string_type", "string_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig_plugin = {"_p_swig_plugin", "p_swig_plugin|swig_plugin *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "libtorrent::peer_class_t *|unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_add_files_listener,
  &_swigt__p_alert_notify_callback,
  &_swigt__p_boost__system__error_category,
  &_swigt__p_boost__system__error_code,
  &_swigt__p_boost__system__error_condition,
  &_swigt__p_char,
  &_swigt__p_const_reference,
  &_swigt__p_dictionary_type,
  &_swigt__p_difference_type,
  &_swigt__p_headers_t,
  &_swigt__p_int,
  &_swigt__p_integer_type,
  &_swigt__p_key_type,
  &_swigt__p_libtorrent__add_torrent_alert,
  &_swigt__p_libtorrent__add_torrent_params,
  &_swigt__p_libtorrent__address,
  &_swigt__p_libtorrent__alert,
  &_swigt__p_libtorrent__announce_entry,
  &_swigt__p_libtorrent__anonymous_mode_alert,
  &_swigt__p_libtorrent__bdecode_node,
  &_swigt__p_libtorrent__bitfield,
  &_swigt__p_libtorrent__block_downloading_alert,
  &_swigt__p_libtorrent__block_finished_alert,
  &_swigt__p_libtorrent__block_info,
  &_swigt__p_libtorrent__block_timeout_alert,
  &_swigt__p_libtorrent__bloom_filterT_128_t,
  &_swigt__p_libtorrent__bloom_filterT_256_t,
  &_swigt__p_libtorrent__bt_peer_connection_handle,
  &_swigt__p_libtorrent__cache_flushed_alert,
  &_swigt__p_libtorrent__create_torrent,
  &_swigt__p_libtorrent__dht__dht_state,
  &_swigt__p_libtorrent__dht_announce_alert,
  &_swigt__p_libtorrent__dht_bootstrap_alert,
  &_swigt__p_libtorrent__dht_direct_response_alert,
  &_swigt__p_libtorrent__dht_error_alert,
  &_swigt__p_libtorrent__dht_get_peers_alert,
  &_swigt__p_libtorrent__dht_get_peers_reply_alert,
  &_swigt__p_libtorrent__dht_immutable_item_alert,
  &_swigt__p_libtorrent__dht_log_alert,
  &_swigt__p_libtorrent__dht_lookup,
  &_swigt__p_libtorrent__dht_mutable_item_alert,
  &_swigt__p_libtorrent__dht_outgoing_get_peers_alert,
  &_swigt__p_libtorrent__dht_pkt_alert,
  &_swigt__p_libtorrent__dht_put_alert,
  &_swigt__p_libtorrent__dht_reply_alert,
  &_swigt__p_libtorrent__dht_routing_bucket,
  &_swigt__p_libtorrent__dht_settings,
  &_swigt__p_libtorrent__dht_stats_alert,
  &_swigt__p_libtorrent__entry,
  &_swigt__p_libtorrent__external_ip_alert,
  &_swigt__p_libtorrent__fastresume_rejected_alert,
  &_swigt__p_libtorrent__file__iovec_t,
  &_swigt__p_libtorrent__file_completed_alert,
  &_swigt__p_libtorrent__file_error_alert,
  &_swigt__p_libtorrent__file_rename_failed_alert,
  &_swigt__p_libtorrent__file_renamed_alert,
  &_swigt__p_libtorrent__file_slice,
  &_swigt__p_libtorrent__file_storage,
  &_swigt__p_libtorrent__hash_failed_alert,
  &_swigt__p_libtorrent__i2p_alert,
  &_swigt__p_libtorrent__incoming_connection_alert,
  &_swigt__p_libtorrent__incoming_request_alert,
  &_swigt__p_libtorrent__invalid_request_alert,
  &_swigt__p_libtorrent__ip_filter,
  &_swigt__p_libtorrent__listen_failed_alert,
  &_swigt__p_libtorrent__listen_succeeded_alert,
  &_swigt__p_libtorrent__log_alert,
  &_swigt__p_libtorrent__lsd_error_alert,
  &_swigt__p_libtorrent__lsd_peer_alert,
  &_swigt__p_libtorrent__metadata_failed_alert,
  &_swigt__p_libtorrent__metadata_received_alert,
  &_swigt__p_libtorrent__mmap_cache_alert,
  &_swigt__p_libtorrent__partial_piece_info,
  &_swigt__p_libtorrent__peer_alert,
  &_swigt__p_libtorrent__peer_ban_alert,
  &_swigt__p_libtorrent__peer_blocked_alert,
  &_swigt__p_libtorrent__peer_class_info,
  &_swigt__p_libtorrent__peer_class_type_filter,
  &_swigt__p_libtorrent__peer_connect_alert,
  &_swigt__p_libtorrent__peer_connection_handle,
  &_swigt__p_libtorrent__peer_disconnected_alert,
  &_swigt__p_libtorrent__peer_error_alert,
  &_swigt__p_libtorrent__peer_info,
  &_swigt__p_libtorrent__peer_log_alert,
  &_swigt__p_libtorrent__peer_request,
  &_swigt__p_libtorrent__peer_snubbed_alert,
  &_swigt__p_libtorrent__peer_unsnubbed_alert,
  &_swigt__p_libtorrent__performance_alert,
  &_swigt__p_libtorrent__picker_log_alert,
  &_swigt__p_libtorrent__piece_finished_alert,
  &_swigt__p_libtorrent__port_filter,
  &_swigt__p_libtorrent__portmap_alert,
  &_swigt__p_libtorrent__portmap_error_alert,
  &_swigt__p_libtorrent__portmap_log_alert,
  &_swigt__p_libtorrent__read_piece_alert,
  &_swigt__p_libtorrent__request_dropped_alert,
  &_swigt__p_libtorrent__save_resume_data_alert,
  &_swigt__p_libtorrent__save_resume_data_failed_alert,
  &_swigt__p_libtorrent__scrape_failed_alert,
  &_swigt__p_libtorrent__scrape_reply_alert,
  &_swigt__p_libtorrent__session,
  &_swigt__p_libtorrent__session_handle,
  &_swigt__p_libtorrent__session_params,
  &_swigt__p_libtorrent__session_proxy,
  &_swigt__p_libtorrent__session_stats_alert,
  &_swigt__p_libtorrent__settings_pack,
  &_swigt__p_libtorrent__sha1_hash,
  &_swigt__p_libtorrent__spanT_char_const_t,
  &_swigt__p_libtorrent__spanT_char_t,
  &_swigt__p_libtorrent__spanT_libtorrent__file__iovec_t_const_t,
  &_swigt__p_libtorrent__state_changed_alert,
  &_swigt__p_libtorrent__state_update_alert,
  &_swigt__p_libtorrent__stats_alert,
  &_swigt__p_libtorrent__stats_metric,
  &_swigt__p_libtorrent__storage_moved_alert,
  &_swigt__p_libtorrent__storage_moved_failed_alert,
  &_swigt__p_libtorrent__string_view,
  &_swigt__p_libtorrent__tcp__endpoint,
  &_swigt__p_libtorrent__torrent_added_alert,
  &_swigt__p_libtorrent__torrent_alert,
  &_swigt__p_libtorrent__torrent_checked_alert,
  &_swigt__p_libtorrent__torrent_delete_failed_alert,
  &_swigt__p_libtorrent__torrent_deleted_alert,
  &_swigt__p_libtorrent__torrent_error_alert,
  &_swigt__p_libtorrent__torrent_finished_alert,
  &_swigt__p_libtorrent__torrent_handle,
  &_swigt__p_libtorrent__torrent_info,
  &_swigt__p_libtorrent__torrent_log_alert,
  &_swigt__p_libtorrent__torrent_need_cert_alert,
  &_swigt__p_libtorrent__torrent_paused_alert,
  &_swigt__p_libtorrent__torrent_removed_alert,
  &_swigt__p_libtorrent__torrent_resumed_alert,
  &_swigt__p_libtorrent__torrent_status,
  &_swigt__p_libtorrent__tracker_alert,
  &_swigt__p_libtorrent__tracker_announce_alert,
  &_swigt__p_libtorrent__tracker_error_alert,
  &_swigt__p_libtorrent__tracker_reply_alert,
  &_swigt__p_libtorrent__tracker_warning_alert,
  &_swigt__p_libtorrent__trackerid_alert,
  &_swigt__p_libtorrent__udp__endpoint,
  &_swigt__p_libtorrent__udp_error_alert,
  &_swigt__p_libtorrent__unwanted_block_alert,
  &_swigt__p_libtorrent__url_seed_alert,
  &_swigt__p_libtorrent__web_seed_entry,
  &_swigt__p_list_type,
  &_swigt__p_long,
  &_swigt__p_long_long,
  &_swigt__p_mapped_type,
  &_swigt__p_posix_stat_t,
  &_swigt__p_posix_wrapper,
  &_swigt__p_preformatted_type,
  &_swigt__p_set_piece_hashes_listener,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_size_type,
  &_swigt__p_std__functionT_void_flibtorrent__sha1_hash_const_R_std__vectorT_char_t_R_boost__system__error_code_RF_t,
  &_swigt__p_std__mapT_int_libtorrent__bitfield_t,
  &_swigt__p_std__mapT_int_std__string_t,
  &_swigt__p_std__mapT_std__string_libtorrent__entry_t,
  &_swigt__p_std__mapT_std__string_long_t,
  &_swigt__p_std__pairT_int_int_t,
  &_swigt__p_std__pairT_libtorrent__string_view_libtorrent__bdecode_node_t,
  &_swigt__p_std__pairT_std__string_int_t,
  &_swigt__p_std__pairT_std__string_std__string_t,
  &_swigt__p_std__pairT_std__vectorT_int8_t_t_std__vectorT_int8_t_t_t,
  &_swigt__p_std__vectorT_int_t,
  &_swigt__p_std__vectorT_libtorrent__alert_p_t,
  &_swigt__p_std__vectorT_libtorrent__announce_entry_t,
  &_swigt__p_std__vectorT_libtorrent__block_info_t,
  &_swigt__p_std__vectorT_libtorrent__dht_lookup_t,
  &_swigt__p_std__vectorT_libtorrent__dht_routing_bucket_t,
  &_swigt__p_std__vectorT_libtorrent__entry_t,
  &_swigt__p_std__vectorT_libtorrent__file_slice_t,
  &_swigt__p_std__vectorT_libtorrent__partial_piece_info_t,
  &_swigt__p_std__vectorT_libtorrent__peer_info_t,
  &_swigt__p_std__vectorT_libtorrent__sha1_hash_t,
  &_swigt__p_std__vectorT_libtorrent__stats_metric_t,
  &_swigt__p_std__vectorT_libtorrent__tcp__endpoint_t,
  &_swigt__p_std__vectorT_libtorrent__torrent_handle_t,
  &_swigt__p_std__vectorT_libtorrent__torrent_status_t,
  &_swigt__p_std__vectorT_libtorrent__udp__endpoint_t,
  &_swigt__p_std__vectorT_libtorrent__web_seed_entry_t,
  &_swigt__p_std__vectorT_long_long_t,
  &_swigt__p_std__vectorT_signed_char_t,
  &_swigt__p_std__vectorT_std__pairT_int_int_t_t,
  &_swigt__p_std__vectorT_std__pairT_std__string_int_t_t,
  &_swigt__p_std__vectorT_std__pairT_std__string_std__string_t_t,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_string_type,
  &_swigt__p_swig_plugin,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_add_files_listener[] = {  {&_swigt__p_add_files_listener, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_alert_notify_callback[] = {  {&_swigt__p_alert_notify_callback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__system__error_category[] = {  {&_swigt__p_boost__system__error_category, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__system__error_code[] = {  {&_swigt__p_boost__system__error_code, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__system__error_condition[] = {  {&_swigt__p_boost__system__error_condition, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_reference[] = {  {&_swigt__p_const_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dictionary_type[] = {  {&_swigt__p_dictionary_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_headers_t[] = {  {&_swigt__p_headers_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_integer_type[] = {  {&_swigt__p_integer_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__add_torrent_alert[] = {  {&_swigt__p_libtorrent__add_torrent_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__add_torrent_params[] = {  {&_swigt__p_libtorrent__add_torrent_params, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__address[] = {  {&_swigt__p_libtorrent__address, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__alert[] = {  {&_swigt__p_libtorrent__udp_error_alert, _p_libtorrent__udp_error_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__external_ip_alert, _p_libtorrent__external_ip_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__listen_failed_alert, _p_libtorrent__listen_failed_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__listen_succeeded_alert, _p_libtorrent__listen_succeeded_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__portmap_error_alert, _p_libtorrent__portmap_error_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__dht_put_alert, _p_libtorrent__dht_put_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__dht_error_alert, _p_libtorrent__dht_error_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__incoming_connection_alert, _p_libtorrent__incoming_connection_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__dht_bootstrap_alert, _p_libtorrent__dht_bootstrap_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__portmap_alert, _p_libtorrent__portmap_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__add_torrent_alert, _p_libtorrent__add_torrent_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__torrent_need_cert_alert, _p_libtorrent__torrent_need_cert_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__torrent_error_alert, _p_libtorrent__torrent_error_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__cache_flushed_alert, _p_libtorrent__cache_flushed_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__fastresume_rejected_alert, _p_libtorrent__fastresume_rejected_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__metadata_received_alert, _p_libtorrent__metadata_received_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__metadata_failed_alert, _p_libtorrent__metadata_failed_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__file_error_alert, _p_libtorrent__file_error_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__url_seed_alert, _p_libtorrent__url_seed_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__torrent_checked_alert, _p_libtorrent__torrent_checked_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__torrent_resumed_alert, _p_libtorrent__torrent_resumed_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__torrent_paused_alert, _p_libtorrent__torrent_paused_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__save_resume_data_failed_alert, _p_libtorrent__save_resume_data_failed_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__torrent_delete_failed_alert, _p_libtorrent__torrent_delete_failed_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__torrent_deleted_alert, _p_libtorrent__torrent_deleted_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__state_changed_alert, _p_libtorrent__state_changed_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__file_rename_failed_alert, _p_libtorrent__file_rename_failed_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__file_renamed_alert, _p_libtorrent__file_renamed_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__file_completed_alert, _p_libtorrent__file_completed_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__torrent_removed_alert, _p_libtorrent__torrent_removed_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__storage_moved_failed_alert, _p_libtorrent__storage_moved_failed_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__lsd_peer_alert, _p_libtorrent__lsd_peer_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__peer_blocked_alert, _p_libtorrent__peer_blocked_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__peer_alert, _p_libtorrent__peer_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__trackerid_alert, _p_libtorrent__trackerid_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__tracker_error_alert, _p_libtorrent__tracker_error_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__tracker_alert, _p_libtorrent__tracker_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__torrent_added_alert, _p_libtorrent__torrent_added_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__peer_connect_alert, _p_libtorrent__peer_connect_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__peer_disconnected_alert, _p_libtorrent__peer_disconnected_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__invalid_request_alert, _p_libtorrent__invalid_request_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__torrent_finished_alert, _p_libtorrent__torrent_finished_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__piece_finished_alert, _p_libtorrent__piece_finished_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__request_dropped_alert, _p_libtorrent__request_dropped_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__block_timeout_alert, _p_libtorrent__block_timeout_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__block_finished_alert, _p_libtorrent__block_finished_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__storage_moved_alert, _p_libtorrent__storage_moved_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__i2p_alert, _p_libtorrent__i2p_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__lsd_error_alert, _p_libtorrent__lsd_error_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__incoming_request_alert, _p_libtorrent__incoming_request_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__dht_pkt_alert, _p_libtorrent__dht_pkt_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__peer_error_alert, _p_libtorrent__peer_error_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__peer_snubbed_alert, _p_libtorrent__peer_snubbed_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__peer_unsnubbed_alert, _p_libtorrent__peer_unsnubbed_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__peer_ban_alert, _p_libtorrent__peer_ban_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__hash_failed_alert, _p_libtorrent__hash_failed_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__scrape_failed_alert, _p_libtorrent__scrape_failed_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__torrent_alert, _p_libtorrent__torrent_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__torrent_log_alert, _p_libtorrent__torrent_log_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__anonymous_mode_alert, _p_libtorrent__anonymous_mode_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__alert, 0, 0, 0},  {&_swigt__p_libtorrent__picker_log_alert, _p_libtorrent__picker_log_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__peer_log_alert, _p_libtorrent__peer_log_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__unwanted_block_alert, _p_libtorrent__unwanted_block_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__block_downloading_alert, _p_libtorrent__block_downloading_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__tracker_announce_alert, _p_libtorrent__tracker_announce_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__dht_reply_alert, _p_libtorrent__dht_reply_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__tracker_reply_alert, _p_libtorrent__tracker_reply_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__read_piece_alert, _p_libtorrent__read_piece_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__performance_alert, _p_libtorrent__performance_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__tracker_warning_alert, _p_libtorrent__tracker_warning_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__scrape_reply_alert, _p_libtorrent__scrape_reply_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__save_resume_data_alert, _p_libtorrent__save_resume_data_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__stats_alert, _p_libtorrent__stats_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__portmap_log_alert, _p_libtorrent__portmap_log_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__dht_announce_alert, _p_libtorrent__dht_announce_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__dht_get_peers_alert, _p_libtorrent__dht_get_peers_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__state_update_alert, _p_libtorrent__state_update_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__mmap_cache_alert, _p_libtorrent__mmap_cache_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__session_stats_alert, _p_libtorrent__session_stats_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__dht_immutable_item_alert, _p_libtorrent__dht_immutable_item_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__dht_mutable_item_alert, _p_libtorrent__dht_mutable_item_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__dht_outgoing_get_peers_alert, _p_libtorrent__dht_outgoing_get_peers_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__log_alert, _p_libtorrent__log_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__dht_stats_alert, _p_libtorrent__dht_stats_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__dht_log_alert, _p_libtorrent__dht_log_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__dht_get_peers_reply_alert, _p_libtorrent__dht_get_peers_reply_alertTo_p_libtorrent__alert, 0, 0},  {&_swigt__p_libtorrent__dht_direct_response_alert, _p_libtorrent__dht_direct_response_alertTo_p_libtorrent__alert, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__announce_entry[] = {  {&_swigt__p_libtorrent__announce_entry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__anonymous_mode_alert[] = {  {&_swigt__p_libtorrent__anonymous_mode_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__bdecode_node[] = {  {&_swigt__p_libtorrent__bdecode_node, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__bitfield[] = {  {&_swigt__p_libtorrent__bitfield, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__block_downloading_alert[] = {  {&_swigt__p_libtorrent__block_downloading_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__block_finished_alert[] = {  {&_swigt__p_libtorrent__block_finished_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__block_info[] = {  {&_swigt__p_libtorrent__block_info, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__block_timeout_alert[] = {  {&_swigt__p_libtorrent__block_timeout_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__bloom_filterT_128_t[] = {  {&_swigt__p_libtorrent__bloom_filterT_128_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__bloom_filterT_256_t[] = {  {&_swigt__p_libtorrent__bloom_filterT_256_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__bt_peer_connection_handle[] = {  {&_swigt__p_libtorrent__bt_peer_connection_handle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__cache_flushed_alert[] = {  {&_swigt__p_libtorrent__cache_flushed_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__create_torrent[] = {  {&_swigt__p_libtorrent__create_torrent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__dht__dht_state[] = {  {&_swigt__p_libtorrent__dht__dht_state, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__dht_announce_alert[] = {  {&_swigt__p_libtorrent__dht_announce_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__dht_bootstrap_alert[] = {  {&_swigt__p_libtorrent__dht_bootstrap_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__dht_direct_response_alert[] = {  {&_swigt__p_libtorrent__dht_direct_response_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__dht_error_alert[] = {  {&_swigt__p_libtorrent__dht_error_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__dht_get_peers_alert[] = {  {&_swigt__p_libtorrent__dht_get_peers_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__dht_get_peers_reply_alert[] = {  {&_swigt__p_libtorrent__dht_get_peers_reply_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__dht_immutable_item_alert[] = {  {&_swigt__p_libtorrent__dht_immutable_item_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__dht_log_alert[] = {  {&_swigt__p_libtorrent__dht_log_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__dht_lookup[] = {  {&_swigt__p_libtorrent__dht_lookup, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__dht_mutable_item_alert[] = {  {&_swigt__p_libtorrent__dht_mutable_item_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__dht_outgoing_get_peers_alert[] = {  {&_swigt__p_libtorrent__dht_outgoing_get_peers_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__dht_pkt_alert[] = {  {&_swigt__p_libtorrent__dht_pkt_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__dht_put_alert[] = {  {&_swigt__p_libtorrent__dht_put_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__dht_reply_alert[] = {  {&_swigt__p_libtorrent__dht_reply_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__dht_routing_bucket[] = {  {&_swigt__p_libtorrent__dht_routing_bucket, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__dht_settings[] = {  {&_swigt__p_libtorrent__dht_settings, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__dht_stats_alert[] = {  {&_swigt__p_libtorrent__dht_stats_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__entry[] = {  {&_swigt__p_libtorrent__entry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__external_ip_alert[] = {  {&_swigt__p_libtorrent__external_ip_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__fastresume_rejected_alert[] = {  {&_swigt__p_libtorrent__fastresume_rejected_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__file__iovec_t[] = {  {&_swigt__p_libtorrent__file__iovec_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__file_completed_alert[] = {  {&_swigt__p_libtorrent__file_completed_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__file_error_alert[] = {  {&_swigt__p_libtorrent__file_error_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__file_rename_failed_alert[] = {  {&_swigt__p_libtorrent__file_rename_failed_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__file_renamed_alert[] = {  {&_swigt__p_libtorrent__file_renamed_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__file_slice[] = {  {&_swigt__p_libtorrent__file_slice, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__file_storage[] = {  {&_swigt__p_libtorrent__file_storage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__hash_failed_alert[] = {  {&_swigt__p_libtorrent__hash_failed_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__i2p_alert[] = {  {&_swigt__p_libtorrent__i2p_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__incoming_connection_alert[] = {  {&_swigt__p_libtorrent__incoming_connection_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__incoming_request_alert[] = {  {&_swigt__p_libtorrent__incoming_request_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__invalid_request_alert[] = {  {&_swigt__p_libtorrent__invalid_request_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__ip_filter[] = {  {&_swigt__p_libtorrent__ip_filter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__listen_failed_alert[] = {  {&_swigt__p_libtorrent__listen_failed_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__listen_succeeded_alert[] = {  {&_swigt__p_libtorrent__listen_succeeded_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__log_alert[] = {  {&_swigt__p_libtorrent__log_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__lsd_error_alert[] = {  {&_swigt__p_libtorrent__lsd_error_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__lsd_peer_alert[] = {  {&_swigt__p_libtorrent__lsd_peer_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__metadata_failed_alert[] = {  {&_swigt__p_libtorrent__metadata_failed_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__metadata_received_alert[] = {  {&_swigt__p_libtorrent__metadata_received_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__mmap_cache_alert[] = {  {&_swigt__p_libtorrent__mmap_cache_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__partial_piece_info[] = {  {&_swigt__p_libtorrent__partial_piece_info, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__peer_alert[] = {  {&_swigt__p_libtorrent__lsd_peer_alert, _p_libtorrent__lsd_peer_alertTo_p_libtorrent__peer_alert, 0, 0},  {&_swigt__p_libtorrent__peer_blocked_alert, _p_libtorrent__peer_blocked_alertTo_p_libtorrent__peer_alert, 0, 0},  {&_swigt__p_libtorrent__block_finished_alert, _p_libtorrent__block_finished_alertTo_p_libtorrent__peer_alert, 0, 0},  {&_swigt__p_libtorrent__block_timeout_alert, _p_libtorrent__block_timeout_alertTo_p_libtorrent__peer_alert, 0, 0},  {&_swigt__p_libtorrent__request_dropped_alert, _p_libtorrent__request_dropped_alertTo_p_libtorrent__peer_alert, 0, 0},  {&_swigt__p_libtorrent__invalid_request_alert, _p_libtorrent__invalid_request_alertTo_p_libtorrent__peer_alert, 0, 0},  {&_swigt__p_libtorrent__peer_disconnected_alert, _p_libtorrent__peer_disconnected_alertTo_p_libtorrent__peer_alert, 0, 0},  {&_swigt__p_libtorrent__peer_connect_alert, _p_libtorrent__peer_connect_alertTo_p_libtorrent__peer_alert, 0, 0},  {&_swigt__p_libtorrent__peer_error_alert, _p_libtorrent__peer_error_alertTo_p_libtorrent__peer_alert, 0, 0},  {&_swigt__p_libtorrent__peer_snubbed_alert, _p_libtorrent__peer_snubbed_alertTo_p_libtorrent__peer_alert, 0, 0},  {&_swigt__p_libtorrent__peer_unsnubbed_alert, _p_libtorrent__peer_unsnubbed_alertTo_p_libtorrent__peer_alert, 0, 0},  {&_swigt__p_libtorrent__peer_ban_alert, _p_libtorrent__peer_ban_alertTo_p_libtorrent__peer_alert, 0, 0},  {&_swigt__p_libtorrent__incoming_request_alert, _p_libtorrent__incoming_request_alertTo_p_libtorrent__peer_alert, 0, 0},  {&_swigt__p_libtorrent__peer_alert, 0, 0, 0},  {&_swigt__p_libtorrent__unwanted_block_alert, _p_libtorrent__unwanted_block_alertTo_p_libtorrent__peer_alert, 0, 0},  {&_swigt__p_libtorrent__block_downloading_alert, _p_libtorrent__block_downloading_alertTo_p_libtorrent__peer_alert, 0, 0},  {&_swigt__p_libtorrent__peer_log_alert, _p_libtorrent__peer_log_alertTo_p_libtorrent__peer_alert, 0, 0},  {&_swigt__p_libtorrent__picker_log_alert, _p_libtorrent__picker_log_alertTo_p_libtorrent__peer_alert, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__peer_ban_alert[] = {  {&_swigt__p_libtorrent__peer_ban_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__peer_blocked_alert[] = {  {&_swigt__p_libtorrent__peer_blocked_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__peer_class_info[] = {  {&_swigt__p_libtorrent__peer_class_info, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__peer_class_type_filter[] = {  {&_swigt__p_libtorrent__peer_class_type_filter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__peer_connect_alert[] = {  {&_swigt__p_libtorrent__peer_connect_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__peer_connection_handle[] = {  {&_swigt__p_libtorrent__peer_connection_handle, 0, 0, 0},  {&_swigt__p_libtorrent__bt_peer_connection_handle, _p_libtorrent__bt_peer_connection_handleTo_p_libtorrent__peer_connection_handle, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__peer_disconnected_alert[] = {  {&_swigt__p_libtorrent__peer_disconnected_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__peer_error_alert[] = {  {&_swigt__p_libtorrent__peer_error_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__peer_info[] = {  {&_swigt__p_libtorrent__peer_info, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__peer_log_alert[] = {  {&_swigt__p_libtorrent__peer_log_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__peer_request[] = {  {&_swigt__p_libtorrent__peer_request, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__peer_snubbed_alert[] = {  {&_swigt__p_libtorrent__peer_snubbed_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__peer_unsnubbed_alert[] = {  {&_swigt__p_libtorrent__peer_unsnubbed_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__performance_alert[] = {  {&_swigt__p_libtorrent__performance_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__picker_log_alert[] = {  {&_swigt__p_libtorrent__picker_log_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__piece_finished_alert[] = {  {&_swigt__p_libtorrent__piece_finished_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__port_filter[] = {  {&_swigt__p_libtorrent__port_filter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__portmap_alert[] = {  {&_swigt__p_libtorrent__portmap_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__portmap_error_alert[] = {  {&_swigt__p_libtorrent__portmap_error_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__portmap_log_alert[] = {  {&_swigt__p_libtorrent__portmap_log_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__read_piece_alert[] = {  {&_swigt__p_libtorrent__read_piece_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__request_dropped_alert[] = {  {&_swigt__p_libtorrent__request_dropped_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__save_resume_data_alert[] = {  {&_swigt__p_libtorrent__save_resume_data_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__save_resume_data_failed_alert[] = {  {&_swigt__p_libtorrent__save_resume_data_failed_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__scrape_failed_alert[] = {  {&_swigt__p_libtorrent__scrape_failed_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__scrape_reply_alert[] = {  {&_swigt__p_libtorrent__scrape_reply_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__session[] = {  {&_swigt__p_libtorrent__session, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__session_handle[] = {  {&_swigt__p_libtorrent__session_handle, 0, 0, 0},  {&_swigt__p_libtorrent__session, _p_libtorrent__sessionTo_p_libtorrent__session_handle, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__session_params[] = {  {&_swigt__p_libtorrent__session_params, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__session_proxy[] = {  {&_swigt__p_libtorrent__session_proxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__session_stats_alert[] = {  {&_swigt__p_libtorrent__session_stats_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__settings_pack[] = {  {&_swigt__p_libtorrent__settings_pack, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__sha1_hash[] = {  {&_swigt__p_libtorrent__sha1_hash, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__spanT_char_const_t[] = {  {&_swigt__p_libtorrent__spanT_char_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__spanT_char_t[] = {  {&_swigt__p_libtorrent__spanT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__spanT_libtorrent__file__iovec_t_const_t[] = {  {&_swigt__p_libtorrent__spanT_libtorrent__file__iovec_t_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__state_changed_alert[] = {  {&_swigt__p_libtorrent__state_changed_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__state_update_alert[] = {  {&_swigt__p_libtorrent__state_update_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__stats_alert[] = {  {&_swigt__p_libtorrent__stats_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__stats_metric[] = {  {&_swigt__p_libtorrent__stats_metric, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__storage_moved_alert[] = {  {&_swigt__p_libtorrent__storage_moved_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__storage_moved_failed_alert[] = {  {&_swigt__p_libtorrent__storage_moved_failed_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__string_view[] = {  {&_swigt__p_libtorrent__string_view, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__tcp__endpoint[] = {  {&_swigt__p_libtorrent__tcp__endpoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__torrent_added_alert[] = {  {&_swigt__p_libtorrent__torrent_added_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__torrent_alert[] = {  {&_swigt__p_libtorrent__torrent_log_alert, _p_libtorrent__torrent_log_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__anonymous_mode_alert, _p_libtorrent__anonymous_mode_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__picker_log_alert, _p_libtorrent__picker_log_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__peer_log_alert, _p_libtorrent__peer_log_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__unwanted_block_alert, _p_libtorrent__unwanted_block_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__block_downloading_alert, _p_libtorrent__block_downloading_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__tracker_announce_alert, _p_libtorrent__tracker_announce_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__dht_reply_alert, _p_libtorrent__dht_reply_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__tracker_reply_alert, _p_libtorrent__tracker_reply_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__read_piece_alert, _p_libtorrent__read_piece_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__performance_alert, _p_libtorrent__performance_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__tracker_warning_alert, _p_libtorrent__tracker_warning_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__scrape_reply_alert, _p_libtorrent__scrape_reply_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__save_resume_data_alert, _p_libtorrent__save_resume_data_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__stats_alert, _p_libtorrent__stats_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__peer_blocked_alert, _p_libtorrent__peer_blocked_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__block_finished_alert, _p_libtorrent__block_finished_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__block_timeout_alert, _p_libtorrent__block_timeout_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__request_dropped_alert, _p_libtorrent__request_dropped_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__invalid_request_alert, _p_libtorrent__invalid_request_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__peer_disconnected_alert, _p_libtorrent__peer_disconnected_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__peer_connect_alert, _p_libtorrent__peer_connect_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__peer_error_alert, _p_libtorrent__peer_error_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__peer_snubbed_alert, _p_libtorrent__peer_snubbed_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__peer_unsnubbed_alert, _p_libtorrent__peer_unsnubbed_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__peer_ban_alert, _p_libtorrent__peer_ban_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__incoming_request_alert, _p_libtorrent__incoming_request_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__peer_alert, _p_libtorrent__peer_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__trackerid_alert, _p_libtorrent__trackerid_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__scrape_failed_alert, _p_libtorrent__scrape_failed_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__tracker_error_alert, _p_libtorrent__tracker_error_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__tracker_alert, _p_libtorrent__tracker_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__torrent_added_alert, _p_libtorrent__torrent_added_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__torrent_alert, 0, 0, 0},  {&_swigt__p_libtorrent__lsd_peer_alert, _p_libtorrent__lsd_peer_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__hash_failed_alert, _p_libtorrent__hash_failed_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__torrent_finished_alert, _p_libtorrent__torrent_finished_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__piece_finished_alert, _p_libtorrent__piece_finished_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__storage_moved_alert, _p_libtorrent__storage_moved_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__storage_moved_failed_alert, _p_libtorrent__storage_moved_failed_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__torrent_removed_alert, _p_libtorrent__torrent_removed_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__file_completed_alert, _p_libtorrent__file_completed_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__file_renamed_alert, _p_libtorrent__file_renamed_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__file_rename_failed_alert, _p_libtorrent__file_rename_failed_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__state_changed_alert, _p_libtorrent__state_changed_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__torrent_deleted_alert, _p_libtorrent__torrent_deleted_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__torrent_delete_failed_alert, _p_libtorrent__torrent_delete_failed_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__save_resume_data_failed_alert, _p_libtorrent__save_resume_data_failed_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__torrent_paused_alert, _p_libtorrent__torrent_paused_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__torrent_resumed_alert, _p_libtorrent__torrent_resumed_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__torrent_checked_alert, _p_libtorrent__torrent_checked_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__url_seed_alert, _p_libtorrent__url_seed_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__file_error_alert, _p_libtorrent__file_error_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__metadata_failed_alert, _p_libtorrent__metadata_failed_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__metadata_received_alert, _p_libtorrent__metadata_received_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__fastresume_rejected_alert, _p_libtorrent__fastresume_rejected_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__cache_flushed_alert, _p_libtorrent__cache_flushed_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__torrent_error_alert, _p_libtorrent__torrent_error_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__torrent_need_cert_alert, _p_libtorrent__torrent_need_cert_alertTo_p_libtorrent__torrent_alert, 0, 0},  {&_swigt__p_libtorrent__add_torrent_alert, _p_libtorrent__add_torrent_alertTo_p_libtorrent__torrent_alert, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__torrent_checked_alert[] = {  {&_swigt__p_libtorrent__torrent_checked_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__torrent_delete_failed_alert[] = {  {&_swigt__p_libtorrent__torrent_delete_failed_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__torrent_deleted_alert[] = {  {&_swigt__p_libtorrent__torrent_deleted_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__torrent_error_alert[] = {  {&_swigt__p_libtorrent__torrent_error_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__torrent_finished_alert[] = {  {&_swigt__p_libtorrent__torrent_finished_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__torrent_handle[] = {  {&_swigt__p_libtorrent__torrent_handle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__torrent_info[] = {  {&_swigt__p_libtorrent__torrent_info, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__torrent_log_alert[] = {  {&_swigt__p_libtorrent__torrent_log_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__torrent_need_cert_alert[] = {  {&_swigt__p_libtorrent__torrent_need_cert_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__torrent_paused_alert[] = {  {&_swigt__p_libtorrent__torrent_paused_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__torrent_removed_alert[] = {  {&_swigt__p_libtorrent__torrent_removed_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__torrent_resumed_alert[] = {  {&_swigt__p_libtorrent__torrent_resumed_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__torrent_status[] = {  {&_swigt__p_libtorrent__torrent_status, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__tracker_alert[] = {  {&_swigt__p_libtorrent__tracker_warning_alert, _p_libtorrent__tracker_warning_alertTo_p_libtorrent__tracker_alert, 0, 0},  {&_swigt__p_libtorrent__scrape_reply_alert, _p_libtorrent__scrape_reply_alertTo_p_libtorrent__tracker_alert, 0, 0},  {&_swigt__p_libtorrent__tracker_reply_alert, _p_libtorrent__tracker_reply_alertTo_p_libtorrent__tracker_alert, 0, 0},  {&_swigt__p_libtorrent__dht_reply_alert, _p_libtorrent__dht_reply_alertTo_p_libtorrent__tracker_alert, 0, 0},  {&_swigt__p_libtorrent__tracker_announce_alert, _p_libtorrent__tracker_announce_alertTo_p_libtorrent__tracker_alert, 0, 0},  {&_swigt__p_libtorrent__tracker_alert, 0, 0, 0},  {&_swigt__p_libtorrent__tracker_error_alert, _p_libtorrent__tracker_error_alertTo_p_libtorrent__tracker_alert, 0, 0},  {&_swigt__p_libtorrent__scrape_failed_alert, _p_libtorrent__scrape_failed_alertTo_p_libtorrent__tracker_alert, 0, 0},  {&_swigt__p_libtorrent__trackerid_alert, _p_libtorrent__trackerid_alertTo_p_libtorrent__tracker_alert, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__tracker_announce_alert[] = {  {&_swigt__p_libtorrent__tracker_announce_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__tracker_error_alert[] = {  {&_swigt__p_libtorrent__tracker_error_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__tracker_reply_alert[] = {  {&_swigt__p_libtorrent__tracker_reply_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__tracker_warning_alert[] = {  {&_swigt__p_libtorrent__tracker_warning_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__trackerid_alert[] = {  {&_swigt__p_libtorrent__trackerid_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__udp__endpoint[] = {  {&_swigt__p_libtorrent__udp__endpoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__udp_error_alert[] = {  {&_swigt__p_libtorrent__udp_error_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__unwanted_block_alert[] = {  {&_swigt__p_libtorrent__unwanted_block_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__url_seed_alert[] = {  {&_swigt__p_libtorrent__url_seed_alert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libtorrent__web_seed_entry[] = {  {&_swigt__p_libtorrent__web_seed_entry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_list_type[] = {  {&_swigt__p_list_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapped_type[] = {  {&_swigt__p_mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_posix_stat_t[] = {  {&_swigt__p_posix_stat_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_posix_wrapper[] = {  {&_swigt__p_posix_wrapper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_preformatted_type[] = {  {&_swigt__p_preformatted_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_set_piece_hashes_listener[] = {  {&_swigt__p_set_piece_hashes_listener, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_flibtorrent__sha1_hash_const_R_std__vectorT_char_t_R_boost__system__error_code_RF_t[] = {  {&_swigt__p_std__functionT_void_flibtorrent__sha1_hash_const_R_std__vectorT_char_t_R_boost__system__error_code_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_int_libtorrent__bitfield_t[] = {  {&_swigt__p_std__mapT_int_libtorrent__bitfield_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_int_std__string_t[] = {  {&_swigt__p_std__mapT_int_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_libtorrent__entry_t[] = {  {&_swigt__p_std__mapT_std__string_libtorrent__entry_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_long_t[] = {  {&_swigt__p_std__mapT_std__string_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_int_int_t[] = {  {&_swigt__p_std__pairT_int_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_libtorrent__string_view_libtorrent__bdecode_node_t[] = {  {&_swigt__p_std__pairT_libtorrent__string_view_libtorrent__bdecode_node_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_std__string_int_t[] = {  {&_swigt__p_std__pairT_std__string_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_std__string_std__string_t[] = {  {&_swigt__p_std__pairT_std__string_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_std__vectorT_int8_t_t_std__vectorT_int8_t_t_t[] = {  {&_swigt__p_std__pairT_std__vectorT_int8_t_t_std__vectorT_int8_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_t[] = {  {&_swigt__p_std__vectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_libtorrent__alert_p_t[] = {  {&_swigt__p_std__vectorT_libtorrent__alert_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_libtorrent__announce_entry_t[] = {  {&_swigt__p_std__vectorT_libtorrent__announce_entry_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_libtorrent__block_info_t[] = {  {&_swigt__p_std__vectorT_libtorrent__block_info_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_libtorrent__dht_lookup_t[] = {  {&_swigt__p_std__vectorT_libtorrent__dht_lookup_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_libtorrent__dht_routing_bucket_t[] = {  {&_swigt__p_std__vectorT_libtorrent__dht_routing_bucket_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_libtorrent__entry_t[] = {  {&_swigt__p_std__vectorT_libtorrent__entry_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_libtorrent__file_slice_t[] = {  {&_swigt__p_std__vectorT_libtorrent__file_slice_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_libtorrent__partial_piece_info_t[] = {  {&_swigt__p_std__vectorT_libtorrent__partial_piece_info_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_libtorrent__peer_info_t[] = {  {&_swigt__p_std__vectorT_libtorrent__peer_info_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_libtorrent__sha1_hash_t[] = {  {&_swigt__p_std__vectorT_libtorrent__sha1_hash_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_libtorrent__stats_metric_t[] = {  {&_swigt__p_std__vectorT_libtorrent__stats_metric_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_libtorrent__tcp__endpoint_t[] = {  {&_swigt__p_std__vectorT_libtorrent__tcp__endpoint_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_libtorrent__torrent_handle_t[] = {  {&_swigt__p_std__vectorT_libtorrent__torrent_handle_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_libtorrent__torrent_status_t[] = {  {&_swigt__p_std__vectorT_libtorrent__torrent_status_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_libtorrent__udp__endpoint_t[] = {  {&_swigt__p_std__vectorT_libtorrent__udp__endpoint_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_libtorrent__web_seed_entry_t[] = {  {&_swigt__p_std__vectorT_libtorrent__web_seed_entry_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_long_long_t[] = {  {&_swigt__p_std__vectorT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_signed_char_t[] = {  {&_swigt__p_std__vectorT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__pairT_int_int_t_t[] = {  {&_swigt__p_std__vectorT_std__pairT_int_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__pairT_std__string_int_t_t[] = {  {&_swigt__p_std__vectorT_std__pairT_std__string_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__pairT_std__string_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__pairT_std__string_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_string_type[] = {  {&_swigt__p_string_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig_plugin[] = {  {&_swigt__p_swig_plugin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_add_files_listener,
  _swigc__p_alert_notify_callback,
  _swigc__p_boost__system__error_category,
  _swigc__p_boost__system__error_code,
  _swigc__p_boost__system__error_condition,
  _swigc__p_char,
  _swigc__p_const_reference,
  _swigc__p_dictionary_type,
  _swigc__p_difference_type,
  _swigc__p_headers_t,
  _swigc__p_int,
  _swigc__p_integer_type,
  _swigc__p_key_type,
  _swigc__p_libtorrent__add_torrent_alert,
  _swigc__p_libtorrent__add_torrent_params,
  _swigc__p_libtorrent__address,
  _swigc__p_libtorrent__alert,
  _swigc__p_libtorrent__announce_entry,
  _swigc__p_libtorrent__anonymous_mode_alert,
  _swigc__p_libtorrent__bdecode_node,
  _swigc__p_libtorrent__bitfield,
  _swigc__p_libtorrent__block_downloading_alert,
  _swigc__p_libtorrent__block_finished_alert,
  _swigc__p_libtorrent__block_info,
  _swigc__p_libtorrent__block_timeout_alert,
  _swigc__p_libtorrent__bloom_filterT_128_t,
  _swigc__p_libtorrent__bloom_filterT_256_t,
  _swigc__p_libtorrent__bt_peer_connection_handle,
  _swigc__p_libtorrent__cache_flushed_alert,
  _swigc__p_libtorrent__create_torrent,
  _swigc__p_libtorrent__dht__dht_state,
  _swigc__p_libtorrent__dht_announce_alert,
  _swigc__p_libtorrent__dht_bootstrap_alert,
  _swigc__p_libtorrent__dht_direct_response_alert,
  _swigc__p_libtorrent__dht_error_alert,
  _swigc__p_libtorrent__dht_get_peers_alert,
  _swigc__p_libtorrent__dht_get_peers_reply_alert,
  _swigc__p_libtorrent__dht_immutable_item_alert,
  _swigc__p_libtorrent__dht_log_alert,
  _swigc__p_libtorrent__dht_lookup,
  _swigc__p_libtorrent__dht_mutable_item_alert,
  _swigc__p_libtorrent__dht_outgoing_get_peers_alert,
  _swigc__p_libtorrent__dht_pkt_alert,
  _swigc__p_libtorrent__dht_put_alert,
  _swigc__p_libtorrent__dht_reply_alert,
  _swigc__p_libtorrent__dht_routing_bucket,
  _swigc__p_libtorrent__dht_settings,
  _swigc__p_libtorrent__dht_stats_alert,
  _swigc__p_libtorrent__entry,
  _swigc__p_libtorrent__external_ip_alert,
  _swigc__p_libtorrent__fastresume_rejected_alert,
  _swigc__p_libtorrent__file__iovec_t,
  _swigc__p_libtorrent__file_completed_alert,
  _swigc__p_libtorrent__file_error_alert,
  _swigc__p_libtorrent__file_rename_failed_alert,
  _swigc__p_libtorrent__file_renamed_alert,
  _swigc__p_libtorrent__file_slice,
  _swigc__p_libtorrent__file_storage,
  _swigc__p_libtorrent__hash_failed_alert,
  _swigc__p_libtorrent__i2p_alert,
  _swigc__p_libtorrent__incoming_connection_alert,
  _swigc__p_libtorrent__incoming_request_alert,
  _swigc__p_libtorrent__invalid_request_alert,
  _swigc__p_libtorrent__ip_filter,
  _swigc__p_libtorrent__listen_failed_alert,
  _swigc__p_libtorrent__listen_succeeded_alert,
  _swigc__p_libtorrent__log_alert,
  _swigc__p_libtorrent__lsd_error_alert,
  _swigc__p_libtorrent__lsd_peer_alert,
  _swigc__p_libtorrent__metadata_failed_alert,
  _swigc__p_libtorrent__metadata_received_alert,
  _swigc__p_libtorrent__mmap_cache_alert,
  _swigc__p_libtorrent__partial_piece_info,
  _swigc__p_libtorrent__peer_alert,
  _swigc__p_libtorrent__peer_ban_alert,
  _swigc__p_libtorrent__peer_blocked_alert,
  _swigc__p_libtorrent__peer_class_info,
  _swigc__p_libtorrent__peer_class_type_filter,
  _swigc__p_libtorrent__peer_connect_alert,
  _swigc__p_libtorrent__peer_connection_handle,
  _swigc__p_libtorrent__peer_disconnected_alert,
  _swigc__p_libtorrent__peer_error_alert,
  _swigc__p_libtorrent__peer_info,
  _swigc__p_libtorrent__peer_log_alert,
  _swigc__p_libtorrent__peer_request,
  _swigc__p_libtorrent__peer_snubbed_alert,
  _swigc__p_libtorrent__peer_unsnubbed_alert,
  _swigc__p_libtorrent__performance_alert,
  _swigc__p_libtorrent__picker_log_alert,
  _swigc__p_libtorrent__piece_finished_alert,
  _swigc__p_libtorrent__port_filter,
  _swigc__p_libtorrent__portmap_alert,
  _swigc__p_libtorrent__portmap_error_alert,
  _swigc__p_libtorrent__portmap_log_alert,
  _swigc__p_libtorrent__read_piece_alert,
  _swigc__p_libtorrent__request_dropped_alert,
  _swigc__p_libtorrent__save_resume_data_alert,
  _swigc__p_libtorrent__save_resume_data_failed_alert,
  _swigc__p_libtorrent__scrape_failed_alert,
  _swigc__p_libtorrent__scrape_reply_alert,
  _swigc__p_libtorrent__session,
  _swigc__p_libtorrent__session_handle,
  _swigc__p_libtorrent__session_params,
  _swigc__p_libtorrent__session_proxy,
  _swigc__p_libtorrent__session_stats_alert,
  _swigc__p_libtorrent__settings_pack,
  _swigc__p_libtorrent__sha1_hash,
  _swigc__p_libtorrent__spanT_char_const_t,
  _swigc__p_libtorrent__spanT_char_t,
  _swigc__p_libtorrent__spanT_libtorrent__file__iovec_t_const_t,
  _swigc__p_libtorrent__state_changed_alert,
  _swigc__p_libtorrent__state_update_alert,
  _swigc__p_libtorrent__stats_alert,
  _swigc__p_libtorrent__stats_metric,
  _swigc__p_libtorrent__storage_moved_alert,
  _swigc__p_libtorrent__storage_moved_failed_alert,
  _swigc__p_libtorrent__string_view,
  _swigc__p_libtorrent__tcp__endpoint,
  _swigc__p_libtorrent__torrent_added_alert,
  _swigc__p_libtorrent__torrent_alert,
  _swigc__p_libtorrent__torrent_checked_alert,
  _swigc__p_libtorrent__torrent_delete_failed_alert,
  _swigc__p_libtorrent__torrent_deleted_alert,
  _swigc__p_libtorrent__torrent_error_alert,
  _swigc__p_libtorrent__torrent_finished_alert,
  _swigc__p_libtorrent__torrent_handle,
  _swigc__p_libtorrent__torrent_info,
  _swigc__p_libtorrent__torrent_log_alert,
  _swigc__p_libtorrent__torrent_need_cert_alert,
  _swigc__p_libtorrent__torrent_paused_alert,
  _swigc__p_libtorrent__torrent_removed_alert,
  _swigc__p_libtorrent__torrent_resumed_alert,
  _swigc__p_libtorrent__torrent_status,
  _swigc__p_libtorrent__tracker_alert,
  _swigc__p_libtorrent__tracker_announce_alert,
  _swigc__p_libtorrent__tracker_error_alert,
  _swigc__p_libtorrent__tracker_reply_alert,
  _swigc__p_libtorrent__tracker_warning_alert,
  _swigc__p_libtorrent__trackerid_alert,
  _swigc__p_libtorrent__udp__endpoint,
  _swigc__p_libtorrent__udp_error_alert,
  _swigc__p_libtorrent__unwanted_block_alert,
  _swigc__p_libtorrent__url_seed_alert,
  _swigc__p_libtorrent__web_seed_entry,
  _swigc__p_list_type,
  _swigc__p_long,
  _swigc__p_long_long,
  _swigc__p_mapped_type,
  _swigc__p_posix_stat_t,
  _swigc__p_posix_wrapper,
  _swigc__p_preformatted_type,
  _swigc__p_set_piece_hashes_listener,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_size_type,
  _swigc__p_std__functionT_void_flibtorrent__sha1_hash_const_R_std__vectorT_char_t_R_boost__system__error_code_RF_t,
  _swigc__p_std__mapT_int_libtorrent__bitfield_t,
  _swigc__p_std__mapT_int_std__string_t,
  _swigc__p_std__mapT_std__string_libtorrent__entry_t,
  _swigc__p_std__mapT_std__string_long_t,
  _swigc__p_std__pairT_int_int_t,
  _swigc__p_std__pairT_libtorrent__string_view_libtorrent__bdecode_node_t,
  _swigc__p_std__pairT_std__string_int_t,
  _swigc__p_std__pairT_std__string_std__string_t,
  _swigc__p_std__pairT_std__vectorT_int8_t_t_std__vectorT_int8_t_t_t,
  _swigc__p_std__vectorT_int_t,
  _swigc__p_std__vectorT_libtorrent__alert_p_t,
  _swigc__p_std__vectorT_libtorrent__announce_entry_t,
  _swigc__p_std__vectorT_libtorrent__block_info_t,
  _swigc__p_std__vectorT_libtorrent__dht_lookup_t,
  _swigc__p_std__vectorT_libtorrent__dht_routing_bucket_t,
  _swigc__p_std__vectorT_libtorrent__entry_t,
  _swigc__p_std__vectorT_libtorrent__file_slice_t,
  _swigc__p_std__vectorT_libtorrent__partial_piece_info_t,
  _swigc__p_std__vectorT_libtorrent__peer_info_t,
  _swigc__p_std__vectorT_libtorrent__sha1_hash_t,
  _swigc__p_std__vectorT_libtorrent__stats_metric_t,
  _swigc__p_std__vectorT_libtorrent__tcp__endpoint_t,
  _swigc__p_std__vectorT_libtorrent__torrent_handle_t,
  _swigc__p_std__vectorT_libtorrent__torrent_status_t,
  _swigc__p_std__vectorT_libtorrent__udp__endpoint_t,
  _swigc__p_std__vectorT_libtorrent__web_seed_entry_t,
  _swigc__p_std__vectorT_long_long_t,
  _swigc__p_std__vectorT_signed_char_t,
  _swigc__p_std__vectorT_std__pairT_int_int_t_t,
  _swigc__p_std__vectorT_std__pairT_std__string_int_t_t,
  _swigc__p_std__vectorT_std__pairT_std__string_std__string_t_t,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_string_type,
  _swigc__p_swig_plugin,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */




#include <assert.h>

SWIGRUNTIME void
SWIG_V8_SetModule(void *, swig_module_info *swig_module) {
  v8::Local<v8::Object> global_obj = SWIGV8_CURRENT_CONTEXT()->Global();
  v8::Local<v8::External> mod = SWIGV8_EXTERNAL_NEW(swig_module);
  assert(!mod.IsEmpty());
  global_obj->SetHiddenValue(SWIGV8_STRING_NEW("swig_module_info_data"), mod);
}

SWIGRUNTIME swig_module_info *
SWIG_V8_GetModule(void *) {
  v8::Local<v8::Object> global_obj = SWIGV8_CURRENT_CONTEXT()->Global();
  v8::Local<v8::Value> moduleinfo = global_obj->GetHiddenValue(SWIGV8_STRING_NEW("swig_module_info_data"));

  if (moduleinfo.IsEmpty())
  {
    // It's not yet loaded
    return 0;
  }

  v8::Local<v8::External> moduleinfo_extern = v8::Local<v8::External>::Cast(moduleinfo);

  if (moduleinfo_extern.IsEmpty())
  {
    // Something's not right
    return 0;
  }

  void *ptr = moduleinfo_extern->Value();
  assert(ptr);
  swig_module_info *retptr = static_cast<swig_module_info *>(ptr);
  assert(retptr);
  return retptr;
}

#define SWIG_GetModule(clientdata)                SWIG_V8_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)       SWIG_V8_SetModule(clientdata, pointer)


/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


// Note: 'extern "C"'' disables name mangling which makes it easier to load the symbol manually
// TODO: is it ok to do that?
extern "C"
#if (NODE_MODULE_VERSION < 0x000C)
void SWIGV8_INIT (v8::Handle<v8::Object> exports)
#else
void SWIGV8_INIT (v8::Handle<v8::Object> exports, v8::Handle<v8::Object> /*module*/)
#endif
{
  SWIG_InitializeModule(static_cast<void *>(&exports));

  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> exports_obj = exports;


  // a class template for creating proxies of undefined types
  SWIGV8_SET_CLASS_TEMPL(SWIGV8_SWIGTYPE_Proxy_class_templ, SWIGV8_CreateClassTemplate("SwigProxy"));

  /* create objects for namespaces */
  

  /* create class templates */
  /* Name: _exports_int_int_pair, Type: p_std__pairT_int_int_t, Dtor: _wrap_delete_int_int_pair */
v8::Handle<v8::FunctionTemplate> _exports_int_int_pair_class = SWIGV8_CreateClassTemplate("_exports_int_int_pair");
SWIGV8_SET_CLASS_TEMPL(_exports_int_int_pair_clientData.class_templ, _exports_int_int_pair_class);
_exports_int_int_pair_clientData.dtor = _wrap_delete_int_int_pair;
if (SWIGTYPE_p_std__pairT_int_int_t->clientdata == 0) {
  SWIGTYPE_p_std__pairT_int_int_t->clientdata = &_exports_int_int_pair_clientData;
}
/* Name: _exports_string_int_pair, Type: p_std__pairT_std__string_int_t, Dtor: _wrap_delete_string_int_pair */
v8::Handle<v8::FunctionTemplate> _exports_string_int_pair_class = SWIGV8_CreateClassTemplate("_exports_string_int_pair");
SWIGV8_SET_CLASS_TEMPL(_exports_string_int_pair_clientData.class_templ, _exports_string_int_pair_class);
_exports_string_int_pair_clientData.dtor = _wrap_delete_string_int_pair;
if (SWIGTYPE_p_std__pairT_std__string_int_t->clientdata == 0) {
  SWIGTYPE_p_std__pairT_std__string_int_t->clientdata = &_exports_string_int_pair_clientData;
}
/* Name: _exports_string_string_pair, Type: p_std__pairT_std__string_std__string_t, Dtor: _wrap_delete_string_string_pair */
v8::Handle<v8::FunctionTemplate> _exports_string_string_pair_class = SWIGV8_CreateClassTemplate("_exports_string_string_pair");
SWIGV8_SET_CLASS_TEMPL(_exports_string_string_pair_clientData.class_templ, _exports_string_string_pair_class);
_exports_string_string_pair_clientData.dtor = _wrap_delete_string_string_pair;
if (SWIGTYPE_p_std__pairT_std__string_std__string_t->clientdata == 0) {
  SWIGTYPE_p_std__pairT_std__string_std__string_t->clientdata = &_exports_string_string_pair_clientData;
}
/* Name: _exports_string_view_bdecode_node_pair, Type: p_std__pairT_libtorrent__string_view_libtorrent__bdecode_node_t, Dtor: _wrap_delete_string_view_bdecode_node_pair */
v8::Handle<v8::FunctionTemplate> _exports_string_view_bdecode_node_pair_class = SWIGV8_CreateClassTemplate("_exports_string_view_bdecode_node_pair");
SWIGV8_SET_CLASS_TEMPL(_exports_string_view_bdecode_node_pair_clientData.class_templ, _exports_string_view_bdecode_node_pair_class);
_exports_string_view_bdecode_node_pair_clientData.dtor = _wrap_delete_string_view_bdecode_node_pair;
if (SWIGTYPE_p_std__pairT_libtorrent__string_view_libtorrent__bdecode_node_t->clientdata == 0) {
  SWIGTYPE_p_std__pairT_libtorrent__string_view_libtorrent__bdecode_node_t->clientdata = &_exports_string_view_bdecode_node_pair_clientData;
}
/* Name: _exports_byte_vectors_pair, Type: p_std__pairT_std__vectorT_int8_t_t_std__vectorT_int8_t_t_t, Dtor: _wrap_delete_byte_vectors_pair */
v8::Handle<v8::FunctionTemplate> _exports_byte_vectors_pair_class = SWIGV8_CreateClassTemplate("_exports_byte_vectors_pair");
SWIGV8_SET_CLASS_TEMPL(_exports_byte_vectors_pair_clientData.class_templ, _exports_byte_vectors_pair_class);
_exports_byte_vectors_pair_clientData.dtor = _wrap_delete_byte_vectors_pair;
if (SWIGTYPE_p_std__pairT_std__vectorT_int8_t_t_std__vectorT_int8_t_t_t->clientdata == 0) {
  SWIGTYPE_p_std__pairT_std__vectorT_int8_t_t_std__vectorT_int8_t_t_t->clientdata = &_exports_byte_vectors_pair_clientData;
}
/* Name: _exports_byte_vector, Type: p_std__vectorT_signed_char_t, Dtor: _wrap_delete_byte_vector */
v8::Handle<v8::FunctionTemplate> _exports_byte_vector_class = SWIGV8_CreateClassTemplate("_exports_byte_vector");
SWIGV8_SET_CLASS_TEMPL(_exports_byte_vector_clientData.class_templ, _exports_byte_vector_class);
_exports_byte_vector_clientData.dtor = _wrap_delete_byte_vector;
if (SWIGTYPE_p_std__vectorT_signed_char_t->clientdata == 0) {
  SWIGTYPE_p_std__vectorT_signed_char_t->clientdata = &_exports_byte_vector_clientData;
}
/* Name: _exports_string_vector, Type: p_std__vectorT_std__string_t, Dtor: _wrap_delete_string_vector */
v8::Handle<v8::FunctionTemplate> _exports_string_vector_class = SWIGV8_CreateClassTemplate("_exports_string_vector");
SWIGV8_SET_CLASS_TEMPL(_exports_string_vector_clientData.class_templ, _exports_string_vector_class);
_exports_string_vector_clientData.dtor = _wrap_delete_string_vector;
if (SWIGTYPE_p_std__vectorT_std__string_t->clientdata == 0) {
  SWIGTYPE_p_std__vectorT_std__string_t->clientdata = &_exports_string_vector_clientData;
}
/* Name: _exports_string_int_pair_vector, Type: p_std__vectorT_std__pairT_std__string_int_t_t, Dtor: _wrap_delete_string_int_pair_vector */
v8::Handle<v8::FunctionTemplate> _exports_string_int_pair_vector_class = SWIGV8_CreateClassTemplate("_exports_string_int_pair_vector");
SWIGV8_SET_CLASS_TEMPL(_exports_string_int_pair_vector_clientData.class_templ, _exports_string_int_pair_vector_class);
_exports_string_int_pair_vector_clientData.dtor = _wrap_delete_string_int_pair_vector;
if (SWIGTYPE_p_std__vectorT_std__pairT_std__string_int_t_t->clientdata == 0) {
  SWIGTYPE_p_std__vectorT_std__pairT_std__string_int_t_t->clientdata = &_exports_string_int_pair_vector_clientData;
}
/* Name: _exports_string_string_pair_vector, Type: p_std__vectorT_std__pairT_std__string_std__string_t_t, Dtor: _wrap_delete_string_string_pair_vector */
v8::Handle<v8::FunctionTemplate> _exports_string_string_pair_vector_class = SWIGV8_CreateClassTemplate("_exports_string_string_pair_vector");
SWIGV8_SET_CLASS_TEMPL(_exports_string_string_pair_vector_clientData.class_templ, _exports_string_string_pair_vector_class);
_exports_string_string_pair_vector_clientData.dtor = _wrap_delete_string_string_pair_vector;
if (SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_t->clientdata == 0) {
  SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_t->clientdata = &_exports_string_string_pair_vector_clientData;
}
/* Name: _exports_int_int_pair_vector, Type: p_std__vectorT_std__pairT_int_int_t_t, Dtor: _wrap_delete_int_int_pair_vector */
v8::Handle<v8::FunctionTemplate> _exports_int_int_pair_vector_class = SWIGV8_CreateClassTemplate("_exports_int_int_pair_vector");
SWIGV8_SET_CLASS_TEMPL(_exports_int_int_pair_vector_clientData.class_templ, _exports_int_int_pair_vector_class);
_exports_int_int_pair_vector_clientData.dtor = _wrap_delete_int_int_pair_vector;
if (SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_t->clientdata == 0) {
  SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_t->clientdata = &_exports_int_int_pair_vector_clientData;
}
/* Name: _exports_int_vector, Type: p_std__vectorT_int_t, Dtor: _wrap_delete_int_vector */
v8::Handle<v8::FunctionTemplate> _exports_int_vector_class = SWIGV8_CreateClassTemplate("_exports_int_vector");
SWIGV8_SET_CLASS_TEMPL(_exports_int_vector_clientData.class_templ, _exports_int_vector_class);
_exports_int_vector_clientData.dtor = _wrap_delete_int_vector;
if (SWIGTYPE_p_std__vectorT_int_t->clientdata == 0) {
  SWIGTYPE_p_std__vectorT_int_t->clientdata = &_exports_int_vector_clientData;
}
/* Name: _exports_int64_vector, Type: p_std__vectorT_long_long_t, Dtor: _wrap_delete_int64_vector */
v8::Handle<v8::FunctionTemplate> _exports_int64_vector_class = SWIGV8_CreateClassTemplate("_exports_int64_vector");
SWIGV8_SET_CLASS_TEMPL(_exports_int64_vector_clientData.class_templ, _exports_int64_vector_class);
_exports_int64_vector_clientData.dtor = _wrap_delete_int64_vector;
if (SWIGTYPE_p_std__vectorT_long_long_t->clientdata == 0) {
  SWIGTYPE_p_std__vectorT_long_long_t->clientdata = &_exports_int64_vector_clientData;
}
/* Name: _exports_sha1_hash_vector, Type: p_std__vectorT_libtorrent__sha1_hash_t, Dtor: _wrap_delete_sha1_hash_vector */
v8::Handle<v8::FunctionTemplate> _exports_sha1_hash_vector_class = SWIGV8_CreateClassTemplate("_exports_sha1_hash_vector");
SWIGV8_SET_CLASS_TEMPL(_exports_sha1_hash_vector_clientData.class_templ, _exports_sha1_hash_vector_class);
_exports_sha1_hash_vector_clientData.dtor = _wrap_delete_sha1_hash_vector;
if (SWIGTYPE_p_std__vectorT_libtorrent__sha1_hash_t->clientdata == 0) {
  SWIGTYPE_p_std__vectorT_libtorrent__sha1_hash_t->clientdata = &_exports_sha1_hash_vector_clientData;
}
/* Name: _exports_torrent_status_vector, Type: p_std__vectorT_libtorrent__torrent_status_t, Dtor: _wrap_delete_torrent_status_vector */
v8::Handle<v8::FunctionTemplate> _exports_torrent_status_vector_class = SWIGV8_CreateClassTemplate("_exports_torrent_status_vector");
SWIGV8_SET_CLASS_TEMPL(_exports_torrent_status_vector_clientData.class_templ, _exports_torrent_status_vector_class);
_exports_torrent_status_vector_clientData.dtor = _wrap_delete_torrent_status_vector;
if (SWIGTYPE_p_std__vectorT_libtorrent__torrent_status_t->clientdata == 0) {
  SWIGTYPE_p_std__vectorT_libtorrent__torrent_status_t->clientdata = &_exports_torrent_status_vector_clientData;
}
/* Name: _exports_torrent_handle_vector, Type: p_std__vectorT_libtorrent__torrent_handle_t, Dtor: _wrap_delete_torrent_handle_vector */
v8::Handle<v8::FunctionTemplate> _exports_torrent_handle_vector_class = SWIGV8_CreateClassTemplate("_exports_torrent_handle_vector");
SWIGV8_SET_CLASS_TEMPL(_exports_torrent_handle_vector_clientData.class_templ, _exports_torrent_handle_vector_class);
_exports_torrent_handle_vector_clientData.dtor = _wrap_delete_torrent_handle_vector;
if (SWIGTYPE_p_std__vectorT_libtorrent__torrent_handle_t->clientdata == 0) {
  SWIGTYPE_p_std__vectorT_libtorrent__torrent_handle_t->clientdata = &_exports_torrent_handle_vector_clientData;
}
/* Name: _exports_file_slice_vector, Type: p_std__vectorT_libtorrent__file_slice_t, Dtor: _wrap_delete_file_slice_vector */
v8::Handle<v8::FunctionTemplate> _exports_file_slice_vector_class = SWIGV8_CreateClassTemplate("_exports_file_slice_vector");
SWIGV8_SET_CLASS_TEMPL(_exports_file_slice_vector_clientData.class_templ, _exports_file_slice_vector_class);
_exports_file_slice_vector_clientData.dtor = _wrap_delete_file_slice_vector;
if (SWIGTYPE_p_std__vectorT_libtorrent__file_slice_t->clientdata == 0) {
  SWIGTYPE_p_std__vectorT_libtorrent__file_slice_t->clientdata = &_exports_file_slice_vector_clientData;
}
/* Name: _exports_dht_routing_bucket_vector, Type: p_std__vectorT_libtorrent__dht_routing_bucket_t, Dtor: _wrap_delete_dht_routing_bucket_vector */
v8::Handle<v8::FunctionTemplate> _exports_dht_routing_bucket_vector_class = SWIGV8_CreateClassTemplate("_exports_dht_routing_bucket_vector");
SWIGV8_SET_CLASS_TEMPL(_exports_dht_routing_bucket_vector_clientData.class_templ, _exports_dht_routing_bucket_vector_class);
_exports_dht_routing_bucket_vector_clientData.dtor = _wrap_delete_dht_routing_bucket_vector;
if (SWIGTYPE_p_std__vectorT_libtorrent__dht_routing_bucket_t->clientdata == 0) {
  SWIGTYPE_p_std__vectorT_libtorrent__dht_routing_bucket_t->clientdata = &_exports_dht_routing_bucket_vector_clientData;
}
/* Name: _exports_dht_lookup_vector, Type: p_std__vectorT_libtorrent__dht_lookup_t, Dtor: _wrap_delete_dht_lookup_vector */
v8::Handle<v8::FunctionTemplate> _exports_dht_lookup_vector_class = SWIGV8_CreateClassTemplate("_exports_dht_lookup_vector");
SWIGV8_SET_CLASS_TEMPL(_exports_dht_lookup_vector_clientData.class_templ, _exports_dht_lookup_vector_class);
_exports_dht_lookup_vector_clientData.dtor = _wrap_delete_dht_lookup_vector;
if (SWIGTYPE_p_std__vectorT_libtorrent__dht_lookup_t->clientdata == 0) {
  SWIGTYPE_p_std__vectorT_libtorrent__dht_lookup_t->clientdata = &_exports_dht_lookup_vector_clientData;
}
/* Name: _exports_block_info_vector, Type: p_std__vectorT_libtorrent__block_info_t, Dtor: _wrap_delete_block_info_vector */
v8::Handle<v8::FunctionTemplate> _exports_block_info_vector_class = SWIGV8_CreateClassTemplate("_exports_block_info_vector");
SWIGV8_SET_CLASS_TEMPL(_exports_block_info_vector_clientData.class_templ, _exports_block_info_vector_class);
_exports_block_info_vector_clientData.dtor = _wrap_delete_block_info_vector;
if (SWIGTYPE_p_std__vectorT_libtorrent__block_info_t->clientdata == 0) {
  SWIGTYPE_p_std__vectorT_libtorrent__block_info_t->clientdata = &_exports_block_info_vector_clientData;
}
/* Name: _exports_partial_piece_info_vector, Type: p_std__vectorT_libtorrent__partial_piece_info_t, Dtor: _wrap_delete_partial_piece_info_vector */
v8::Handle<v8::FunctionTemplate> _exports_partial_piece_info_vector_class = SWIGV8_CreateClassTemplate("_exports_partial_piece_info_vector");
SWIGV8_SET_CLASS_TEMPL(_exports_partial_piece_info_vector_clientData.class_templ, _exports_partial_piece_info_vector_class);
_exports_partial_piece_info_vector_clientData.dtor = _wrap_delete_partial_piece_info_vector;
if (SWIGTYPE_p_std__vectorT_libtorrent__partial_piece_info_t->clientdata == 0) {
  SWIGTYPE_p_std__vectorT_libtorrent__partial_piece_info_t->clientdata = &_exports_partial_piece_info_vector_clientData;
}
/* Name: _exports_peer_info_vector, Type: p_std__vectorT_libtorrent__peer_info_t, Dtor: _wrap_delete_peer_info_vector */
v8::Handle<v8::FunctionTemplate> _exports_peer_info_vector_class = SWIGV8_CreateClassTemplate("_exports_peer_info_vector");
SWIGV8_SET_CLASS_TEMPL(_exports_peer_info_vector_clientData.class_templ, _exports_peer_info_vector_class);
_exports_peer_info_vector_clientData.dtor = _wrap_delete_peer_info_vector;
if (SWIGTYPE_p_std__vectorT_libtorrent__peer_info_t->clientdata == 0) {
  SWIGTYPE_p_std__vectorT_libtorrent__peer_info_t->clientdata = &_exports_peer_info_vector_clientData;
}
/* Name: _exports_stats_metric_vector, Type: p_std__vectorT_libtorrent__stats_metric_t, Dtor: _wrap_delete_stats_metric_vector */
v8::Handle<v8::FunctionTemplate> _exports_stats_metric_vector_class = SWIGV8_CreateClassTemplate("_exports_stats_metric_vector");
SWIGV8_SET_CLASS_TEMPL(_exports_stats_metric_vector_clientData.class_templ, _exports_stats_metric_vector_class);
_exports_stats_metric_vector_clientData.dtor = _wrap_delete_stats_metric_vector;
if (SWIGTYPE_p_std__vectorT_libtorrent__stats_metric_t->clientdata == 0) {
  SWIGTYPE_p_std__vectorT_libtorrent__stats_metric_t->clientdata = &_exports_stats_metric_vector_clientData;
}
/* Name: _exports_entry_vector, Type: p_std__vectorT_libtorrent__entry_t, Dtor: _wrap_delete_entry_vector */
v8::Handle<v8::FunctionTemplate> _exports_entry_vector_class = SWIGV8_CreateClassTemplate("_exports_entry_vector");
SWIGV8_SET_CLASS_TEMPL(_exports_entry_vector_clientData.class_templ, _exports_entry_vector_class);
_exports_entry_vector_clientData.dtor = _wrap_delete_entry_vector;
if (SWIGTYPE_p_std__vectorT_libtorrent__entry_t->clientdata == 0) {
  SWIGTYPE_p_std__vectorT_libtorrent__entry_t->clientdata = &_exports_entry_vector_clientData;
}
/* Name: _exports_web_seed_entry_vector, Type: p_std__vectorT_libtorrent__web_seed_entry_t, Dtor: _wrap_delete_web_seed_entry_vector */
v8::Handle<v8::FunctionTemplate> _exports_web_seed_entry_vector_class = SWIGV8_CreateClassTemplate("_exports_web_seed_entry_vector");
SWIGV8_SET_CLASS_TEMPL(_exports_web_seed_entry_vector_clientData.class_templ, _exports_web_seed_entry_vector_class);
_exports_web_seed_entry_vector_clientData.dtor = _wrap_delete_web_seed_entry_vector;
if (SWIGTYPE_p_std__vectorT_libtorrent__web_seed_entry_t->clientdata == 0) {
  SWIGTYPE_p_std__vectorT_libtorrent__web_seed_entry_t->clientdata = &_exports_web_seed_entry_vector_clientData;
}
/* Name: _exports_announce_entry_vector, Type: p_std__vectorT_libtorrent__announce_entry_t, Dtor: _wrap_delete_announce_entry_vector */
v8::Handle<v8::FunctionTemplate> _exports_announce_entry_vector_class = SWIGV8_CreateClassTemplate("_exports_announce_entry_vector");
SWIGV8_SET_CLASS_TEMPL(_exports_announce_entry_vector_clientData.class_templ, _exports_announce_entry_vector_class);
_exports_announce_entry_vector_clientData.dtor = _wrap_delete_announce_entry_vector;
if (SWIGTYPE_p_std__vectorT_libtorrent__announce_entry_t->clientdata == 0) {
  SWIGTYPE_p_std__vectorT_libtorrent__announce_entry_t->clientdata = &_exports_announce_entry_vector_clientData;
}
/* Name: _exports_tcp_endpoint_vector, Type: p_std__vectorT_libtorrent__tcp__endpoint_t, Dtor: _wrap_delete_tcp_endpoint_vector */
v8::Handle<v8::FunctionTemplate> _exports_tcp_endpoint_vector_class = SWIGV8_CreateClassTemplate("_exports_tcp_endpoint_vector");
SWIGV8_SET_CLASS_TEMPL(_exports_tcp_endpoint_vector_clientData.class_templ, _exports_tcp_endpoint_vector_class);
_exports_tcp_endpoint_vector_clientData.dtor = _wrap_delete_tcp_endpoint_vector;
if (SWIGTYPE_p_std__vectorT_libtorrent__tcp__endpoint_t->clientdata == 0) {
  SWIGTYPE_p_std__vectorT_libtorrent__tcp__endpoint_t->clientdata = &_exports_tcp_endpoint_vector_clientData;
}
/* Name: _exports_udp_endpoint_vector, Type: p_std__vectorT_libtorrent__udp__endpoint_t, Dtor: _wrap_delete_udp_endpoint_vector */
v8::Handle<v8::FunctionTemplate> _exports_udp_endpoint_vector_class = SWIGV8_CreateClassTemplate("_exports_udp_endpoint_vector");
SWIGV8_SET_CLASS_TEMPL(_exports_udp_endpoint_vector_clientData.class_templ, _exports_udp_endpoint_vector_class);
_exports_udp_endpoint_vector_clientData.dtor = _wrap_delete_udp_endpoint_vector;
if (SWIGTYPE_p_std__vectorT_libtorrent__udp__endpoint_t->clientdata == 0) {
  SWIGTYPE_p_std__vectorT_libtorrent__udp__endpoint_t->clientdata = &_exports_udp_endpoint_vector_clientData;
}
/* Name: _exports_int_string_map, Type: p_std__mapT_int_std__string_t, Dtor: _wrap_delete_int_string_map */
v8::Handle<v8::FunctionTemplate> _exports_int_string_map_class = SWIGV8_CreateClassTemplate("_exports_int_string_map");
SWIGV8_SET_CLASS_TEMPL(_exports_int_string_map_clientData.class_templ, _exports_int_string_map_class);
_exports_int_string_map_clientData.dtor = _wrap_delete_int_string_map;
if (SWIGTYPE_p_std__mapT_int_std__string_t->clientdata == 0) {
  SWIGTYPE_p_std__mapT_int_std__string_t->clientdata = &_exports_int_string_map_clientData;
}
/* Name: _exports_string_long_map, Type: p_std__mapT_std__string_long_t, Dtor: _wrap_delete_string_long_map */
v8::Handle<v8::FunctionTemplate> _exports_string_long_map_class = SWIGV8_CreateClassTemplate("_exports_string_long_map");
SWIGV8_SET_CLASS_TEMPL(_exports_string_long_map_clientData.class_templ, _exports_string_long_map_class);
_exports_string_long_map_clientData.dtor = _wrap_delete_string_long_map;
if (SWIGTYPE_p_std__mapT_std__string_long_t->clientdata == 0) {
  SWIGTYPE_p_std__mapT_std__string_long_t->clientdata = &_exports_string_long_map_clientData;
}
/* Name: _exports_string_entry_map, Type: p_std__mapT_std__string_libtorrent__entry_t, Dtor: _wrap_delete_string_entry_map */
v8::Handle<v8::FunctionTemplate> _exports_string_entry_map_class = SWIGV8_CreateClassTemplate("_exports_string_entry_map");
SWIGV8_SET_CLASS_TEMPL(_exports_string_entry_map_clientData.class_templ, _exports_string_entry_map_class);
_exports_string_entry_map_clientData.dtor = _wrap_delete_string_entry_map;
if (SWIGTYPE_p_std__mapT_std__string_libtorrent__entry_t->clientdata == 0) {
  SWIGTYPE_p_std__mapT_std__string_libtorrent__entry_t->clientdata = &_exports_string_entry_map_clientData;
}
/* Name: _exports_int_bitfield_map, Type: p_std__mapT_int_libtorrent__bitfield_t, Dtor: _wrap_delete_int_bitfield_map */
v8::Handle<v8::FunctionTemplate> _exports_int_bitfield_map_class = SWIGV8_CreateClassTemplate("_exports_int_bitfield_map");
SWIGV8_SET_CLASS_TEMPL(_exports_int_bitfield_map_clientData.class_templ, _exports_int_bitfield_map_class);
_exports_int_bitfield_map_clientData.dtor = _wrap_delete_int_bitfield_map;
if (SWIGTYPE_p_std__mapT_int_libtorrent__bitfield_t->clientdata == 0) {
  SWIGTYPE_p_std__mapT_int_libtorrent__bitfield_t->clientdata = &_exports_int_bitfield_map_clientData;
}
/* Name: _exports_alert_ptr_vector, Type: p_std__vectorT_libtorrent__alert_p_t, Dtor: _wrap_delete_alert_ptr_vector */
v8::Handle<v8::FunctionTemplate> _exports_alert_ptr_vector_class = SWIGV8_CreateClassTemplate("_exports_alert_ptr_vector");
SWIGV8_SET_CLASS_TEMPL(_exports_alert_ptr_vector_clientData.class_templ, _exports_alert_ptr_vector_class);
_exports_alert_ptr_vector_clientData.dtor = _wrap_delete_alert_ptr_vector;
if (SWIGTYPE_p_std__vectorT_libtorrent__alert_p_t->clientdata == 0) {
  SWIGTYPE_p_std__vectorT_libtorrent__alert_p_t->clientdata = &_exports_alert_ptr_vector_clientData;
}
/* Name: _exports_iovec_t, Type: p_libtorrent__file__iovec_t, Dtor: _wrap_delete_iovec_t */
v8::Handle<v8::FunctionTemplate> _exports_iovec_t_class = SWIGV8_CreateClassTemplate("_exports_iovec_t");
SWIGV8_SET_CLASS_TEMPL(_exports_iovec_t_clientData.class_templ, _exports_iovec_t_class);
_exports_iovec_t_clientData.dtor = _wrap_delete_iovec_t;
if (SWIGTYPE_p_libtorrent__file__iovec_t->clientdata == 0) {
  SWIGTYPE_p_libtorrent__file__iovec_t->clientdata = &_exports_iovec_t_clientData;
}
/* Name: _exports_byte_span, Type: p_libtorrent__spanT_char_t, Dtor: _wrap_delete_byte_span */
v8::Handle<v8::FunctionTemplate> _exports_byte_span_class = SWIGV8_CreateClassTemplate("_exports_byte_span");
SWIGV8_SET_CLASS_TEMPL(_exports_byte_span_clientData.class_templ, _exports_byte_span_class);
_exports_byte_span_clientData.dtor = _wrap_delete_byte_span;
if (SWIGTYPE_p_libtorrent__spanT_char_t->clientdata == 0) {
  SWIGTYPE_p_libtorrent__spanT_char_t->clientdata = &_exports_byte_span_clientData;
}
/* Name: _exports_byte_const_span, Type: p_libtorrent__spanT_char_const_t, Dtor: _wrap_delete_byte_const_span */
v8::Handle<v8::FunctionTemplate> _exports_byte_const_span_class = SWIGV8_CreateClassTemplate("_exports_byte_const_span");
SWIGV8_SET_CLASS_TEMPL(_exports_byte_const_span_clientData.class_templ, _exports_byte_const_span_class);
_exports_byte_const_span_clientData.dtor = _wrap_delete_byte_const_span;
if (SWIGTYPE_p_libtorrent__spanT_char_const_t->clientdata == 0) {
  SWIGTYPE_p_libtorrent__spanT_char_const_t->clientdata = &_exports_byte_const_span_clientData;
}
/* Name: _exports_iovec_span, Type: p_libtorrent__spanT_libtorrent__file__iovec_t_const_t, Dtor: _wrap_delete_iovec_span */
v8::Handle<v8::FunctionTemplate> _exports_iovec_span_class = SWIGV8_CreateClassTemplate("_exports_iovec_span");
SWIGV8_SET_CLASS_TEMPL(_exports_iovec_span_clientData.class_templ, _exports_iovec_span_class);
_exports_iovec_span_clientData.dtor = _wrap_delete_iovec_span;
if (SWIGTYPE_p_libtorrent__spanT_libtorrent__file__iovec_t_const_t->clientdata == 0) {
  SWIGTYPE_p_libtorrent__spanT_libtorrent__file__iovec_t_const_t->clientdata = &_exports_iovec_span_clientData;
}
/* Name: _exports_sha1_hash, Type: p_libtorrent__sha1_hash, Dtor: _wrap_delete_sha1_hash */
v8::Handle<v8::FunctionTemplate> _exports_sha1_hash_class = SWIGV8_CreateClassTemplate("_exports_sha1_hash");
SWIGV8_SET_CLASS_TEMPL(_exports_sha1_hash_clientData.class_templ, _exports_sha1_hash_class);
_exports_sha1_hash_clientData.dtor = _wrap_delete_sha1_hash;
if (SWIGTYPE_p_libtorrent__sha1_hash->clientdata == 0) {
  SWIGTYPE_p_libtorrent__sha1_hash->clientdata = &_exports_sha1_hash_clientData;
}
/* Name: _exports_bloom_filter_128, Type: p_libtorrent__bloom_filterT_128_t, Dtor: _wrap_delete_bloom_filter_128 */
v8::Handle<v8::FunctionTemplate> _exports_bloom_filter_128_class = SWIGV8_CreateClassTemplate("_exports_bloom_filter_128");
SWIGV8_SET_CLASS_TEMPL(_exports_bloom_filter_128_clientData.class_templ, _exports_bloom_filter_128_class);
_exports_bloom_filter_128_clientData.dtor = _wrap_delete_bloom_filter_128;
if (SWIGTYPE_p_libtorrent__bloom_filterT_128_t->clientdata == 0) {
  SWIGTYPE_p_libtorrent__bloom_filterT_128_t->clientdata = &_exports_bloom_filter_128_clientData;
}
/* Name: _exports_bloom_filter_256, Type: p_libtorrent__bloom_filterT_256_t, Dtor: _wrap_delete_bloom_filter_256 */
v8::Handle<v8::FunctionTemplate> _exports_bloom_filter_256_class = SWIGV8_CreateClassTemplate("_exports_bloom_filter_256");
SWIGV8_SET_CLASS_TEMPL(_exports_bloom_filter_256_clientData.class_templ, _exports_bloom_filter_256_class);
_exports_bloom_filter_256_clientData.dtor = _wrap_delete_bloom_filter_256;
if (SWIGTYPE_p_libtorrent__bloom_filterT_256_t->clientdata == 0) {
  SWIGTYPE_p_libtorrent__bloom_filterT_256_t->clientdata = &_exports_bloom_filter_256_clientData;
}
/* Name: _exports_string_view, Type: p_libtorrent__string_view, Dtor: _wrap_delete_string_view */
v8::Handle<v8::FunctionTemplate> _exports_string_view_class = SWIGV8_CreateClassTemplate("_exports_string_view");
SWIGV8_SET_CLASS_TEMPL(_exports_string_view_clientData.class_templ, _exports_string_view_class);
_exports_string_view_clientData.dtor = _wrap_delete_string_view;
if (SWIGTYPE_p_libtorrent__string_view->clientdata == 0) {
  SWIGTYPE_p_libtorrent__string_view->clientdata = &_exports_string_view_clientData;
}
/* Name: _exports_address, Type: p_libtorrent__address, Dtor: _wrap_delete_address */
v8::Handle<v8::FunctionTemplate> _exports_address_class = SWIGV8_CreateClassTemplate("_exports_address");
SWIGV8_SET_CLASS_TEMPL(_exports_address_clientData.class_templ, _exports_address_class);
_exports_address_clientData.dtor = _wrap_delete_address;
if (SWIGTYPE_p_libtorrent__address->clientdata == 0) {
  SWIGTYPE_p_libtorrent__address->clientdata = &_exports_address_clientData;
}
/* Name: _exports_tcp_endpoint, Type: p_libtorrent__tcp__endpoint, Dtor: _wrap_delete_tcp_endpoint */
v8::Handle<v8::FunctionTemplate> _exports_tcp_endpoint_class = SWIGV8_CreateClassTemplate("_exports_tcp_endpoint");
SWIGV8_SET_CLASS_TEMPL(_exports_tcp_endpoint_clientData.class_templ, _exports_tcp_endpoint_class);
_exports_tcp_endpoint_clientData.dtor = _wrap_delete_tcp_endpoint;
if (SWIGTYPE_p_libtorrent__tcp__endpoint->clientdata == 0) {
  SWIGTYPE_p_libtorrent__tcp__endpoint->clientdata = &_exports_tcp_endpoint_clientData;
}
/* Name: _exports_udp_endpoint, Type: p_libtorrent__udp__endpoint, Dtor: _wrap_delete_udp_endpoint */
v8::Handle<v8::FunctionTemplate> _exports_udp_endpoint_class = SWIGV8_CreateClassTemplate("_exports_udp_endpoint");
SWIGV8_SET_CLASS_TEMPL(_exports_udp_endpoint_clientData.class_templ, _exports_udp_endpoint_class);
_exports_udp_endpoint_clientData.dtor = _wrap_delete_udp_endpoint;
if (SWIGTYPE_p_libtorrent__udp__endpoint->clientdata == 0) {
  SWIGTYPE_p_libtorrent__udp__endpoint->clientdata = &_exports_udp_endpoint_clientData;
}
/* Name: _exports_error_category, Type: p_boost__system__error_category, Dtor: _wrap_delete_error_category */
v8::Handle<v8::FunctionTemplate> _exports_error_category_class = SWIGV8_CreateClassTemplate("_exports_error_category");
SWIGV8_SET_CLASS_TEMPL(_exports_error_category_clientData.class_templ, _exports_error_category_class);
_exports_error_category_clientData.dtor = _wrap_delete_error_category;
if (SWIGTYPE_p_boost__system__error_category->clientdata == 0) {
  SWIGTYPE_p_boost__system__error_category->clientdata = &_exports_error_category_clientData;
}
/* Name: _exports_error_condition, Type: p_boost__system__error_condition, Dtor: _wrap_delete_error_condition */
v8::Handle<v8::FunctionTemplate> _exports_error_condition_class = SWIGV8_CreateClassTemplate("_exports_error_condition");
SWIGV8_SET_CLASS_TEMPL(_exports_error_condition_clientData.class_templ, _exports_error_condition_class);
_exports_error_condition_clientData.dtor = _wrap_delete_error_condition;
if (SWIGTYPE_p_boost__system__error_condition->clientdata == 0) {
  SWIGTYPE_p_boost__system__error_condition->clientdata = &_exports_error_condition_clientData;
}
/* Name: _exports_error_code, Type: p_boost__system__error_code, Dtor: _wrap_delete_error_code */
v8::Handle<v8::FunctionTemplate> _exports_error_code_class = SWIGV8_CreateClassTemplate("_exports_error_code");
SWIGV8_SET_CLASS_TEMPL(_exports_error_code_clientData.class_templ, _exports_error_code_class);
_exports_error_code_clientData.dtor = _wrap_delete_error_code;
if (SWIGTYPE_p_boost__system__error_code->clientdata == 0) {
  SWIGTYPE_p_boost__system__error_code->clientdata = &_exports_error_code_clientData;
}
/* Name: _exports_bitfield, Type: p_libtorrent__bitfield, Dtor: _wrap_delete_bitfield */
v8::Handle<v8::FunctionTemplate> _exports_bitfield_class = SWIGV8_CreateClassTemplate("_exports_bitfield");
SWIGV8_SET_CLASS_TEMPL(_exports_bitfield_clientData.class_templ, _exports_bitfield_class);
_exports_bitfield_clientData.dtor = _wrap_delete_bitfield;
if (SWIGTYPE_p_libtorrent__bitfield->clientdata == 0) {
  SWIGTYPE_p_libtorrent__bitfield->clientdata = &_exports_bitfield_clientData;
}
/* Name: _exports_peer_request, Type: p_libtorrent__peer_request, Dtor: _wrap_delete_peer_request */
v8::Handle<v8::FunctionTemplate> _exports_peer_request_class = SWIGV8_CreateClassTemplate("_exports_peer_request");
SWIGV8_SET_CLASS_TEMPL(_exports_peer_request_clientData.class_templ, _exports_peer_request_class);
_exports_peer_request_clientData.dtor = _wrap_delete_peer_request;
if (SWIGTYPE_p_libtorrent__peer_request->clientdata == 0) {
  SWIGTYPE_p_libtorrent__peer_request->clientdata = &_exports_peer_request_clientData;
}
/* Name: _exports_entry, Type: p_libtorrent__entry, Dtor: _wrap_delete_entry */
v8::Handle<v8::FunctionTemplate> _exports_entry_class = SWIGV8_CreateClassTemplate("_exports_entry");
SWIGV8_SET_CLASS_TEMPL(_exports_entry_clientData.class_templ, _exports_entry_class);
_exports_entry_clientData.dtor = _wrap_delete_entry;
if (SWIGTYPE_p_libtorrent__entry->clientdata == 0) {
  SWIGTYPE_p_libtorrent__entry->clientdata = &_exports_entry_clientData;
}
/* Name: _exports_file_slice, Type: p_libtorrent__file_slice, Dtor: _wrap_delete_file_slice */
v8::Handle<v8::FunctionTemplate> _exports_file_slice_class = SWIGV8_CreateClassTemplate("_exports_file_slice");
SWIGV8_SET_CLASS_TEMPL(_exports_file_slice_clientData.class_templ, _exports_file_slice_class);
_exports_file_slice_clientData.dtor = _wrap_delete_file_slice;
if (SWIGTYPE_p_libtorrent__file_slice->clientdata == 0) {
  SWIGTYPE_p_libtorrent__file_slice->clientdata = &_exports_file_slice_clientData;
}
/* Name: _exports_file_storage, Type: p_libtorrent__file_storage, Dtor: _wrap_delete_file_storage */
v8::Handle<v8::FunctionTemplate> _exports_file_storage_class = SWIGV8_CreateClassTemplate("_exports_file_storage");
SWIGV8_SET_CLASS_TEMPL(_exports_file_storage_clientData.class_templ, _exports_file_storage_class);
_exports_file_storage_clientData.dtor = _wrap_delete_file_storage;
if (SWIGTYPE_p_libtorrent__file_storage->clientdata == 0) {
  SWIGTYPE_p_libtorrent__file_storage->clientdata = &_exports_file_storage_clientData;
}
/* Name: _exports_web_seed_entry, Type: p_libtorrent__web_seed_entry, Dtor: _wrap_delete_web_seed_entry */
v8::Handle<v8::FunctionTemplate> _exports_web_seed_entry_class = SWIGV8_CreateClassTemplate("_exports_web_seed_entry");
SWIGV8_SET_CLASS_TEMPL(_exports_web_seed_entry_clientData.class_templ, _exports_web_seed_entry_class);
_exports_web_seed_entry_clientData.dtor = _wrap_delete_web_seed_entry;
if (SWIGTYPE_p_libtorrent__web_seed_entry->clientdata == 0) {
  SWIGTYPE_p_libtorrent__web_seed_entry->clientdata = &_exports_web_seed_entry_clientData;
}
/* Name: _exports_torrent_info, Type: p_libtorrent__torrent_info, Dtor: _wrap_delete_torrent_info */
v8::Handle<v8::FunctionTemplate> _exports_torrent_info_class = SWIGV8_CreateClassTemplate("_exports_torrent_info");
SWIGV8_SET_CLASS_TEMPL(_exports_torrent_info_clientData.class_templ, _exports_torrent_info_class);
_exports_torrent_info_clientData.dtor = _wrap_delete_torrent_info;
if (SWIGTYPE_p_libtorrent__torrent_info->clientdata == 0) {
  SWIGTYPE_p_libtorrent__torrent_info->clientdata = &_exports_torrent_info_clientData;
}
/* Name: _exports_block_info, Type: p_libtorrent__block_info, Dtor: _wrap_delete_block_info */
v8::Handle<v8::FunctionTemplate> _exports_block_info_class = SWIGV8_CreateClassTemplate("_exports_block_info");
SWIGV8_SET_CLASS_TEMPL(_exports_block_info_clientData.class_templ, _exports_block_info_class);
_exports_block_info_clientData.dtor = _wrap_delete_block_info;
if (SWIGTYPE_p_libtorrent__block_info->clientdata == 0) {
  SWIGTYPE_p_libtorrent__block_info->clientdata = &_exports_block_info_clientData;
}
/* Name: _exports_partial_piece_info, Type: p_libtorrent__partial_piece_info, Dtor: _wrap_delete_partial_piece_info */
v8::Handle<v8::FunctionTemplate> _exports_partial_piece_info_class = SWIGV8_CreateClassTemplate("_exports_partial_piece_info");
SWIGV8_SET_CLASS_TEMPL(_exports_partial_piece_info_clientData.class_templ, _exports_partial_piece_info_class);
_exports_partial_piece_info_clientData.dtor = _wrap_delete_partial_piece_info;
if (SWIGTYPE_p_libtorrent__partial_piece_info->clientdata == 0) {
  SWIGTYPE_p_libtorrent__partial_piece_info->clientdata = &_exports_partial_piece_info_clientData;
}
/* Name: _exports_torrent_handle, Type: p_libtorrent__torrent_handle, Dtor: _wrap_delete_torrent_handle */
v8::Handle<v8::FunctionTemplate> _exports_torrent_handle_class = SWIGV8_CreateClassTemplate("_exports_torrent_handle");
SWIGV8_SET_CLASS_TEMPL(_exports_torrent_handle_clientData.class_templ, _exports_torrent_handle_class);
_exports_torrent_handle_clientData.dtor = _wrap_delete_torrent_handle;
if (SWIGTYPE_p_libtorrent__torrent_handle->clientdata == 0) {
  SWIGTYPE_p_libtorrent__torrent_handle->clientdata = &_exports_torrent_handle_clientData;
}
/* Name: _exports_add_torrent_params, Type: p_libtorrent__add_torrent_params, Dtor: _wrap_delete_add_torrent_params */
v8::Handle<v8::FunctionTemplate> _exports_add_torrent_params_class = SWIGV8_CreateClassTemplate("_exports_add_torrent_params");
SWIGV8_SET_CLASS_TEMPL(_exports_add_torrent_params_clientData.class_templ, _exports_add_torrent_params_class);
_exports_add_torrent_params_clientData.dtor = _wrap_delete_add_torrent_params;
if (SWIGTYPE_p_libtorrent__add_torrent_params->clientdata == 0) {
  SWIGTYPE_p_libtorrent__add_torrent_params->clientdata = &_exports_add_torrent_params_clientData;
}
/* Name: _exports_stats_metric, Type: p_libtorrent__stats_metric, Dtor: _wrap_delete_stats_metric */
v8::Handle<v8::FunctionTemplate> _exports_stats_metric_class = SWIGV8_CreateClassTemplate("_exports_stats_metric");
SWIGV8_SET_CLASS_TEMPL(_exports_stats_metric_clientData.class_templ, _exports_stats_metric_class);
_exports_stats_metric_clientData.dtor = _wrap_delete_stats_metric;
if (SWIGTYPE_p_libtorrent__stats_metric->clientdata == 0) {
  SWIGTYPE_p_libtorrent__stats_metric->clientdata = &_exports_stats_metric_clientData;
}
/* Name: _exports_alert, Type: p_libtorrent__alert, Dtor: _wrap_delete_alert */
v8::Handle<v8::FunctionTemplate> _exports_alert_class = SWIGV8_CreateClassTemplate("_exports_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_alert_clientData.class_templ, _exports_alert_class);
_exports_alert_clientData.dtor = _wrap_delete_alert;
if (SWIGTYPE_p_libtorrent__alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__alert->clientdata = &_exports_alert_clientData;
}
/* Name: _exports_torrent_alert, Type: p_libtorrent__torrent_alert, Dtor: _wrap_delete_torrent_alert */
v8::Handle<v8::FunctionTemplate> _exports_torrent_alert_class = SWIGV8_CreateClassTemplate("_exports_torrent_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_torrent_alert_clientData.class_templ, _exports_torrent_alert_class);
_exports_torrent_alert_clientData.dtor = _wrap_delete_torrent_alert;
if (SWIGTYPE_p_libtorrent__torrent_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__torrent_alert->clientdata = &_exports_torrent_alert_clientData;
}
/* Name: _exports_peer_alert, Type: p_libtorrent__peer_alert, Dtor: _wrap_delete_peer_alert */
v8::Handle<v8::FunctionTemplate> _exports_peer_alert_class = SWIGV8_CreateClassTemplate("_exports_peer_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_peer_alert_clientData.class_templ, _exports_peer_alert_class);
_exports_peer_alert_clientData.dtor = _wrap_delete_peer_alert;
if (SWIGTYPE_p_libtorrent__peer_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__peer_alert->clientdata = &_exports_peer_alert_clientData;
}
/* Name: _exports_tracker_alert, Type: p_libtorrent__tracker_alert, Dtor: _wrap_delete_tracker_alert */
v8::Handle<v8::FunctionTemplate> _exports_tracker_alert_class = SWIGV8_CreateClassTemplate("_exports_tracker_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_tracker_alert_clientData.class_templ, _exports_tracker_alert_class);
_exports_tracker_alert_clientData.dtor = _wrap_delete_tracker_alert;
if (SWIGTYPE_p_libtorrent__tracker_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__tracker_alert->clientdata = &_exports_tracker_alert_clientData;
}
/* Name: _exports_torrent_added_alert, Type: p_libtorrent__torrent_added_alert, Dtor: _wrap_delete_torrent_added_alert */
v8::Handle<v8::FunctionTemplate> _exports_torrent_added_alert_class = SWIGV8_CreateClassTemplate("_exports_torrent_added_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_torrent_added_alert_clientData.class_templ, _exports_torrent_added_alert_class);
_exports_torrent_added_alert_clientData.dtor = _wrap_delete_torrent_added_alert;
if (SWIGTYPE_p_libtorrent__torrent_added_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__torrent_added_alert->clientdata = &_exports_torrent_added_alert_clientData;
}
/* Name: _exports_torrent_removed_alert, Type: p_libtorrent__torrent_removed_alert, Dtor: _wrap_delete_torrent_removed_alert */
v8::Handle<v8::FunctionTemplate> _exports_torrent_removed_alert_class = SWIGV8_CreateClassTemplate("_exports_torrent_removed_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_torrent_removed_alert_clientData.class_templ, _exports_torrent_removed_alert_class);
_exports_torrent_removed_alert_clientData.dtor = _wrap_delete_torrent_removed_alert;
if (SWIGTYPE_p_libtorrent__torrent_removed_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__torrent_removed_alert->clientdata = &_exports_torrent_removed_alert_clientData;
}
/* Name: _exports_read_piece_alert, Type: p_libtorrent__read_piece_alert, Dtor: _wrap_delete_read_piece_alert */
v8::Handle<v8::FunctionTemplate> _exports_read_piece_alert_class = SWIGV8_CreateClassTemplate("_exports_read_piece_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_read_piece_alert_clientData.class_templ, _exports_read_piece_alert_class);
_exports_read_piece_alert_clientData.dtor = _wrap_delete_read_piece_alert;
if (SWIGTYPE_p_libtorrent__read_piece_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__read_piece_alert->clientdata = &_exports_read_piece_alert_clientData;
}
/* Name: _exports_file_completed_alert, Type: p_libtorrent__file_completed_alert, Dtor: _wrap_delete_file_completed_alert */
v8::Handle<v8::FunctionTemplate> _exports_file_completed_alert_class = SWIGV8_CreateClassTemplate("_exports_file_completed_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_file_completed_alert_clientData.class_templ, _exports_file_completed_alert_class);
_exports_file_completed_alert_clientData.dtor = _wrap_delete_file_completed_alert;
if (SWIGTYPE_p_libtorrent__file_completed_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__file_completed_alert->clientdata = &_exports_file_completed_alert_clientData;
}
/* Name: _exports_file_renamed_alert, Type: p_libtorrent__file_renamed_alert, Dtor: _wrap_delete_file_renamed_alert */
v8::Handle<v8::FunctionTemplate> _exports_file_renamed_alert_class = SWIGV8_CreateClassTemplate("_exports_file_renamed_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_file_renamed_alert_clientData.class_templ, _exports_file_renamed_alert_class);
_exports_file_renamed_alert_clientData.dtor = _wrap_delete_file_renamed_alert;
if (SWIGTYPE_p_libtorrent__file_renamed_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__file_renamed_alert->clientdata = &_exports_file_renamed_alert_clientData;
}
/* Name: _exports_file_rename_failed_alert, Type: p_libtorrent__file_rename_failed_alert, Dtor: _wrap_delete_file_rename_failed_alert */
v8::Handle<v8::FunctionTemplate> _exports_file_rename_failed_alert_class = SWIGV8_CreateClassTemplate("_exports_file_rename_failed_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_file_rename_failed_alert_clientData.class_templ, _exports_file_rename_failed_alert_class);
_exports_file_rename_failed_alert_clientData.dtor = _wrap_delete_file_rename_failed_alert;
if (SWIGTYPE_p_libtorrent__file_rename_failed_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__file_rename_failed_alert->clientdata = &_exports_file_rename_failed_alert_clientData;
}
/* Name: _exports_performance_alert, Type: p_libtorrent__performance_alert, Dtor: _wrap_delete_performance_alert */
v8::Handle<v8::FunctionTemplate> _exports_performance_alert_class = SWIGV8_CreateClassTemplate("_exports_performance_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_performance_alert_clientData.class_templ, _exports_performance_alert_class);
_exports_performance_alert_clientData.dtor = _wrap_delete_performance_alert;
if (SWIGTYPE_p_libtorrent__performance_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__performance_alert->clientdata = &_exports_performance_alert_clientData;
}
/* Name: _exports_state_changed_alert, Type: p_libtorrent__state_changed_alert, Dtor: _wrap_delete_state_changed_alert */
v8::Handle<v8::FunctionTemplate> _exports_state_changed_alert_class = SWIGV8_CreateClassTemplate("_exports_state_changed_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_state_changed_alert_clientData.class_templ, _exports_state_changed_alert_class);
_exports_state_changed_alert_clientData.dtor = _wrap_delete_state_changed_alert;
if (SWIGTYPE_p_libtorrent__state_changed_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__state_changed_alert->clientdata = &_exports_state_changed_alert_clientData;
}
/* Name: _exports_tracker_error_alert, Type: p_libtorrent__tracker_error_alert, Dtor: _wrap_delete_tracker_error_alert */
v8::Handle<v8::FunctionTemplate> _exports_tracker_error_alert_class = SWIGV8_CreateClassTemplate("_exports_tracker_error_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_tracker_error_alert_clientData.class_templ, _exports_tracker_error_alert_class);
_exports_tracker_error_alert_clientData.dtor = _wrap_delete_tracker_error_alert;
if (SWIGTYPE_p_libtorrent__tracker_error_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__tracker_error_alert->clientdata = &_exports_tracker_error_alert_clientData;
}
/* Name: _exports_tracker_warning_alert, Type: p_libtorrent__tracker_warning_alert, Dtor: _wrap_delete_tracker_warning_alert */
v8::Handle<v8::FunctionTemplate> _exports_tracker_warning_alert_class = SWIGV8_CreateClassTemplate("_exports_tracker_warning_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_tracker_warning_alert_clientData.class_templ, _exports_tracker_warning_alert_class);
_exports_tracker_warning_alert_clientData.dtor = _wrap_delete_tracker_warning_alert;
if (SWIGTYPE_p_libtorrent__tracker_warning_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__tracker_warning_alert->clientdata = &_exports_tracker_warning_alert_clientData;
}
/* Name: _exports_scrape_reply_alert, Type: p_libtorrent__scrape_reply_alert, Dtor: _wrap_delete_scrape_reply_alert */
v8::Handle<v8::FunctionTemplate> _exports_scrape_reply_alert_class = SWIGV8_CreateClassTemplate("_exports_scrape_reply_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_scrape_reply_alert_clientData.class_templ, _exports_scrape_reply_alert_class);
_exports_scrape_reply_alert_clientData.dtor = _wrap_delete_scrape_reply_alert;
if (SWIGTYPE_p_libtorrent__scrape_reply_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__scrape_reply_alert->clientdata = &_exports_scrape_reply_alert_clientData;
}
/* Name: _exports_scrape_failed_alert, Type: p_libtorrent__scrape_failed_alert, Dtor: _wrap_delete_scrape_failed_alert */
v8::Handle<v8::FunctionTemplate> _exports_scrape_failed_alert_class = SWIGV8_CreateClassTemplate("_exports_scrape_failed_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_scrape_failed_alert_clientData.class_templ, _exports_scrape_failed_alert_class);
_exports_scrape_failed_alert_clientData.dtor = _wrap_delete_scrape_failed_alert;
if (SWIGTYPE_p_libtorrent__scrape_failed_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__scrape_failed_alert->clientdata = &_exports_scrape_failed_alert_clientData;
}
/* Name: _exports_tracker_reply_alert, Type: p_libtorrent__tracker_reply_alert, Dtor: _wrap_delete_tracker_reply_alert */
v8::Handle<v8::FunctionTemplate> _exports_tracker_reply_alert_class = SWIGV8_CreateClassTemplate("_exports_tracker_reply_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_tracker_reply_alert_clientData.class_templ, _exports_tracker_reply_alert_class);
_exports_tracker_reply_alert_clientData.dtor = _wrap_delete_tracker_reply_alert;
if (SWIGTYPE_p_libtorrent__tracker_reply_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__tracker_reply_alert->clientdata = &_exports_tracker_reply_alert_clientData;
}
/* Name: _exports_dht_reply_alert, Type: p_libtorrent__dht_reply_alert, Dtor: _wrap_delete_dht_reply_alert */
v8::Handle<v8::FunctionTemplate> _exports_dht_reply_alert_class = SWIGV8_CreateClassTemplate("_exports_dht_reply_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_dht_reply_alert_clientData.class_templ, _exports_dht_reply_alert_class);
_exports_dht_reply_alert_clientData.dtor = _wrap_delete_dht_reply_alert;
if (SWIGTYPE_p_libtorrent__dht_reply_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__dht_reply_alert->clientdata = &_exports_dht_reply_alert_clientData;
}
/* Name: _exports_tracker_announce_alert, Type: p_libtorrent__tracker_announce_alert, Dtor: _wrap_delete_tracker_announce_alert */
v8::Handle<v8::FunctionTemplate> _exports_tracker_announce_alert_class = SWIGV8_CreateClassTemplate("_exports_tracker_announce_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_tracker_announce_alert_clientData.class_templ, _exports_tracker_announce_alert_class);
_exports_tracker_announce_alert_clientData.dtor = _wrap_delete_tracker_announce_alert;
if (SWIGTYPE_p_libtorrent__tracker_announce_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__tracker_announce_alert->clientdata = &_exports_tracker_announce_alert_clientData;
}
/* Name: _exports_hash_failed_alert, Type: p_libtorrent__hash_failed_alert, Dtor: _wrap_delete_hash_failed_alert */
v8::Handle<v8::FunctionTemplate> _exports_hash_failed_alert_class = SWIGV8_CreateClassTemplate("_exports_hash_failed_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_hash_failed_alert_clientData.class_templ, _exports_hash_failed_alert_class);
_exports_hash_failed_alert_clientData.dtor = _wrap_delete_hash_failed_alert;
if (SWIGTYPE_p_libtorrent__hash_failed_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__hash_failed_alert->clientdata = &_exports_hash_failed_alert_clientData;
}
/* Name: _exports_peer_ban_alert, Type: p_libtorrent__peer_ban_alert, Dtor: _wrap_delete_peer_ban_alert */
v8::Handle<v8::FunctionTemplate> _exports_peer_ban_alert_class = SWIGV8_CreateClassTemplate("_exports_peer_ban_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_peer_ban_alert_clientData.class_templ, _exports_peer_ban_alert_class);
_exports_peer_ban_alert_clientData.dtor = _wrap_delete_peer_ban_alert;
if (SWIGTYPE_p_libtorrent__peer_ban_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__peer_ban_alert->clientdata = &_exports_peer_ban_alert_clientData;
}
/* Name: _exports_peer_unsnubbed_alert, Type: p_libtorrent__peer_unsnubbed_alert, Dtor: _wrap_delete_peer_unsnubbed_alert */
v8::Handle<v8::FunctionTemplate> _exports_peer_unsnubbed_alert_class = SWIGV8_CreateClassTemplate("_exports_peer_unsnubbed_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_peer_unsnubbed_alert_clientData.class_templ, _exports_peer_unsnubbed_alert_class);
_exports_peer_unsnubbed_alert_clientData.dtor = _wrap_delete_peer_unsnubbed_alert;
if (SWIGTYPE_p_libtorrent__peer_unsnubbed_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__peer_unsnubbed_alert->clientdata = &_exports_peer_unsnubbed_alert_clientData;
}
/* Name: _exports_peer_snubbed_alert, Type: p_libtorrent__peer_snubbed_alert, Dtor: _wrap_delete_peer_snubbed_alert */
v8::Handle<v8::FunctionTemplate> _exports_peer_snubbed_alert_class = SWIGV8_CreateClassTemplate("_exports_peer_snubbed_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_peer_snubbed_alert_clientData.class_templ, _exports_peer_snubbed_alert_class);
_exports_peer_snubbed_alert_clientData.dtor = _wrap_delete_peer_snubbed_alert;
if (SWIGTYPE_p_libtorrent__peer_snubbed_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__peer_snubbed_alert->clientdata = &_exports_peer_snubbed_alert_clientData;
}
/* Name: _exports_peer_error_alert, Type: p_libtorrent__peer_error_alert, Dtor: _wrap_delete_peer_error_alert */
v8::Handle<v8::FunctionTemplate> _exports_peer_error_alert_class = SWIGV8_CreateClassTemplate("_exports_peer_error_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_peer_error_alert_clientData.class_templ, _exports_peer_error_alert_class);
_exports_peer_error_alert_clientData.dtor = _wrap_delete_peer_error_alert;
if (SWIGTYPE_p_libtorrent__peer_error_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__peer_error_alert->clientdata = &_exports_peer_error_alert_clientData;
}
/* Name: _exports_peer_connect_alert, Type: p_libtorrent__peer_connect_alert, Dtor: _wrap_delete_peer_connect_alert */
v8::Handle<v8::FunctionTemplate> _exports_peer_connect_alert_class = SWIGV8_CreateClassTemplate("_exports_peer_connect_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_peer_connect_alert_clientData.class_templ, _exports_peer_connect_alert_class);
_exports_peer_connect_alert_clientData.dtor = _wrap_delete_peer_connect_alert;
if (SWIGTYPE_p_libtorrent__peer_connect_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__peer_connect_alert->clientdata = &_exports_peer_connect_alert_clientData;
}
/* Name: _exports_peer_disconnected_alert, Type: p_libtorrent__peer_disconnected_alert, Dtor: _wrap_delete_peer_disconnected_alert */
v8::Handle<v8::FunctionTemplate> _exports_peer_disconnected_alert_class = SWIGV8_CreateClassTemplate("_exports_peer_disconnected_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_peer_disconnected_alert_clientData.class_templ, _exports_peer_disconnected_alert_class);
_exports_peer_disconnected_alert_clientData.dtor = _wrap_delete_peer_disconnected_alert;
if (SWIGTYPE_p_libtorrent__peer_disconnected_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__peer_disconnected_alert->clientdata = &_exports_peer_disconnected_alert_clientData;
}
/* Name: _exports_invalid_request_alert, Type: p_libtorrent__invalid_request_alert, Dtor: _wrap_delete_invalid_request_alert */
v8::Handle<v8::FunctionTemplate> _exports_invalid_request_alert_class = SWIGV8_CreateClassTemplate("_exports_invalid_request_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_invalid_request_alert_clientData.class_templ, _exports_invalid_request_alert_class);
_exports_invalid_request_alert_clientData.dtor = _wrap_delete_invalid_request_alert;
if (SWIGTYPE_p_libtorrent__invalid_request_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__invalid_request_alert->clientdata = &_exports_invalid_request_alert_clientData;
}
/* Name: _exports_torrent_finished_alert, Type: p_libtorrent__torrent_finished_alert, Dtor: _wrap_delete_torrent_finished_alert */
v8::Handle<v8::FunctionTemplate> _exports_torrent_finished_alert_class = SWIGV8_CreateClassTemplate("_exports_torrent_finished_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_torrent_finished_alert_clientData.class_templ, _exports_torrent_finished_alert_class);
_exports_torrent_finished_alert_clientData.dtor = _wrap_delete_torrent_finished_alert;
if (SWIGTYPE_p_libtorrent__torrent_finished_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__torrent_finished_alert->clientdata = &_exports_torrent_finished_alert_clientData;
}
/* Name: _exports_piece_finished_alert, Type: p_libtorrent__piece_finished_alert, Dtor: _wrap_delete_piece_finished_alert */
v8::Handle<v8::FunctionTemplate> _exports_piece_finished_alert_class = SWIGV8_CreateClassTemplate("_exports_piece_finished_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_piece_finished_alert_clientData.class_templ, _exports_piece_finished_alert_class);
_exports_piece_finished_alert_clientData.dtor = _wrap_delete_piece_finished_alert;
if (SWIGTYPE_p_libtorrent__piece_finished_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__piece_finished_alert->clientdata = &_exports_piece_finished_alert_clientData;
}
/* Name: _exports_request_dropped_alert, Type: p_libtorrent__request_dropped_alert, Dtor: _wrap_delete_request_dropped_alert */
v8::Handle<v8::FunctionTemplate> _exports_request_dropped_alert_class = SWIGV8_CreateClassTemplate("_exports_request_dropped_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_request_dropped_alert_clientData.class_templ, _exports_request_dropped_alert_class);
_exports_request_dropped_alert_clientData.dtor = _wrap_delete_request_dropped_alert;
if (SWIGTYPE_p_libtorrent__request_dropped_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__request_dropped_alert->clientdata = &_exports_request_dropped_alert_clientData;
}
/* Name: _exports_block_timeout_alert, Type: p_libtorrent__block_timeout_alert, Dtor: _wrap_delete_block_timeout_alert */
v8::Handle<v8::FunctionTemplate> _exports_block_timeout_alert_class = SWIGV8_CreateClassTemplate("_exports_block_timeout_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_block_timeout_alert_clientData.class_templ, _exports_block_timeout_alert_class);
_exports_block_timeout_alert_clientData.dtor = _wrap_delete_block_timeout_alert;
if (SWIGTYPE_p_libtorrent__block_timeout_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__block_timeout_alert->clientdata = &_exports_block_timeout_alert_clientData;
}
/* Name: _exports_block_finished_alert, Type: p_libtorrent__block_finished_alert, Dtor: _wrap_delete_block_finished_alert */
v8::Handle<v8::FunctionTemplate> _exports_block_finished_alert_class = SWIGV8_CreateClassTemplate("_exports_block_finished_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_block_finished_alert_clientData.class_templ, _exports_block_finished_alert_class);
_exports_block_finished_alert_clientData.dtor = _wrap_delete_block_finished_alert;
if (SWIGTYPE_p_libtorrent__block_finished_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__block_finished_alert->clientdata = &_exports_block_finished_alert_clientData;
}
/* Name: _exports_block_downloading_alert, Type: p_libtorrent__block_downloading_alert, Dtor: _wrap_delete_block_downloading_alert */
v8::Handle<v8::FunctionTemplate> _exports_block_downloading_alert_class = SWIGV8_CreateClassTemplate("_exports_block_downloading_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_block_downloading_alert_clientData.class_templ, _exports_block_downloading_alert_class);
_exports_block_downloading_alert_clientData.dtor = _wrap_delete_block_downloading_alert;
if (SWIGTYPE_p_libtorrent__block_downloading_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__block_downloading_alert->clientdata = &_exports_block_downloading_alert_clientData;
}
/* Name: _exports_unwanted_block_alert, Type: p_libtorrent__unwanted_block_alert, Dtor: _wrap_delete_unwanted_block_alert */
v8::Handle<v8::FunctionTemplate> _exports_unwanted_block_alert_class = SWIGV8_CreateClassTemplate("_exports_unwanted_block_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_unwanted_block_alert_clientData.class_templ, _exports_unwanted_block_alert_class);
_exports_unwanted_block_alert_clientData.dtor = _wrap_delete_unwanted_block_alert;
if (SWIGTYPE_p_libtorrent__unwanted_block_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__unwanted_block_alert->clientdata = &_exports_unwanted_block_alert_clientData;
}
/* Name: _exports_storage_moved_alert, Type: p_libtorrent__storage_moved_alert, Dtor: _wrap_delete_storage_moved_alert */
v8::Handle<v8::FunctionTemplate> _exports_storage_moved_alert_class = SWIGV8_CreateClassTemplate("_exports_storage_moved_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_storage_moved_alert_clientData.class_templ, _exports_storage_moved_alert_class);
_exports_storage_moved_alert_clientData.dtor = _wrap_delete_storage_moved_alert;
if (SWIGTYPE_p_libtorrent__storage_moved_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__storage_moved_alert->clientdata = &_exports_storage_moved_alert_clientData;
}
/* Name: _exports_storage_moved_failed_alert, Type: p_libtorrent__storage_moved_failed_alert, Dtor: _wrap_delete_storage_moved_failed_alert */
v8::Handle<v8::FunctionTemplate> _exports_storage_moved_failed_alert_class = SWIGV8_CreateClassTemplate("_exports_storage_moved_failed_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_storage_moved_failed_alert_clientData.class_templ, _exports_storage_moved_failed_alert_class);
_exports_storage_moved_failed_alert_clientData.dtor = _wrap_delete_storage_moved_failed_alert;
if (SWIGTYPE_p_libtorrent__storage_moved_failed_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__storage_moved_failed_alert->clientdata = &_exports_storage_moved_failed_alert_clientData;
}
/* Name: _exports_torrent_deleted_alert, Type: p_libtorrent__torrent_deleted_alert, Dtor: _wrap_delete_torrent_deleted_alert */
v8::Handle<v8::FunctionTemplate> _exports_torrent_deleted_alert_class = SWIGV8_CreateClassTemplate("_exports_torrent_deleted_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_torrent_deleted_alert_clientData.class_templ, _exports_torrent_deleted_alert_class);
_exports_torrent_deleted_alert_clientData.dtor = _wrap_delete_torrent_deleted_alert;
if (SWIGTYPE_p_libtorrent__torrent_deleted_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__torrent_deleted_alert->clientdata = &_exports_torrent_deleted_alert_clientData;
}
/* Name: _exports_torrent_delete_failed_alert, Type: p_libtorrent__torrent_delete_failed_alert, Dtor: _wrap_delete_torrent_delete_failed_alert */
v8::Handle<v8::FunctionTemplate> _exports_torrent_delete_failed_alert_class = SWIGV8_CreateClassTemplate("_exports_torrent_delete_failed_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_torrent_delete_failed_alert_clientData.class_templ, _exports_torrent_delete_failed_alert_class);
_exports_torrent_delete_failed_alert_clientData.dtor = _wrap_delete_torrent_delete_failed_alert;
if (SWIGTYPE_p_libtorrent__torrent_delete_failed_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__torrent_delete_failed_alert->clientdata = &_exports_torrent_delete_failed_alert_clientData;
}
/* Name: _exports_save_resume_data_alert, Type: p_libtorrent__save_resume_data_alert, Dtor: _wrap_delete_save_resume_data_alert */
v8::Handle<v8::FunctionTemplate> _exports_save_resume_data_alert_class = SWIGV8_CreateClassTemplate("_exports_save_resume_data_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_save_resume_data_alert_clientData.class_templ, _exports_save_resume_data_alert_class);
_exports_save_resume_data_alert_clientData.dtor = _wrap_delete_save_resume_data_alert;
if (SWIGTYPE_p_libtorrent__save_resume_data_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__save_resume_data_alert->clientdata = &_exports_save_resume_data_alert_clientData;
}
/* Name: _exports_save_resume_data_failed_alert, Type: p_libtorrent__save_resume_data_failed_alert, Dtor: _wrap_delete_save_resume_data_failed_alert */
v8::Handle<v8::FunctionTemplate> _exports_save_resume_data_failed_alert_class = SWIGV8_CreateClassTemplate("_exports_save_resume_data_failed_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_save_resume_data_failed_alert_clientData.class_templ, _exports_save_resume_data_failed_alert_class);
_exports_save_resume_data_failed_alert_clientData.dtor = _wrap_delete_save_resume_data_failed_alert;
if (SWIGTYPE_p_libtorrent__save_resume_data_failed_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__save_resume_data_failed_alert->clientdata = &_exports_save_resume_data_failed_alert_clientData;
}
/* Name: _exports_torrent_paused_alert, Type: p_libtorrent__torrent_paused_alert, Dtor: _wrap_delete_torrent_paused_alert */
v8::Handle<v8::FunctionTemplate> _exports_torrent_paused_alert_class = SWIGV8_CreateClassTemplate("_exports_torrent_paused_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_torrent_paused_alert_clientData.class_templ, _exports_torrent_paused_alert_class);
_exports_torrent_paused_alert_clientData.dtor = _wrap_delete_torrent_paused_alert;
if (SWIGTYPE_p_libtorrent__torrent_paused_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__torrent_paused_alert->clientdata = &_exports_torrent_paused_alert_clientData;
}
/* Name: _exports_torrent_resumed_alert, Type: p_libtorrent__torrent_resumed_alert, Dtor: _wrap_delete_torrent_resumed_alert */
v8::Handle<v8::FunctionTemplate> _exports_torrent_resumed_alert_class = SWIGV8_CreateClassTemplate("_exports_torrent_resumed_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_torrent_resumed_alert_clientData.class_templ, _exports_torrent_resumed_alert_class);
_exports_torrent_resumed_alert_clientData.dtor = _wrap_delete_torrent_resumed_alert;
if (SWIGTYPE_p_libtorrent__torrent_resumed_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__torrent_resumed_alert->clientdata = &_exports_torrent_resumed_alert_clientData;
}
/* Name: _exports_torrent_checked_alert, Type: p_libtorrent__torrent_checked_alert, Dtor: _wrap_delete_torrent_checked_alert */
v8::Handle<v8::FunctionTemplate> _exports_torrent_checked_alert_class = SWIGV8_CreateClassTemplate("_exports_torrent_checked_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_torrent_checked_alert_clientData.class_templ, _exports_torrent_checked_alert_class);
_exports_torrent_checked_alert_clientData.dtor = _wrap_delete_torrent_checked_alert;
if (SWIGTYPE_p_libtorrent__torrent_checked_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__torrent_checked_alert->clientdata = &_exports_torrent_checked_alert_clientData;
}
/* Name: _exports_url_seed_alert, Type: p_libtorrent__url_seed_alert, Dtor: _wrap_delete_url_seed_alert */
v8::Handle<v8::FunctionTemplate> _exports_url_seed_alert_class = SWIGV8_CreateClassTemplate("_exports_url_seed_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_url_seed_alert_clientData.class_templ, _exports_url_seed_alert_class);
_exports_url_seed_alert_clientData.dtor = _wrap_delete_url_seed_alert;
if (SWIGTYPE_p_libtorrent__url_seed_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__url_seed_alert->clientdata = &_exports_url_seed_alert_clientData;
}
/* Name: _exports_file_error_alert, Type: p_libtorrent__file_error_alert, Dtor: _wrap_delete_file_error_alert */
v8::Handle<v8::FunctionTemplate> _exports_file_error_alert_class = SWIGV8_CreateClassTemplate("_exports_file_error_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_file_error_alert_clientData.class_templ, _exports_file_error_alert_class);
_exports_file_error_alert_clientData.dtor = _wrap_delete_file_error_alert;
if (SWIGTYPE_p_libtorrent__file_error_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__file_error_alert->clientdata = &_exports_file_error_alert_clientData;
}
/* Name: _exports_metadata_failed_alert, Type: p_libtorrent__metadata_failed_alert, Dtor: _wrap_delete_metadata_failed_alert */
v8::Handle<v8::FunctionTemplate> _exports_metadata_failed_alert_class = SWIGV8_CreateClassTemplate("_exports_metadata_failed_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_metadata_failed_alert_clientData.class_templ, _exports_metadata_failed_alert_class);
_exports_metadata_failed_alert_clientData.dtor = _wrap_delete_metadata_failed_alert;
if (SWIGTYPE_p_libtorrent__metadata_failed_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__metadata_failed_alert->clientdata = &_exports_metadata_failed_alert_clientData;
}
/* Name: _exports_metadata_received_alert, Type: p_libtorrent__metadata_received_alert, Dtor: _wrap_delete_metadata_received_alert */
v8::Handle<v8::FunctionTemplate> _exports_metadata_received_alert_class = SWIGV8_CreateClassTemplate("_exports_metadata_received_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_metadata_received_alert_clientData.class_templ, _exports_metadata_received_alert_class);
_exports_metadata_received_alert_clientData.dtor = _wrap_delete_metadata_received_alert;
if (SWIGTYPE_p_libtorrent__metadata_received_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__metadata_received_alert->clientdata = &_exports_metadata_received_alert_clientData;
}
/* Name: _exports_udp_error_alert, Type: p_libtorrent__udp_error_alert, Dtor: _wrap_delete_udp_error_alert */
v8::Handle<v8::FunctionTemplate> _exports_udp_error_alert_class = SWIGV8_CreateClassTemplate("_exports_udp_error_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_udp_error_alert_clientData.class_templ, _exports_udp_error_alert_class);
_exports_udp_error_alert_clientData.dtor = _wrap_delete_udp_error_alert;
if (SWIGTYPE_p_libtorrent__udp_error_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__udp_error_alert->clientdata = &_exports_udp_error_alert_clientData;
}
/* Name: _exports_external_ip_alert, Type: p_libtorrent__external_ip_alert, Dtor: _wrap_delete_external_ip_alert */
v8::Handle<v8::FunctionTemplate> _exports_external_ip_alert_class = SWIGV8_CreateClassTemplate("_exports_external_ip_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_external_ip_alert_clientData.class_templ, _exports_external_ip_alert_class);
_exports_external_ip_alert_clientData.dtor = _wrap_delete_external_ip_alert;
if (SWIGTYPE_p_libtorrent__external_ip_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__external_ip_alert->clientdata = &_exports_external_ip_alert_clientData;
}
/* Name: _exports_listen_failed_alert, Type: p_libtorrent__listen_failed_alert, Dtor: _wrap_delete_listen_failed_alert */
v8::Handle<v8::FunctionTemplate> _exports_listen_failed_alert_class = SWIGV8_CreateClassTemplate("_exports_listen_failed_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_listen_failed_alert_clientData.class_templ, _exports_listen_failed_alert_class);
_exports_listen_failed_alert_clientData.dtor = _wrap_delete_listen_failed_alert;
if (SWIGTYPE_p_libtorrent__listen_failed_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__listen_failed_alert->clientdata = &_exports_listen_failed_alert_clientData;
}
/* Name: _exports_listen_succeeded_alert, Type: p_libtorrent__listen_succeeded_alert, Dtor: _wrap_delete_listen_succeeded_alert */
v8::Handle<v8::FunctionTemplate> _exports_listen_succeeded_alert_class = SWIGV8_CreateClassTemplate("_exports_listen_succeeded_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_listen_succeeded_alert_clientData.class_templ, _exports_listen_succeeded_alert_class);
_exports_listen_succeeded_alert_clientData.dtor = _wrap_delete_listen_succeeded_alert;
if (SWIGTYPE_p_libtorrent__listen_succeeded_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__listen_succeeded_alert->clientdata = &_exports_listen_succeeded_alert_clientData;
}
/* Name: _exports_portmap_error_alert, Type: p_libtorrent__portmap_error_alert, Dtor: _wrap_delete_portmap_error_alert */
v8::Handle<v8::FunctionTemplate> _exports_portmap_error_alert_class = SWIGV8_CreateClassTemplate("_exports_portmap_error_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_portmap_error_alert_clientData.class_templ, _exports_portmap_error_alert_class);
_exports_portmap_error_alert_clientData.dtor = _wrap_delete_portmap_error_alert;
if (SWIGTYPE_p_libtorrent__portmap_error_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__portmap_error_alert->clientdata = &_exports_portmap_error_alert_clientData;
}
/* Name: _exports_portmap_alert, Type: p_libtorrent__portmap_alert, Dtor: _wrap_delete_portmap_alert */
v8::Handle<v8::FunctionTemplate> _exports_portmap_alert_class = SWIGV8_CreateClassTemplate("_exports_portmap_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_portmap_alert_clientData.class_templ, _exports_portmap_alert_class);
_exports_portmap_alert_clientData.dtor = _wrap_delete_portmap_alert;
if (SWIGTYPE_p_libtorrent__portmap_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__portmap_alert->clientdata = &_exports_portmap_alert_clientData;
}
/* Name: _exports_portmap_log_alert, Type: p_libtorrent__portmap_log_alert, Dtor: _wrap_delete_portmap_log_alert */
v8::Handle<v8::FunctionTemplate> _exports_portmap_log_alert_class = SWIGV8_CreateClassTemplate("_exports_portmap_log_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_portmap_log_alert_clientData.class_templ, _exports_portmap_log_alert_class);
_exports_portmap_log_alert_clientData.dtor = _wrap_delete_portmap_log_alert;
if (SWIGTYPE_p_libtorrent__portmap_log_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__portmap_log_alert->clientdata = &_exports_portmap_log_alert_clientData;
}
/* Name: _exports_fastresume_rejected_alert, Type: p_libtorrent__fastresume_rejected_alert, Dtor: _wrap_delete_fastresume_rejected_alert */
v8::Handle<v8::FunctionTemplate> _exports_fastresume_rejected_alert_class = SWIGV8_CreateClassTemplate("_exports_fastresume_rejected_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_fastresume_rejected_alert_clientData.class_templ, _exports_fastresume_rejected_alert_class);
_exports_fastresume_rejected_alert_clientData.dtor = _wrap_delete_fastresume_rejected_alert;
if (SWIGTYPE_p_libtorrent__fastresume_rejected_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__fastresume_rejected_alert->clientdata = &_exports_fastresume_rejected_alert_clientData;
}
/* Name: _exports_peer_blocked_alert, Type: p_libtorrent__peer_blocked_alert, Dtor: _wrap_delete_peer_blocked_alert */
v8::Handle<v8::FunctionTemplate> _exports_peer_blocked_alert_class = SWIGV8_CreateClassTemplate("_exports_peer_blocked_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_peer_blocked_alert_clientData.class_templ, _exports_peer_blocked_alert_class);
_exports_peer_blocked_alert_clientData.dtor = _wrap_delete_peer_blocked_alert;
if (SWIGTYPE_p_libtorrent__peer_blocked_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__peer_blocked_alert->clientdata = &_exports_peer_blocked_alert_clientData;
}
/* Name: _exports_dht_announce_alert, Type: p_libtorrent__dht_announce_alert, Dtor: _wrap_delete_dht_announce_alert */
v8::Handle<v8::FunctionTemplate> _exports_dht_announce_alert_class = SWIGV8_CreateClassTemplate("_exports_dht_announce_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_dht_announce_alert_clientData.class_templ, _exports_dht_announce_alert_class);
_exports_dht_announce_alert_clientData.dtor = _wrap_delete_dht_announce_alert;
if (SWIGTYPE_p_libtorrent__dht_announce_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__dht_announce_alert->clientdata = &_exports_dht_announce_alert_clientData;
}
/* Name: _exports_dht_get_peers_alert, Type: p_libtorrent__dht_get_peers_alert, Dtor: _wrap_delete_dht_get_peers_alert */
v8::Handle<v8::FunctionTemplate> _exports_dht_get_peers_alert_class = SWIGV8_CreateClassTemplate("_exports_dht_get_peers_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_dht_get_peers_alert_clientData.class_templ, _exports_dht_get_peers_alert_class);
_exports_dht_get_peers_alert_clientData.dtor = _wrap_delete_dht_get_peers_alert;
if (SWIGTYPE_p_libtorrent__dht_get_peers_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__dht_get_peers_alert->clientdata = &_exports_dht_get_peers_alert_clientData;
}
/* Name: _exports_stats_alert, Type: p_libtorrent__stats_alert, Dtor: _wrap_delete_stats_alert */
v8::Handle<v8::FunctionTemplate> _exports_stats_alert_class = SWIGV8_CreateClassTemplate("_exports_stats_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_stats_alert_clientData.class_templ, _exports_stats_alert_class);
_exports_stats_alert_clientData.dtor = _wrap_delete_stats_alert;
if (SWIGTYPE_p_libtorrent__stats_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__stats_alert->clientdata = &_exports_stats_alert_clientData;
}
/* Name: _exports_cache_flushed_alert, Type: p_libtorrent__cache_flushed_alert, Dtor: _wrap_delete_cache_flushed_alert */
v8::Handle<v8::FunctionTemplate> _exports_cache_flushed_alert_class = SWIGV8_CreateClassTemplate("_exports_cache_flushed_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_cache_flushed_alert_clientData.class_templ, _exports_cache_flushed_alert_class);
_exports_cache_flushed_alert_clientData.dtor = _wrap_delete_cache_flushed_alert;
if (SWIGTYPE_p_libtorrent__cache_flushed_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__cache_flushed_alert->clientdata = &_exports_cache_flushed_alert_clientData;
}
/* Name: _exports_anonymous_mode_alert, Type: p_libtorrent__anonymous_mode_alert, Dtor: _wrap_delete_anonymous_mode_alert */
v8::Handle<v8::FunctionTemplate> _exports_anonymous_mode_alert_class = SWIGV8_CreateClassTemplate("_exports_anonymous_mode_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_anonymous_mode_alert_clientData.class_templ, _exports_anonymous_mode_alert_class);
_exports_anonymous_mode_alert_clientData.dtor = _wrap_delete_anonymous_mode_alert;
if (SWIGTYPE_p_libtorrent__anonymous_mode_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__anonymous_mode_alert->clientdata = &_exports_anonymous_mode_alert_clientData;
}
/* Name: _exports_lsd_peer_alert, Type: p_libtorrent__lsd_peer_alert, Dtor: _wrap_delete_lsd_peer_alert */
v8::Handle<v8::FunctionTemplate> _exports_lsd_peer_alert_class = SWIGV8_CreateClassTemplate("_exports_lsd_peer_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_lsd_peer_alert_clientData.class_templ, _exports_lsd_peer_alert_class);
_exports_lsd_peer_alert_clientData.dtor = _wrap_delete_lsd_peer_alert;
if (SWIGTYPE_p_libtorrent__lsd_peer_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__lsd_peer_alert->clientdata = &_exports_lsd_peer_alert_clientData;
}
/* Name: _exports_trackerid_alert, Type: p_libtorrent__trackerid_alert, Dtor: _wrap_delete_trackerid_alert */
v8::Handle<v8::FunctionTemplate> _exports_trackerid_alert_class = SWIGV8_CreateClassTemplate("_exports_trackerid_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_trackerid_alert_clientData.class_templ, _exports_trackerid_alert_class);
_exports_trackerid_alert_clientData.dtor = _wrap_delete_trackerid_alert;
if (SWIGTYPE_p_libtorrent__trackerid_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__trackerid_alert->clientdata = &_exports_trackerid_alert_clientData;
}
/* Name: _exports_dht_bootstrap_alert, Type: p_libtorrent__dht_bootstrap_alert, Dtor: _wrap_delete_dht_bootstrap_alert */
v8::Handle<v8::FunctionTemplate> _exports_dht_bootstrap_alert_class = SWIGV8_CreateClassTemplate("_exports_dht_bootstrap_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_dht_bootstrap_alert_clientData.class_templ, _exports_dht_bootstrap_alert_class);
_exports_dht_bootstrap_alert_clientData.dtor = _wrap_delete_dht_bootstrap_alert;
if (SWIGTYPE_p_libtorrent__dht_bootstrap_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__dht_bootstrap_alert->clientdata = &_exports_dht_bootstrap_alert_clientData;
}
/* Name: _exports_torrent_error_alert, Type: p_libtorrent__torrent_error_alert, Dtor: _wrap_delete_torrent_error_alert */
v8::Handle<v8::FunctionTemplate> _exports_torrent_error_alert_class = SWIGV8_CreateClassTemplate("_exports_torrent_error_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_torrent_error_alert_clientData.class_templ, _exports_torrent_error_alert_class);
_exports_torrent_error_alert_clientData.dtor = _wrap_delete_torrent_error_alert;
if (SWIGTYPE_p_libtorrent__torrent_error_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__torrent_error_alert->clientdata = &_exports_torrent_error_alert_clientData;
}
/* Name: _exports_torrent_need_cert_alert, Type: p_libtorrent__torrent_need_cert_alert, Dtor: _wrap_delete_torrent_need_cert_alert */
v8::Handle<v8::FunctionTemplate> _exports_torrent_need_cert_alert_class = SWIGV8_CreateClassTemplate("_exports_torrent_need_cert_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_torrent_need_cert_alert_clientData.class_templ, _exports_torrent_need_cert_alert_class);
_exports_torrent_need_cert_alert_clientData.dtor = _wrap_delete_torrent_need_cert_alert;
if (SWIGTYPE_p_libtorrent__torrent_need_cert_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__torrent_need_cert_alert->clientdata = &_exports_torrent_need_cert_alert_clientData;
}
/* Name: _exports_incoming_connection_alert, Type: p_libtorrent__incoming_connection_alert, Dtor: _wrap_delete_incoming_connection_alert */
v8::Handle<v8::FunctionTemplate> _exports_incoming_connection_alert_class = SWIGV8_CreateClassTemplate("_exports_incoming_connection_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_incoming_connection_alert_clientData.class_templ, _exports_incoming_connection_alert_class);
_exports_incoming_connection_alert_clientData.dtor = _wrap_delete_incoming_connection_alert;
if (SWIGTYPE_p_libtorrent__incoming_connection_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__incoming_connection_alert->clientdata = &_exports_incoming_connection_alert_clientData;
}
/* Name: _exports_add_torrent_alert, Type: p_libtorrent__add_torrent_alert, Dtor: _wrap_delete_add_torrent_alert */
v8::Handle<v8::FunctionTemplate> _exports_add_torrent_alert_class = SWIGV8_CreateClassTemplate("_exports_add_torrent_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_add_torrent_alert_clientData.class_templ, _exports_add_torrent_alert_class);
_exports_add_torrent_alert_clientData.dtor = _wrap_delete_add_torrent_alert;
if (SWIGTYPE_p_libtorrent__add_torrent_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__add_torrent_alert->clientdata = &_exports_add_torrent_alert_clientData;
}
/* Name: _exports_state_update_alert, Type: p_libtorrent__state_update_alert, Dtor: _wrap_delete_state_update_alert */
v8::Handle<v8::FunctionTemplate> _exports_state_update_alert_class = SWIGV8_CreateClassTemplate("_exports_state_update_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_state_update_alert_clientData.class_templ, _exports_state_update_alert_class);
_exports_state_update_alert_clientData.dtor = _wrap_delete_state_update_alert;
if (SWIGTYPE_p_libtorrent__state_update_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__state_update_alert->clientdata = &_exports_state_update_alert_clientData;
}
/* Name: _exports_mmap_cache_alert, Type: p_libtorrent__mmap_cache_alert, Dtor: _wrap_delete_mmap_cache_alert */
v8::Handle<v8::FunctionTemplate> _exports_mmap_cache_alert_class = SWIGV8_CreateClassTemplate("_exports_mmap_cache_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_mmap_cache_alert_clientData.class_templ, _exports_mmap_cache_alert_class);
_exports_mmap_cache_alert_clientData.dtor = _wrap_delete_mmap_cache_alert;
if (SWIGTYPE_p_libtorrent__mmap_cache_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__mmap_cache_alert->clientdata = &_exports_mmap_cache_alert_clientData;
}
/* Name: _exports_session_stats_alert, Type: p_libtorrent__session_stats_alert, Dtor: _wrap_delete_session_stats_alert */
v8::Handle<v8::FunctionTemplate> _exports_session_stats_alert_class = SWIGV8_CreateClassTemplate("_exports_session_stats_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_session_stats_alert_clientData.class_templ, _exports_session_stats_alert_class);
_exports_session_stats_alert_clientData.dtor = _wrap_delete_session_stats_alert;
if (SWIGTYPE_p_libtorrent__session_stats_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__session_stats_alert->clientdata = &_exports_session_stats_alert_clientData;
}
/* Name: _exports_dht_error_alert, Type: p_libtorrent__dht_error_alert, Dtor: _wrap_delete_dht_error_alert */
v8::Handle<v8::FunctionTemplate> _exports_dht_error_alert_class = SWIGV8_CreateClassTemplate("_exports_dht_error_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_dht_error_alert_clientData.class_templ, _exports_dht_error_alert_class);
_exports_dht_error_alert_clientData.dtor = _wrap_delete_dht_error_alert;
if (SWIGTYPE_p_libtorrent__dht_error_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__dht_error_alert->clientdata = &_exports_dht_error_alert_clientData;
}
/* Name: _exports_dht_immutable_item_alert, Type: p_libtorrent__dht_immutable_item_alert, Dtor: _wrap_delete_dht_immutable_item_alert */
v8::Handle<v8::FunctionTemplate> _exports_dht_immutable_item_alert_class = SWIGV8_CreateClassTemplate("_exports_dht_immutable_item_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_dht_immutable_item_alert_clientData.class_templ, _exports_dht_immutable_item_alert_class);
_exports_dht_immutable_item_alert_clientData.dtor = _wrap_delete_dht_immutable_item_alert;
if (SWIGTYPE_p_libtorrent__dht_immutable_item_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__dht_immutable_item_alert->clientdata = &_exports_dht_immutable_item_alert_clientData;
}
/* Name: _exports_dht_mutable_item_alert, Type: p_libtorrent__dht_mutable_item_alert, Dtor: _wrap_delete_dht_mutable_item_alert */
v8::Handle<v8::FunctionTemplate> _exports_dht_mutable_item_alert_class = SWIGV8_CreateClassTemplate("_exports_dht_mutable_item_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_dht_mutable_item_alert_clientData.class_templ, _exports_dht_mutable_item_alert_class);
_exports_dht_mutable_item_alert_clientData.dtor = _wrap_delete_dht_mutable_item_alert;
if (SWIGTYPE_p_libtorrent__dht_mutable_item_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__dht_mutable_item_alert->clientdata = &_exports_dht_mutable_item_alert_clientData;
}
/* Name: _exports_dht_put_alert, Type: p_libtorrent__dht_put_alert, Dtor: _wrap_delete_dht_put_alert */
v8::Handle<v8::FunctionTemplate> _exports_dht_put_alert_class = SWIGV8_CreateClassTemplate("_exports_dht_put_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_dht_put_alert_clientData.class_templ, _exports_dht_put_alert_class);
_exports_dht_put_alert_clientData.dtor = _wrap_delete_dht_put_alert;
if (SWIGTYPE_p_libtorrent__dht_put_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__dht_put_alert->clientdata = &_exports_dht_put_alert_clientData;
}
/* Name: _exports_i2p_alert, Type: p_libtorrent__i2p_alert, Dtor: _wrap_delete_i2p_alert */
v8::Handle<v8::FunctionTemplate> _exports_i2p_alert_class = SWIGV8_CreateClassTemplate("_exports_i2p_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_i2p_alert_clientData.class_templ, _exports_i2p_alert_class);
_exports_i2p_alert_clientData.dtor = _wrap_delete_i2p_alert;
if (SWIGTYPE_p_libtorrent__i2p_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__i2p_alert->clientdata = &_exports_i2p_alert_clientData;
}
/* Name: _exports_dht_outgoing_get_peers_alert, Type: p_libtorrent__dht_outgoing_get_peers_alert, Dtor: _wrap_delete_dht_outgoing_get_peers_alert */
v8::Handle<v8::FunctionTemplate> _exports_dht_outgoing_get_peers_alert_class = SWIGV8_CreateClassTemplate("_exports_dht_outgoing_get_peers_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_dht_outgoing_get_peers_alert_clientData.class_templ, _exports_dht_outgoing_get_peers_alert_class);
_exports_dht_outgoing_get_peers_alert_clientData.dtor = _wrap_delete_dht_outgoing_get_peers_alert;
if (SWIGTYPE_p_libtorrent__dht_outgoing_get_peers_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__dht_outgoing_get_peers_alert->clientdata = &_exports_dht_outgoing_get_peers_alert_clientData;
}
/* Name: _exports_log_alert, Type: p_libtorrent__log_alert, Dtor: _wrap_delete_log_alert */
v8::Handle<v8::FunctionTemplate> _exports_log_alert_class = SWIGV8_CreateClassTemplate("_exports_log_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_log_alert_clientData.class_templ, _exports_log_alert_class);
_exports_log_alert_clientData.dtor = _wrap_delete_log_alert;
if (SWIGTYPE_p_libtorrent__log_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__log_alert->clientdata = &_exports_log_alert_clientData;
}
/* Name: _exports_torrent_log_alert, Type: p_libtorrent__torrent_log_alert, Dtor: _wrap_delete_torrent_log_alert */
v8::Handle<v8::FunctionTemplate> _exports_torrent_log_alert_class = SWIGV8_CreateClassTemplate("_exports_torrent_log_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_torrent_log_alert_clientData.class_templ, _exports_torrent_log_alert_class);
_exports_torrent_log_alert_clientData.dtor = _wrap_delete_torrent_log_alert;
if (SWIGTYPE_p_libtorrent__torrent_log_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__torrent_log_alert->clientdata = &_exports_torrent_log_alert_clientData;
}
/* Name: _exports_peer_log_alert, Type: p_libtorrent__peer_log_alert, Dtor: _wrap_delete_peer_log_alert */
v8::Handle<v8::FunctionTemplate> _exports_peer_log_alert_class = SWIGV8_CreateClassTemplate("_exports_peer_log_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_peer_log_alert_clientData.class_templ, _exports_peer_log_alert_class);
_exports_peer_log_alert_clientData.dtor = _wrap_delete_peer_log_alert;
if (SWIGTYPE_p_libtorrent__peer_log_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__peer_log_alert->clientdata = &_exports_peer_log_alert_clientData;
}
/* Name: _exports_lsd_error_alert, Type: p_libtorrent__lsd_error_alert, Dtor: _wrap_delete_lsd_error_alert */
v8::Handle<v8::FunctionTemplate> _exports_lsd_error_alert_class = SWIGV8_CreateClassTemplate("_exports_lsd_error_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_lsd_error_alert_clientData.class_templ, _exports_lsd_error_alert_class);
_exports_lsd_error_alert_clientData.dtor = _wrap_delete_lsd_error_alert;
if (SWIGTYPE_p_libtorrent__lsd_error_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__lsd_error_alert->clientdata = &_exports_lsd_error_alert_clientData;
}
/* Name: _exports_dht_lookup, Type: p_libtorrent__dht_lookup, Dtor: _wrap_delete_dht_lookup */
v8::Handle<v8::FunctionTemplate> _exports_dht_lookup_class = SWIGV8_CreateClassTemplate("_exports_dht_lookup");
SWIGV8_SET_CLASS_TEMPL(_exports_dht_lookup_clientData.class_templ, _exports_dht_lookup_class);
_exports_dht_lookup_clientData.dtor = _wrap_delete_dht_lookup;
if (SWIGTYPE_p_libtorrent__dht_lookup->clientdata == 0) {
  SWIGTYPE_p_libtorrent__dht_lookup->clientdata = &_exports_dht_lookup_clientData;
}
/* Name: _exports_dht_routing_bucket, Type: p_libtorrent__dht_routing_bucket, Dtor: _wrap_delete_dht_routing_bucket */
v8::Handle<v8::FunctionTemplate> _exports_dht_routing_bucket_class = SWIGV8_CreateClassTemplate("_exports_dht_routing_bucket");
SWIGV8_SET_CLASS_TEMPL(_exports_dht_routing_bucket_clientData.class_templ, _exports_dht_routing_bucket_class);
_exports_dht_routing_bucket_clientData.dtor = _wrap_delete_dht_routing_bucket;
if (SWIGTYPE_p_libtorrent__dht_routing_bucket->clientdata == 0) {
  SWIGTYPE_p_libtorrent__dht_routing_bucket->clientdata = &_exports_dht_routing_bucket_clientData;
}
/* Name: _exports_dht_stats_alert, Type: p_libtorrent__dht_stats_alert, Dtor: _wrap_delete_dht_stats_alert */
v8::Handle<v8::FunctionTemplate> _exports_dht_stats_alert_class = SWIGV8_CreateClassTemplate("_exports_dht_stats_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_dht_stats_alert_clientData.class_templ, _exports_dht_stats_alert_class);
_exports_dht_stats_alert_clientData.dtor = _wrap_delete_dht_stats_alert;
if (SWIGTYPE_p_libtorrent__dht_stats_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__dht_stats_alert->clientdata = &_exports_dht_stats_alert_clientData;
}
/* Name: _exports_incoming_request_alert, Type: p_libtorrent__incoming_request_alert, Dtor: _wrap_delete_incoming_request_alert */
v8::Handle<v8::FunctionTemplate> _exports_incoming_request_alert_class = SWIGV8_CreateClassTemplate("_exports_incoming_request_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_incoming_request_alert_clientData.class_templ, _exports_incoming_request_alert_class);
_exports_incoming_request_alert_clientData.dtor = _wrap_delete_incoming_request_alert;
if (SWIGTYPE_p_libtorrent__incoming_request_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__incoming_request_alert->clientdata = &_exports_incoming_request_alert_clientData;
}
/* Name: _exports_dht_log_alert, Type: p_libtorrent__dht_log_alert, Dtor: _wrap_delete_dht_log_alert */
v8::Handle<v8::FunctionTemplate> _exports_dht_log_alert_class = SWIGV8_CreateClassTemplate("_exports_dht_log_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_dht_log_alert_clientData.class_templ, _exports_dht_log_alert_class);
_exports_dht_log_alert_clientData.dtor = _wrap_delete_dht_log_alert;
if (SWIGTYPE_p_libtorrent__dht_log_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__dht_log_alert->clientdata = &_exports_dht_log_alert_clientData;
}
/* Name: _exports_dht_pkt_alert, Type: p_libtorrent__dht_pkt_alert, Dtor: _wrap_delete_dht_pkt_alert */
v8::Handle<v8::FunctionTemplate> _exports_dht_pkt_alert_class = SWIGV8_CreateClassTemplate("_exports_dht_pkt_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_dht_pkt_alert_clientData.class_templ, _exports_dht_pkt_alert_class);
_exports_dht_pkt_alert_clientData.dtor = _wrap_delete_dht_pkt_alert;
if (SWIGTYPE_p_libtorrent__dht_pkt_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__dht_pkt_alert->clientdata = &_exports_dht_pkt_alert_clientData;
}
/* Name: _exports_dht_get_peers_reply_alert, Type: p_libtorrent__dht_get_peers_reply_alert, Dtor: _wrap_delete_dht_get_peers_reply_alert */
v8::Handle<v8::FunctionTemplate> _exports_dht_get_peers_reply_alert_class = SWIGV8_CreateClassTemplate("_exports_dht_get_peers_reply_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_dht_get_peers_reply_alert_clientData.class_templ, _exports_dht_get_peers_reply_alert_class);
_exports_dht_get_peers_reply_alert_clientData.dtor = _wrap_delete_dht_get_peers_reply_alert;
if (SWIGTYPE_p_libtorrent__dht_get_peers_reply_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__dht_get_peers_reply_alert->clientdata = &_exports_dht_get_peers_reply_alert_clientData;
}
/* Name: _exports_dht_direct_response_alert, Type: p_libtorrent__dht_direct_response_alert, Dtor: _wrap_delete_dht_direct_response_alert */
v8::Handle<v8::FunctionTemplate> _exports_dht_direct_response_alert_class = SWIGV8_CreateClassTemplate("_exports_dht_direct_response_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_dht_direct_response_alert_clientData.class_templ, _exports_dht_direct_response_alert_class);
_exports_dht_direct_response_alert_clientData.dtor = _wrap_delete_dht_direct_response_alert;
if (SWIGTYPE_p_libtorrent__dht_direct_response_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__dht_direct_response_alert->clientdata = &_exports_dht_direct_response_alert_clientData;
}
/* Name: _exports_picker_log_alert, Type: p_libtorrent__picker_log_alert, Dtor: _wrap_delete_picker_log_alert */
v8::Handle<v8::FunctionTemplate> _exports_picker_log_alert_class = SWIGV8_CreateClassTemplate("_exports_picker_log_alert");
SWIGV8_SET_CLASS_TEMPL(_exports_picker_log_alert_clientData.class_templ, _exports_picker_log_alert_class);
_exports_picker_log_alert_clientData.dtor = _wrap_delete_picker_log_alert;
if (SWIGTYPE_p_libtorrent__picker_log_alert->clientdata == 0) {
  SWIGTYPE_p_libtorrent__picker_log_alert->clientdata = &_exports_picker_log_alert_clientData;
}
/* Name: _exports_peer_info, Type: p_libtorrent__peer_info, Dtor: _wrap_delete_peer_info */
v8::Handle<v8::FunctionTemplate> _exports_peer_info_class = SWIGV8_CreateClassTemplate("_exports_peer_info");
SWIGV8_SET_CLASS_TEMPL(_exports_peer_info_clientData.class_templ, _exports_peer_info_class);
_exports_peer_info_clientData.dtor = _wrap_delete_peer_info;
if (SWIGTYPE_p_libtorrent__peer_info->clientdata == 0) {
  SWIGTYPE_p_libtorrent__peer_info->clientdata = &_exports_peer_info_clientData;
}
/* Name: _exports_dht_settings, Type: p_libtorrent__dht_settings, Dtor: _wrap_delete_dht_settings */
v8::Handle<v8::FunctionTemplate> _exports_dht_settings_class = SWIGV8_CreateClassTemplate("_exports_dht_settings");
SWIGV8_SET_CLASS_TEMPL(_exports_dht_settings_clientData.class_templ, _exports_dht_settings_class);
_exports_dht_settings_clientData.dtor = _wrap_delete_dht_settings;
if (SWIGTYPE_p_libtorrent__dht_settings->clientdata == 0) {
  SWIGTYPE_p_libtorrent__dht_settings->clientdata = &_exports_dht_settings_clientData;
}
/* Name: _exports_settings_pack, Type: p_libtorrent__settings_pack, Dtor: _wrap_delete_settings_pack */
v8::Handle<v8::FunctionTemplate> _exports_settings_pack_class = SWIGV8_CreateClassTemplate("_exports_settings_pack");
SWIGV8_SET_CLASS_TEMPL(_exports_settings_pack_clientData.class_templ, _exports_settings_pack_class);
_exports_settings_pack_clientData.dtor = _wrap_delete_settings_pack;
if (SWIGTYPE_p_libtorrent__settings_pack->clientdata == 0) {
  SWIGTYPE_p_libtorrent__settings_pack->clientdata = &_exports_settings_pack_clientData;
}
/* Name: _exports_peer_class_info, Type: p_libtorrent__peer_class_info, Dtor: _wrap_delete_peer_class_info */
v8::Handle<v8::FunctionTemplate> _exports_peer_class_info_class = SWIGV8_CreateClassTemplate("_exports_peer_class_info");
SWIGV8_SET_CLASS_TEMPL(_exports_peer_class_info_clientData.class_templ, _exports_peer_class_info_class);
_exports_peer_class_info_clientData.dtor = _wrap_delete_peer_class_info;
if (SWIGTYPE_p_libtorrent__peer_class_info->clientdata == 0) {
  SWIGTYPE_p_libtorrent__peer_class_info->clientdata = &_exports_peer_class_info_clientData;
}
/* Name: _exports_peer_class_type_filter, Type: p_libtorrent__peer_class_type_filter, Dtor: _wrap_delete_peer_class_type_filter */
v8::Handle<v8::FunctionTemplate> _exports_peer_class_type_filter_class = SWIGV8_CreateClassTemplate("_exports_peer_class_type_filter");
SWIGV8_SET_CLASS_TEMPL(_exports_peer_class_type_filter_clientData.class_templ, _exports_peer_class_type_filter_class);
_exports_peer_class_type_filter_clientData.dtor = _wrap_delete_peer_class_type_filter;
if (SWIGTYPE_p_libtorrent__peer_class_type_filter->clientdata == 0) {
  SWIGTYPE_p_libtorrent__peer_class_type_filter->clientdata = &_exports_peer_class_type_filter_clientData;
}
/* Name: _exports_session_handle, Type: p_libtorrent__session_handle, Dtor: _wrap_delete_session_handle */
v8::Handle<v8::FunctionTemplate> _exports_session_handle_class = SWIGV8_CreateClassTemplate("_exports_session_handle");
SWIGV8_SET_CLASS_TEMPL(_exports_session_handle_clientData.class_templ, _exports_session_handle_class);
_exports_session_handle_clientData.dtor = _wrap_delete_session_handle;
if (SWIGTYPE_p_libtorrent__session_handle->clientdata == 0) {
  SWIGTYPE_p_libtorrent__session_handle->clientdata = &_exports_session_handle_clientData;
}
/* Name: _exports_dht_state, Type: p_libtorrent__dht__dht_state, Dtor: _wrap_delete_dht_state */
v8::Handle<v8::FunctionTemplate> _exports_dht_state_class = SWIGV8_CreateClassTemplate("_exports_dht_state");
SWIGV8_SET_CLASS_TEMPL(_exports_dht_state_clientData.class_templ, _exports_dht_state_class);
_exports_dht_state_clientData.dtor = _wrap_delete_dht_state;
if (SWIGTYPE_p_libtorrent__dht__dht_state->clientdata == 0) {
  SWIGTYPE_p_libtorrent__dht__dht_state->clientdata = &_exports_dht_state_clientData;
}
/* Name: _exports_session_proxy, Type: p_libtorrent__session_proxy, Dtor: _wrap_delete_session_proxy */
v8::Handle<v8::FunctionTemplate> _exports_session_proxy_class = SWIGV8_CreateClassTemplate("_exports_session_proxy");
SWIGV8_SET_CLASS_TEMPL(_exports_session_proxy_clientData.class_templ, _exports_session_proxy_class);
_exports_session_proxy_clientData.dtor = _wrap_delete_session_proxy;
if (SWIGTYPE_p_libtorrent__session_proxy->clientdata == 0) {
  SWIGTYPE_p_libtorrent__session_proxy->clientdata = &_exports_session_proxy_clientData;
}
/* Name: _exports_session_params, Type: p_libtorrent__session_params, Dtor: _wrap_delete_session_params */
v8::Handle<v8::FunctionTemplate> _exports_session_params_class = SWIGV8_CreateClassTemplate("_exports_session_params");
SWIGV8_SET_CLASS_TEMPL(_exports_session_params_clientData.class_templ, _exports_session_params_class);
_exports_session_params_clientData.dtor = _wrap_delete_session_params;
if (SWIGTYPE_p_libtorrent__session_params->clientdata == 0) {
  SWIGTYPE_p_libtorrent__session_params->clientdata = &_exports_session_params_clientData;
}
/* Name: _exports_session, Type: p_libtorrent__session, Dtor: _wrap_delete_session */
v8::Handle<v8::FunctionTemplate> _exports_session_class = SWIGV8_CreateClassTemplate("_exports_session");
SWIGV8_SET_CLASS_TEMPL(_exports_session_clientData.class_templ, _exports_session_class);
_exports_session_clientData.dtor = _wrap_delete_session;
if (SWIGTYPE_p_libtorrent__session->clientdata == 0) {
  SWIGTYPE_p_libtorrent__session->clientdata = &_exports_session_clientData;
}
/* Name: _exports_peer_connection_handle, Type: p_libtorrent__peer_connection_handle, Dtor: _wrap_delete_peer_connection_handle */
v8::Handle<v8::FunctionTemplate> _exports_peer_connection_handle_class = SWIGV8_CreateClassTemplate("_exports_peer_connection_handle");
SWIGV8_SET_CLASS_TEMPL(_exports_peer_connection_handle_clientData.class_templ, _exports_peer_connection_handle_class);
_exports_peer_connection_handle_clientData.dtor = _wrap_delete_peer_connection_handle;
if (SWIGTYPE_p_libtorrent__peer_connection_handle->clientdata == 0) {
  SWIGTYPE_p_libtorrent__peer_connection_handle->clientdata = &_exports_peer_connection_handle_clientData;
}
/* Name: _exports_bt_peer_connection_handle, Type: p_libtorrent__bt_peer_connection_handle, Dtor: _wrap_delete_bt_peer_connection_handle */
v8::Handle<v8::FunctionTemplate> _exports_bt_peer_connection_handle_class = SWIGV8_CreateClassTemplate("_exports_bt_peer_connection_handle");
SWIGV8_SET_CLASS_TEMPL(_exports_bt_peer_connection_handle_clientData.class_templ, _exports_bt_peer_connection_handle_class);
_exports_bt_peer_connection_handle_clientData.dtor = _wrap_delete_bt_peer_connection_handle;
if (SWIGTYPE_p_libtorrent__bt_peer_connection_handle->clientdata == 0) {
  SWIGTYPE_p_libtorrent__bt_peer_connection_handle->clientdata = &_exports_bt_peer_connection_handle_clientData;
}
/* Name: _exports_ip_filter, Type: p_libtorrent__ip_filter, Dtor: _wrap_delete_ip_filter */
v8::Handle<v8::FunctionTemplate> _exports_ip_filter_class = SWIGV8_CreateClassTemplate("_exports_ip_filter");
SWIGV8_SET_CLASS_TEMPL(_exports_ip_filter_clientData.class_templ, _exports_ip_filter_class);
_exports_ip_filter_clientData.dtor = _wrap_delete_ip_filter;
if (SWIGTYPE_p_libtorrent__ip_filter->clientdata == 0) {
  SWIGTYPE_p_libtorrent__ip_filter->clientdata = &_exports_ip_filter_clientData;
}
/* Name: _exports_port_filter, Type: p_libtorrent__port_filter, Dtor: _wrap_delete_port_filter */
v8::Handle<v8::FunctionTemplate> _exports_port_filter_class = SWIGV8_CreateClassTemplate("_exports_port_filter");
SWIGV8_SET_CLASS_TEMPL(_exports_port_filter_clientData.class_templ, _exports_port_filter_class);
_exports_port_filter_clientData.dtor = _wrap_delete_port_filter;
if (SWIGTYPE_p_libtorrent__port_filter->clientdata == 0) {
  SWIGTYPE_p_libtorrent__port_filter->clientdata = &_exports_port_filter_clientData;
}
/* Name: _exports_bdecode_node, Type: p_libtorrent__bdecode_node, Dtor: _wrap_delete_bdecode_node */
v8::Handle<v8::FunctionTemplate> _exports_bdecode_node_class = SWIGV8_CreateClassTemplate("_exports_bdecode_node");
SWIGV8_SET_CLASS_TEMPL(_exports_bdecode_node_clientData.class_templ, _exports_bdecode_node_class);
_exports_bdecode_node_clientData.dtor = _wrap_delete_bdecode_node;
if (SWIGTYPE_p_libtorrent__bdecode_node->clientdata == 0) {
  SWIGTYPE_p_libtorrent__bdecode_node->clientdata = &_exports_bdecode_node_clientData;
}
/* Name: _exports_create_torrent, Type: p_libtorrent__create_torrent, Dtor: _wrap_delete_create_torrent */
v8::Handle<v8::FunctionTemplate> _exports_create_torrent_class = SWIGV8_CreateClassTemplate("_exports_create_torrent");
SWIGV8_SET_CLASS_TEMPL(_exports_create_torrent_clientData.class_templ, _exports_create_torrent_class);
_exports_create_torrent_clientData.dtor = _wrap_delete_create_torrent;
if (SWIGTYPE_p_libtorrent__create_torrent->clientdata == 0) {
  SWIGTYPE_p_libtorrent__create_torrent->clientdata = &_exports_create_torrent_clientData;
}
/* Name: _exports_announce_entry, Type: p_libtorrent__announce_entry, Dtor: _wrap_delete_announce_entry */
v8::Handle<v8::FunctionTemplate> _exports_announce_entry_class = SWIGV8_CreateClassTemplate("_exports_announce_entry");
SWIGV8_SET_CLASS_TEMPL(_exports_announce_entry_clientData.class_templ, _exports_announce_entry_class);
_exports_announce_entry_clientData.dtor = _wrap_delete_announce_entry;
if (SWIGTYPE_p_libtorrent__announce_entry->clientdata == 0) {
  SWIGTYPE_p_libtorrent__announce_entry->clientdata = &_exports_announce_entry_clientData;
}
/* Name: _exports_torrent_status, Type: p_libtorrent__torrent_status, Dtor: _wrap_delete_torrent_status */
v8::Handle<v8::FunctionTemplate> _exports_torrent_status_class = SWIGV8_CreateClassTemplate("_exports_torrent_status");
SWIGV8_SET_CLASS_TEMPL(_exports_torrent_status_clientData.class_templ, _exports_torrent_status_class);
_exports_torrent_status_clientData.dtor = _wrap_delete_torrent_status;
if (SWIGTYPE_p_libtorrent__torrent_status->clientdata == 0) {
  SWIGTYPE_p_libtorrent__torrent_status->clientdata = &_exports_torrent_status_clientData;
}
/* Name: _exports_alert_notify_callback, Type: p_alert_notify_callback, Dtor: _wrap_delete_alert_notify_callback */
v8::Handle<v8::FunctionTemplate> _exports_alert_notify_callback_class = SWIGV8_CreateClassTemplate("_exports_alert_notify_callback");
SWIGV8_SET_CLASS_TEMPL(_exports_alert_notify_callback_clientData.class_templ, _exports_alert_notify_callback_class);
_exports_alert_notify_callback_clientData.dtor = _wrap_delete_alert_notify_callback;
if (SWIGTYPE_p_alert_notify_callback->clientdata == 0) {
  SWIGTYPE_p_alert_notify_callback->clientdata = &_exports_alert_notify_callback_clientData;
}
/* Name: _exports_add_files_listener, Type: p_add_files_listener, Dtor: _wrap_delete_add_files_listener */
v8::Handle<v8::FunctionTemplate> _exports_add_files_listener_class = SWIGV8_CreateClassTemplate("_exports_add_files_listener");
SWIGV8_SET_CLASS_TEMPL(_exports_add_files_listener_clientData.class_templ, _exports_add_files_listener_class);
_exports_add_files_listener_clientData.dtor = _wrap_delete_add_files_listener;
if (SWIGTYPE_p_add_files_listener->clientdata == 0) {
  SWIGTYPE_p_add_files_listener->clientdata = &_exports_add_files_listener_clientData;
}
/* Name: _exports_set_piece_hashes_listener, Type: p_set_piece_hashes_listener, Dtor: _wrap_delete_set_piece_hashes_listener */
v8::Handle<v8::FunctionTemplate> _exports_set_piece_hashes_listener_class = SWIGV8_CreateClassTemplate("_exports_set_piece_hashes_listener");
SWIGV8_SET_CLASS_TEMPL(_exports_set_piece_hashes_listener_clientData.class_templ, _exports_set_piece_hashes_listener_class);
_exports_set_piece_hashes_listener_clientData.dtor = _wrap_delete_set_piece_hashes_listener;
if (SWIGTYPE_p_set_piece_hashes_listener->clientdata == 0) {
  SWIGTYPE_p_set_piece_hashes_listener->clientdata = &_exports_set_piece_hashes_listener_clientData;
}
/* Name: _exports_swig_plugin, Type: p_swig_plugin, Dtor: _wrap_delete_swig_plugin */
v8::Handle<v8::FunctionTemplate> _exports_swig_plugin_class = SWIGV8_CreateClassTemplate("_exports_swig_plugin");
SWIGV8_SET_CLASS_TEMPL(_exports_swig_plugin_clientData.class_templ, _exports_swig_plugin_class);
_exports_swig_plugin_clientData.dtor = _wrap_delete_swig_plugin;
if (SWIGTYPE_p_swig_plugin->clientdata == 0) {
  SWIGTYPE_p_swig_plugin->clientdata = &_exports_swig_plugin_clientData;
}
/* Name: _exports_posix_stat_t, Type: p_posix_stat_t, Dtor: _wrap_delete_posix_stat_t */
v8::Handle<v8::FunctionTemplate> _exports_posix_stat_t_class = SWIGV8_CreateClassTemplate("_exports_posix_stat_t");
SWIGV8_SET_CLASS_TEMPL(_exports_posix_stat_t_clientData.class_templ, _exports_posix_stat_t_class);
_exports_posix_stat_t_clientData.dtor = _wrap_delete_posix_stat_t;
if (SWIGTYPE_p_posix_stat_t->clientdata == 0) {
  SWIGTYPE_p_posix_stat_t->clientdata = &_exports_posix_stat_t_clientData;
}
/* Name: _exports_posix_wrapper, Type: p_posix_wrapper, Dtor: _wrap_delete_posix_wrapper */
v8::Handle<v8::FunctionTemplate> _exports_posix_wrapper_class = SWIGV8_CreateClassTemplate("_exports_posix_wrapper");
SWIGV8_SET_CLASS_TEMPL(_exports_posix_wrapper_clientData.class_templ, _exports_posix_wrapper_class);
_exports_posix_wrapper_clientData.dtor = _wrap_delete_posix_wrapper;
if (SWIGTYPE_p_posix_wrapper->clientdata == 0) {
  SWIGTYPE_p_posix_wrapper->clientdata = &_exports_posix_wrapper_clientData;
}


  /* register wrapper functions */
  SWIGV8_AddMemberVariable(_exports_int_int_pair_class, "first", _wrap_int_int_pair_first_get, _wrap_int_int_pair_first_set);
SWIGV8_AddMemberVariable(_exports_int_int_pair_class, "second", _wrap_int_int_pair_second_get, _wrap_int_int_pair_second_set);
SWIGV8_AddMemberVariable(_exports_string_int_pair_class, "first", _wrap_string_int_pair_first_get, _wrap_string_int_pair_first_set);
SWIGV8_AddMemberVariable(_exports_string_int_pair_class, "second", _wrap_string_int_pair_second_get, _wrap_string_int_pair_second_set);
SWIGV8_AddMemberVariable(_exports_string_string_pair_class, "first", _wrap_string_string_pair_first_get, _wrap_string_string_pair_first_set);
SWIGV8_AddMemberVariable(_exports_string_string_pair_class, "second", _wrap_string_string_pair_second_get, _wrap_string_string_pair_second_set);
SWIGV8_AddMemberVariable(_exports_string_view_bdecode_node_pair_class, "first", _wrap_string_view_bdecode_node_pair_first_get, _wrap_string_view_bdecode_node_pair_first_set);
SWIGV8_AddMemberVariable(_exports_string_view_bdecode_node_pair_class, "second", _wrap_string_view_bdecode_node_pair_second_get, _wrap_string_view_bdecode_node_pair_second_set);
SWIGV8_AddMemberVariable(_exports_byte_vectors_pair_class, "first", _wrap_byte_vectors_pair_first_get, _wrap_byte_vectors_pair_first_set);
SWIGV8_AddMemberVariable(_exports_byte_vectors_pair_class, "second", _wrap_byte_vectors_pair_second_get, _wrap_byte_vectors_pair_second_set);
SWIGV8_AddMemberFunction(_exports_byte_vector_class, "size", _wrap_byte_vector_size);
SWIGV8_AddMemberFunction(_exports_byte_vector_class, "capacity", _wrap_byte_vector_capacity);
SWIGV8_AddMemberFunction(_exports_byte_vector_class, "reserve", _wrap_byte_vector_reserve);
SWIGV8_AddMemberFunction(_exports_byte_vector_class, "empty", _wrap_byte_vector_empty);
SWIGV8_AddMemberFunction(_exports_byte_vector_class, "clear", _wrap_byte_vector_clear);
SWIGV8_AddMemberFunction(_exports_byte_vector_class, "push_back", _wrap_byte_vector_push_back);
SWIGV8_AddMemberFunction(_exports_byte_vector_class, "resize", _wrap_byte_vector_resize);
SWIGV8_AddMemberFunction(_exports_byte_vector_class, "get", _wrap_byte_vector_get);
SWIGV8_AddMemberFunction(_exports_byte_vector_class, "set", _wrap_byte_vector_set);
SWIGV8_AddMemberFunction(_exports_string_vector_class, "size", _wrap_string_vector_size);
SWIGV8_AddMemberFunction(_exports_string_vector_class, "capacity", _wrap_string_vector_capacity);
SWIGV8_AddMemberFunction(_exports_string_vector_class, "reserve", _wrap_string_vector_reserve);
SWIGV8_AddMemberFunction(_exports_string_vector_class, "empty", _wrap_string_vector_empty);
SWIGV8_AddMemberFunction(_exports_string_vector_class, "clear", _wrap_string_vector_clear);
SWIGV8_AddMemberFunction(_exports_string_vector_class, "push_back", _wrap_string_vector_push_back);
SWIGV8_AddMemberFunction(_exports_string_vector_class, "get", _wrap_string_vector_get);
SWIGV8_AddMemberFunction(_exports_string_vector_class, "set", _wrap_string_vector_set);
SWIGV8_AddMemberFunction(_exports_string_int_pair_vector_class, "size", _wrap_string_int_pair_vector_size);
SWIGV8_AddMemberFunction(_exports_string_int_pair_vector_class, "capacity", _wrap_string_int_pair_vector_capacity);
SWIGV8_AddMemberFunction(_exports_string_int_pair_vector_class, "reserve", _wrap_string_int_pair_vector_reserve);
SWIGV8_AddMemberFunction(_exports_string_int_pair_vector_class, "empty", _wrap_string_int_pair_vector_empty);
SWIGV8_AddMemberFunction(_exports_string_int_pair_vector_class, "clear", _wrap_string_int_pair_vector_clear);
SWIGV8_AddMemberFunction(_exports_string_int_pair_vector_class, "push_back", _wrap_string_int_pair_vector_push_back);
SWIGV8_AddMemberFunction(_exports_string_int_pair_vector_class, "get", _wrap_string_int_pair_vector_get);
SWIGV8_AddMemberFunction(_exports_string_int_pair_vector_class, "set", _wrap_string_int_pair_vector_set);
SWIGV8_AddMemberFunction(_exports_string_string_pair_vector_class, "size", _wrap_string_string_pair_vector_size);
SWIGV8_AddMemberFunction(_exports_string_string_pair_vector_class, "capacity", _wrap_string_string_pair_vector_capacity);
SWIGV8_AddMemberFunction(_exports_string_string_pair_vector_class, "reserve", _wrap_string_string_pair_vector_reserve);
SWIGV8_AddMemberFunction(_exports_string_string_pair_vector_class, "empty", _wrap_string_string_pair_vector_empty);
SWIGV8_AddMemberFunction(_exports_string_string_pair_vector_class, "clear", _wrap_string_string_pair_vector_clear);
SWIGV8_AddMemberFunction(_exports_string_string_pair_vector_class, "push_back", _wrap_string_string_pair_vector_push_back);
SWIGV8_AddMemberFunction(_exports_string_string_pair_vector_class, "get", _wrap_string_string_pair_vector_get);
SWIGV8_AddMemberFunction(_exports_string_string_pair_vector_class, "set", _wrap_string_string_pair_vector_set);
SWIGV8_AddMemberFunction(_exports_int_int_pair_vector_class, "size", _wrap_int_int_pair_vector_size);
SWIGV8_AddMemberFunction(_exports_int_int_pair_vector_class, "capacity", _wrap_int_int_pair_vector_capacity);
SWIGV8_AddMemberFunction(_exports_int_int_pair_vector_class, "reserve", _wrap_int_int_pair_vector_reserve);
SWIGV8_AddMemberFunction(_exports_int_int_pair_vector_class, "empty", _wrap_int_int_pair_vector_empty);
SWIGV8_AddMemberFunction(_exports_int_int_pair_vector_class, "clear", _wrap_int_int_pair_vector_clear);
SWIGV8_AddMemberFunction(_exports_int_int_pair_vector_class, "push_back", _wrap_int_int_pair_vector_push_back);
SWIGV8_AddMemberFunction(_exports_int_int_pair_vector_class, "get", _wrap_int_int_pair_vector_get);
SWIGV8_AddMemberFunction(_exports_int_int_pair_vector_class, "set", _wrap_int_int_pair_vector_set);
SWIGV8_AddMemberFunction(_exports_int_vector_class, "size", _wrap_int_vector_size);
SWIGV8_AddMemberFunction(_exports_int_vector_class, "capacity", _wrap_int_vector_capacity);
SWIGV8_AddMemberFunction(_exports_int_vector_class, "reserve", _wrap_int_vector_reserve);
SWIGV8_AddMemberFunction(_exports_int_vector_class, "empty", _wrap_int_vector_empty);
SWIGV8_AddMemberFunction(_exports_int_vector_class, "clear", _wrap_int_vector_clear);
SWIGV8_AddMemberFunction(_exports_int_vector_class, "push_back", _wrap_int_vector_push_back);
SWIGV8_AddMemberFunction(_exports_int_vector_class, "get", _wrap_int_vector_get);
SWIGV8_AddMemberFunction(_exports_int_vector_class, "set", _wrap_int_vector_set);
SWIGV8_AddMemberFunction(_exports_int64_vector_class, "size", _wrap_int64_vector_size);
SWIGV8_AddMemberFunction(_exports_int64_vector_class, "capacity", _wrap_int64_vector_capacity);
SWIGV8_AddMemberFunction(_exports_int64_vector_class, "reserve", _wrap_int64_vector_reserve);
SWIGV8_AddMemberFunction(_exports_int64_vector_class, "empty", _wrap_int64_vector_empty);
SWIGV8_AddMemberFunction(_exports_int64_vector_class, "clear", _wrap_int64_vector_clear);
SWIGV8_AddMemberFunction(_exports_int64_vector_class, "push_back", _wrap_int64_vector_push_back);
SWIGV8_AddMemberFunction(_exports_int64_vector_class, "get", _wrap_int64_vector_get);
SWIGV8_AddMemberFunction(_exports_int64_vector_class, "set", _wrap_int64_vector_set);
SWIGV8_AddMemberFunction(_exports_sha1_hash_vector_class, "size", _wrap_sha1_hash_vector_size);
SWIGV8_AddMemberFunction(_exports_sha1_hash_vector_class, "capacity", _wrap_sha1_hash_vector_capacity);
SWIGV8_AddMemberFunction(_exports_sha1_hash_vector_class, "reserve", _wrap_sha1_hash_vector_reserve);
SWIGV8_AddMemberFunction(_exports_sha1_hash_vector_class, "empty", _wrap_sha1_hash_vector_empty);
SWIGV8_AddMemberFunction(_exports_sha1_hash_vector_class, "clear", _wrap_sha1_hash_vector_clear);
SWIGV8_AddMemberFunction(_exports_sha1_hash_vector_class, "push_back", _wrap_sha1_hash_vector_push_back);
SWIGV8_AddMemberFunction(_exports_sha1_hash_vector_class, "get", _wrap_sha1_hash_vector_get);
SWIGV8_AddMemberFunction(_exports_sha1_hash_vector_class, "set", _wrap_sha1_hash_vector_set);
SWIGV8_AddMemberFunction(_exports_torrent_status_vector_class, "size", _wrap_torrent_status_vector_size);
SWIGV8_AddMemberFunction(_exports_torrent_status_vector_class, "capacity", _wrap_torrent_status_vector_capacity);
SWIGV8_AddMemberFunction(_exports_torrent_status_vector_class, "reserve", _wrap_torrent_status_vector_reserve);
SWIGV8_AddMemberFunction(_exports_torrent_status_vector_class, "empty", _wrap_torrent_status_vector_empty);
SWIGV8_AddMemberFunction(_exports_torrent_status_vector_class, "clear", _wrap_torrent_status_vector_clear);
SWIGV8_AddMemberFunction(_exports_torrent_status_vector_class, "push_back", _wrap_torrent_status_vector_push_back);
SWIGV8_AddMemberFunction(_exports_torrent_status_vector_class, "get", _wrap_torrent_status_vector_get);
SWIGV8_AddMemberFunction(_exports_torrent_status_vector_class, "set", _wrap_torrent_status_vector_set);
SWIGV8_AddMemberFunction(_exports_torrent_handle_vector_class, "size", _wrap_torrent_handle_vector_size);
SWIGV8_AddMemberFunction(_exports_torrent_handle_vector_class, "capacity", _wrap_torrent_handle_vector_capacity);
SWIGV8_AddMemberFunction(_exports_torrent_handle_vector_class, "reserve", _wrap_torrent_handle_vector_reserve);
SWIGV8_AddMemberFunction(_exports_torrent_handle_vector_class, "empty", _wrap_torrent_handle_vector_empty);
SWIGV8_AddMemberFunction(_exports_torrent_handle_vector_class, "clear", _wrap_torrent_handle_vector_clear);
SWIGV8_AddMemberFunction(_exports_torrent_handle_vector_class, "push_back", _wrap_torrent_handle_vector_push_back);
SWIGV8_AddMemberFunction(_exports_torrent_handle_vector_class, "get", _wrap_torrent_handle_vector_get);
SWIGV8_AddMemberFunction(_exports_torrent_handle_vector_class, "set", _wrap_torrent_handle_vector_set);
SWIGV8_AddMemberFunction(_exports_file_slice_vector_class, "size", _wrap_file_slice_vector_size);
SWIGV8_AddMemberFunction(_exports_file_slice_vector_class, "capacity", _wrap_file_slice_vector_capacity);
SWIGV8_AddMemberFunction(_exports_file_slice_vector_class, "reserve", _wrap_file_slice_vector_reserve);
SWIGV8_AddMemberFunction(_exports_file_slice_vector_class, "empty", _wrap_file_slice_vector_empty);
SWIGV8_AddMemberFunction(_exports_file_slice_vector_class, "clear", _wrap_file_slice_vector_clear);
SWIGV8_AddMemberFunction(_exports_file_slice_vector_class, "push_back", _wrap_file_slice_vector_push_back);
SWIGV8_AddMemberFunction(_exports_file_slice_vector_class, "get", _wrap_file_slice_vector_get);
SWIGV8_AddMemberFunction(_exports_file_slice_vector_class, "set", _wrap_file_slice_vector_set);
SWIGV8_AddMemberFunction(_exports_dht_routing_bucket_vector_class, "size", _wrap_dht_routing_bucket_vector_size);
SWIGV8_AddMemberFunction(_exports_dht_routing_bucket_vector_class, "capacity", _wrap_dht_routing_bucket_vector_capacity);
SWIGV8_AddMemberFunction(_exports_dht_routing_bucket_vector_class, "reserve", _wrap_dht_routing_bucket_vector_reserve);
SWIGV8_AddMemberFunction(_exports_dht_routing_bucket_vector_class, "empty", _wrap_dht_routing_bucket_vector_empty);
SWIGV8_AddMemberFunction(_exports_dht_routing_bucket_vector_class, "clear", _wrap_dht_routing_bucket_vector_clear);
SWIGV8_AddMemberFunction(_exports_dht_routing_bucket_vector_class, "push_back", _wrap_dht_routing_bucket_vector_push_back);
SWIGV8_AddMemberFunction(_exports_dht_routing_bucket_vector_class, "get", _wrap_dht_routing_bucket_vector_get);
SWIGV8_AddMemberFunction(_exports_dht_routing_bucket_vector_class, "set", _wrap_dht_routing_bucket_vector_set);
SWIGV8_AddMemberFunction(_exports_dht_lookup_vector_class, "size", _wrap_dht_lookup_vector_size);
SWIGV8_AddMemberFunction(_exports_dht_lookup_vector_class, "capacity", _wrap_dht_lookup_vector_capacity);
SWIGV8_AddMemberFunction(_exports_dht_lookup_vector_class, "reserve", _wrap_dht_lookup_vector_reserve);
SWIGV8_AddMemberFunction(_exports_dht_lookup_vector_class, "empty", _wrap_dht_lookup_vector_empty);
SWIGV8_AddMemberFunction(_exports_dht_lookup_vector_class, "clear", _wrap_dht_lookup_vector_clear);
SWIGV8_AddMemberFunction(_exports_dht_lookup_vector_class, "push_back", _wrap_dht_lookup_vector_push_back);
SWIGV8_AddMemberFunction(_exports_dht_lookup_vector_class, "get", _wrap_dht_lookup_vector_get);
SWIGV8_AddMemberFunction(_exports_dht_lookup_vector_class, "set", _wrap_dht_lookup_vector_set);
SWIGV8_AddMemberFunction(_exports_block_info_vector_class, "size", _wrap_block_info_vector_size);
SWIGV8_AddMemberFunction(_exports_block_info_vector_class, "capacity", _wrap_block_info_vector_capacity);
SWIGV8_AddMemberFunction(_exports_block_info_vector_class, "reserve", _wrap_block_info_vector_reserve);
SWIGV8_AddMemberFunction(_exports_block_info_vector_class, "empty", _wrap_block_info_vector_empty);
SWIGV8_AddMemberFunction(_exports_block_info_vector_class, "clear", _wrap_block_info_vector_clear);
SWIGV8_AddMemberFunction(_exports_block_info_vector_class, "push_back", _wrap_block_info_vector_push_back);
SWIGV8_AddMemberFunction(_exports_block_info_vector_class, "get", _wrap_block_info_vector_get);
SWIGV8_AddMemberFunction(_exports_block_info_vector_class, "set", _wrap_block_info_vector_set);
SWIGV8_AddMemberFunction(_exports_partial_piece_info_vector_class, "size", _wrap_partial_piece_info_vector_size);
SWIGV8_AddMemberFunction(_exports_partial_piece_info_vector_class, "capacity", _wrap_partial_piece_info_vector_capacity);
SWIGV8_AddMemberFunction(_exports_partial_piece_info_vector_class, "reserve", _wrap_partial_piece_info_vector_reserve);
SWIGV8_AddMemberFunction(_exports_partial_piece_info_vector_class, "empty", _wrap_partial_piece_info_vector_empty);
SWIGV8_AddMemberFunction(_exports_partial_piece_info_vector_class, "clear", _wrap_partial_piece_info_vector_clear);
SWIGV8_AddMemberFunction(_exports_partial_piece_info_vector_class, "push_back", _wrap_partial_piece_info_vector_push_back);
SWIGV8_AddMemberFunction(_exports_partial_piece_info_vector_class, "get", _wrap_partial_piece_info_vector_get);
SWIGV8_AddMemberFunction(_exports_partial_piece_info_vector_class, "set", _wrap_partial_piece_info_vector_set);
SWIGV8_AddMemberFunction(_exports_peer_info_vector_class, "size", _wrap_peer_info_vector_size);
SWIGV8_AddMemberFunction(_exports_peer_info_vector_class, "capacity", _wrap_peer_info_vector_capacity);
SWIGV8_AddMemberFunction(_exports_peer_info_vector_class, "reserve", _wrap_peer_info_vector_reserve);
SWIGV8_AddMemberFunction(_exports_peer_info_vector_class, "empty", _wrap_peer_info_vector_empty);
SWIGV8_AddMemberFunction(_exports_peer_info_vector_class, "clear", _wrap_peer_info_vector_clear);
SWIGV8_AddMemberFunction(_exports_peer_info_vector_class, "push_back", _wrap_peer_info_vector_push_back);
SWIGV8_AddMemberFunction(_exports_peer_info_vector_class, "get", _wrap_peer_info_vector_get);
SWIGV8_AddMemberFunction(_exports_peer_info_vector_class, "set", _wrap_peer_info_vector_set);
SWIGV8_AddMemberFunction(_exports_stats_metric_vector_class, "size", _wrap_stats_metric_vector_size);
SWIGV8_AddMemberFunction(_exports_stats_metric_vector_class, "capacity", _wrap_stats_metric_vector_capacity);
SWIGV8_AddMemberFunction(_exports_stats_metric_vector_class, "reserve", _wrap_stats_metric_vector_reserve);
SWIGV8_AddMemberFunction(_exports_stats_metric_vector_class, "empty", _wrap_stats_metric_vector_empty);
SWIGV8_AddMemberFunction(_exports_stats_metric_vector_class, "clear", _wrap_stats_metric_vector_clear);
SWIGV8_AddMemberFunction(_exports_stats_metric_vector_class, "push_back", _wrap_stats_metric_vector_push_back);
SWIGV8_AddMemberFunction(_exports_stats_metric_vector_class, "get", _wrap_stats_metric_vector_get);
SWIGV8_AddMemberFunction(_exports_stats_metric_vector_class, "set", _wrap_stats_metric_vector_set);
SWIGV8_AddMemberFunction(_exports_entry_vector_class, "size", _wrap_entry_vector_size);
SWIGV8_AddMemberFunction(_exports_entry_vector_class, "capacity", _wrap_entry_vector_capacity);
SWIGV8_AddMemberFunction(_exports_entry_vector_class, "reserve", _wrap_entry_vector_reserve);
SWIGV8_AddMemberFunction(_exports_entry_vector_class, "empty", _wrap_entry_vector_empty);
SWIGV8_AddMemberFunction(_exports_entry_vector_class, "clear", _wrap_entry_vector_clear);
SWIGV8_AddMemberFunction(_exports_entry_vector_class, "push_back", _wrap_entry_vector_push_back);
SWIGV8_AddMemberFunction(_exports_entry_vector_class, "get", _wrap_entry_vector_get);
SWIGV8_AddMemberFunction(_exports_entry_vector_class, "set", _wrap_entry_vector_set);
SWIGV8_AddMemberFunction(_exports_web_seed_entry_vector_class, "size", _wrap_web_seed_entry_vector_size);
SWIGV8_AddMemberFunction(_exports_web_seed_entry_vector_class, "capacity", _wrap_web_seed_entry_vector_capacity);
SWIGV8_AddMemberFunction(_exports_web_seed_entry_vector_class, "reserve", _wrap_web_seed_entry_vector_reserve);
SWIGV8_AddMemberFunction(_exports_web_seed_entry_vector_class, "empty", _wrap_web_seed_entry_vector_empty);
SWIGV8_AddMemberFunction(_exports_web_seed_entry_vector_class, "clear", _wrap_web_seed_entry_vector_clear);
SWIGV8_AddMemberFunction(_exports_web_seed_entry_vector_class, "push_back", _wrap_web_seed_entry_vector_push_back);
SWIGV8_AddMemberFunction(_exports_web_seed_entry_vector_class, "get", _wrap_web_seed_entry_vector_get);
SWIGV8_AddMemberFunction(_exports_web_seed_entry_vector_class, "set", _wrap_web_seed_entry_vector_set);
SWIGV8_AddMemberFunction(_exports_announce_entry_vector_class, "size", _wrap_announce_entry_vector_size);
SWIGV8_AddMemberFunction(_exports_announce_entry_vector_class, "capacity", _wrap_announce_entry_vector_capacity);
SWIGV8_AddMemberFunction(_exports_announce_entry_vector_class, "reserve", _wrap_announce_entry_vector_reserve);
SWIGV8_AddMemberFunction(_exports_announce_entry_vector_class, "empty", _wrap_announce_entry_vector_empty);
SWIGV8_AddMemberFunction(_exports_announce_entry_vector_class, "clear", _wrap_announce_entry_vector_clear);
SWIGV8_AddMemberFunction(_exports_announce_entry_vector_class, "push_back", _wrap_announce_entry_vector_push_back);
SWIGV8_AddMemberFunction(_exports_announce_entry_vector_class, "get", _wrap_announce_entry_vector_get);
SWIGV8_AddMemberFunction(_exports_announce_entry_vector_class, "set", _wrap_announce_entry_vector_set);
SWIGV8_AddMemberFunction(_exports_tcp_endpoint_vector_class, "size", _wrap_tcp_endpoint_vector_size);
SWIGV8_AddMemberFunction(_exports_tcp_endpoint_vector_class, "capacity", _wrap_tcp_endpoint_vector_capacity);
SWIGV8_AddMemberFunction(_exports_tcp_endpoint_vector_class, "reserve", _wrap_tcp_endpoint_vector_reserve);
SWIGV8_AddMemberFunction(_exports_tcp_endpoint_vector_class, "empty", _wrap_tcp_endpoint_vector_empty);
SWIGV8_AddMemberFunction(_exports_tcp_endpoint_vector_class, "clear", _wrap_tcp_endpoint_vector_clear);
SWIGV8_AddMemberFunction(_exports_tcp_endpoint_vector_class, "push_back", _wrap_tcp_endpoint_vector_push_back);
SWIGV8_AddMemberFunction(_exports_tcp_endpoint_vector_class, "get", _wrap_tcp_endpoint_vector_get);
SWIGV8_AddMemberFunction(_exports_tcp_endpoint_vector_class, "set", _wrap_tcp_endpoint_vector_set);
SWIGV8_AddMemberFunction(_exports_udp_endpoint_vector_class, "size", _wrap_udp_endpoint_vector_size);
SWIGV8_AddMemberFunction(_exports_udp_endpoint_vector_class, "capacity", _wrap_udp_endpoint_vector_capacity);
SWIGV8_AddMemberFunction(_exports_udp_endpoint_vector_class, "reserve", _wrap_udp_endpoint_vector_reserve);
SWIGV8_AddMemberFunction(_exports_udp_endpoint_vector_class, "empty", _wrap_udp_endpoint_vector_empty);
SWIGV8_AddMemberFunction(_exports_udp_endpoint_vector_class, "clear", _wrap_udp_endpoint_vector_clear);
SWIGV8_AddMemberFunction(_exports_udp_endpoint_vector_class, "push_back", _wrap_udp_endpoint_vector_push_back);
SWIGV8_AddMemberFunction(_exports_udp_endpoint_vector_class, "get", _wrap_udp_endpoint_vector_get);
SWIGV8_AddMemberFunction(_exports_udp_endpoint_vector_class, "set", _wrap_udp_endpoint_vector_set);
SWIGV8_AddMemberFunction(_exports_int_string_map_class, "size", _wrap_int_string_map_size);
SWIGV8_AddMemberFunction(_exports_int_string_map_class, "empty", _wrap_int_string_map_empty);
SWIGV8_AddMemberFunction(_exports_int_string_map_class, "clear", _wrap_int_string_map_clear);
SWIGV8_AddMemberFunction(_exports_int_string_map_class, "get", _wrap_int_string_map_get);
SWIGV8_AddMemberFunction(_exports_int_string_map_class, "set", _wrap_int_string_map_set);
SWIGV8_AddMemberFunction(_exports_int_string_map_class, "erase", _wrap_int_string_map_erase);
SWIGV8_AddMemberFunction(_exports_int_string_map_class, "has_key", _wrap_int_string_map_has_key);
SWIGV8_AddMemberFunction(_exports_int_string_map_class, "keys", _wrap_int_string_map_keys);
SWIGV8_AddMemberFunction(_exports_string_long_map_class, "size", _wrap_string_long_map_size);
SWIGV8_AddMemberFunction(_exports_string_long_map_class, "empty", _wrap_string_long_map_empty);
SWIGV8_AddMemberFunction(_exports_string_long_map_class, "clear", _wrap_string_long_map_clear);
SWIGV8_AddMemberFunction(_exports_string_long_map_class, "get", _wrap_string_long_map_get);
SWIGV8_AddMemberFunction(_exports_string_long_map_class, "set", _wrap_string_long_map_set);
SWIGV8_AddMemberFunction(_exports_string_long_map_class, "erase", _wrap_string_long_map_erase);
SWIGV8_AddMemberFunction(_exports_string_long_map_class, "has_key", _wrap_string_long_map_has_key);
SWIGV8_AddMemberFunction(_exports_string_long_map_class, "keys", _wrap_string_long_map_keys);
SWIGV8_AddMemberFunction(_exports_string_entry_map_class, "size", _wrap_string_entry_map_size);
SWIGV8_AddMemberFunction(_exports_string_entry_map_class, "empty", _wrap_string_entry_map_empty);
SWIGV8_AddMemberFunction(_exports_string_entry_map_class, "clear", _wrap_string_entry_map_clear);
SWIGV8_AddMemberFunction(_exports_string_entry_map_class, "get", _wrap_string_entry_map_get);
SWIGV8_AddMemberFunction(_exports_string_entry_map_class, "set", _wrap_string_entry_map_set);
SWIGV8_AddMemberFunction(_exports_string_entry_map_class, "erase", _wrap_string_entry_map_erase);
SWIGV8_AddMemberFunction(_exports_string_entry_map_class, "has_key", _wrap_string_entry_map_has_key);
SWIGV8_AddMemberFunction(_exports_string_entry_map_class, "keys", _wrap_string_entry_map_keys);
SWIGV8_AddMemberFunction(_exports_int_bitfield_map_class, "size", _wrap_int_bitfield_map_size);
SWIGV8_AddMemberFunction(_exports_int_bitfield_map_class, "empty", _wrap_int_bitfield_map_empty);
SWIGV8_AddMemberFunction(_exports_int_bitfield_map_class, "clear", _wrap_int_bitfield_map_clear);
SWIGV8_AddMemberFunction(_exports_int_bitfield_map_class, "get", _wrap_int_bitfield_map_get);
SWIGV8_AddMemberFunction(_exports_int_bitfield_map_class, "set", _wrap_int_bitfield_map_set);
SWIGV8_AddMemberFunction(_exports_int_bitfield_map_class, "erase", _wrap_int_bitfield_map_erase);
SWIGV8_AddMemberFunction(_exports_int_bitfield_map_class, "has_key", _wrap_int_bitfield_map_has_key);
SWIGV8_AddMemberFunction(_exports_int_bitfield_map_class, "keys", _wrap_int_bitfield_map_keys);
SWIGV8_AddMemberFunction(_exports_alert_ptr_vector_class, "size", _wrap_alert_ptr_vector_size);
SWIGV8_AddMemberFunction(_exports_alert_ptr_vector_class, "capacity", _wrap_alert_ptr_vector_capacity);
SWIGV8_AddMemberFunction(_exports_alert_ptr_vector_class, "reserve", _wrap_alert_ptr_vector_reserve);
SWIGV8_AddMemberFunction(_exports_alert_ptr_vector_class, "empty", _wrap_alert_ptr_vector_empty);
SWIGV8_AddMemberFunction(_exports_alert_ptr_vector_class, "clear", _wrap_alert_ptr_vector_clear);
SWIGV8_AddMemberFunction(_exports_alert_ptr_vector_class, "push_back", _wrap_alert_ptr_vector_push_back);
SWIGV8_AddMemberFunction(_exports_alert_ptr_vector_class, "get", _wrap_alert_ptr_vector_get);
SWIGV8_AddMemberFunction(_exports_alert_ptr_vector_class, "set", _wrap_alert_ptr_vector_set);
SWIGV8_AddMemberVariable(_exports_iovec_t_class, "iov_base", _wrap_iovec_t_iov_base_get, _wrap_iovec_t_iov_base_set);
SWIGV8_AddMemberVariable(_exports_iovec_t_class, "iov_len", _wrap_iovec_t_iov_len_get, _wrap_iovec_t_iov_len_set);
SWIGV8_AddStaticVariable(exports_obj, "storage_mode_allocate", _wrap_libtorrent_storage_mode_allocate, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "storage_mode_sparse", _wrap_libtorrent_storage_mode_sparse, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "connection_type_bittorrent", _wrap_libtorrent_connection_type_bittorrent, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "connection_type_url_seed", _wrap_libtorrent_connection_type_url_seed, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "connection_type_http_seed", _wrap_libtorrent_connection_type_http_seed, JS_veto_set_variable);
SWIGV8_AddMemberFunction(_exports_byte_span_class, "size", _wrap_byte_span_size);
SWIGV8_AddMemberFunction(_exports_byte_span_class, "empty", _wrap_byte_span_empty);
SWIGV8_AddMemberFunction(_exports_byte_span_class, "front", _wrap_byte_span_front);
SWIGV8_AddMemberFunction(_exports_byte_span_class, "back", _wrap_byte_span_back);
SWIGV8_AddMemberFunction(_exports_byte_span_class, "first", _wrap_byte_span_first);
SWIGV8_AddMemberFunction(_exports_byte_span_class, "last", _wrap_byte_span_last);
SWIGV8_AddMemberFunction(_exports_byte_span_class, "subspan", _wrap_byte_span__wrap_byte_span_subspan);
SWIGV8_AddMemberFunction(_exports_byte_span_class, "get", _wrap_byte_span_get);
SWIGV8_AddMemberFunction(_exports_byte_const_span_class, "size", _wrap_byte_const_span_size);
SWIGV8_AddMemberFunction(_exports_byte_const_span_class, "empty", _wrap_byte_const_span_empty);
SWIGV8_AddMemberFunction(_exports_byte_const_span_class, "front", _wrap_byte_const_span_front);
SWIGV8_AddMemberFunction(_exports_byte_const_span_class, "back", _wrap_byte_const_span_back);
SWIGV8_AddMemberFunction(_exports_byte_const_span_class, "first", _wrap_byte_const_span_first);
SWIGV8_AddMemberFunction(_exports_byte_const_span_class, "last", _wrap_byte_const_span_last);
SWIGV8_AddMemberFunction(_exports_byte_const_span_class, "subspan", _wrap_byte_const_span__wrap_byte_const_span_subspan);
SWIGV8_AddMemberFunction(_exports_byte_const_span_class, "get", _wrap_byte_const_span_get);
SWIGV8_AddMemberFunction(_exports_iovec_span_class, "size", _wrap_iovec_span_size);
SWIGV8_AddMemberFunction(_exports_iovec_span_class, "empty", _wrap_iovec_span_empty);
SWIGV8_AddMemberFunction(_exports_iovec_span_class, "front", _wrap_iovec_span_front);
SWIGV8_AddMemberFunction(_exports_iovec_span_class, "back", _wrap_iovec_span_back);
SWIGV8_AddMemberFunction(_exports_iovec_span_class, "first", _wrap_iovec_span_first);
SWIGV8_AddMemberFunction(_exports_iovec_span_class, "last", _wrap_iovec_span_last);
SWIGV8_AddMemberFunction(_exports_iovec_span_class, "subspan", _wrap_iovec_span__wrap_iovec_span_subspan);
SWIGV8_AddMemberFunction(_exports_iovec_span_class, "get", _wrap_iovec_span_get);
SWIGV8_AddMemberFunction(_exports_sha1_hash_class, "clear", _wrap_sha1_hash_clear);
SWIGV8_AddMemberFunction(_exports_sha1_hash_class, "is_all_zeros", _wrap_sha1_hash_is_all_zeros);
SWIGV8_AddMemberFunction(_exports_sha1_hash_class, "count_leading_zeroes", _wrap_sha1_hash_count_leading_zeroes);
SWIGV8_AddMemberFunction(_exports_sha1_hash_class, "assign", _wrap_sha1_hash_assign);
SWIGV8_AddMemberFunction(_exports_sha1_hash_class, "get", _wrap_sha1_hash_get);
SWIGV8_AddMemberFunction(_exports_sha1_hash_class, "hash_code", _wrap_sha1_hash_hash_code);
SWIGV8_AddMemberFunction(_exports_sha1_hash_class, "to_bytes", _wrap_sha1_hash_to_bytes);
SWIGV8_AddMemberFunction(_exports_sha1_hash_class, "to_hex", _wrap_sha1_hash_to_hex);
SWIGV8_AddMemberFunction(_exports_sha1_hash_class, "op_eq", _wrap_sha1_hash_op_eq);
SWIGV8_AddMemberFunction(_exports_sha1_hash_class, "op_ne", _wrap_sha1_hash_op_ne);
SWIGV8_AddMemberFunction(_exports_sha1_hash_class, "op_lt", _wrap_sha1_hash_op_lt);
SWIGV8_AddMemberFunction(_exports_bloom_filter_128_class, "find", _wrap_bloom_filter_128_find);
SWIGV8_AddMemberFunction(_exports_bloom_filter_128_class, "set", _wrap_bloom_filter_128_set);
SWIGV8_AddMemberFunction(_exports_bloom_filter_128_class, "clear", _wrap_bloom_filter_128_clear);
SWIGV8_AddMemberFunction(_exports_bloom_filter_128_class, "size", _wrap_bloom_filter_128_size);
SWIGV8_AddMemberFunction(_exports_bloom_filter_128_class, "to_bytes", _wrap_bloom_filter_128_to_bytes);
SWIGV8_AddMemberFunction(_exports_bloom_filter_128_class, "from_bytes", _wrap_bloom_filter_128_from_bytes);
SWIGV8_AddMemberFunction(_exports_bloom_filter_256_class, "find", _wrap_bloom_filter_256_find);
SWIGV8_AddMemberFunction(_exports_bloom_filter_256_class, "set", _wrap_bloom_filter_256_set);
SWIGV8_AddMemberFunction(_exports_bloom_filter_256_class, "clear", _wrap_bloom_filter_256_clear);
SWIGV8_AddMemberFunction(_exports_bloom_filter_256_class, "size", _wrap_bloom_filter_256_size);
SWIGV8_AddMemberFunction(_exports_bloom_filter_256_class, "to_bytes", _wrap_bloom_filter_256_to_bytes);
SWIGV8_AddMemberFunction(_exports_bloom_filter_256_class, "from_bytes", _wrap_bloom_filter_256_from_bytes);
SWIGV8_AddMemberFunction(_exports_string_view_class, "to_string", _wrap_string_view_to_string);
SWIGV8_AddMemberFunction(_exports_address_class, "is_v4", _wrap_address_is_v4);
SWIGV8_AddMemberFunction(_exports_address_class, "is_v6", _wrap_address_is_v6);
SWIGV8_AddMemberFunction(_exports_address_class, "to_string", _wrap_address_to_string);
SWIGV8_AddMemberFunction(_exports_address_class, "is_loopback", _wrap_address_is_loopback);
SWIGV8_AddMemberFunction(_exports_address_class, "is_unspecified", _wrap_address_is_unspecified);
SWIGV8_AddMemberFunction(_exports_address_class, "is_multicast", _wrap_address_is_multicast);
SWIGV8_AddMemberFunction(_exports_address_class, "op_lt", _wrap_address_op_lt);
SWIGV8_AddMemberFunction(_exports_tcp_endpoint_class, "port", _wrap_tcp_endpoint_port);
SWIGV8_AddMemberFunction(_exports_tcp_endpoint_class, "address", _wrap_tcp_endpoint_address);
SWIGV8_AddMemberFunction(_exports_udp_endpoint_class, "port", _wrap_udp_endpoint_port);
SWIGV8_AddMemberFunction(_exports_udp_endpoint_class, "address", _wrap_udp_endpoint_address);
SWIGV8_AddStaticVariable(exports_obj, "success", _wrap_boost_system_errc_success, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "address_family_not_supported", _wrap_boost_system_errc_address_family_not_supported, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "address_in_use", _wrap_boost_system_errc_address_in_use, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "address_not_available", _wrap_boost_system_errc_address_not_available, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "already_connected", _wrap_boost_system_errc_already_connected, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "argument_list_too_long", _wrap_boost_system_errc_argument_list_too_long, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "argument_out_of_domain", _wrap_boost_system_errc_argument_out_of_domain, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "bad_address", _wrap_boost_system_errc_bad_address, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "bad_file_descriptor", _wrap_boost_system_errc_bad_file_descriptor, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "bad_message", _wrap_boost_system_errc_bad_message, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "broken_pipe", _wrap_boost_system_errc_broken_pipe, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "connection_aborted", _wrap_boost_system_errc_connection_aborted, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "connection_already_in_progress", _wrap_boost_system_errc_connection_already_in_progress, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "connection_refused", _wrap_boost_system_errc_connection_refused, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "connection_reset", _wrap_boost_system_errc_connection_reset, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "cross_device_link", _wrap_boost_system_errc_cross_device_link, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "destination_address_required", _wrap_boost_system_errc_destination_address_required, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "device_or_resource_busy", _wrap_boost_system_errc_device_or_resource_busy, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "directory_not_empty", _wrap_boost_system_errc_directory_not_empty, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "executable_format_error", _wrap_boost_system_errc_executable_format_error, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "file_exists", _wrap_boost_system_errc_file_exists, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "file_too_large", _wrap_boost_system_errc_file_too_large, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "filename_too_long", _wrap_boost_system_errc_filename_too_long, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "function_not_supported", _wrap_boost_system_errc_function_not_supported, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "host_unreachable", _wrap_boost_system_errc_host_unreachable, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "identifier_removed", _wrap_boost_system_errc_identifier_removed, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "illegal_byte_sequence", _wrap_boost_system_errc_illegal_byte_sequence, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "inappropriate_io_control_operation", _wrap_boost_system_errc_inappropriate_io_control_operation, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "interrupted", _wrap_boost_system_errc_interrupted, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_argument", _wrap_boost_system_errc_invalid_argument, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_seek", _wrap_boost_system_errc_invalid_seek, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "io_error", _wrap_boost_system_errc_io_error, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "is_a_directory", _wrap_boost_system_errc_is_a_directory, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "message_size", _wrap_boost_system_errc_message_size, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "network_down", _wrap_boost_system_errc_network_down, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "network_reset", _wrap_boost_system_errc_network_reset, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "network_unreachable", _wrap_boost_system_errc_network_unreachable, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "no_buffer_space", _wrap_boost_system_errc_no_buffer_space, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "no_child_process", _wrap_boost_system_errc_no_child_process, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "no_link", _wrap_boost_system_errc_no_link, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "no_lock_available", _wrap_boost_system_errc_no_lock_available, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "no_message_available", _wrap_boost_system_errc_no_message_available, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "no_message", _wrap_boost_system_errc_no_message, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "no_protocol_option", _wrap_boost_system_errc_no_protocol_option, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "no_space_on_device", _wrap_boost_system_errc_no_space_on_device, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "no_stream_resources", _wrap_boost_system_errc_no_stream_resources, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "no_such_device_or_address", _wrap_boost_system_errc_no_such_device_or_address, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "no_such_device", _wrap_boost_system_errc_no_such_device, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "no_such_file_or_directory", _wrap_boost_system_errc_no_such_file_or_directory, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "no_such_process", _wrap_boost_system_errc_no_such_process, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "not_a_directory", _wrap_boost_system_errc_not_a_directory, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "not_a_socket", _wrap_boost_system_errc_not_a_socket, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "not_a_stream", _wrap_boost_system_errc_not_a_stream, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "not_connected", _wrap_boost_system_errc_not_connected, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "not_enough_memory", _wrap_boost_system_errc_not_enough_memory, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "not_supported", _wrap_boost_system_errc_not_supported, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "operation_canceled", _wrap_boost_system_errc_operation_canceled, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "operation_in_progress", _wrap_boost_system_errc_operation_in_progress, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "operation_not_permitted", _wrap_boost_system_errc_operation_not_permitted, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "operation_not_supported", _wrap_boost_system_errc_operation_not_supported, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "operation_would_block", _wrap_boost_system_errc_operation_would_block, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "owner_dead", _wrap_boost_system_errc_owner_dead, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "permission_denied", _wrap_boost_system_errc_permission_denied, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "protocol_error", _wrap_boost_system_errc_protocol_error, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "protocol_not_supported", _wrap_boost_system_errc_protocol_not_supported, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "read_only_file_system", _wrap_boost_system_errc_read_only_file_system, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "resource_deadlock_would_occur", _wrap_boost_system_errc_resource_deadlock_would_occur, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "resource_unavailable_try_again", _wrap_boost_system_errc_resource_unavailable_try_again, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "result_out_of_range", _wrap_boost_system_errc_result_out_of_range, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "state_not_recoverable", _wrap_boost_system_errc_state_not_recoverable, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "stream_timeout", _wrap_boost_system_errc_stream_timeout, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "text_file_busy", _wrap_boost_system_errc_text_file_busy, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "timed_out", _wrap_boost_system_errc_timed_out, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "too_many_files_open_in_system", _wrap_boost_system_errc_too_many_files_open_in_system, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "too_many_files_open", _wrap_boost_system_errc_too_many_files_open, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "too_many_links", _wrap_boost_system_errc_too_many_links, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "too_many_symbolic_link_levels", _wrap_boost_system_errc_too_many_symbolic_link_levels, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "value_too_large", _wrap_boost_system_errc_value_too_large, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "wrong_protocol_type", _wrap_boost_system_errc_wrong_protocol_type, JS_veto_set_variable);
SWIGV8_AddMemberFunction(_exports_error_category_class, "name", _wrap_error_category_name);
SWIGV8_AddMemberFunction(_exports_error_category_class, "message", _wrap_error_category_message);
SWIGV8_AddMemberFunction(_exports_error_category_class, "default_error_condition", _wrap_error_category_default_error_condition);
SWIGV8_AddMemberFunction(_exports_error_category_class, "equivalent", _wrap_error_category__wrap_error_category_equivalent);
SWIGV8_AddMemberFunction(_exports_error_category_class, "op_eq", _wrap_error_category_op_eq);
SWIGV8_AddMemberFunction(_exports_error_category_class, "op_ne", _wrap_error_category_op_ne);
SWIGV8_AddMemberFunction(_exports_error_category_class, "op_lt", _wrap_error_category_op_lt);
SWIGV8_AddMemberFunction(_exports_error_condition_class, "assign", _wrap_error_condition_assign);
SWIGV8_AddMemberFunction(_exports_error_condition_class, "clear", _wrap_error_condition_clear);
SWIGV8_AddMemberFunction(_exports_error_condition_class, "value", _wrap_error_condition_value);
SWIGV8_AddMemberFunction(_exports_error_condition_class, "category", _wrap_error_condition_category);
SWIGV8_AddMemberFunction(_exports_error_condition_class, "message", _wrap_error_condition_message);
SWIGV8_AddMemberFunction(_exports_error_code_class, "assign", _wrap_error_code_assign);
SWIGV8_AddMemberFunction(_exports_error_code_class, "clear", _wrap_error_code_clear);
SWIGV8_AddMemberFunction(_exports_error_code_class, "value", _wrap_error_code_value);
SWIGV8_AddMemberFunction(_exports_error_code_class, "category", _wrap_error_code_category);
SWIGV8_AddMemberFunction(_exports_error_code_class, "default_error_condition", _wrap_error_code_default_error_condition);
SWIGV8_AddMemberFunction(_exports_error_code_class, "message", _wrap_error_code_message);
SWIGV8_AddStaticVariable(exports_obj, "LIBTORRENT_VERSION_MAJOR", _wrap_LIBTORRENT_VERSION_MAJOR, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LIBTORRENT_VERSION_MINOR", _wrap_LIBTORRENT_VERSION_MINOR, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LIBTORRENT_VERSION_TINY", _wrap_LIBTORRENT_VERSION_TINY, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LIBTORRENT_VERSION_NUM", _wrap_LIBTORRENT_VERSION_NUM, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LIBTORRENT_VERSION", _wrap_LIBTORRENT_VERSION, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LIBTORRENT_REVISION", _wrap_LIBTORRENT_REVISION, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "libtorrent_no_error", _wrap_libtorrent_errors_no_error, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "file_collision", _wrap_libtorrent_errors_file_collision, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "failed_hash_check", _wrap_libtorrent_errors_failed_hash_check, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "torrent_is_no_dict", _wrap_libtorrent_errors_torrent_is_no_dict, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "torrent_missing_info", _wrap_libtorrent_errors_torrent_missing_info, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "torrent_info_no_dict", _wrap_libtorrent_errors_torrent_info_no_dict, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "torrent_missing_piece_length", _wrap_libtorrent_errors_torrent_missing_piece_length, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "torrent_missing_name", _wrap_libtorrent_errors_torrent_missing_name, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "torrent_invalid_name", _wrap_libtorrent_errors_torrent_invalid_name, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "torrent_invalid_length", _wrap_libtorrent_errors_torrent_invalid_length, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "torrent_file_parse_failed", _wrap_libtorrent_errors_torrent_file_parse_failed, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "torrent_missing_pieces", _wrap_libtorrent_errors_torrent_missing_pieces, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "torrent_invalid_hashes", _wrap_libtorrent_errors_torrent_invalid_hashes, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "too_many_pieces_in_torrent", _wrap_libtorrent_errors_too_many_pieces_in_torrent, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_swarm_metadata", _wrap_libtorrent_errors_invalid_swarm_metadata, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_bencoding", _wrap_libtorrent_errors_invalid_bencoding, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "no_files_in_torrent", _wrap_libtorrent_errors_no_files_in_torrent, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_escaped_string", _wrap_libtorrent_errors_invalid_escaped_string, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "session_is_closing", _wrap_libtorrent_errors_session_is_closing, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "duplicate_torrent", _wrap_libtorrent_errors_duplicate_torrent, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_torrent_handle", _wrap_libtorrent_errors_invalid_torrent_handle, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_entry_type", _wrap_libtorrent_errors_invalid_entry_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "missing_info_hash_in_uri", _wrap_libtorrent_errors_missing_info_hash_in_uri, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "file_too_short", _wrap_libtorrent_errors_file_too_short, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "unsupported_url_protocol", _wrap_libtorrent_errors_unsupported_url_protocol, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "url_parse_error", _wrap_libtorrent_errors_url_parse_error, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "peer_sent_empty_piece", _wrap_libtorrent_errors_peer_sent_empty_piece, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "parse_failed", _wrap_libtorrent_errors_parse_failed, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_file_tag", _wrap_libtorrent_errors_invalid_file_tag, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "missing_info_hash", _wrap_libtorrent_errors_missing_info_hash, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "mismatching_info_hash", _wrap_libtorrent_errors_mismatching_info_hash, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_hostname", _wrap_libtorrent_errors_invalid_hostname, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_port", _wrap_libtorrent_errors_invalid_port, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "port_blocked", _wrap_libtorrent_errors_port_blocked, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "expected_close_bracket_in_address", _wrap_libtorrent_errors_expected_close_bracket_in_address, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "destructing_torrent", _wrap_libtorrent_errors_destructing_torrent, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "timed_out", _wrap_libtorrent_errors_timed_out, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "upload_upload_connection", _wrap_libtorrent_errors_upload_upload_connection, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "uninteresting_upload_peer", _wrap_libtorrent_errors_uninteresting_upload_peer, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_info_hash", _wrap_libtorrent_errors_invalid_info_hash, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "torrent_paused", _wrap_libtorrent_errors_torrent_paused, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_have", _wrap_libtorrent_errors_invalid_have, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_bitfield_size", _wrap_libtorrent_errors_invalid_bitfield_size, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "too_many_requests_when_choked", _wrap_libtorrent_errors_too_many_requests_when_choked, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_piece", _wrap_libtorrent_errors_invalid_piece, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "no_memory", _wrap_libtorrent_errors_no_memory, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "torrent_aborted", _wrap_libtorrent_errors_torrent_aborted, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "self_connection", _wrap_libtorrent_errors_self_connection, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_piece_size", _wrap_libtorrent_errors_invalid_piece_size, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "timed_out_no_interest", _wrap_libtorrent_errors_timed_out_no_interest, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "timed_out_inactivity", _wrap_libtorrent_errors_timed_out_inactivity, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "timed_out_no_handshake", _wrap_libtorrent_errors_timed_out_no_handshake, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "timed_out_no_request", _wrap_libtorrent_errors_timed_out_no_request, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_choke", _wrap_libtorrent_errors_invalid_choke, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_unchoke", _wrap_libtorrent_errors_invalid_unchoke, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_interested", _wrap_libtorrent_errors_invalid_interested, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_not_interested", _wrap_libtorrent_errors_invalid_not_interested, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_request", _wrap_libtorrent_errors_invalid_request, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_hash_list", _wrap_libtorrent_errors_invalid_hash_list, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_hash_piece", _wrap_libtorrent_errors_invalid_hash_piece, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_cancel", _wrap_libtorrent_errors_invalid_cancel, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_dht_port", _wrap_libtorrent_errors_invalid_dht_port, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_suggest", _wrap_libtorrent_errors_invalid_suggest, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_have_all", _wrap_libtorrent_errors_invalid_have_all, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_have_none", _wrap_libtorrent_errors_invalid_have_none, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_reject", _wrap_libtorrent_errors_invalid_reject, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_allow_fast", _wrap_libtorrent_errors_invalid_allow_fast, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_extended", _wrap_libtorrent_errors_invalid_extended, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_message", _wrap_libtorrent_errors_invalid_message, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "sync_hash_not_found", _wrap_libtorrent_errors_sync_hash_not_found, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_encryption_constant", _wrap_libtorrent_errors_invalid_encryption_constant, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "no_plaintext_mode", _wrap_libtorrent_errors_no_plaintext_mode, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "no_rc4_mode", _wrap_libtorrent_errors_no_rc4_mode, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "unsupported_encryption_mode", _wrap_libtorrent_errors_unsupported_encryption_mode, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "unsupported_encryption_mode_selected", _wrap_libtorrent_errors_unsupported_encryption_mode_selected, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_pad_size", _wrap_libtorrent_errors_invalid_pad_size, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_encrypt_handshake", _wrap_libtorrent_errors_invalid_encrypt_handshake, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "no_incoming_encrypted", _wrap_libtorrent_errors_no_incoming_encrypted, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "no_incoming_regular", _wrap_libtorrent_errors_no_incoming_regular, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "duplicate_peer_id", _wrap_libtorrent_errors_duplicate_peer_id, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "torrent_removed", _wrap_libtorrent_errors_torrent_removed, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "packet_too_large", _wrap_libtorrent_errors_packet_too_large, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "reserved", _wrap_libtorrent_errors_reserved, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "http_error", _wrap_libtorrent_errors_http_error, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "missing_location", _wrap_libtorrent_errors_missing_location, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_redirection", _wrap_libtorrent_errors_invalid_redirection, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "redirecting", _wrap_libtorrent_errors_redirecting, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_range", _wrap_libtorrent_errors_invalid_range, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "no_content_length", _wrap_libtorrent_errors_no_content_length, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "banned_by_ip_filter", _wrap_libtorrent_errors_banned_by_ip_filter, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "too_many_connections", _wrap_libtorrent_errors_too_many_connections, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "peer_banned", _wrap_libtorrent_errors_peer_banned, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "stopping_torrent", _wrap_libtorrent_errors_stopping_torrent, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "too_many_corrupt_pieces", _wrap_libtorrent_errors_too_many_corrupt_pieces, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "torrent_not_ready", _wrap_libtorrent_errors_torrent_not_ready, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "peer_not_constructed", _wrap_libtorrent_errors_peer_not_constructed, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "session_closing", _wrap_libtorrent_errors_session_closing, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "optimistic_disconnect", _wrap_libtorrent_errors_optimistic_disconnect, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "torrent_finished", _wrap_libtorrent_errors_torrent_finished, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "no_router", _wrap_libtorrent_errors_no_router, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "metadata_too_large", _wrap_libtorrent_errors_metadata_too_large, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_metadata_request", _wrap_libtorrent_errors_invalid_metadata_request, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_metadata_size", _wrap_libtorrent_errors_invalid_metadata_size, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_metadata_offset", _wrap_libtorrent_errors_invalid_metadata_offset, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_metadata_message", _wrap_libtorrent_errors_invalid_metadata_message, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "pex_message_too_large", _wrap_libtorrent_errors_pex_message_too_large, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_pex_message", _wrap_libtorrent_errors_invalid_pex_message, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_lt_tracker_message", _wrap_libtorrent_errors_invalid_lt_tracker_message, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "too_frequent_pex", _wrap_libtorrent_errors_too_frequent_pex, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "no_metadata", _wrap_libtorrent_errors_no_metadata, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_dont_have", _wrap_libtorrent_errors_invalid_dont_have, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "requires_ssl_connection", _wrap_libtorrent_errors_requires_ssl_connection, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_ssl_cert", _wrap_libtorrent_errors_invalid_ssl_cert, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "not_an_ssl_torrent", _wrap_libtorrent_errors_not_an_ssl_torrent, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "banned_by_port_filter", _wrap_libtorrent_errors_banned_by_port_filter, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "unsupported_protocol_version", _wrap_libtorrent_errors_unsupported_protocol_version, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "natpmp_not_authorized", _wrap_libtorrent_errors_natpmp_not_authorized, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "network_failure", _wrap_libtorrent_errors_network_failure, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "no_resources", _wrap_libtorrent_errors_no_resources, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "unsupported_opcode", _wrap_libtorrent_errors_unsupported_opcode, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "missing_file_sizes", _wrap_libtorrent_errors_missing_file_sizes, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "no_files_in_resume_data", _wrap_libtorrent_errors_no_files_in_resume_data, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "missing_pieces", _wrap_libtorrent_errors_missing_pieces, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "mismatching_number_of_files", _wrap_libtorrent_errors_mismatching_number_of_files, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "mismatching_file_size", _wrap_libtorrent_errors_mismatching_file_size, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "mismatching_file_timestamp", _wrap_libtorrent_errors_mismatching_file_timestamp, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "not_a_dictionary", _wrap_libtorrent_errors_not_a_dictionary, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_blocks_per_piece", _wrap_libtorrent_errors_invalid_blocks_per_piece, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "missing_slots", _wrap_libtorrent_errors_missing_slots, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "too_many_slots", _wrap_libtorrent_errors_too_many_slots, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_slot_list", _wrap_libtorrent_errors_invalid_slot_list, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_piece_index", _wrap_libtorrent_errors_invalid_piece_index, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "pieces_need_reorder", _wrap_libtorrent_errors_pieces_need_reorder, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "resume_data_not_modified", _wrap_libtorrent_errors_resume_data_not_modified, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "http_parse_error", _wrap_libtorrent_errors_http_parse_error, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "http_missing_location", _wrap_libtorrent_errors_http_missing_location, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "http_failed_decompress", _wrap_libtorrent_errors_http_failed_decompress, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "no_i2p_router", _wrap_libtorrent_errors_no_i2p_router, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "no_i2p_endpoint", _wrap_libtorrent_errors_no_i2p_endpoint, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "scrape_not_available", _wrap_libtorrent_errors_scrape_not_available, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_tracker_response", _wrap_libtorrent_errors_invalid_tracker_response, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_peer_dict", _wrap_libtorrent_errors_invalid_peer_dict, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "tracker_failure", _wrap_libtorrent_errors_tracker_failure, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_files_entry", _wrap_libtorrent_errors_invalid_files_entry, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_hash_entry", _wrap_libtorrent_errors_invalid_hash_entry, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_peers_entry", _wrap_libtorrent_errors_invalid_peers_entry, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_tracker_response_length", _wrap_libtorrent_errors_invalid_tracker_response_length, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_tracker_transaction_id", _wrap_libtorrent_errors_invalid_tracker_transaction_id, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "invalid_tracker_action", _wrap_libtorrent_errors_invalid_tracker_action, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "error_code_max", _wrap_libtorrent_errors_error_code_max, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "cont", _wrap_libtorrent_errors_cont, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "ok", _wrap_libtorrent_errors_ok, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "created", _wrap_libtorrent_errors_created, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "accepted", _wrap_libtorrent_errors_accepted, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "no_content", _wrap_libtorrent_errors_no_content, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "multiple_choices", _wrap_libtorrent_errors_multiple_choices, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "moved_permanently", _wrap_libtorrent_errors_moved_permanently, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "moved_temporarily", _wrap_libtorrent_errors_moved_temporarily, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "not_modified", _wrap_libtorrent_errors_not_modified, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "bad_request", _wrap_libtorrent_errors_bad_request, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "unauthorized", _wrap_libtorrent_errors_unauthorized, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "forbidden", _wrap_libtorrent_errors_forbidden, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "not_found", _wrap_libtorrent_errors_not_found, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "internal_server_error", _wrap_libtorrent_errors_internal_server_error, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "not_implemented", _wrap_libtorrent_errors_not_implemented, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "bad_gateway", _wrap_libtorrent_errors_bad_gateway, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "service_unavailable", _wrap_libtorrent_errors_service_unavailable, JS_veto_set_variable);
SWIGV8_AddMemberFunction(_exports_bitfield_class, "assign", _wrap_bitfield_assign);
SWIGV8_AddMemberFunction(_exports_bitfield_class, "get_bit", _wrap_bitfield_get_bit);
SWIGV8_AddMemberFunction(_exports_bitfield_class, "clear_bit", _wrap_bitfield_clear_bit);
SWIGV8_AddMemberFunction(_exports_bitfield_class, "set_bit", _wrap_bitfield_set_bit);
SWIGV8_AddMemberFunction(_exports_bitfield_class, "all_set", _wrap_bitfield_all_set);
SWIGV8_AddMemberFunction(_exports_bitfield_class, "none_set", _wrap_bitfield_none_set);
SWIGV8_AddMemberFunction(_exports_bitfield_class, "size", _wrap_bitfield_size);
SWIGV8_AddMemberFunction(_exports_bitfield_class, "num_words", _wrap_bitfield_num_words);
SWIGV8_AddMemberFunction(_exports_bitfield_class, "empty", _wrap_bitfield_empty);
SWIGV8_AddMemberFunction(_exports_bitfield_class, "data", _wrap_bitfield_data);
SWIGV8_AddMemberFunction(_exports_bitfield_class, "count", _wrap_bitfield_count);
SWIGV8_AddMemberFunction(_exports_bitfield_class, "find_first_set", _wrap_bitfield_find_first_set);
SWIGV8_AddMemberFunction(_exports_bitfield_class, "find_last_clear", _wrap_bitfield_find_last_clear);
SWIGV8_AddMemberFunction(_exports_bitfield_class, "resize", _wrap_bitfield__wrap_bitfield_resize);
SWIGV8_AddMemberFunction(_exports_bitfield_class, "set_all", _wrap_bitfield_set_all);
SWIGV8_AddMemberFunction(_exports_bitfield_class, "clear_all", _wrap_bitfield_clear_all);
SWIGV8_AddMemberFunction(_exports_bitfield_class, "clear", _wrap_bitfield_clear);
SWIGV8_AddMemberVariable(_exports_peer_request_class, "piece", _wrap_peer_request_piece_get, _wrap_peer_request_piece_set);
SWIGV8_AddMemberVariable(_exports_peer_request_class, "start", _wrap_peer_request_start_get, _wrap_peer_request_start_set);
SWIGV8_AddMemberVariable(_exports_peer_request_class, "length", _wrap_peer_request_length_get, _wrap_peer_request_length_set);
SWIGV8_AddMemberFunction(_exports_peer_request_class, "op_eq", _wrap_peer_request_op_eq);
SWIGV8_AddMemberFunction(_exports_entry_class, "type", _wrap_entry_type);
SWIGV8_AddMemberFunction(_exports_entry_class, "op_eq", _wrap_entry_op_eq);
SWIGV8_AddMemberFunction(_exports_entry_class, "op_ne", _wrap_entry_op_ne);
SWIGV8_AddMemberFunction(_exports_entry_class, "integer", _wrap_entry_integer);
SWIGV8_AddMemberFunction(_exports_entry_class, "string", _wrap_entry_string);
SWIGV8_AddMemberFunction(_exports_entry_class, "list", _wrap_entry_list);
SWIGV8_AddMemberFunction(_exports_entry_class, "dict", _wrap_entry_dict);
SWIGV8_AddMemberFunction(_exports_entry_class, "swap", _wrap_entry_swap);
SWIGV8_AddMemberFunction(_exports_entry_class, "find_key", _wrap_entry_find_key);
SWIGV8_AddMemberFunction(_exports_entry_class, "to_string", _wrap_entry_to_string);
SWIGV8_AddMemberFunction(_exports_entry_class, "get", _wrap_entry_get);
SWIGV8_AddMemberFunction(_exports_entry_class, "set", _wrap_entry__wrap_entry_set);
SWIGV8_AddMemberFunction(_exports_entry_class, "string_bytes", _wrap_entry_string_bytes);
SWIGV8_AddMemberFunction(_exports_entry_class, "preformatted_bytes", _wrap_entry_preformatted_bytes);
SWIGV8_AddMemberFunction(_exports_entry_class, "bencode", _wrap_entry_bencode);
SWIGV8_AddMemberVariable(_exports_file_slice_class, "file_index", _wrap_file_slice_file_index_get, _wrap_file_slice_file_index_set);
SWIGV8_AddMemberVariable(_exports_file_slice_class, "offset", _wrap_file_slice_offset_get, _wrap_file_slice_offset_set);
SWIGV8_AddMemberVariable(_exports_file_slice_class, "size", _wrap_file_slice_size_get, _wrap_file_slice_size_set);
SWIGV8_AddMemberFunction(_exports_file_storage_class, "is_valid", _wrap_file_storage_is_valid);
SWIGV8_AddMemberFunction(_exports_file_storage_class, "reserve", _wrap_file_storage_reserve);
SWIGV8_AddMemberFunction(_exports_file_storage_class, "add_file_borrow", _wrap_file_storage__wrap_file_storage_add_file_borrow);
SWIGV8_AddMemberFunction(_exports_file_storage_class, "add_file", _wrap_file_storage__wrap_file_storage_add_file);
SWIGV8_AddMemberFunction(_exports_file_storage_class, "rename_file", _wrap_file_storage_rename_file);
SWIGV8_AddMemberFunction(_exports_file_storage_class, "map_block", _wrap_file_storage_map_block);
SWIGV8_AddMemberFunction(_exports_file_storage_class, "map_file", _wrap_file_storage_map_file);
SWIGV8_AddMemberFunction(_exports_file_storage_class, "num_files", _wrap_file_storage_num_files);
SWIGV8_AddMemberFunction(_exports_file_storage_class, "total_size", _wrap_file_storage_total_size);
SWIGV8_AddMemberFunction(_exports_file_storage_class, "set_num_pieces", _wrap_file_storage_set_num_pieces);
SWIGV8_AddMemberFunction(_exports_file_storage_class, "num_pieces", _wrap_file_storage_num_pieces);
SWIGV8_AddMemberFunction(_exports_file_storage_class, "set_piece_length", _wrap_file_storage_set_piece_length);
SWIGV8_AddMemberFunction(_exports_file_storage_class, "piece_length", _wrap_file_storage_piece_length);
SWIGV8_AddMemberFunction(_exports_file_storage_class, "piece_size", _wrap_file_storage_piece_size);
SWIGV8_AddMemberFunction(_exports_file_storage_class, "set_name", _wrap_file_storage_set_name);
SWIGV8_AddMemberFunction(_exports_file_storage_class, "name", _wrap_file_storage_name);
SWIGV8_AddMemberFunction(_exports_file_storage_class, "swap", _wrap_file_storage_swap);
SWIGV8_AddMemberFunction(_exports_file_storage_class, "unload", _wrap_file_storage_unload);
SWIGV8_AddMemberFunction(_exports_file_storage_class, "is_loaded", _wrap_file_storage_is_loaded);
SWIGV8_AddMemberFunction(_exports_file_storage_class, "optimize", _wrap_file_storage__wrap_file_storage_optimize);
SWIGV8_AddMemberFunction(_exports_file_storage_class, "hash", _wrap_file_storage_hash);
SWIGV8_AddMemberFunction(_exports_file_storage_class, "symlink", _wrap_file_storage_symlink);
SWIGV8_AddMemberFunction(_exports_file_storage_class, "mtime", _wrap_file_storage_mtime);
SWIGV8_AddMemberFunction(_exports_file_storage_class, "file_path", _wrap_file_storage__wrap_file_storage_file_path);
SWIGV8_AddMemberFunction(_exports_file_storage_class, "file_name", _wrap_file_storage_file_name);
SWIGV8_AddMemberFunction(_exports_file_storage_class, "file_size", _wrap_file_storage_file_size);
SWIGV8_AddMemberFunction(_exports_file_storage_class, "pad_file_at", _wrap_file_storage_pad_file_at);
SWIGV8_AddMemberFunction(_exports_file_storage_class, "file_offset", _wrap_file_storage_file_offset);
SWIGV8_AddMemberFunction(_exports_file_storage_class, "paths", _wrap_file_storage_paths);
SWIGV8_AddMemberFunction(_exports_file_storage_class, "file_flags", _wrap_file_storage_file_flags);
SWIGV8_AddMemberFunction(_exports_file_storage_class, "file_absolute_path", _wrap_file_storage_file_absolute_path);
SWIGV8_AddMemberFunction(_exports_file_storage_class, "file_index_at_offset", _wrap_file_storage_file_index_at_offset);
SWIGV8_AddMemberFunction(_exports_web_seed_entry_class, "op_eq", _wrap_web_seed_entry_op_eq);
SWIGV8_AddMemberFunction(_exports_web_seed_entry_class, "op_lt", _wrap_web_seed_entry_op_lt);
SWIGV8_AddMemberVariable(_exports_web_seed_entry_class, "url", _wrap_web_seed_entry_url_get, _wrap_web_seed_entry_url_set);
SWIGV8_AddMemberVariable(_exports_web_seed_entry_class, "auth", _wrap_web_seed_entry_auth_get, _wrap_web_seed_entry_auth_set);
SWIGV8_AddMemberVariable(_exports_web_seed_entry_class, "extra_headers", _wrap_web_seed_entry_extra_headers_get, _wrap_web_seed_entry_extra_headers_set);
SWIGV8_AddMemberVariable(_exports_web_seed_entry_class, "type", _wrap_web_seed_entry_type_get, _wrap_web_seed_entry_type_set);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "files", _wrap_torrent_info_files);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "orig_files", _wrap_torrent_info_orig_files);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "rename_file", _wrap_torrent_info_rename_file);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "remap_files", _wrap_torrent_info_remap_files);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "add_tracker", _wrap_torrent_info__wrap_torrent_info_add_tracker);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "trackers", _wrap_torrent_info_trackers);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "similar_torrents", _wrap_torrent_info_similar_torrents);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "collections", _wrap_torrent_info_collections);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "add_url_seed", _wrap_torrent_info__wrap_torrent_info_add_url_seed);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "add_http_seed", _wrap_torrent_info__wrap_torrent_info_add_http_seed);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "web_seeds", _wrap_torrent_info_web_seeds);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "set_web_seeds", _wrap_torrent_info_set_web_seeds);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "total_size", _wrap_torrent_info_total_size);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "piece_length", _wrap_torrent_info_piece_length);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "num_pieces", _wrap_torrent_info_num_pieces);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "info_hash", _wrap_torrent_info_info_hash);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "num_files", _wrap_torrent_info_num_files);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "map_block", _wrap_torrent_info_map_block);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "map_file", _wrap_torrent_info_map_file);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "is_valid", _wrap_torrent_info_is_valid);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "priv", _wrap_torrent_info_priv);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "is_i2p", _wrap_torrent_info_is_i2p);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "piece_size", _wrap_torrent_info_piece_size);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "hash_for_piece", _wrap_torrent_info_hash_for_piece);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "is_loaded", _wrap_torrent_info_is_loaded);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "merkle_tree", _wrap_torrent_info_merkle_tree);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "set_merkle_tree", _wrap_torrent_info_set_merkle_tree);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "name", _wrap_torrent_info_name);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "creation_date", _wrap_torrent_info_creation_date);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "creator", _wrap_torrent_info_creator);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "comment", _wrap_torrent_info_comment);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "nodes", _wrap_torrent_info_nodes);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "add_node", _wrap_torrent_info_add_node);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "info", _wrap_torrent_info_info);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "metadata_size", _wrap_torrent_info_metadata_size);
SWIGV8_AddMemberFunction(_exports_torrent_info_class, "is_merkle_torrent", _wrap_torrent_info_is_merkle_torrent);
SWIGV8_AddMemberFunction(_exports_block_info_class, "peer", _wrap_block_info_peer);
SWIGV8_AddMemberVariable(_exports_block_info_class, "bytes_progress", _wrap_block_info_bytes_progress_get, _wrap_block_info_bytes_progress_set);
SWIGV8_AddMemberVariable(_exports_block_info_class, "block_size", _wrap_block_info_block_size_get, _wrap_block_info_block_size_set);
SWIGV8_AddMemberVariable(_exports_block_info_class, "state", _wrap_block_info_state_get, _wrap_block_info_state_set);
SWIGV8_AddMemberVariable(_exports_block_info_class, "num_peers", _wrap_block_info_num_peers_get, _wrap_block_info_num_peers_set);
SWIGV8_AddMemberVariable(_exports_partial_piece_info_class, "piece_index", _wrap_partial_piece_info_piece_index_get, _wrap_partial_piece_info_piece_index_set);
SWIGV8_AddMemberVariable(_exports_partial_piece_info_class, "blocks_in_piece", _wrap_partial_piece_info_blocks_in_piece_get, _wrap_partial_piece_info_blocks_in_piece_set);
SWIGV8_AddMemberVariable(_exports_partial_piece_info_class, "finished", _wrap_partial_piece_info_finished_get, _wrap_partial_piece_info_finished_set);
SWIGV8_AddMemberVariable(_exports_partial_piece_info_class, "writing", _wrap_partial_piece_info_writing_get, _wrap_partial_piece_info_writing_set);
SWIGV8_AddMemberVariable(_exports_partial_piece_info_class, "requested", _wrap_partial_piece_info_requested_get, _wrap_partial_piece_info_requested_set);
SWIGV8_AddMemberVariable(_exports_partial_piece_info_class, "piece_state", _wrap_partial_piece_info_piece_state_get, _wrap_partial_piece_info_piece_state_set);
SWIGV8_AddMemberFunction(_exports_partial_piece_info_class, "get_blocks", _wrap_partial_piece_info_get_blocks);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "read_piece", _wrap_torrent_handle_read_piece);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "have_piece", _wrap_torrent_handle_have_piece);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "get_peer_info", _wrap_torrent_handle_get_peer_info);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "status", _wrap_torrent_handle__wrap_torrent_handle_status);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "get_download_queue", _wrap_torrent_handle_get_download_queue);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "set_piece_deadline", _wrap_torrent_handle__wrap_torrent_handle_set_piece_deadline);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "reset_piece_deadline", _wrap_torrent_handle_reset_piece_deadline);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "clear_piece_deadlines", _wrap_torrent_handle_clear_piece_deadlines);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "file_progress", _wrap_torrent_handle__wrap_torrent_handle_file_progress);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "clear_error", _wrap_torrent_handle_clear_error);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "trackers", _wrap_torrent_handle_trackers);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "replace_trackers", _wrap_torrent_handle_replace_trackers);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "add_tracker", _wrap_torrent_handle_add_tracker);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "add_url_seed", _wrap_torrent_handle_add_url_seed);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "remove_url_seed", _wrap_torrent_handle_remove_url_seed);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "add_http_seed", _wrap_torrent_handle_add_http_seed);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "remove_http_seed", _wrap_torrent_handle_remove_http_seed);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "is_valid", _wrap_torrent_handle_is_valid);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "pause", _wrap_torrent_handle__wrap_torrent_handle_pause);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "resume", _wrap_torrent_handle_resume);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "stop_when_ready", _wrap_torrent_handle_stop_when_ready);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "set_upload_mode", _wrap_torrent_handle_set_upload_mode);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "set_share_mode", _wrap_torrent_handle_set_share_mode);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "flush_cache", _wrap_torrent_handle_flush_cache);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "apply_ip_filter", _wrap_torrent_handle_apply_ip_filter);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "force_recheck", _wrap_torrent_handle_force_recheck);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "save_resume_data", _wrap_torrent_handle__wrap_torrent_handle_save_resume_data);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "need_save_resume_data", _wrap_torrent_handle_need_save_resume_data);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "auto_managed", _wrap_torrent_handle_auto_managed);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "queue_position", _wrap_torrent_handle_queue_position);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "queue_position_up", _wrap_torrent_handle_queue_position_up);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "queue_position_down", _wrap_torrent_handle_queue_position_down);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "queue_position_top", _wrap_torrent_handle_queue_position_top);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "queue_position_bottom", _wrap_torrent_handle_queue_position_bottom);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "piece_availability", _wrap_torrent_handle_piece_availability);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "piece_priority", _wrap_torrent_handle__wrap_torrent_handle_piece_priority);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "prioritize_pieces", _wrap_torrent_handle__wrap_torrent_handle_prioritize_pieces);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "piece_priorities", _wrap_torrent_handle_piece_priorities);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "file_priority", _wrap_torrent_handle__wrap_torrent_handle_file_priority);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "prioritize_files", _wrap_torrent_handle_prioritize_files);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "file_priorities", _wrap_torrent_handle_file_priorities);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "force_reannounce", _wrap_torrent_handle__wrap_torrent_handle_force_reannounce);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "force_dht_announce", _wrap_torrent_handle_force_dht_announce);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "scrape_tracker", _wrap_torrent_handle__wrap_torrent_handle_scrape_tracker);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "set_upload_limit", _wrap_torrent_handle_set_upload_limit);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "upload_limit", _wrap_torrent_handle_upload_limit);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "set_download_limit", _wrap_torrent_handle_set_download_limit);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "download_limit", _wrap_torrent_handle_download_limit);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "set_pinned", _wrap_torrent_handle_set_pinned);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "set_sequential_download", _wrap_torrent_handle_set_sequential_download);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "connect_peer", _wrap_torrent_handle__wrap_torrent_handle_connect_peer);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "set_max_uploads", _wrap_torrent_handle_set_max_uploads);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "max_uploads", _wrap_torrent_handle_max_uploads);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "set_max_connections", _wrap_torrent_handle_set_max_connections);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "max_connections", _wrap_torrent_handle_max_connections);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "move_storage", _wrap_torrent_handle__wrap_torrent_handle_move_storage);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "rename_file", _wrap_torrent_handle_rename_file);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "super_seeding", _wrap_torrent_handle_super_seeding);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "info_hash", _wrap_torrent_handle_info_hash);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "op_eq", _wrap_torrent_handle_op_eq);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "op_ne", _wrap_torrent_handle_op_ne);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "op_lt", _wrap_torrent_handle_op_lt);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "id", _wrap_torrent_handle_id);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "add_piece_bytes", _wrap_torrent_handle__wrap_torrent_handle_add_piece_bytes);
SWIGV8_AddMemberFunction(_exports_torrent_handle_class, "torrent_file_ptr", _wrap_torrent_handle_torrent_file_ptr);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "version", _wrap_add_torrent_params_version_get, _wrap_add_torrent_params_version_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "trackers", _wrap_add_torrent_params_trackers_get, _wrap_add_torrent_params_trackers_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "tracker_tiers", _wrap_add_torrent_params_tracker_tiers_get, _wrap_add_torrent_params_tracker_tiers_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "dht_nodes", _wrap_add_torrent_params_dht_nodes_get, _wrap_add_torrent_params_dht_nodes_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "name", _wrap_add_torrent_params_name_get, _wrap_add_torrent_params_name_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "save_path", _wrap_add_torrent_params_save_path_get, _wrap_add_torrent_params_save_path_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "storage_mode", _wrap_add_torrent_params_storage_mode_get, _wrap_add_torrent_params_storage_mode_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "file_priorities", _wrap_add_torrent_params_file_priorities_get, _wrap_add_torrent_params_file_priorities_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "trackerid", _wrap_add_torrent_params_trackerid_get, _wrap_add_torrent_params_trackerid_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "url", _wrap_add_torrent_params_url_get, _wrap_add_torrent_params_url_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "flags", _wrap_add_torrent_params_flags_get, _wrap_add_torrent_params_flags_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "info_hash", _wrap_add_torrent_params_info_hash_get, _wrap_add_torrent_params_info_hash_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "max_uploads", _wrap_add_torrent_params_max_uploads_get, _wrap_add_torrent_params_max_uploads_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "max_connections", _wrap_add_torrent_params_max_connections_get, _wrap_add_torrent_params_max_connections_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "upload_limit", _wrap_add_torrent_params_upload_limit_get, _wrap_add_torrent_params_upload_limit_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "download_limit", _wrap_add_torrent_params_download_limit_get, _wrap_add_torrent_params_download_limit_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "total_uploaded", _wrap_add_torrent_params_total_uploaded_get, _wrap_add_torrent_params_total_uploaded_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "total_downloaded", _wrap_add_torrent_params_total_downloaded_get, _wrap_add_torrent_params_total_downloaded_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "active_time", _wrap_add_torrent_params_active_time_get, _wrap_add_torrent_params_active_time_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "finished_time", _wrap_add_torrent_params_finished_time_get, _wrap_add_torrent_params_finished_time_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "seeding_time", _wrap_add_torrent_params_seeding_time_get, _wrap_add_torrent_params_seeding_time_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "added_time", _wrap_add_torrent_params_added_time_get, _wrap_add_torrent_params_added_time_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "completed_time", _wrap_add_torrent_params_completed_time_get, _wrap_add_torrent_params_completed_time_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "last_seen_complete", _wrap_add_torrent_params_last_seen_complete_get, _wrap_add_torrent_params_last_seen_complete_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "num_complete", _wrap_add_torrent_params_num_complete_get, _wrap_add_torrent_params_num_complete_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "num_incomplete", _wrap_add_torrent_params_num_incomplete_get, _wrap_add_torrent_params_num_incomplete_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "num_downloaded", _wrap_add_torrent_params_num_downloaded_get, _wrap_add_torrent_params_num_downloaded_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "http_seeds", _wrap_add_torrent_params_http_seeds_get, _wrap_add_torrent_params_http_seeds_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "url_seeds", _wrap_add_torrent_params_url_seeds_get, _wrap_add_torrent_params_url_seeds_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "peers", _wrap_add_torrent_params_peers_get, _wrap_add_torrent_params_peers_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "banned_peers", _wrap_add_torrent_params_banned_peers_get, _wrap_add_torrent_params_banned_peers_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "unfinished_pieces", _wrap_add_torrent_params_unfinished_pieces_get, _wrap_add_torrent_params_unfinished_pieces_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "have_pieces", _wrap_add_torrent_params_have_pieces_get, _wrap_add_torrent_params_have_pieces_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "verified_pieces", _wrap_add_torrent_params_verified_pieces_get, _wrap_add_torrent_params_verified_pieces_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "piece_priorities", _wrap_add_torrent_params_piece_priorities_get, _wrap_add_torrent_params_piece_priorities_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "merkle_tree", _wrap_add_torrent_params_merkle_tree_get, _wrap_add_torrent_params_merkle_tree_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_params_class, "renamed_files", _wrap_add_torrent_params_renamed_files_get, _wrap_add_torrent_params_renamed_files_set);
SWIGV8_AddMemberFunction(_exports_add_torrent_params_class, "ti_ptr", _wrap_add_torrent_params_ti_ptr);
SWIGV8_AddMemberFunction(_exports_add_torrent_params_class, "set_ti", _wrap_add_torrent_params_set_ti);
SWIGV8_AddStaticVariable(exports_obj, "op_bittorrent", _wrap_libtorrent_op_bittorrent, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "op_iocontrol", _wrap_libtorrent_op_iocontrol, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "op_getpeername", _wrap_libtorrent_op_getpeername, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "op_getname", _wrap_libtorrent_op_getname, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "op_alloc_recvbuf", _wrap_libtorrent_op_alloc_recvbuf, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "op_alloc_sndbuf", _wrap_libtorrent_op_alloc_sndbuf, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "op_file_write", _wrap_libtorrent_op_file_write, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "op_file_read", _wrap_libtorrent_op_file_read, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "op_file", _wrap_libtorrent_op_file, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "op_sock_write", _wrap_libtorrent_op_sock_write, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "op_sock_read", _wrap_libtorrent_op_sock_read, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "op_sock_open", _wrap_libtorrent_op_sock_open, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "op_sock_bind", _wrap_libtorrent_op_sock_bind, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "op_available", _wrap_libtorrent_op_available, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "op_encryption", _wrap_libtorrent_op_encryption, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "op_connect", _wrap_libtorrent_op_connect, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "op_ssl_handshake", _wrap_libtorrent_op_ssl_handshake, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "op_get_interface", _wrap_libtorrent_op_get_interface, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "op_unknown", _wrap_libtorrent_op_unknown, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_stats_metric_class, "value_index", _wrap_stats_metric_value_index_get, _wrap_stats_metric_value_index_set);
SWIGV8_AddMemberVariable(_exports_stats_metric_class, "type", _wrap_stats_metric_type_get, _wrap_stats_metric_type_set);
SWIGV8_AddMemberFunction(_exports_stats_metric_class, "get_name", _wrap_stats_metric_get_name);
SWIGV8_AddStaticVariable(exports_obj, "close_no_reason", _wrap_libtorrent_close_no_reason, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_duplicate_peer_id", _wrap_libtorrent_close_duplicate_peer_id, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_torrent_removed", _wrap_libtorrent_close_torrent_removed, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_no_memory", _wrap_libtorrent_close_no_memory, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_port_blocked", _wrap_libtorrent_close_port_blocked, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_blocked", _wrap_libtorrent_close_blocked, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_upload_to_upload", _wrap_libtorrent_close_upload_to_upload, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_not_interested_upload_only", _wrap_libtorrent_close_not_interested_upload_only, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_timeout", _wrap_libtorrent_close_timeout, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_timed_out_interest", _wrap_libtorrent_close_timed_out_interest, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_timed_out_activity", _wrap_libtorrent_close_timed_out_activity, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_timed_out_handshake", _wrap_libtorrent_close_timed_out_handshake, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_timed_out_request", _wrap_libtorrent_close_timed_out_request, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_protocol_blocked", _wrap_libtorrent_close_protocol_blocked, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_peer_churn", _wrap_libtorrent_close_peer_churn, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_too_many_connections", _wrap_libtorrent_close_too_many_connections, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_too_many_files", _wrap_libtorrent_close_too_many_files, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_encryption_error", _wrap_libtorrent_close_encryption_error, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_invalid_info_hash", _wrap_libtorrent_close_invalid_info_hash, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_self_connection", _wrap_libtorrent_close_self_connection, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_invalid_metadata", _wrap_libtorrent_close_invalid_metadata, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_metadata_too_big", _wrap_libtorrent_close_metadata_too_big, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_message_too_big", _wrap_libtorrent_close_message_too_big, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_invalid_message_id", _wrap_libtorrent_close_invalid_message_id, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_invalid_message", _wrap_libtorrent_close_invalid_message, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_invalid_piece_message", _wrap_libtorrent_close_invalid_piece_message, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_invalid_have_message", _wrap_libtorrent_close_invalid_have_message, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_invalid_bitfield_message", _wrap_libtorrent_close_invalid_bitfield_message, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_invalid_choke_message", _wrap_libtorrent_close_invalid_choke_message, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_invalid_unchoke_message", _wrap_libtorrent_close_invalid_unchoke_message, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_invalid_interested_message", _wrap_libtorrent_close_invalid_interested_message, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_invalid_not_interested_message", _wrap_libtorrent_close_invalid_not_interested_message, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_invalid_request_message", _wrap_libtorrent_close_invalid_request_message, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_invalid_reject_message", _wrap_libtorrent_close_invalid_reject_message, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_invalid_allow_fast_message", _wrap_libtorrent_close_invalid_allow_fast_message, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_invalid_extended_message", _wrap_libtorrent_close_invalid_extended_message, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_invalid_cancel_message", _wrap_libtorrent_close_invalid_cancel_message, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_invalid_dht_port_message", _wrap_libtorrent_close_invalid_dht_port_message, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_invalid_suggest_message", _wrap_libtorrent_close_invalid_suggest_message, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_invalid_have_all_message", _wrap_libtorrent_close_invalid_have_all_message, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_invalid_dont_have_message", _wrap_libtorrent_close_invalid_dont_have_message, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_invalid_have_none_message", _wrap_libtorrent_close_invalid_have_none_message, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_invalid_pex_message", _wrap_libtorrent_close_invalid_pex_message, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_invalid_metadata_request_message", _wrap_libtorrent_close_invalid_metadata_request_message, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_invalid_metadata_message", _wrap_libtorrent_close_invalid_metadata_message, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_invalid_metadata_offset", _wrap_libtorrent_close_invalid_metadata_offset, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_request_when_choked", _wrap_libtorrent_close_request_when_choked, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_corrupt_pieces", _wrap_libtorrent_close_corrupt_pieces, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_pex_message_too_big", _wrap_libtorrent_close_pex_message_too_big, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "close_pex_too_frequent", _wrap_libtorrent_close_pex_too_frequent, JS_veto_set_variable);
SWIGV8_AddMemberFunction(_exports_alert_class, "type", _wrap_alert_type);
SWIGV8_AddMemberFunction(_exports_alert_class, "what", _wrap_alert_what);
SWIGV8_AddMemberFunction(_exports_alert_class, "message", _wrap_alert_message);
SWIGV8_AddMemberFunction(_exports_alert_class, "category", _wrap_alert_category);
SWIGV8_AddMemberFunction(_exports_alert_class, "get_timestamp", _wrap_alert_get_timestamp);
SWIGV8_AddMemberFunction(_exports_torrent_alert_class, "message", _wrap_torrent_alert_message);
SWIGV8_AddMemberVariable(_exports_torrent_alert_class, "handle", _wrap_torrent_alert_handle_get, _wrap_torrent_alert_handle_set);
SWIGV8_AddMemberFunction(_exports_torrent_alert_class, "torrent_name", _wrap_torrent_alert_torrent_name);
SWIGV8_AddMemberFunction(_exports_peer_alert_class, "category", _wrap_peer_alert_category);
SWIGV8_AddMemberFunction(_exports_peer_alert_class, "message", _wrap_peer_alert_message);
SWIGV8_AddMemberVariable(_exports_peer_alert_class, "ip", _wrap_peer_alert_ip_get, _wrap_peer_alert_ip_set);
SWIGV8_AddMemberVariable(_exports_peer_alert_class, "pid", _wrap_peer_alert_pid_get, _wrap_peer_alert_pid_set);
SWIGV8_AddMemberFunction(_exports_tracker_alert_class, "category", _wrap_tracker_alert_category);
SWIGV8_AddMemberFunction(_exports_tracker_alert_class, "message", _wrap_tracker_alert_message);
SWIGV8_AddMemberFunction(_exports_tracker_alert_class, "tracker_url", _wrap_tracker_alert_tracker_url);
SWIGV8_AddMemberFunction(_exports_torrent_added_alert_class, "type", _wrap_torrent_added_alert_type);
SWIGV8_AddMemberFunction(_exports_torrent_added_alert_class, "category", _wrap_torrent_added_alert_category);
SWIGV8_AddMemberFunction(_exports_torrent_added_alert_class, "what", _wrap_torrent_added_alert_what);
SWIGV8_AddMemberFunction(_exports_torrent_added_alert_class, "message", _wrap_torrent_added_alert_message);
SWIGV8_AddMemberFunction(_exports_torrent_removed_alert_class, "type", _wrap_torrent_removed_alert_type);
SWIGV8_AddMemberFunction(_exports_torrent_removed_alert_class, "category", _wrap_torrent_removed_alert_category);
SWIGV8_AddMemberFunction(_exports_torrent_removed_alert_class, "what", _wrap_torrent_removed_alert_what);
SWIGV8_AddMemberFunction(_exports_torrent_removed_alert_class, "message", _wrap_torrent_removed_alert_message);
SWIGV8_AddMemberVariable(_exports_torrent_removed_alert_class, "info_hash", _wrap_torrent_removed_alert_info_hash_get, _wrap_torrent_removed_alert_info_hash_set);
SWIGV8_AddMemberFunction(_exports_read_piece_alert_class, "type", _wrap_read_piece_alert_type);
SWIGV8_AddMemberFunction(_exports_read_piece_alert_class, "category", _wrap_read_piece_alert_category);
SWIGV8_AddMemberFunction(_exports_read_piece_alert_class, "what", _wrap_read_piece_alert_what);
SWIGV8_AddMemberFunction(_exports_read_piece_alert_class, "message", _wrap_read_piece_alert_message);
SWIGV8_AddMemberVariable(_exports_read_piece_alert_class, "ec", _wrap_read_piece_alert_ec_get, _wrap_read_piece_alert_ec_set);
SWIGV8_AddMemberVariable(_exports_read_piece_alert_class, "piece", _wrap_read_piece_alert_piece_get, _wrap_read_piece_alert_piece_set);
SWIGV8_AddMemberVariable(_exports_read_piece_alert_class, "size", _wrap_read_piece_alert_size_get, _wrap_read_piece_alert_size_set);
SWIGV8_AddMemberFunction(_exports_read_piece_alert_class, "buffer_ptr", _wrap_read_piece_alert_buffer_ptr);
SWIGV8_AddMemberFunction(_exports_file_completed_alert_class, "type", _wrap_file_completed_alert_type);
SWIGV8_AddMemberFunction(_exports_file_completed_alert_class, "category", _wrap_file_completed_alert_category);
SWIGV8_AddMemberFunction(_exports_file_completed_alert_class, "what", _wrap_file_completed_alert_what);
SWIGV8_AddMemberFunction(_exports_file_completed_alert_class, "message", _wrap_file_completed_alert_message);
SWIGV8_AddMemberVariable(_exports_file_completed_alert_class, "index", _wrap_file_completed_alert_index_get, _wrap_file_completed_alert_index_set);
SWIGV8_AddMemberFunction(_exports_file_renamed_alert_class, "type", _wrap_file_renamed_alert_type);
SWIGV8_AddMemberFunction(_exports_file_renamed_alert_class, "category", _wrap_file_renamed_alert_category);
SWIGV8_AddMemberFunction(_exports_file_renamed_alert_class, "what", _wrap_file_renamed_alert_what);
SWIGV8_AddMemberFunction(_exports_file_renamed_alert_class, "message", _wrap_file_renamed_alert_message);
SWIGV8_AddMemberFunction(_exports_file_renamed_alert_class, "new_name", _wrap_file_renamed_alert_new_name);
SWIGV8_AddMemberVariable(_exports_file_renamed_alert_class, "index", _wrap_file_renamed_alert_index_get, _wrap_file_renamed_alert_index_set);
SWIGV8_AddMemberFunction(_exports_file_rename_failed_alert_class, "type", _wrap_file_rename_failed_alert_type);
SWIGV8_AddMemberFunction(_exports_file_rename_failed_alert_class, "category", _wrap_file_rename_failed_alert_category);
SWIGV8_AddMemberFunction(_exports_file_rename_failed_alert_class, "what", _wrap_file_rename_failed_alert_what);
SWIGV8_AddMemberFunction(_exports_file_rename_failed_alert_class, "message", _wrap_file_rename_failed_alert_message);
SWIGV8_AddMemberVariable(_exports_file_rename_failed_alert_class, "index", _wrap_file_rename_failed_alert_index_get, _wrap_file_rename_failed_alert_index_set);
SWIGV8_AddMemberVariable(_exports_file_rename_failed_alert_class, "error", _wrap_file_rename_failed_alert_error_get, _wrap_file_rename_failed_alert_error_set);
SWIGV8_AddMemberFunction(_exports_performance_alert_class, "type", _wrap_performance_alert_type);
SWIGV8_AddMemberFunction(_exports_performance_alert_class, "category", _wrap_performance_alert_category);
SWIGV8_AddMemberFunction(_exports_performance_alert_class, "what", _wrap_performance_alert_what);
SWIGV8_AddMemberFunction(_exports_performance_alert_class, "message", _wrap_performance_alert_message);
SWIGV8_AddMemberVariable(_exports_performance_alert_class, "warning_code", _wrap_performance_alert_warning_code_get, _wrap_performance_alert_warning_code_set);
SWIGV8_AddMemberFunction(_exports_state_changed_alert_class, "type", _wrap_state_changed_alert_type);
SWIGV8_AddMemberFunction(_exports_state_changed_alert_class, "category", _wrap_state_changed_alert_category);
SWIGV8_AddMemberFunction(_exports_state_changed_alert_class, "what", _wrap_state_changed_alert_what);
SWIGV8_AddMemberFunction(_exports_state_changed_alert_class, "message", _wrap_state_changed_alert_message);
SWIGV8_AddMemberVariable(_exports_state_changed_alert_class, "state", _wrap_state_changed_alert_state_get, _wrap_state_changed_alert_state_set);
SWIGV8_AddMemberVariable(_exports_state_changed_alert_class, "prev_state", _wrap_state_changed_alert_prev_state_get, _wrap_state_changed_alert_prev_state_set);
SWIGV8_AddMemberFunction(_exports_tracker_error_alert_class, "type", _wrap_tracker_error_alert_type);
SWIGV8_AddMemberFunction(_exports_tracker_error_alert_class, "category", _wrap_tracker_error_alert_category);
SWIGV8_AddMemberFunction(_exports_tracker_error_alert_class, "what", _wrap_tracker_error_alert_what);
SWIGV8_AddMemberFunction(_exports_tracker_error_alert_class, "message", _wrap_tracker_error_alert_message);
SWIGV8_AddMemberVariable(_exports_tracker_error_alert_class, "times_in_row", _wrap_tracker_error_alert_times_in_row_get, _wrap_tracker_error_alert_times_in_row_set);
SWIGV8_AddMemberVariable(_exports_tracker_error_alert_class, "status_code", _wrap_tracker_error_alert_status_code_get, _wrap_tracker_error_alert_status_code_set);
SWIGV8_AddMemberVariable(_exports_tracker_error_alert_class, "error", _wrap_tracker_error_alert_error_get, _wrap_tracker_error_alert_error_set);
SWIGV8_AddMemberFunction(_exports_tracker_error_alert_class, "error_message", _wrap_tracker_error_alert_error_message);
SWIGV8_AddMemberFunction(_exports_tracker_warning_alert_class, "type", _wrap_tracker_warning_alert_type);
SWIGV8_AddMemberFunction(_exports_tracker_warning_alert_class, "category", _wrap_tracker_warning_alert_category);
SWIGV8_AddMemberFunction(_exports_tracker_warning_alert_class, "what", _wrap_tracker_warning_alert_what);
SWIGV8_AddMemberFunction(_exports_tracker_warning_alert_class, "message", _wrap_tracker_warning_alert_message);
SWIGV8_AddMemberFunction(_exports_tracker_warning_alert_class, "warning_message", _wrap_tracker_warning_alert_warning_message);
SWIGV8_AddMemberFunction(_exports_scrape_reply_alert_class, "type", _wrap_scrape_reply_alert_type);
SWIGV8_AddMemberFunction(_exports_scrape_reply_alert_class, "category", _wrap_scrape_reply_alert_category);
SWIGV8_AddMemberFunction(_exports_scrape_reply_alert_class, "what", _wrap_scrape_reply_alert_what);
SWIGV8_AddMemberFunction(_exports_scrape_reply_alert_class, "message", _wrap_scrape_reply_alert_message);
SWIGV8_AddMemberVariable(_exports_scrape_reply_alert_class, "incomplete", _wrap_scrape_reply_alert_incomplete_get, _wrap_scrape_reply_alert_incomplete_set);
SWIGV8_AddMemberVariable(_exports_scrape_reply_alert_class, "complete", _wrap_scrape_reply_alert_complete_get, _wrap_scrape_reply_alert_complete_set);
SWIGV8_AddMemberFunction(_exports_scrape_failed_alert_class, "type", _wrap_scrape_failed_alert_type);
SWIGV8_AddMemberFunction(_exports_scrape_failed_alert_class, "category", _wrap_scrape_failed_alert_category);
SWIGV8_AddMemberFunction(_exports_scrape_failed_alert_class, "what", _wrap_scrape_failed_alert_what);
SWIGV8_AddMemberFunction(_exports_scrape_failed_alert_class, "message", _wrap_scrape_failed_alert_message);
SWIGV8_AddMemberVariable(_exports_scrape_failed_alert_class, "error", _wrap_scrape_failed_alert_error_get, _wrap_scrape_failed_alert_error_set);
SWIGV8_AddMemberFunction(_exports_scrape_failed_alert_class, "error_message", _wrap_scrape_failed_alert_error_message);
SWIGV8_AddMemberFunction(_exports_tracker_reply_alert_class, "type", _wrap_tracker_reply_alert_type);
SWIGV8_AddMemberFunction(_exports_tracker_reply_alert_class, "category", _wrap_tracker_reply_alert_category);
SWIGV8_AddMemberFunction(_exports_tracker_reply_alert_class, "what", _wrap_tracker_reply_alert_what);
SWIGV8_AddMemberFunction(_exports_tracker_reply_alert_class, "message", _wrap_tracker_reply_alert_message);
SWIGV8_AddMemberVariable(_exports_tracker_reply_alert_class, "num_peers", _wrap_tracker_reply_alert_num_peers_get, _wrap_tracker_reply_alert_num_peers_set);
SWIGV8_AddMemberFunction(_exports_dht_reply_alert_class, "type", _wrap_dht_reply_alert_type);
SWIGV8_AddMemberFunction(_exports_dht_reply_alert_class, "category", _wrap_dht_reply_alert_category);
SWIGV8_AddMemberFunction(_exports_dht_reply_alert_class, "what", _wrap_dht_reply_alert_what);
SWIGV8_AddMemberFunction(_exports_dht_reply_alert_class, "message", _wrap_dht_reply_alert_message);
SWIGV8_AddMemberVariable(_exports_dht_reply_alert_class, "num_peers", _wrap_dht_reply_alert_num_peers_get, _wrap_dht_reply_alert_num_peers_set);
SWIGV8_AddMemberFunction(_exports_tracker_announce_alert_class, "type", _wrap_tracker_announce_alert_type);
SWIGV8_AddMemberFunction(_exports_tracker_announce_alert_class, "category", _wrap_tracker_announce_alert_category);
SWIGV8_AddMemberFunction(_exports_tracker_announce_alert_class, "what", _wrap_tracker_announce_alert_what);
SWIGV8_AddMemberFunction(_exports_tracker_announce_alert_class, "message", _wrap_tracker_announce_alert_message);
SWIGV8_AddMemberVariable(_exports_tracker_announce_alert_class, "event", _wrap_tracker_announce_alert_event_get, _wrap_tracker_announce_alert_event_set);
SWIGV8_AddMemberFunction(_exports_hash_failed_alert_class, "type", _wrap_hash_failed_alert_type);
SWIGV8_AddMemberFunction(_exports_hash_failed_alert_class, "category", _wrap_hash_failed_alert_category);
SWIGV8_AddMemberFunction(_exports_hash_failed_alert_class, "what", _wrap_hash_failed_alert_what);
SWIGV8_AddMemberFunction(_exports_hash_failed_alert_class, "message", _wrap_hash_failed_alert_message);
SWIGV8_AddMemberVariable(_exports_hash_failed_alert_class, "piece_index", _wrap_hash_failed_alert_piece_index_get, _wrap_hash_failed_alert_piece_index_set);
SWIGV8_AddMemberFunction(_exports_peer_ban_alert_class, "type", _wrap_peer_ban_alert_type);
SWIGV8_AddMemberFunction(_exports_peer_ban_alert_class, "category", _wrap_peer_ban_alert_category);
SWIGV8_AddMemberFunction(_exports_peer_ban_alert_class, "what", _wrap_peer_ban_alert_what);
SWIGV8_AddMemberFunction(_exports_peer_ban_alert_class, "message", _wrap_peer_ban_alert_message);
SWIGV8_AddMemberFunction(_exports_peer_unsnubbed_alert_class, "type", _wrap_peer_unsnubbed_alert_type);
SWIGV8_AddMemberFunction(_exports_peer_unsnubbed_alert_class, "category", _wrap_peer_unsnubbed_alert_category);
SWIGV8_AddMemberFunction(_exports_peer_unsnubbed_alert_class, "what", _wrap_peer_unsnubbed_alert_what);
SWIGV8_AddMemberFunction(_exports_peer_unsnubbed_alert_class, "message", _wrap_peer_unsnubbed_alert_message);
SWIGV8_AddMemberFunction(_exports_peer_snubbed_alert_class, "type", _wrap_peer_snubbed_alert_type);
SWIGV8_AddMemberFunction(_exports_peer_snubbed_alert_class, "category", _wrap_peer_snubbed_alert_category);
SWIGV8_AddMemberFunction(_exports_peer_snubbed_alert_class, "what", _wrap_peer_snubbed_alert_what);
SWIGV8_AddMemberFunction(_exports_peer_snubbed_alert_class, "message", _wrap_peer_snubbed_alert_message);
SWIGV8_AddMemberFunction(_exports_peer_error_alert_class, "type", _wrap_peer_error_alert_type);
SWIGV8_AddMemberFunction(_exports_peer_error_alert_class, "category", _wrap_peer_error_alert_category);
SWIGV8_AddMemberFunction(_exports_peer_error_alert_class, "what", _wrap_peer_error_alert_what);
SWIGV8_AddMemberFunction(_exports_peer_error_alert_class, "message", _wrap_peer_error_alert_message);
SWIGV8_AddMemberVariable(_exports_peer_error_alert_class, "operation", _wrap_peer_error_alert_operation_get, _wrap_peer_error_alert_operation_set);
SWIGV8_AddMemberVariable(_exports_peer_error_alert_class, "error", _wrap_peer_error_alert_error_get, _wrap_peer_error_alert_error_set);
SWIGV8_AddMemberFunction(_exports_peer_connect_alert_class, "type", _wrap_peer_connect_alert_type);
SWIGV8_AddMemberFunction(_exports_peer_connect_alert_class, "category", _wrap_peer_connect_alert_category);
SWIGV8_AddMemberFunction(_exports_peer_connect_alert_class, "what", _wrap_peer_connect_alert_what);
SWIGV8_AddMemberFunction(_exports_peer_connect_alert_class, "message", _wrap_peer_connect_alert_message);
SWIGV8_AddMemberVariable(_exports_peer_connect_alert_class, "socket_type", _wrap_peer_connect_alert_socket_type_get, _wrap_peer_connect_alert_socket_type_set);
SWIGV8_AddMemberFunction(_exports_peer_disconnected_alert_class, "type", _wrap_peer_disconnected_alert_type);
SWIGV8_AddMemberFunction(_exports_peer_disconnected_alert_class, "category", _wrap_peer_disconnected_alert_category);
SWIGV8_AddMemberFunction(_exports_peer_disconnected_alert_class, "what", _wrap_peer_disconnected_alert_what);
SWIGV8_AddMemberFunction(_exports_peer_disconnected_alert_class, "message", _wrap_peer_disconnected_alert_message);
SWIGV8_AddMemberVariable(_exports_peer_disconnected_alert_class, "socket_type", _wrap_peer_disconnected_alert_socket_type_get, _wrap_peer_disconnected_alert_socket_type_set);
SWIGV8_AddMemberVariable(_exports_peer_disconnected_alert_class, "operation", _wrap_peer_disconnected_alert_operation_get, _wrap_peer_disconnected_alert_operation_set);
SWIGV8_AddMemberVariable(_exports_peer_disconnected_alert_class, "error", _wrap_peer_disconnected_alert_error_get, _wrap_peer_disconnected_alert_error_set);
SWIGV8_AddMemberVariable(_exports_peer_disconnected_alert_class, "reason", _wrap_peer_disconnected_alert_reason_get, _wrap_peer_disconnected_alert_reason_set);
SWIGV8_AddMemberFunction(_exports_invalid_request_alert_class, "type", _wrap_invalid_request_alert_type);
SWIGV8_AddMemberFunction(_exports_invalid_request_alert_class, "category", _wrap_invalid_request_alert_category);
SWIGV8_AddMemberFunction(_exports_invalid_request_alert_class, "what", _wrap_invalid_request_alert_what);
SWIGV8_AddMemberFunction(_exports_invalid_request_alert_class, "message", _wrap_invalid_request_alert_message);
SWIGV8_AddMemberVariable(_exports_invalid_request_alert_class, "request", _wrap_invalid_request_alert_request_get, _wrap_invalid_request_alert_request_set);
SWIGV8_AddMemberVariable(_exports_invalid_request_alert_class, "we_have", _wrap_invalid_request_alert_we_have_get, _wrap_invalid_request_alert_we_have_set);
SWIGV8_AddMemberVariable(_exports_invalid_request_alert_class, "peer_interested", _wrap_invalid_request_alert_peer_interested_get, _wrap_invalid_request_alert_peer_interested_set);
SWIGV8_AddMemberVariable(_exports_invalid_request_alert_class, "withheld", _wrap_invalid_request_alert_withheld_get, _wrap_invalid_request_alert_withheld_set);
SWIGV8_AddMemberFunction(_exports_torrent_finished_alert_class, "type", _wrap_torrent_finished_alert_type);
SWIGV8_AddMemberFunction(_exports_torrent_finished_alert_class, "category", _wrap_torrent_finished_alert_category);
SWIGV8_AddMemberFunction(_exports_torrent_finished_alert_class, "what", _wrap_torrent_finished_alert_what);
SWIGV8_AddMemberFunction(_exports_torrent_finished_alert_class, "message", _wrap_torrent_finished_alert_message);
SWIGV8_AddMemberFunction(_exports_piece_finished_alert_class, "type", _wrap_piece_finished_alert_type);
SWIGV8_AddMemberFunction(_exports_piece_finished_alert_class, "category", _wrap_piece_finished_alert_category);
SWIGV8_AddMemberFunction(_exports_piece_finished_alert_class, "what", _wrap_piece_finished_alert_what);
SWIGV8_AddMemberFunction(_exports_piece_finished_alert_class, "message", _wrap_piece_finished_alert_message);
SWIGV8_AddMemberVariable(_exports_piece_finished_alert_class, "piece_index", _wrap_piece_finished_alert_piece_index_get, _wrap_piece_finished_alert_piece_index_set);
SWIGV8_AddMemberFunction(_exports_request_dropped_alert_class, "type", _wrap_request_dropped_alert_type);
SWIGV8_AddMemberFunction(_exports_request_dropped_alert_class, "category", _wrap_request_dropped_alert_category);
SWIGV8_AddMemberFunction(_exports_request_dropped_alert_class, "what", _wrap_request_dropped_alert_what);
SWIGV8_AddMemberFunction(_exports_request_dropped_alert_class, "message", _wrap_request_dropped_alert_message);
SWIGV8_AddMemberVariable(_exports_request_dropped_alert_class, "block_index", _wrap_request_dropped_alert_block_index_get, _wrap_request_dropped_alert_block_index_set);
SWIGV8_AddMemberVariable(_exports_request_dropped_alert_class, "piece_index", _wrap_request_dropped_alert_piece_index_get, _wrap_request_dropped_alert_piece_index_set);
SWIGV8_AddMemberFunction(_exports_block_timeout_alert_class, "type", _wrap_block_timeout_alert_type);
SWIGV8_AddMemberFunction(_exports_block_timeout_alert_class, "category", _wrap_block_timeout_alert_category);
SWIGV8_AddMemberFunction(_exports_block_timeout_alert_class, "what", _wrap_block_timeout_alert_what);
SWIGV8_AddMemberFunction(_exports_block_timeout_alert_class, "message", _wrap_block_timeout_alert_message);
SWIGV8_AddMemberVariable(_exports_block_timeout_alert_class, "block_index", _wrap_block_timeout_alert_block_index_get, _wrap_block_timeout_alert_block_index_set);
SWIGV8_AddMemberVariable(_exports_block_timeout_alert_class, "piece_index", _wrap_block_timeout_alert_piece_index_get, _wrap_block_timeout_alert_piece_index_set);
SWIGV8_AddMemberFunction(_exports_block_finished_alert_class, "type", _wrap_block_finished_alert_type);
SWIGV8_AddMemberFunction(_exports_block_finished_alert_class, "category", _wrap_block_finished_alert_category);
SWIGV8_AddMemberFunction(_exports_block_finished_alert_class, "what", _wrap_block_finished_alert_what);
SWIGV8_AddMemberFunction(_exports_block_finished_alert_class, "message", _wrap_block_finished_alert_message);
SWIGV8_AddMemberVariable(_exports_block_finished_alert_class, "block_index", _wrap_block_finished_alert_block_index_get, _wrap_block_finished_alert_block_index_set);
SWIGV8_AddMemberVariable(_exports_block_finished_alert_class, "piece_index", _wrap_block_finished_alert_piece_index_get, _wrap_block_finished_alert_piece_index_set);
SWIGV8_AddMemberFunction(_exports_block_downloading_alert_class, "type", _wrap_block_downloading_alert_type);
SWIGV8_AddMemberFunction(_exports_block_downloading_alert_class, "category", _wrap_block_downloading_alert_category);
SWIGV8_AddMemberFunction(_exports_block_downloading_alert_class, "what", _wrap_block_downloading_alert_what);
SWIGV8_AddMemberFunction(_exports_block_downloading_alert_class, "message", _wrap_block_downloading_alert_message);
SWIGV8_AddMemberVariable(_exports_block_downloading_alert_class, "block_index", _wrap_block_downloading_alert_block_index_get, _wrap_block_downloading_alert_block_index_set);
SWIGV8_AddMemberVariable(_exports_block_downloading_alert_class, "piece_index", _wrap_block_downloading_alert_piece_index_get, _wrap_block_downloading_alert_piece_index_set);
SWIGV8_AddMemberFunction(_exports_unwanted_block_alert_class, "type", _wrap_unwanted_block_alert_type);
SWIGV8_AddMemberFunction(_exports_unwanted_block_alert_class, "category", _wrap_unwanted_block_alert_category);
SWIGV8_AddMemberFunction(_exports_unwanted_block_alert_class, "what", _wrap_unwanted_block_alert_what);
SWIGV8_AddMemberFunction(_exports_unwanted_block_alert_class, "message", _wrap_unwanted_block_alert_message);
SWIGV8_AddMemberVariable(_exports_unwanted_block_alert_class, "block_index", _wrap_unwanted_block_alert_block_index_get, _wrap_unwanted_block_alert_block_index_set);
SWIGV8_AddMemberVariable(_exports_unwanted_block_alert_class, "piece_index", _wrap_unwanted_block_alert_piece_index_get, _wrap_unwanted_block_alert_piece_index_set);
SWIGV8_AddMemberFunction(_exports_storage_moved_alert_class, "type", _wrap_storage_moved_alert_type);
SWIGV8_AddMemberFunction(_exports_storage_moved_alert_class, "category", _wrap_storage_moved_alert_category);
SWIGV8_AddMemberFunction(_exports_storage_moved_alert_class, "what", _wrap_storage_moved_alert_what);
SWIGV8_AddMemberFunction(_exports_storage_moved_alert_class, "message", _wrap_storage_moved_alert_message);
SWIGV8_AddMemberFunction(_exports_storage_moved_alert_class, "storage_path", _wrap_storage_moved_alert_storage_path);
SWIGV8_AddMemberFunction(_exports_storage_moved_failed_alert_class, "type", _wrap_storage_moved_failed_alert_type);
SWIGV8_AddMemberFunction(_exports_storage_moved_failed_alert_class, "category", _wrap_storage_moved_failed_alert_category);
SWIGV8_AddMemberFunction(_exports_storage_moved_failed_alert_class, "what", _wrap_storage_moved_failed_alert_what);
SWIGV8_AddMemberFunction(_exports_storage_moved_failed_alert_class, "message", _wrap_storage_moved_failed_alert_message);
SWIGV8_AddMemberVariable(_exports_storage_moved_failed_alert_class, "error", _wrap_storage_moved_failed_alert_error_get, _wrap_storage_moved_failed_alert_error_set);
SWIGV8_AddMemberFunction(_exports_storage_moved_failed_alert_class, "file_path", _wrap_storage_moved_failed_alert_file_path);
SWIGV8_AddMemberFunction(_exports_storage_moved_failed_alert_class, "get_operation", _wrap_storage_moved_failed_alert_get_operation);
SWIGV8_AddMemberFunction(_exports_torrent_deleted_alert_class, "type", _wrap_torrent_deleted_alert_type);
SWIGV8_AddMemberFunction(_exports_torrent_deleted_alert_class, "category", _wrap_torrent_deleted_alert_category);
SWIGV8_AddMemberFunction(_exports_torrent_deleted_alert_class, "what", _wrap_torrent_deleted_alert_what);
SWIGV8_AddMemberFunction(_exports_torrent_deleted_alert_class, "message", _wrap_torrent_deleted_alert_message);
SWIGV8_AddMemberVariable(_exports_torrent_deleted_alert_class, "info_hash", _wrap_torrent_deleted_alert_info_hash_get, _wrap_torrent_deleted_alert_info_hash_set);
SWIGV8_AddMemberFunction(_exports_torrent_delete_failed_alert_class, "type", _wrap_torrent_delete_failed_alert_type);
SWIGV8_AddMemberFunction(_exports_torrent_delete_failed_alert_class, "category", _wrap_torrent_delete_failed_alert_category);
SWIGV8_AddMemberFunction(_exports_torrent_delete_failed_alert_class, "what", _wrap_torrent_delete_failed_alert_what);
SWIGV8_AddMemberFunction(_exports_torrent_delete_failed_alert_class, "message", _wrap_torrent_delete_failed_alert_message);
SWIGV8_AddMemberVariable(_exports_torrent_delete_failed_alert_class, "error", _wrap_torrent_delete_failed_alert_error_get, _wrap_torrent_delete_failed_alert_error_set);
SWIGV8_AddMemberVariable(_exports_torrent_delete_failed_alert_class, "info_hash", _wrap_torrent_delete_failed_alert_info_hash_get, _wrap_torrent_delete_failed_alert_info_hash_set);
SWIGV8_AddMemberFunction(_exports_save_resume_data_alert_class, "type", _wrap_save_resume_data_alert_type);
SWIGV8_AddMemberFunction(_exports_save_resume_data_alert_class, "category", _wrap_save_resume_data_alert_category);
SWIGV8_AddMemberFunction(_exports_save_resume_data_alert_class, "what", _wrap_save_resume_data_alert_what);
SWIGV8_AddMemberFunction(_exports_save_resume_data_alert_class, "message", _wrap_save_resume_data_alert_message);
SWIGV8_AddMemberFunction(_exports_save_resume_data_alert_class, "get_resume_data", _wrap_save_resume_data_alert_get_resume_data);
SWIGV8_AddMemberFunction(_exports_save_resume_data_failed_alert_class, "type", _wrap_save_resume_data_failed_alert_type);
SWIGV8_AddMemberFunction(_exports_save_resume_data_failed_alert_class, "category", _wrap_save_resume_data_failed_alert_category);
SWIGV8_AddMemberFunction(_exports_save_resume_data_failed_alert_class, "what", _wrap_save_resume_data_failed_alert_what);
SWIGV8_AddMemberFunction(_exports_save_resume_data_failed_alert_class, "message", _wrap_save_resume_data_failed_alert_message);
SWIGV8_AddMemberVariable(_exports_save_resume_data_failed_alert_class, "error", _wrap_save_resume_data_failed_alert_error_get, _wrap_save_resume_data_failed_alert_error_set);
SWIGV8_AddMemberFunction(_exports_torrent_paused_alert_class, "type", _wrap_torrent_paused_alert_type);
SWIGV8_AddMemberFunction(_exports_torrent_paused_alert_class, "category", _wrap_torrent_paused_alert_category);
SWIGV8_AddMemberFunction(_exports_torrent_paused_alert_class, "what", _wrap_torrent_paused_alert_what);
SWIGV8_AddMemberFunction(_exports_torrent_paused_alert_class, "message", _wrap_torrent_paused_alert_message);
SWIGV8_AddMemberFunction(_exports_torrent_resumed_alert_class, "type", _wrap_torrent_resumed_alert_type);
SWIGV8_AddMemberFunction(_exports_torrent_resumed_alert_class, "category", _wrap_torrent_resumed_alert_category);
SWIGV8_AddMemberFunction(_exports_torrent_resumed_alert_class, "what", _wrap_torrent_resumed_alert_what);
SWIGV8_AddMemberFunction(_exports_torrent_resumed_alert_class, "message", _wrap_torrent_resumed_alert_message);
SWIGV8_AddMemberFunction(_exports_torrent_checked_alert_class, "type", _wrap_torrent_checked_alert_type);
SWIGV8_AddMemberFunction(_exports_torrent_checked_alert_class, "category", _wrap_torrent_checked_alert_category);
SWIGV8_AddMemberFunction(_exports_torrent_checked_alert_class, "what", _wrap_torrent_checked_alert_what);
SWIGV8_AddMemberFunction(_exports_torrent_checked_alert_class, "message", _wrap_torrent_checked_alert_message);
SWIGV8_AddMemberFunction(_exports_url_seed_alert_class, "type", _wrap_url_seed_alert_type);
SWIGV8_AddMemberFunction(_exports_url_seed_alert_class, "category", _wrap_url_seed_alert_category);
SWIGV8_AddMemberFunction(_exports_url_seed_alert_class, "what", _wrap_url_seed_alert_what);
SWIGV8_AddMemberFunction(_exports_url_seed_alert_class, "message", _wrap_url_seed_alert_message);
SWIGV8_AddMemberVariable(_exports_url_seed_alert_class, "error", _wrap_url_seed_alert_error_get, _wrap_url_seed_alert_error_set);
SWIGV8_AddMemberFunction(_exports_url_seed_alert_class, "server_url", _wrap_url_seed_alert_server_url);
SWIGV8_AddMemberFunction(_exports_url_seed_alert_class, "error_message", _wrap_url_seed_alert_error_message);
SWIGV8_AddMemberFunction(_exports_file_error_alert_class, "type", _wrap_file_error_alert_type);
SWIGV8_AddMemberFunction(_exports_file_error_alert_class, "category", _wrap_file_error_alert_category);
SWIGV8_AddMemberFunction(_exports_file_error_alert_class, "what", _wrap_file_error_alert_what);
SWIGV8_AddMemberFunction(_exports_file_error_alert_class, "message", _wrap_file_error_alert_message);
SWIGV8_AddMemberVariable(_exports_file_error_alert_class, "error", _wrap_file_error_alert_error_get, _wrap_file_error_alert_error_set);
SWIGV8_AddMemberFunction(_exports_file_error_alert_class, "filename", _wrap_file_error_alert_filename);
SWIGV8_AddMemberFunction(_exports_file_error_alert_class, "get_operation", _wrap_file_error_alert_get_operation);
SWIGV8_AddMemberFunction(_exports_metadata_failed_alert_class, "type", _wrap_metadata_failed_alert_type);
SWIGV8_AddMemberFunction(_exports_metadata_failed_alert_class, "category", _wrap_metadata_failed_alert_category);
SWIGV8_AddMemberFunction(_exports_metadata_failed_alert_class, "what", _wrap_metadata_failed_alert_what);
SWIGV8_AddMemberFunction(_exports_metadata_failed_alert_class, "message", _wrap_metadata_failed_alert_message);
SWIGV8_AddMemberVariable(_exports_metadata_failed_alert_class, "error", _wrap_metadata_failed_alert_error_get, _wrap_metadata_failed_alert_error_set);
SWIGV8_AddMemberFunction(_exports_metadata_received_alert_class, "type", _wrap_metadata_received_alert_type);
SWIGV8_AddMemberFunction(_exports_metadata_received_alert_class, "category", _wrap_metadata_received_alert_category);
SWIGV8_AddMemberFunction(_exports_metadata_received_alert_class, "what", _wrap_metadata_received_alert_what);
SWIGV8_AddMemberFunction(_exports_metadata_received_alert_class, "message", _wrap_metadata_received_alert_message);
SWIGV8_AddMemberFunction(_exports_udp_error_alert_class, "type", _wrap_udp_error_alert_type);
SWIGV8_AddMemberFunction(_exports_udp_error_alert_class, "category", _wrap_udp_error_alert_category);
SWIGV8_AddMemberFunction(_exports_udp_error_alert_class, "what", _wrap_udp_error_alert_what);
SWIGV8_AddMemberFunction(_exports_udp_error_alert_class, "message", _wrap_udp_error_alert_message);
SWIGV8_AddMemberVariable(_exports_udp_error_alert_class, "endpoint", _wrap_udp_error_alert_endpoint_get, _wrap_udp_error_alert_endpoint_set);
SWIGV8_AddMemberVariable(_exports_udp_error_alert_class, "error", _wrap_udp_error_alert_error_get, _wrap_udp_error_alert_error_set);
SWIGV8_AddMemberFunction(_exports_external_ip_alert_class, "type", _wrap_external_ip_alert_type);
SWIGV8_AddMemberFunction(_exports_external_ip_alert_class, "category", _wrap_external_ip_alert_category);
SWIGV8_AddMemberFunction(_exports_external_ip_alert_class, "what", _wrap_external_ip_alert_what);
SWIGV8_AddMemberFunction(_exports_external_ip_alert_class, "message", _wrap_external_ip_alert_message);
SWIGV8_AddMemberVariable(_exports_external_ip_alert_class, "external_address", _wrap_external_ip_alert_external_address_get, _wrap_external_ip_alert_external_address_set);
SWIGV8_AddMemberFunction(_exports_listen_failed_alert_class, "type", _wrap_listen_failed_alert_type);
SWIGV8_AddMemberFunction(_exports_listen_failed_alert_class, "category", _wrap_listen_failed_alert_category);
SWIGV8_AddMemberFunction(_exports_listen_failed_alert_class, "what", _wrap_listen_failed_alert_what);
SWIGV8_AddMemberFunction(_exports_listen_failed_alert_class, "message", _wrap_listen_failed_alert_message);
SWIGV8_AddMemberFunction(_exports_listen_failed_alert_class, "listen_interface", _wrap_listen_failed_alert_listen_interface);
SWIGV8_AddMemberVariable(_exports_listen_failed_alert_class, "error", _wrap_listen_failed_alert_error_get, _wrap_listen_failed_alert_error_set);
SWIGV8_AddMemberVariable(_exports_listen_failed_alert_class, "operation", _wrap_listen_failed_alert_operation_get, _wrap_listen_failed_alert_operation_set);
SWIGV8_AddMemberVariable(_exports_listen_failed_alert_class, "sock_type", _wrap_listen_failed_alert_sock_type_get, _wrap_listen_failed_alert_sock_type_set);
SWIGV8_AddMemberVariable(_exports_listen_failed_alert_class, "address", _wrap_listen_failed_alert_address_get, _wrap_listen_failed_alert_address_set);
SWIGV8_AddMemberVariable(_exports_listen_failed_alert_class, "port", _wrap_listen_failed_alert_port_get, _wrap_listen_failed_alert_port_set);
SWIGV8_AddMemberFunction(_exports_listen_succeeded_alert_class, "type", _wrap_listen_succeeded_alert_type);
SWIGV8_AddMemberFunction(_exports_listen_succeeded_alert_class, "category", _wrap_listen_succeeded_alert_category);
SWIGV8_AddMemberFunction(_exports_listen_succeeded_alert_class, "what", _wrap_listen_succeeded_alert_what);
SWIGV8_AddMemberFunction(_exports_listen_succeeded_alert_class, "message", _wrap_listen_succeeded_alert_message);
SWIGV8_AddMemberVariable(_exports_listen_succeeded_alert_class, "address", _wrap_listen_succeeded_alert_address_get, _wrap_listen_succeeded_alert_address_set);
SWIGV8_AddMemberVariable(_exports_listen_succeeded_alert_class, "port", _wrap_listen_succeeded_alert_port_get, _wrap_listen_succeeded_alert_port_set);
SWIGV8_AddMemberVariable(_exports_listen_succeeded_alert_class, "sock_type", _wrap_listen_succeeded_alert_sock_type_get, _wrap_listen_succeeded_alert_sock_type_set);
SWIGV8_AddMemberFunction(_exports_portmap_error_alert_class, "type", _wrap_portmap_error_alert_type);
SWIGV8_AddMemberFunction(_exports_portmap_error_alert_class, "category", _wrap_portmap_error_alert_category);
SWIGV8_AddMemberFunction(_exports_portmap_error_alert_class, "what", _wrap_portmap_error_alert_what);
SWIGV8_AddMemberFunction(_exports_portmap_error_alert_class, "message", _wrap_portmap_error_alert_message);
SWIGV8_AddMemberVariable(_exports_portmap_error_alert_class, "mapping", _wrap_portmap_error_alert_mapping_get, _wrap_portmap_error_alert_mapping_set);
SWIGV8_AddMemberVariable(_exports_portmap_error_alert_class, "map_type", _wrap_portmap_error_alert_map_type_get, _wrap_portmap_error_alert_map_type_set);
SWIGV8_AddMemberVariable(_exports_portmap_error_alert_class, "error", _wrap_portmap_error_alert_error_get, _wrap_portmap_error_alert_error_set);
SWIGV8_AddMemberFunction(_exports_portmap_alert_class, "type", _wrap_portmap_alert_type);
SWIGV8_AddMemberFunction(_exports_portmap_alert_class, "category", _wrap_portmap_alert_category);
SWIGV8_AddMemberFunction(_exports_portmap_alert_class, "what", _wrap_portmap_alert_what);
SWIGV8_AddMemberFunction(_exports_portmap_alert_class, "message", _wrap_portmap_alert_message);
SWIGV8_AddMemberVariable(_exports_portmap_alert_class, "mapping", _wrap_portmap_alert_mapping_get, _wrap_portmap_alert_mapping_set);
SWIGV8_AddMemberVariable(_exports_portmap_alert_class, "external_port", _wrap_portmap_alert_external_port_get, _wrap_portmap_alert_external_port_set);
SWIGV8_AddMemberVariable(_exports_portmap_alert_class, "map_type", _wrap_portmap_alert_map_type_get, _wrap_portmap_alert_map_type_set);
SWIGV8_AddMemberVariable(_exports_portmap_alert_class, "protocol", _wrap_portmap_alert_protocol_get, _wrap_portmap_alert_protocol_set);
SWIGV8_AddMemberFunction(_exports_portmap_log_alert_class, "type", _wrap_portmap_log_alert_type);
SWIGV8_AddMemberFunction(_exports_portmap_log_alert_class, "category", _wrap_portmap_log_alert_category);
SWIGV8_AddMemberFunction(_exports_portmap_log_alert_class, "what", _wrap_portmap_log_alert_what);
SWIGV8_AddMemberFunction(_exports_portmap_log_alert_class, "message", _wrap_portmap_log_alert_message);
SWIGV8_AddMemberVariable(_exports_portmap_log_alert_class, "map_type", _wrap_portmap_log_alert_map_type_get, _wrap_portmap_log_alert_map_type_set);
SWIGV8_AddMemberFunction(_exports_portmap_log_alert_class, "log_message", _wrap_portmap_log_alert_log_message);
SWIGV8_AddMemberFunction(_exports_fastresume_rejected_alert_class, "type", _wrap_fastresume_rejected_alert_type);
SWIGV8_AddMemberFunction(_exports_fastresume_rejected_alert_class, "category", _wrap_fastresume_rejected_alert_category);
SWIGV8_AddMemberFunction(_exports_fastresume_rejected_alert_class, "what", _wrap_fastresume_rejected_alert_what);
SWIGV8_AddMemberFunction(_exports_fastresume_rejected_alert_class, "message", _wrap_fastresume_rejected_alert_message);
SWIGV8_AddMemberVariable(_exports_fastresume_rejected_alert_class, "error", _wrap_fastresume_rejected_alert_error_get, _wrap_fastresume_rejected_alert_error_set);
SWIGV8_AddMemberFunction(_exports_fastresume_rejected_alert_class, "file_path", _wrap_fastresume_rejected_alert_file_path);
SWIGV8_AddMemberFunction(_exports_fastresume_rejected_alert_class, "get_operation", _wrap_fastresume_rejected_alert_get_operation);
SWIGV8_AddMemberFunction(_exports_peer_blocked_alert_class, "type", _wrap_peer_blocked_alert_type);
SWIGV8_AddMemberFunction(_exports_peer_blocked_alert_class, "category", _wrap_peer_blocked_alert_category);
SWIGV8_AddMemberFunction(_exports_peer_blocked_alert_class, "what", _wrap_peer_blocked_alert_what);
SWIGV8_AddMemberFunction(_exports_peer_blocked_alert_class, "message", _wrap_peer_blocked_alert_message);
SWIGV8_AddMemberVariable(_exports_peer_blocked_alert_class, "reason", _wrap_peer_blocked_alert_reason_get, _wrap_peer_blocked_alert_reason_set);
SWIGV8_AddMemberFunction(_exports_dht_announce_alert_class, "type", _wrap_dht_announce_alert_type);
SWIGV8_AddMemberFunction(_exports_dht_announce_alert_class, "category", _wrap_dht_announce_alert_category);
SWIGV8_AddMemberFunction(_exports_dht_announce_alert_class, "what", _wrap_dht_announce_alert_what);
SWIGV8_AddMemberFunction(_exports_dht_announce_alert_class, "message", _wrap_dht_announce_alert_message);
SWIGV8_AddMemberVariable(_exports_dht_announce_alert_class, "ip", _wrap_dht_announce_alert_ip_get, _wrap_dht_announce_alert_ip_set);
SWIGV8_AddMemberVariable(_exports_dht_announce_alert_class, "port", _wrap_dht_announce_alert_port_get, _wrap_dht_announce_alert_port_set);
SWIGV8_AddMemberVariable(_exports_dht_announce_alert_class, "info_hash", _wrap_dht_announce_alert_info_hash_get, _wrap_dht_announce_alert_info_hash_set);
SWIGV8_AddMemberFunction(_exports_dht_get_peers_alert_class, "type", _wrap_dht_get_peers_alert_type);
SWIGV8_AddMemberFunction(_exports_dht_get_peers_alert_class, "category", _wrap_dht_get_peers_alert_category);
SWIGV8_AddMemberFunction(_exports_dht_get_peers_alert_class, "what", _wrap_dht_get_peers_alert_what);
SWIGV8_AddMemberFunction(_exports_dht_get_peers_alert_class, "message", _wrap_dht_get_peers_alert_message);
SWIGV8_AddMemberVariable(_exports_dht_get_peers_alert_class, "info_hash", _wrap_dht_get_peers_alert_info_hash_get, _wrap_dht_get_peers_alert_info_hash_set);
SWIGV8_AddMemberFunction(_exports_stats_alert_class, "type", _wrap_stats_alert_type);
SWIGV8_AddMemberFunction(_exports_stats_alert_class, "category", _wrap_stats_alert_category);
SWIGV8_AddMemberFunction(_exports_stats_alert_class, "what", _wrap_stats_alert_what);
SWIGV8_AddMemberFunction(_exports_stats_alert_class, "message", _wrap_stats_alert_message);
SWIGV8_AddMemberVariable(_exports_stats_alert_class, "interval", _wrap_stats_alert_interval_get, _wrap_stats_alert_interval_set);
SWIGV8_AddMemberFunction(_exports_stats_alert_class, "get_transferred", _wrap_stats_alert_get_transferred);
SWIGV8_AddMemberFunction(_exports_cache_flushed_alert_class, "type", _wrap_cache_flushed_alert_type);
SWIGV8_AddMemberFunction(_exports_cache_flushed_alert_class, "category", _wrap_cache_flushed_alert_category);
SWIGV8_AddMemberFunction(_exports_cache_flushed_alert_class, "what", _wrap_cache_flushed_alert_what);
SWIGV8_AddMemberFunction(_exports_anonymous_mode_alert_class, "type", _wrap_anonymous_mode_alert_type);
SWIGV8_AddMemberFunction(_exports_anonymous_mode_alert_class, "category", _wrap_anonymous_mode_alert_category);
SWIGV8_AddMemberFunction(_exports_anonymous_mode_alert_class, "what", _wrap_anonymous_mode_alert_what);
SWIGV8_AddMemberFunction(_exports_anonymous_mode_alert_class, "message", _wrap_anonymous_mode_alert_message);
SWIGV8_AddMemberVariable(_exports_anonymous_mode_alert_class, "kind", _wrap_anonymous_mode_alert_kind_get, _wrap_anonymous_mode_alert_kind_set);
SWIGV8_AddMemberVariable(_exports_anonymous_mode_alert_class, "str", _wrap_anonymous_mode_alert_str_get, _wrap_anonymous_mode_alert_str_set);
SWIGV8_AddMemberFunction(_exports_lsd_peer_alert_class, "type", _wrap_lsd_peer_alert_type);
SWIGV8_AddMemberFunction(_exports_lsd_peer_alert_class, "category", _wrap_lsd_peer_alert_category);
SWIGV8_AddMemberFunction(_exports_lsd_peer_alert_class, "what", _wrap_lsd_peer_alert_what);
SWIGV8_AddMemberFunction(_exports_lsd_peer_alert_class, "message", _wrap_lsd_peer_alert_message);
SWIGV8_AddMemberFunction(_exports_trackerid_alert_class, "type", _wrap_trackerid_alert_type);
SWIGV8_AddMemberFunction(_exports_trackerid_alert_class, "category", _wrap_trackerid_alert_category);
SWIGV8_AddMemberFunction(_exports_trackerid_alert_class, "what", _wrap_trackerid_alert_what);
SWIGV8_AddMemberFunction(_exports_trackerid_alert_class, "message", _wrap_trackerid_alert_message);
SWIGV8_AddMemberFunction(_exports_trackerid_alert_class, "tracker_id", _wrap_trackerid_alert_tracker_id);
SWIGV8_AddMemberFunction(_exports_dht_bootstrap_alert_class, "type", _wrap_dht_bootstrap_alert_type);
SWIGV8_AddMemberFunction(_exports_dht_bootstrap_alert_class, "category", _wrap_dht_bootstrap_alert_category);
SWIGV8_AddMemberFunction(_exports_dht_bootstrap_alert_class, "what", _wrap_dht_bootstrap_alert_what);
SWIGV8_AddMemberFunction(_exports_dht_bootstrap_alert_class, "message", _wrap_dht_bootstrap_alert_message);
SWIGV8_AddMemberFunction(_exports_torrent_error_alert_class, "type", _wrap_torrent_error_alert_type);
SWIGV8_AddMemberFunction(_exports_torrent_error_alert_class, "category", _wrap_torrent_error_alert_category);
SWIGV8_AddMemberFunction(_exports_torrent_error_alert_class, "what", _wrap_torrent_error_alert_what);
SWIGV8_AddMemberFunction(_exports_torrent_error_alert_class, "message", _wrap_torrent_error_alert_message);
SWIGV8_AddMemberVariable(_exports_torrent_error_alert_class, "error", _wrap_torrent_error_alert_error_get, _wrap_torrent_error_alert_error_set);
SWIGV8_AddMemberFunction(_exports_torrent_error_alert_class, "filename", _wrap_torrent_error_alert_filename);
SWIGV8_AddMemberFunction(_exports_torrent_need_cert_alert_class, "type", _wrap_torrent_need_cert_alert_type);
SWIGV8_AddMemberFunction(_exports_torrent_need_cert_alert_class, "category", _wrap_torrent_need_cert_alert_category);
SWIGV8_AddMemberFunction(_exports_torrent_need_cert_alert_class, "what", _wrap_torrent_need_cert_alert_what);
SWIGV8_AddMemberFunction(_exports_torrent_need_cert_alert_class, "message", _wrap_torrent_need_cert_alert_message);
SWIGV8_AddMemberVariable(_exports_torrent_need_cert_alert_class, "error", _wrap_torrent_need_cert_alert_error_get, _wrap_torrent_need_cert_alert_error_set);
SWIGV8_AddMemberFunction(_exports_incoming_connection_alert_class, "type", _wrap_incoming_connection_alert_type);
SWIGV8_AddMemberFunction(_exports_incoming_connection_alert_class, "category", _wrap_incoming_connection_alert_category);
SWIGV8_AddMemberFunction(_exports_incoming_connection_alert_class, "what", _wrap_incoming_connection_alert_what);
SWIGV8_AddMemberFunction(_exports_incoming_connection_alert_class, "message", _wrap_incoming_connection_alert_message);
SWIGV8_AddMemberVariable(_exports_incoming_connection_alert_class, "socket_type", _wrap_incoming_connection_alert_socket_type_get, _wrap_incoming_connection_alert_socket_type_set);
SWIGV8_AddMemberVariable(_exports_incoming_connection_alert_class, "ip", _wrap_incoming_connection_alert_ip_get, _wrap_incoming_connection_alert_ip_set);
SWIGV8_AddMemberFunction(_exports_add_torrent_alert_class, "type", _wrap_add_torrent_alert_type);
SWIGV8_AddMemberFunction(_exports_add_torrent_alert_class, "category", _wrap_add_torrent_alert_category);
SWIGV8_AddMemberFunction(_exports_add_torrent_alert_class, "what", _wrap_add_torrent_alert_what);
SWIGV8_AddMemberFunction(_exports_add_torrent_alert_class, "message", _wrap_add_torrent_alert_message);
SWIGV8_AddMemberVariable(_exports_add_torrent_alert_class, "params", _wrap_add_torrent_alert_params_get, _wrap_add_torrent_alert_params_set);
SWIGV8_AddMemberVariable(_exports_add_torrent_alert_class, "error", _wrap_add_torrent_alert_error_get, _wrap_add_torrent_alert_error_set);
SWIGV8_AddMemberFunction(_exports_state_update_alert_class, "type", _wrap_state_update_alert_type);
SWIGV8_AddMemberFunction(_exports_state_update_alert_class, "category", _wrap_state_update_alert_category);
SWIGV8_AddMemberFunction(_exports_state_update_alert_class, "what", _wrap_state_update_alert_what);
SWIGV8_AddMemberFunction(_exports_state_update_alert_class, "message", _wrap_state_update_alert_message);
SWIGV8_AddMemberVariable(_exports_state_update_alert_class, "status", _wrap_state_update_alert_status_get, _wrap_state_update_alert_status_set);
SWIGV8_AddMemberFunction(_exports_mmap_cache_alert_class, "type", _wrap_mmap_cache_alert_type);
SWIGV8_AddMemberFunction(_exports_mmap_cache_alert_class, "category", _wrap_mmap_cache_alert_category);
SWIGV8_AddMemberFunction(_exports_mmap_cache_alert_class, "what", _wrap_mmap_cache_alert_what);
SWIGV8_AddMemberFunction(_exports_mmap_cache_alert_class, "message", _wrap_mmap_cache_alert_message);
SWIGV8_AddMemberVariable(_exports_mmap_cache_alert_class, "error", _wrap_mmap_cache_alert_error_get, _wrap_mmap_cache_alert_error_set);
SWIGV8_AddMemberFunction(_exports_session_stats_alert_class, "type", _wrap_session_stats_alert_type);
SWIGV8_AddMemberFunction(_exports_session_stats_alert_class, "category", _wrap_session_stats_alert_category);
SWIGV8_AddMemberFunction(_exports_session_stats_alert_class, "what", _wrap_session_stats_alert_what);
SWIGV8_AddMemberFunction(_exports_session_stats_alert_class, "message", _wrap_session_stats_alert_message);
SWIGV8_AddMemberFunction(_exports_session_stats_alert_class, "get_value", _wrap_session_stats_alert_get_value);
SWIGV8_AddMemberFunction(_exports_dht_error_alert_class, "type", _wrap_dht_error_alert_type);
SWIGV8_AddMemberFunction(_exports_dht_error_alert_class, "category", _wrap_dht_error_alert_category);
SWIGV8_AddMemberFunction(_exports_dht_error_alert_class, "what", _wrap_dht_error_alert_what);
SWIGV8_AddMemberFunction(_exports_dht_error_alert_class, "message", _wrap_dht_error_alert_message);
SWIGV8_AddMemberVariable(_exports_dht_error_alert_class, "error", _wrap_dht_error_alert_error_get, _wrap_dht_error_alert_error_set);
SWIGV8_AddMemberVariable(_exports_dht_error_alert_class, "operation", _wrap_dht_error_alert_operation_get, _wrap_dht_error_alert_operation_set);
SWIGV8_AddMemberFunction(_exports_dht_immutable_item_alert_class, "type", _wrap_dht_immutable_item_alert_type);
SWIGV8_AddMemberFunction(_exports_dht_immutable_item_alert_class, "category", _wrap_dht_immutable_item_alert_category);
SWIGV8_AddMemberFunction(_exports_dht_immutable_item_alert_class, "what", _wrap_dht_immutable_item_alert_what);
SWIGV8_AddMemberFunction(_exports_dht_immutable_item_alert_class, "message", _wrap_dht_immutable_item_alert_message);
SWIGV8_AddMemberVariable(_exports_dht_immutable_item_alert_class, "target", _wrap_dht_immutable_item_alert_target_get, _wrap_dht_immutable_item_alert_target_set);
SWIGV8_AddMemberVariable(_exports_dht_immutable_item_alert_class, "item", _wrap_dht_immutable_item_alert_item_get, _wrap_dht_immutable_item_alert_item_set);
SWIGV8_AddMemberFunction(_exports_dht_mutable_item_alert_class, "type", _wrap_dht_mutable_item_alert_type);
SWIGV8_AddMemberFunction(_exports_dht_mutable_item_alert_class, "category", _wrap_dht_mutable_item_alert_category);
SWIGV8_AddMemberFunction(_exports_dht_mutable_item_alert_class, "what", _wrap_dht_mutable_item_alert_what);
SWIGV8_AddMemberFunction(_exports_dht_mutable_item_alert_class, "message", _wrap_dht_mutable_item_alert_message);
SWIGV8_AddMemberVariable(_exports_dht_mutable_item_alert_class, "item", _wrap_dht_mutable_item_alert_item_get, _wrap_dht_mutable_item_alert_item_set);
SWIGV8_AddMemberVariable(_exports_dht_mutable_item_alert_class, "authoritative", _wrap_dht_mutable_item_alert_authoritative_get, _wrap_dht_mutable_item_alert_authoritative_set);
SWIGV8_AddMemberFunction(_exports_dht_mutable_item_alert_class, "get_key", _wrap_dht_mutable_item_alert_get_key);
SWIGV8_AddMemberFunction(_exports_dht_mutable_item_alert_class, "get_signature", _wrap_dht_mutable_item_alert_get_signature);
SWIGV8_AddMemberFunction(_exports_dht_mutable_item_alert_class, "get_seq", _wrap_dht_mutable_item_alert_get_seq);
SWIGV8_AddMemberFunction(_exports_dht_mutable_item_alert_class, "get_salt", _wrap_dht_mutable_item_alert_get_salt);
SWIGV8_AddMemberFunction(_exports_dht_put_alert_class, "type", _wrap_dht_put_alert_type);
SWIGV8_AddMemberFunction(_exports_dht_put_alert_class, "category", _wrap_dht_put_alert_category);
SWIGV8_AddMemberFunction(_exports_dht_put_alert_class, "what", _wrap_dht_put_alert_what);
SWIGV8_AddMemberFunction(_exports_dht_put_alert_class, "message", _wrap_dht_put_alert_message);
SWIGV8_AddMemberVariable(_exports_dht_put_alert_class, "target", _wrap_dht_put_alert_target_get, _wrap_dht_put_alert_target_set);
SWIGV8_AddMemberVariable(_exports_dht_put_alert_class, "num_success", _wrap_dht_put_alert_num_success_get, _wrap_dht_put_alert_num_success_set);
SWIGV8_AddMemberFunction(_exports_dht_put_alert_class, "get_public_key", _wrap_dht_put_alert_get_public_key);
SWIGV8_AddMemberFunction(_exports_dht_put_alert_class, "get_signature", _wrap_dht_put_alert_get_signature);
SWIGV8_AddMemberFunction(_exports_dht_put_alert_class, "get_salt", _wrap_dht_put_alert_get_salt);
SWIGV8_AddMemberFunction(_exports_dht_put_alert_class, "get_seq", _wrap_dht_put_alert_get_seq);
SWIGV8_AddMemberFunction(_exports_i2p_alert_class, "type", _wrap_i2p_alert_type);
SWIGV8_AddMemberFunction(_exports_i2p_alert_class, "category", _wrap_i2p_alert_category);
SWIGV8_AddMemberFunction(_exports_i2p_alert_class, "what", _wrap_i2p_alert_what);
SWIGV8_AddMemberFunction(_exports_i2p_alert_class, "message", _wrap_i2p_alert_message);
SWIGV8_AddMemberVariable(_exports_i2p_alert_class, "error", _wrap_i2p_alert_error_get, _wrap_i2p_alert_error_set);
SWIGV8_AddMemberFunction(_exports_dht_outgoing_get_peers_alert_class, "type", _wrap_dht_outgoing_get_peers_alert_type);
SWIGV8_AddMemberFunction(_exports_dht_outgoing_get_peers_alert_class, "category", _wrap_dht_outgoing_get_peers_alert_category);
SWIGV8_AddMemberFunction(_exports_dht_outgoing_get_peers_alert_class, "what", _wrap_dht_outgoing_get_peers_alert_what);
SWIGV8_AddMemberFunction(_exports_dht_outgoing_get_peers_alert_class, "message", _wrap_dht_outgoing_get_peers_alert_message);
SWIGV8_AddMemberVariable(_exports_dht_outgoing_get_peers_alert_class, "info_hash", _wrap_dht_outgoing_get_peers_alert_info_hash_get, _wrap_dht_outgoing_get_peers_alert_info_hash_set);
SWIGV8_AddMemberVariable(_exports_dht_outgoing_get_peers_alert_class, "obfuscated_info_hash", _wrap_dht_outgoing_get_peers_alert_obfuscated_info_hash_get, _wrap_dht_outgoing_get_peers_alert_obfuscated_info_hash_set);
SWIGV8_AddMemberVariable(_exports_dht_outgoing_get_peers_alert_class, "ip", _wrap_dht_outgoing_get_peers_alert_ip_get, _wrap_dht_outgoing_get_peers_alert_ip_set);
SWIGV8_AddMemberFunction(_exports_log_alert_class, "type", _wrap_log_alert_type);
SWIGV8_AddMemberFunction(_exports_log_alert_class, "category", _wrap_log_alert_category);
SWIGV8_AddMemberFunction(_exports_log_alert_class, "what", _wrap_log_alert_what);
SWIGV8_AddMemberFunction(_exports_log_alert_class, "message", _wrap_log_alert_message);
SWIGV8_AddMemberFunction(_exports_log_alert_class, "msg", _wrap_log_alert_msg);
SWIGV8_AddMemberFunction(_exports_torrent_log_alert_class, "type", _wrap_torrent_log_alert_type);
SWIGV8_AddMemberFunction(_exports_torrent_log_alert_class, "category", _wrap_torrent_log_alert_category);
SWIGV8_AddMemberFunction(_exports_torrent_log_alert_class, "what", _wrap_torrent_log_alert_what);
SWIGV8_AddMemberFunction(_exports_torrent_log_alert_class, "message", _wrap_torrent_log_alert_message);
SWIGV8_AddMemberFunction(_exports_torrent_log_alert_class, "msg", _wrap_torrent_log_alert_msg);
SWIGV8_AddMemberFunction(_exports_peer_log_alert_class, "type", _wrap_peer_log_alert_type);
SWIGV8_AddMemberFunction(_exports_peer_log_alert_class, "category", _wrap_peer_log_alert_category);
SWIGV8_AddMemberFunction(_exports_peer_log_alert_class, "what", _wrap_peer_log_alert_what);
SWIGV8_AddMemberFunction(_exports_peer_log_alert_class, "message", _wrap_peer_log_alert_message);
SWIGV8_AddMemberVariable(_exports_peer_log_alert_class, "direction", _wrap_peer_log_alert_direction_get, _wrap_peer_log_alert_direction_set);
SWIGV8_AddMemberFunction(_exports_peer_log_alert_class, "msg", _wrap_peer_log_alert_msg);
SWIGV8_AddMemberFunction(_exports_peer_log_alert_class, "get_event_type", _wrap_peer_log_alert_get_event_type);
SWIGV8_AddMemberFunction(_exports_lsd_error_alert_class, "type", _wrap_lsd_error_alert_type);
SWIGV8_AddMemberFunction(_exports_lsd_error_alert_class, "category", _wrap_lsd_error_alert_category);
SWIGV8_AddMemberFunction(_exports_lsd_error_alert_class, "what", _wrap_lsd_error_alert_what);
SWIGV8_AddMemberFunction(_exports_lsd_error_alert_class, "message", _wrap_lsd_error_alert_message);
SWIGV8_AddMemberVariable(_exports_lsd_error_alert_class, "error", _wrap_lsd_error_alert_error_get, _wrap_lsd_error_alert_error_set);
SWIGV8_AddMemberVariable(_exports_dht_lookup_class, "outstanding_requests", _wrap_dht_lookup_outstanding_requests_get, _wrap_dht_lookup_outstanding_requests_set);
SWIGV8_AddMemberVariable(_exports_dht_lookup_class, "timeouts", _wrap_dht_lookup_timeouts_get, _wrap_dht_lookup_timeouts_set);
SWIGV8_AddMemberVariable(_exports_dht_lookup_class, "responses", _wrap_dht_lookup_responses_get, _wrap_dht_lookup_responses_set);
SWIGV8_AddMemberVariable(_exports_dht_lookup_class, "branch_factor", _wrap_dht_lookup_branch_factor_get, _wrap_dht_lookup_branch_factor_set);
SWIGV8_AddMemberVariable(_exports_dht_lookup_class, "nodes_left", _wrap_dht_lookup_nodes_left_get, _wrap_dht_lookup_nodes_left_set);
SWIGV8_AddMemberVariable(_exports_dht_lookup_class, "last_sent", _wrap_dht_lookup_last_sent_get, _wrap_dht_lookup_last_sent_set);
SWIGV8_AddMemberVariable(_exports_dht_lookup_class, "first_timeout", _wrap_dht_lookup_first_timeout_get, _wrap_dht_lookup_first_timeout_set);
SWIGV8_AddMemberFunction(_exports_dht_lookup_class, "get_type", _wrap_dht_lookup_get_type);
SWIGV8_AddMemberVariable(_exports_dht_routing_bucket_class, "num_nodes", _wrap_dht_routing_bucket_num_nodes_get, _wrap_dht_routing_bucket_num_nodes_set);
SWIGV8_AddMemberVariable(_exports_dht_routing_bucket_class, "num_replacements", _wrap_dht_routing_bucket_num_replacements_get, _wrap_dht_routing_bucket_num_replacements_set);
SWIGV8_AddMemberVariable(_exports_dht_routing_bucket_class, "last_active", _wrap_dht_routing_bucket_last_active_get, _wrap_dht_routing_bucket_last_active_set);
SWIGV8_AddMemberFunction(_exports_dht_stats_alert_class, "type", _wrap_dht_stats_alert_type);
SWIGV8_AddMemberFunction(_exports_dht_stats_alert_class, "category", _wrap_dht_stats_alert_category);
SWIGV8_AddMemberFunction(_exports_dht_stats_alert_class, "what", _wrap_dht_stats_alert_what);
SWIGV8_AddMemberFunction(_exports_dht_stats_alert_class, "message", _wrap_dht_stats_alert_message);
SWIGV8_AddMemberVariable(_exports_dht_stats_alert_class, "active_requests", _wrap_dht_stats_alert_active_requests_get, _wrap_dht_stats_alert_active_requests_set);
SWIGV8_AddMemberVariable(_exports_dht_stats_alert_class, "routing_table", _wrap_dht_stats_alert_routing_table_get, _wrap_dht_stats_alert_routing_table_set);
SWIGV8_AddMemberFunction(_exports_incoming_request_alert_class, "type", _wrap_incoming_request_alert_type);
SWIGV8_AddMemberFunction(_exports_incoming_request_alert_class, "category", _wrap_incoming_request_alert_category);
SWIGV8_AddMemberFunction(_exports_incoming_request_alert_class, "what", _wrap_incoming_request_alert_what);
SWIGV8_AddMemberFunction(_exports_incoming_request_alert_class, "message", _wrap_incoming_request_alert_message);
SWIGV8_AddMemberVariable(_exports_incoming_request_alert_class, "req", _wrap_incoming_request_alert_req_get, _wrap_incoming_request_alert_req_set);
SWIGV8_AddMemberFunction(_exports_dht_log_alert_class, "type", _wrap_dht_log_alert_type);
SWIGV8_AddMemberFunction(_exports_dht_log_alert_class, "category", _wrap_dht_log_alert_category);
SWIGV8_AddMemberFunction(_exports_dht_log_alert_class, "what", _wrap_dht_log_alert_what);
SWIGV8_AddMemberFunction(_exports_dht_log_alert_class, "message", _wrap_dht_log_alert_message);
SWIGV8_AddMemberFunction(_exports_dht_log_alert_class, "log_message", _wrap_dht_log_alert_log_message);
SWIGV8_AddMemberVariable(_exports_dht_log_alert_class, "module", _wrap_dht_log_alert_module_get, _wrap_dht_log_alert_module_set);
SWIGV8_AddMemberFunction(_exports_dht_pkt_alert_class, "type", _wrap_dht_pkt_alert_type);
SWIGV8_AddMemberFunction(_exports_dht_pkt_alert_class, "category", _wrap_dht_pkt_alert_category);
SWIGV8_AddMemberFunction(_exports_dht_pkt_alert_class, "what", _wrap_dht_pkt_alert_what);
SWIGV8_AddMemberFunction(_exports_dht_pkt_alert_class, "message", _wrap_dht_pkt_alert_message);
SWIGV8_AddMemberFunction(_exports_dht_pkt_alert_class, "pkt_buf", _wrap_dht_pkt_alert_pkt_buf);
SWIGV8_AddMemberVariable(_exports_dht_pkt_alert_class, "dir", _wrap_dht_pkt_alert_dir_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_dht_pkt_alert_class, "node", _wrap_dht_pkt_alert_node_get, JS_veto_set_variable);
SWIGV8_AddMemberFunction(_exports_dht_get_peers_reply_alert_class, "type", _wrap_dht_get_peers_reply_alert_type);
SWIGV8_AddMemberFunction(_exports_dht_get_peers_reply_alert_class, "category", _wrap_dht_get_peers_reply_alert_category);
SWIGV8_AddMemberFunction(_exports_dht_get_peers_reply_alert_class, "what", _wrap_dht_get_peers_reply_alert_what);
SWIGV8_AddMemberFunction(_exports_dht_get_peers_reply_alert_class, "message", _wrap_dht_get_peers_reply_alert_message);
SWIGV8_AddMemberVariable(_exports_dht_get_peers_reply_alert_class, "info_hash", _wrap_dht_get_peers_reply_alert_info_hash_get, _wrap_dht_get_peers_reply_alert_info_hash_set);
SWIGV8_AddMemberFunction(_exports_dht_get_peers_reply_alert_class, "num_peers", _wrap_dht_get_peers_reply_alert_num_peers);
SWIGV8_AddMemberFunction(_exports_dht_get_peers_reply_alert_class, "peers", _wrap_dht_get_peers_reply_alert_peers);
SWIGV8_AddMemberFunction(_exports_dht_direct_response_alert_class, "type", _wrap_dht_direct_response_alert_type);
SWIGV8_AddMemberFunction(_exports_dht_direct_response_alert_class, "category", _wrap_dht_direct_response_alert_category);
SWIGV8_AddMemberFunction(_exports_dht_direct_response_alert_class, "what", _wrap_dht_direct_response_alert_what);
SWIGV8_AddMemberFunction(_exports_dht_direct_response_alert_class, "message", _wrap_dht_direct_response_alert_message);
SWIGV8_AddMemberVariable(_exports_dht_direct_response_alert_class, "addr", _wrap_dht_direct_response_alert_addr_get, JS_veto_set_variable);
SWIGV8_AddMemberFunction(_exports_dht_direct_response_alert_class, "response", _wrap_dht_direct_response_alert_response);
SWIGV8_AddMemberFunction(_exports_dht_direct_response_alert_class, "get_userdata", _wrap_dht_direct_response_alert_get_userdata);
SWIGV8_AddMemberFunction(_exports_picker_log_alert_class, "type", _wrap_picker_log_alert_type);
SWIGV8_AddMemberFunction(_exports_picker_log_alert_class, "category", _wrap_picker_log_alert_category);
SWIGV8_AddMemberFunction(_exports_picker_log_alert_class, "what", _wrap_picker_log_alert_what);
SWIGV8_AddMemberFunction(_exports_picker_log_alert_class, "message", _wrap_picker_log_alert_message);
SWIGV8_AddMemberVariable(_exports_picker_log_alert_class, "picker_flags", _wrap_picker_log_alert_picker_flags_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "num_alert_types", _wrap_libtorrent_num_alert_types, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "client", _wrap_peer_info_client_get, _wrap_peer_info_client_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "pieces", _wrap_peer_info_pieces_get, _wrap_peer_info_pieces_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "total_download", _wrap_peer_info_total_download_get, _wrap_peer_info_total_download_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "total_upload", _wrap_peer_info_total_upload_get, _wrap_peer_info_total_upload_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "flags", _wrap_peer_info_flags_get, _wrap_peer_info_flags_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "source", _wrap_peer_info_source_get, _wrap_peer_info_source_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "up_speed", _wrap_peer_info_up_speed_get, _wrap_peer_info_up_speed_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "down_speed", _wrap_peer_info_down_speed_get, _wrap_peer_info_down_speed_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "payload_up_speed", _wrap_peer_info_payload_up_speed_get, _wrap_peer_info_payload_up_speed_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "payload_down_speed", _wrap_peer_info_payload_down_speed_get, _wrap_peer_info_payload_down_speed_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "pid", _wrap_peer_info_pid_get, _wrap_peer_info_pid_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "queue_bytes", _wrap_peer_info_queue_bytes_get, _wrap_peer_info_queue_bytes_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "request_timeout", _wrap_peer_info_request_timeout_get, _wrap_peer_info_request_timeout_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "send_buffer_size", _wrap_peer_info_send_buffer_size_get, _wrap_peer_info_send_buffer_size_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "used_send_buffer", _wrap_peer_info_used_send_buffer_get, _wrap_peer_info_used_send_buffer_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "receive_buffer_size", _wrap_peer_info_receive_buffer_size_get, _wrap_peer_info_receive_buffer_size_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "used_receive_buffer", _wrap_peer_info_used_receive_buffer_get, _wrap_peer_info_used_receive_buffer_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "receive_buffer_watermark", _wrap_peer_info_receive_buffer_watermark_get, _wrap_peer_info_receive_buffer_watermark_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "num_hashfails", _wrap_peer_info_num_hashfails_get, _wrap_peer_info_num_hashfails_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "download_queue_length", _wrap_peer_info_download_queue_length_get, _wrap_peer_info_download_queue_length_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "timed_out_requests", _wrap_peer_info_timed_out_requests_get, _wrap_peer_info_timed_out_requests_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "busy_requests", _wrap_peer_info_busy_requests_get, _wrap_peer_info_busy_requests_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "requests_in_buffer", _wrap_peer_info_requests_in_buffer_get, _wrap_peer_info_requests_in_buffer_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "target_dl_queue_length", _wrap_peer_info_target_dl_queue_length_get, _wrap_peer_info_target_dl_queue_length_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "upload_queue_length", _wrap_peer_info_upload_queue_length_get, _wrap_peer_info_upload_queue_length_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "failcount", _wrap_peer_info_failcount_get, _wrap_peer_info_failcount_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "downloading_piece_index", _wrap_peer_info_downloading_piece_index_get, _wrap_peer_info_downloading_piece_index_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "downloading_block_index", _wrap_peer_info_downloading_block_index_get, _wrap_peer_info_downloading_block_index_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "downloading_progress", _wrap_peer_info_downloading_progress_get, _wrap_peer_info_downloading_progress_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "downloading_total", _wrap_peer_info_downloading_total_get, _wrap_peer_info_downloading_total_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "connection_type", _wrap_peer_info_connection_type_get, _wrap_peer_info_connection_type_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "pending_disk_bytes", _wrap_peer_info_pending_disk_bytes_get, _wrap_peer_info_pending_disk_bytes_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "pending_disk_read_bytes", _wrap_peer_info_pending_disk_read_bytes_get, _wrap_peer_info_pending_disk_read_bytes_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "send_quota", _wrap_peer_info_send_quota_get, _wrap_peer_info_send_quota_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "receive_quota", _wrap_peer_info_receive_quota_get, _wrap_peer_info_receive_quota_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "rtt", _wrap_peer_info_rtt_get, _wrap_peer_info_rtt_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "num_pieces", _wrap_peer_info_num_pieces_get, _wrap_peer_info_num_pieces_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "download_rate_peak", _wrap_peer_info_download_rate_peak_get, _wrap_peer_info_download_rate_peak_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "upload_rate_peak", _wrap_peer_info_upload_rate_peak_get, _wrap_peer_info_upload_rate_peak_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "progress", _wrap_peer_info_progress_get, _wrap_peer_info_progress_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "progress_ppm", _wrap_peer_info_progress_ppm_get, _wrap_peer_info_progress_ppm_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "estimated_reciprocation_rate", _wrap_peer_info_estimated_reciprocation_rate_get, _wrap_peer_info_estimated_reciprocation_rate_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "ip", _wrap_peer_info_ip_get, _wrap_peer_info_ip_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "local_endpoint", _wrap_peer_info_local_endpoint_get, _wrap_peer_info_local_endpoint_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "read_state", _wrap_peer_info_read_state_get, _wrap_peer_info_read_state_set);
SWIGV8_AddMemberVariable(_exports_peer_info_class, "write_state", _wrap_peer_info_write_state_get, _wrap_peer_info_write_state_set);
SWIGV8_AddMemberFunction(_exports_peer_info_class, "get_last_request", _wrap_peer_info_get_last_request);
SWIGV8_AddMemberFunction(_exports_peer_info_class, "get_last_active", _wrap_peer_info_get_last_active);
SWIGV8_AddMemberFunction(_exports_peer_info_class, "get_download_queue_time", _wrap_peer_info_get_download_queue_time);
SWIGV8_AddMemberVariable(_exports_dht_settings_class, "max_peers_reply", _wrap_dht_settings_max_peers_reply_get, _wrap_dht_settings_max_peers_reply_set);
SWIGV8_AddMemberVariable(_exports_dht_settings_class, "search_branching", _wrap_dht_settings_search_branching_get, _wrap_dht_settings_search_branching_set);
SWIGV8_AddMemberVariable(_exports_dht_settings_class, "max_fail_count", _wrap_dht_settings_max_fail_count_get, _wrap_dht_settings_max_fail_count_set);
SWIGV8_AddMemberVariable(_exports_dht_settings_class, "max_torrents", _wrap_dht_settings_max_torrents_get, _wrap_dht_settings_max_torrents_set);
SWIGV8_AddMemberVariable(_exports_dht_settings_class, "max_dht_items", _wrap_dht_settings_max_dht_items_get, _wrap_dht_settings_max_dht_items_set);
SWIGV8_AddMemberVariable(_exports_dht_settings_class, "max_peers", _wrap_dht_settings_max_peers_get, _wrap_dht_settings_max_peers_set);
SWIGV8_AddMemberVariable(_exports_dht_settings_class, "max_torrent_search_reply", _wrap_dht_settings_max_torrent_search_reply_get, _wrap_dht_settings_max_torrent_search_reply_set);
SWIGV8_AddMemberVariable(_exports_dht_settings_class, "restrict_routing_ips", _wrap_dht_settings_restrict_routing_ips_get, _wrap_dht_settings_restrict_routing_ips_set);
SWIGV8_AddMemberVariable(_exports_dht_settings_class, "restrict_search_ips", _wrap_dht_settings_restrict_search_ips_get, _wrap_dht_settings_restrict_search_ips_set);
SWIGV8_AddMemberVariable(_exports_dht_settings_class, "extended_routing_table", _wrap_dht_settings_extended_routing_table_get, _wrap_dht_settings_extended_routing_table_set);
SWIGV8_AddMemberVariable(_exports_dht_settings_class, "aggressive_lookups", _wrap_dht_settings_aggressive_lookups_get, _wrap_dht_settings_aggressive_lookups_set);
SWIGV8_AddMemberVariable(_exports_dht_settings_class, "privacy_lookups", _wrap_dht_settings_privacy_lookups_get, _wrap_dht_settings_privacy_lookups_set);
SWIGV8_AddMemberVariable(_exports_dht_settings_class, "enforce_node_id", _wrap_dht_settings_enforce_node_id_get, _wrap_dht_settings_enforce_node_id_set);
SWIGV8_AddMemberVariable(_exports_dht_settings_class, "ignore_dark_internet", _wrap_dht_settings_ignore_dark_internet_get, _wrap_dht_settings_ignore_dark_internet_set);
SWIGV8_AddMemberVariable(_exports_dht_settings_class, "block_timeout", _wrap_dht_settings_block_timeout_get, _wrap_dht_settings_block_timeout_set);
SWIGV8_AddMemberVariable(_exports_dht_settings_class, "block_ratelimit", _wrap_dht_settings_block_ratelimit_get, _wrap_dht_settings_block_ratelimit_set);
SWIGV8_AddMemberVariable(_exports_dht_settings_class, "read_only", _wrap_dht_settings_read_only_get, _wrap_dht_settings_read_only_set);
SWIGV8_AddMemberVariable(_exports_dht_settings_class, "item_lifetime", _wrap_dht_settings_item_lifetime_get, _wrap_dht_settings_item_lifetime_set);
SWIGV8_AddMemberVariable(_exports_dht_settings_class, "upload_rate_limit", _wrap_dht_settings_upload_rate_limit_get, _wrap_dht_settings_upload_rate_limit_set);
SWIGV8_AddMemberFunction(_exports_settings_pack_class, "set_str", _wrap_settings_pack_set_str);
SWIGV8_AddMemberFunction(_exports_settings_pack_class, "set_int", _wrap_settings_pack_set_int);
SWIGV8_AddMemberFunction(_exports_settings_pack_class, "set_bool", _wrap_settings_pack_set_bool);
SWIGV8_AddMemberFunction(_exports_settings_pack_class, "has_val", _wrap_settings_pack_has_val);
SWIGV8_AddMemberFunction(_exports_settings_pack_class, "clear", _wrap_settings_pack_clear);
SWIGV8_AddMemberFunction(_exports_settings_pack_class, "get_str", _wrap_settings_pack_get_str);
SWIGV8_AddMemberFunction(_exports_settings_pack_class, "get_int", _wrap_settings_pack_get_int);
SWIGV8_AddMemberFunction(_exports_settings_pack_class, "get_bool", _wrap_settings_pack_get_bool);
SWIGV8_AddMemberVariable(_exports_peer_class_info_class, "ignore_unchoke_slots", _wrap_peer_class_info_ignore_unchoke_slots_get, _wrap_peer_class_info_ignore_unchoke_slots_set);
SWIGV8_AddMemberVariable(_exports_peer_class_info_class, "connection_limit_factor", _wrap_peer_class_info_connection_limit_factor_get, _wrap_peer_class_info_connection_limit_factor_set);
SWIGV8_AddMemberVariable(_exports_peer_class_info_class, "label", _wrap_peer_class_info_label_get, _wrap_peer_class_info_label_set);
SWIGV8_AddMemberVariable(_exports_peer_class_info_class, "upload_limit", _wrap_peer_class_info_upload_limit_get, _wrap_peer_class_info_upload_limit_set);
SWIGV8_AddMemberVariable(_exports_peer_class_info_class, "download_limit", _wrap_peer_class_info_download_limit_get, _wrap_peer_class_info_download_limit_set);
SWIGV8_AddMemberVariable(_exports_peer_class_info_class, "upload_priority", _wrap_peer_class_info_upload_priority_get, _wrap_peer_class_info_upload_priority_set);
SWIGV8_AddMemberVariable(_exports_peer_class_info_class, "download_priority", _wrap_peer_class_info_download_priority_get, _wrap_peer_class_info_download_priority_set);
SWIGV8_AddMemberFunction(_exports_peer_class_type_filter_class, "add", _wrap_peer_class_type_filter_add);
SWIGV8_AddMemberFunction(_exports_peer_class_type_filter_class, "remove", _wrap_peer_class_type_filter_remove);
SWIGV8_AddMemberFunction(_exports_peer_class_type_filter_class, "disallow", _wrap_peer_class_type_filter_disallow);
SWIGV8_AddMemberFunction(_exports_peer_class_type_filter_class, "allow", _wrap_peer_class_type_filter_allow);
SWIGV8_AddMemberFunction(_exports_peer_class_type_filter_class, "apply", _wrap_peer_class_type_filter_apply);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "is_valid", _wrap_session_handle_is_valid);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "save_state", _wrap_session_handle__wrap_session_handle_save_state);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "load_state", _wrap_session_handle__wrap_session_handle_load_state);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "refresh_torrent_status", _wrap_session_handle__wrap_session_handle_refresh_torrent_status);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "post_torrent_updates", _wrap_session_handle__wrap_session_handle_post_torrent_updates);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "post_session_stats", _wrap_session_handle_post_session_stats);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "post_dht_stats", _wrap_session_handle_post_dht_stats);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "find_torrent", _wrap_session_handle_find_torrent);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "get_torrents", _wrap_session_handle_get_torrents);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "add_torrent", _wrap_session_handle_add_torrent);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "async_add_torrent", _wrap_session_handle_async_add_torrent);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "pause", _wrap_session_handle_pause);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "resume", _wrap_session_handle_resume);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "is_paused", _wrap_session_handle_is_paused);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "set_dht_settings", _wrap_session_handle_set_dht_settings);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "is_dht_running", _wrap_session_handle_is_dht_running);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "get_dht_settings", _wrap_session_handle_get_dht_settings);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "add_dht_node", _wrap_session_handle_add_dht_node);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "add_dht_router", _wrap_session_handle_add_dht_router);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "dht_get_peers", _wrap_session_handle_dht_get_peers);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "dht_announce", _wrap_session_handle__wrap_session_handle_dht_announce);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "set_ip_filter", _wrap_session_handle_set_ip_filter);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "get_ip_filter", _wrap_session_handle_get_ip_filter);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "set_port_filter", _wrap_session_handle_set_port_filter);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "id", _wrap_session_handle_id);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "set_key", _wrap_session_handle_set_key);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "listen_port", _wrap_session_handle_listen_port);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "ssl_listen_port", _wrap_session_handle_ssl_listen_port);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "is_listening", _wrap_session_handle_is_listening);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "set_peer_class_filter", _wrap_session_handle_set_peer_class_filter);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "set_peer_class_type_filter", _wrap_session_handle_set_peer_class_type_filter);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "create_peer_class", _wrap_session_handle_create_peer_class);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "delete_peer_class", _wrap_session_handle_delete_peer_class);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "get_peer_class", _wrap_session_handle_get_peer_class);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "set_peer_class", _wrap_session_handle_set_peer_class);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "remove_torrent", _wrap_session_handle__wrap_session_handle_remove_torrent);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "apply_settings", _wrap_session_handle_apply_settings);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "get_settings", _wrap_session_handle_get_settings);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "pop_alerts", _wrap_session_handle_pop_alerts);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "add_port_mapping", _wrap_session_handle_add_port_mapping);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "delete_port_mapping", _wrap_session_handle_delete_port_mapping);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "dht_get_item", _wrap_session_handle__wrap_session_handle_dht_get_item);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "dht_put_item", _wrap_session_handle__wrap_session_handle_dht_put_item);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "dht_direct_request", _wrap_session_handle__wrap_session_handle_dht_direct_request);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "wait_for_alert_ms", _wrap_session_handle_wait_for_alert_ms);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "set_alert_notify_callback", _wrap_session_handle_set_alert_notify_callback);
SWIGV8_AddMemberFunction(_exports_session_handle_class, "add_extension", _wrap_session_handle_add_extension);
SWIGV8_AddMemberVariable(_exports_dht_state_class, "nid", _wrap_dht_state_nid_get, _wrap_dht_state_nid_set);
SWIGV8_AddMemberVariable(_exports_dht_state_class, "nid6", _wrap_dht_state_nid6_get, _wrap_dht_state_nid6_set);
SWIGV8_AddMemberVariable(_exports_dht_state_class, "nodes", _wrap_dht_state_nodes_get, _wrap_dht_state_nodes_set);
SWIGV8_AddMemberVariable(_exports_dht_state_class, "nodes6", _wrap_dht_state_nodes6_get, _wrap_dht_state_nodes6_set);
SWIGV8_AddMemberFunction(_exports_dht_state_class, "clear", _wrap_dht_state_clear);
SWIGV8_AddMemberVariable(_exports_session_params_class, "settings", _wrap_session_params_settings_get, _wrap_session_params_settings_set);
SWIGV8_AddMemberVariable(_exports_session_params_class, "dht_settings", _wrap_session_params_dht_settings_get, _wrap_session_params_dht_settings_set);
SWIGV8_AddMemberVariable(_exports_session_params_class, "dht_state", _wrap_session_params_dht_state_get, _wrap_session_params_dht_state_set);
SWIGV8_AddMemberFunction(_exports_session_class, "abort", _wrap_session_abort);
SWIGV8_AddMemberFunction(_exports_peer_connection_handle_class, "type", _wrap_peer_connection_handle_type);
SWIGV8_AddMemberFunction(_exports_peer_connection_handle_class, "is_seed", _wrap_peer_connection_handle_is_seed);
SWIGV8_AddMemberFunction(_exports_peer_connection_handle_class, "upload_only", _wrap_peer_connection_handle_upload_only);
SWIGV8_AddMemberFunction(_exports_peer_connection_handle_class, "pid", _wrap_peer_connection_handle_pid);
SWIGV8_AddMemberFunction(_exports_peer_connection_handle_class, "has_piece", _wrap_peer_connection_handle_has_piece);
SWIGV8_AddMemberFunction(_exports_peer_connection_handle_class, "is_interesting", _wrap_peer_connection_handle_is_interesting);
SWIGV8_AddMemberFunction(_exports_peer_connection_handle_class, "is_choked", _wrap_peer_connection_handle_is_choked);
SWIGV8_AddMemberFunction(_exports_peer_connection_handle_class, "is_peer_interested", _wrap_peer_connection_handle_is_peer_interested);
SWIGV8_AddMemberFunction(_exports_peer_connection_handle_class, "has_peer_choked", _wrap_peer_connection_handle_has_peer_choked);
SWIGV8_AddMemberFunction(_exports_peer_connection_handle_class, "choke_this_peer", _wrap_peer_connection_handle_choke_this_peer);
SWIGV8_AddMemberFunction(_exports_peer_connection_handle_class, "maybe_unchoke_this_peer", _wrap_peer_connection_handle_maybe_unchoke_this_peer);
SWIGV8_AddMemberFunction(_exports_peer_connection_handle_class, "get_peer_info", _wrap_peer_connection_handle_get_peer_info);
SWIGV8_AddMemberFunction(_exports_peer_connection_handle_class, "associated_torrent", _wrap_peer_connection_handle_associated_torrent);
SWIGV8_AddMemberFunction(_exports_peer_connection_handle_class, "remote", _wrap_peer_connection_handle_remote);
SWIGV8_AddMemberFunction(_exports_peer_connection_handle_class, "local_endpoint", _wrap_peer_connection_handle_local_endpoint);
SWIGV8_AddMemberFunction(_exports_peer_connection_handle_class, "disconnect", _wrap_peer_connection_handle__wrap_peer_connection_handle_disconnect);
SWIGV8_AddMemberFunction(_exports_peer_connection_handle_class, "is_disconnecting", _wrap_peer_connection_handle_is_disconnecting);
SWIGV8_AddMemberFunction(_exports_peer_connection_handle_class, "is_connecting", _wrap_peer_connection_handle_is_connecting);
SWIGV8_AddMemberFunction(_exports_peer_connection_handle_class, "is_outgoing", _wrap_peer_connection_handle_is_outgoing);
SWIGV8_AddMemberFunction(_exports_peer_connection_handle_class, "on_local_network", _wrap_peer_connection_handle_on_local_network);
SWIGV8_AddMemberFunction(_exports_peer_connection_handle_class, "ignore_unchoke_slots", _wrap_peer_connection_handle_ignore_unchoke_slots);
SWIGV8_AddMemberFunction(_exports_peer_connection_handle_class, "failed", _wrap_peer_connection_handle_failed);
SWIGV8_AddMemberFunction(_exports_peer_connection_handle_class, "can_disconnect", _wrap_peer_connection_handle_can_disconnect);
SWIGV8_AddMemberFunction(_exports_peer_connection_handle_class, "has_metadata", _wrap_peer_connection_handle_has_metadata);
SWIGV8_AddMemberFunction(_exports_peer_connection_handle_class, "in_handshake", _wrap_peer_connection_handle_in_handshake);
SWIGV8_AddMemberFunction(_exports_peer_connection_handle_class, "send_buffer", _wrap_peer_connection_handle__wrap_peer_connection_handle_send_buffer);
SWIGV8_AddMemberFunction(_exports_peer_connection_handle_class, "last_seen_complete", _wrap_peer_connection_handle_last_seen_complete);
SWIGV8_AddMemberFunction(_exports_peer_connection_handle_class, "op_eq", _wrap_peer_connection_handle_op_eq);
SWIGV8_AddMemberFunction(_exports_peer_connection_handle_class, "op_ne", _wrap_peer_connection_handle_op_ne);
SWIGV8_AddMemberFunction(_exports_peer_connection_handle_class, "op_lt", _wrap_peer_connection_handle_op_lt);
SWIGV8_AddMemberFunction(_exports_peer_connection_handle_class, "get_time_of_last_unchoke", _wrap_peer_connection_handle_get_time_of_last_unchoke);
SWIGV8_AddMemberFunction(_exports_bt_peer_connection_handle_class, "packet_finished", _wrap_bt_peer_connection_handle_packet_finished);
SWIGV8_AddMemberFunction(_exports_bt_peer_connection_handle_class, "support_extensions", _wrap_bt_peer_connection_handle_support_extensions);
SWIGV8_AddMemberFunction(_exports_bt_peer_connection_handle_class, "supports_encryption", _wrap_bt_peer_connection_handle_supports_encryption);
SWIGV8_AddMemberFunction(_exports_ip_filter_class, "add_rule", _wrap_ip_filter_add_rule);
SWIGV8_AddMemberFunction(_exports_ip_filter_class, "access", _wrap_ip_filter_access);
SWIGV8_AddMemberFunction(_exports_port_filter_class, "add_rule", _wrap_port_filter_add_rule);
SWIGV8_AddMemberFunction(_exports_port_filter_class, "access", _wrap_port_filter_access);
SWIGV8_AddStaticVariable(exports_obj, "bdecode_no_error", _wrap_libtorrent_bdecode_errors_no_error, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "expected_digit", _wrap_libtorrent_bdecode_errors_expected_digit, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "expected_colon", _wrap_libtorrent_bdecode_errors_expected_colon, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "unexpected_eof", _wrap_libtorrent_bdecode_errors_unexpected_eof, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "expected_value", _wrap_libtorrent_bdecode_errors_expected_value, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "depth_exceeded", _wrap_libtorrent_bdecode_errors_depth_exceeded, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "limit_exceeded", _wrap_libtorrent_bdecode_errors_limit_exceeded, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "overflow", _wrap_libtorrent_bdecode_errors_overflow, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "error_code_max", _wrap_libtorrent_bdecode_errors_error_code_max, JS_veto_set_variable);
SWIGV8_AddMemberFunction(_exports_bdecode_node_class, "type", _wrap_bdecode_node_type);
SWIGV8_AddMemberFunction(_exports_bdecode_node_class, "op_bool", _wrap_bdecode_node_op_bool);
SWIGV8_AddMemberFunction(_exports_bdecode_node_class, "list_at", _wrap_bdecode_node_list_at);
SWIGV8_AddMemberFunction(_exports_bdecode_node_class, "list_string_value_at", _wrap_bdecode_node__wrap_bdecode_node_list_string_value_at);
SWIGV8_AddMemberFunction(_exports_bdecode_node_class, "list_int_value_at", _wrap_bdecode_node__wrap_bdecode_node_list_int_value_at);
SWIGV8_AddMemberFunction(_exports_bdecode_node_class, "list_size", _wrap_bdecode_node_list_size);
SWIGV8_AddMemberFunction(_exports_bdecode_node_class, "dict_find", _wrap_bdecode_node_dict_find);
SWIGV8_AddMemberFunction(_exports_bdecode_node_class, "dict_at", _wrap_bdecode_node_dict_at);
SWIGV8_AddMemberFunction(_exports_bdecode_node_class, "dict_find_dict", _wrap_bdecode_node_dict_find_dict);
SWIGV8_AddMemberFunction(_exports_bdecode_node_class, "dict_find_list", _wrap_bdecode_node_dict_find_list);
SWIGV8_AddMemberFunction(_exports_bdecode_node_class, "dict_find_string", _wrap_bdecode_node_dict_find_string);
SWIGV8_AddMemberFunction(_exports_bdecode_node_class, "dict_find_int", _wrap_bdecode_node_dict_find_int);
SWIGV8_AddMemberFunction(_exports_bdecode_node_class, "dict_find_string_value", _wrap_bdecode_node__wrap_bdecode_node_dict_find_string_value);
SWIGV8_AddMemberFunction(_exports_bdecode_node_class, "dict_find_int_value", _wrap_bdecode_node__wrap_bdecode_node_dict_find_int_value);
SWIGV8_AddMemberFunction(_exports_bdecode_node_class, "dict_size", _wrap_bdecode_node_dict_size);
SWIGV8_AddMemberFunction(_exports_bdecode_node_class, "int_value", _wrap_bdecode_node_int_value);
SWIGV8_AddMemberFunction(_exports_bdecode_node_class, "string_value", _wrap_bdecode_node_string_value);
SWIGV8_AddMemberFunction(_exports_bdecode_node_class, "string_length", _wrap_bdecode_node_string_length);
SWIGV8_AddMemberFunction(_exports_create_torrent_class, "generate", _wrap_create_torrent_generate);
SWIGV8_AddMemberFunction(_exports_create_torrent_class, "files", _wrap_create_torrent_files);
SWIGV8_AddMemberFunction(_exports_create_torrent_class, "set_comment", _wrap_create_torrent_set_comment);
SWIGV8_AddMemberFunction(_exports_create_torrent_class, "set_creator", _wrap_create_torrent_set_creator);
SWIGV8_AddMemberFunction(_exports_create_torrent_class, "set_hash", _wrap_create_torrent_set_hash);
SWIGV8_AddMemberFunction(_exports_create_torrent_class, "set_file_hash", _wrap_create_torrent_set_file_hash);
SWIGV8_AddMemberFunction(_exports_create_torrent_class, "add_url_seed", _wrap_create_torrent_add_url_seed);
SWIGV8_AddMemberFunction(_exports_create_torrent_class, "add_http_seed", _wrap_create_torrent_add_http_seed);
SWIGV8_AddMemberFunction(_exports_create_torrent_class, "add_node", _wrap_create_torrent_add_node);
SWIGV8_AddMemberFunction(_exports_create_torrent_class, "add_tracker", _wrap_create_torrent__wrap_create_torrent_add_tracker);
SWIGV8_AddMemberFunction(_exports_create_torrent_class, "set_priv", _wrap_create_torrent_set_priv);
SWIGV8_AddMemberFunction(_exports_create_torrent_class, "priv", _wrap_create_torrent_priv);
SWIGV8_AddMemberFunction(_exports_create_torrent_class, "num_pieces", _wrap_create_torrent_num_pieces);
SWIGV8_AddMemberFunction(_exports_create_torrent_class, "piece_length", _wrap_create_torrent_piece_length);
SWIGV8_AddMemberFunction(_exports_create_torrent_class, "piece_size", _wrap_create_torrent_piece_size);
SWIGV8_AddMemberFunction(_exports_create_torrent_class, "merkle_tree", _wrap_create_torrent_merkle_tree);
SWIGV8_AddMemberFunction(_exports_create_torrent_class, "add_similar_torrent", _wrap_create_torrent_add_similar_torrent);
SWIGV8_AddMemberFunction(_exports_create_torrent_class, "add_collection", _wrap_create_torrent_add_collection);
SWIGV8_AddMemberVariable(_exports_announce_entry_class, "url", _wrap_announce_entry_url_get, _wrap_announce_entry_url_set);
SWIGV8_AddMemberVariable(_exports_announce_entry_class, "trackerid", _wrap_announce_entry_trackerid_get, _wrap_announce_entry_trackerid_set);
SWIGV8_AddMemberVariable(_exports_announce_entry_class, "message", _wrap_announce_entry_message_get, _wrap_announce_entry_message_set);
SWIGV8_AddMemberVariable(_exports_announce_entry_class, "last_error", _wrap_announce_entry_last_error_get, _wrap_announce_entry_last_error_set);
SWIGV8_AddMemberFunction(_exports_announce_entry_class, "next_announce_in", _wrap_announce_entry_next_announce_in);
SWIGV8_AddMemberFunction(_exports_announce_entry_class, "min_announce_in", _wrap_announce_entry_min_announce_in);
SWIGV8_AddMemberVariable(_exports_announce_entry_class, "scrape_incomplete", _wrap_announce_entry_scrape_incomplete_get, _wrap_announce_entry_scrape_incomplete_set);
SWIGV8_AddMemberVariable(_exports_announce_entry_class, "scrape_complete", _wrap_announce_entry_scrape_complete_get, _wrap_announce_entry_scrape_complete_set);
SWIGV8_AddMemberVariable(_exports_announce_entry_class, "scrape_downloaded", _wrap_announce_entry_scrape_downloaded_get, _wrap_announce_entry_scrape_downloaded_set);
SWIGV8_AddMemberVariable(_exports_announce_entry_class, "tier", _wrap_announce_entry_tier_get, _wrap_announce_entry_tier_set);
SWIGV8_AddMemberVariable(_exports_announce_entry_class, "fail_limit", _wrap_announce_entry_fail_limit_get, _wrap_announce_entry_fail_limit_set);
SWIGV8_AddMemberVariable(_exports_announce_entry_class, "fails", _wrap_announce_entry_fails_get, _wrap_announce_entry_fails_set);
SWIGV8_AddMemberVariable(_exports_announce_entry_class, "updating", _wrap_announce_entry_updating_get, _wrap_announce_entry_updating_set);
SWIGV8_AddMemberVariable(_exports_announce_entry_class, "source", _wrap_announce_entry_source_get, _wrap_announce_entry_source_set);
SWIGV8_AddMemberVariable(_exports_announce_entry_class, "verified", _wrap_announce_entry_verified_get, _wrap_announce_entry_verified_set);
SWIGV8_AddMemberVariable(_exports_announce_entry_class, "start_sent", _wrap_announce_entry_start_sent_get, _wrap_announce_entry_start_sent_set);
SWIGV8_AddMemberVariable(_exports_announce_entry_class, "complete_sent", _wrap_announce_entry_complete_sent_get, _wrap_announce_entry_complete_sent_set);
SWIGV8_AddMemberVariable(_exports_announce_entry_class, "triggered_manually", _wrap_announce_entry_triggered_manually_get, _wrap_announce_entry_triggered_manually_set);
SWIGV8_AddMemberFunction(_exports_announce_entry_class, "reset", _wrap_announce_entry_reset);
SWIGV8_AddMemberFunction(_exports_announce_entry_class, "is_working", _wrap_announce_entry_is_working);
SWIGV8_AddMemberFunction(_exports_announce_entry_class, "trim", _wrap_announce_entry_trim);
SWIGV8_AddMemberFunction(_exports_torrent_status_class, "op_eq", _wrap_torrent_status_op_eq);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "handle", _wrap_torrent_status_handle_get, _wrap_torrent_status_handle_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "errc", _wrap_torrent_status_errc_get, _wrap_torrent_status_errc_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "error_file", _wrap_torrent_status_error_file_get, _wrap_torrent_status_error_file_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "save_path", _wrap_torrent_status_save_path_get, _wrap_torrent_status_save_path_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "name", _wrap_torrent_status_name_get, _wrap_torrent_status_name_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "current_tracker", _wrap_torrent_status_current_tracker_get, _wrap_torrent_status_current_tracker_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "total_download", _wrap_torrent_status_total_download_get, _wrap_torrent_status_total_download_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "total_upload", _wrap_torrent_status_total_upload_get, _wrap_torrent_status_total_upload_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "total_payload_download", _wrap_torrent_status_total_payload_download_get, _wrap_torrent_status_total_payload_download_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "total_payload_upload", _wrap_torrent_status_total_payload_upload_get, _wrap_torrent_status_total_payload_upload_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "total_failed_bytes", _wrap_torrent_status_total_failed_bytes_get, _wrap_torrent_status_total_failed_bytes_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "total_redundant_bytes", _wrap_torrent_status_total_redundant_bytes_get, _wrap_torrent_status_total_redundant_bytes_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "pieces", _wrap_torrent_status_pieces_get, _wrap_torrent_status_pieces_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "verified_pieces", _wrap_torrent_status_verified_pieces_get, _wrap_torrent_status_verified_pieces_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "total_done", _wrap_torrent_status_total_done_get, _wrap_torrent_status_total_done_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "total_wanted_done", _wrap_torrent_status_total_wanted_done_get, _wrap_torrent_status_total_wanted_done_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "total_wanted", _wrap_torrent_status_total_wanted_get, _wrap_torrent_status_total_wanted_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "all_time_upload", _wrap_torrent_status_all_time_upload_get, _wrap_torrent_status_all_time_upload_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "all_time_download", _wrap_torrent_status_all_time_download_get, _wrap_torrent_status_all_time_download_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "added_time", _wrap_torrent_status_added_time_get, _wrap_torrent_status_added_time_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "completed_time", _wrap_torrent_status_completed_time_get, _wrap_torrent_status_completed_time_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "last_seen_complete", _wrap_torrent_status_last_seen_complete_get, _wrap_torrent_status_last_seen_complete_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "storage_mode", _wrap_torrent_status_storage_mode_get, _wrap_torrent_status_storage_mode_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "progress", _wrap_torrent_status_progress_get, _wrap_torrent_status_progress_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "progress_ppm", _wrap_torrent_status_progress_ppm_get, _wrap_torrent_status_progress_ppm_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "queue_position", _wrap_torrent_status_queue_position_get, _wrap_torrent_status_queue_position_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "download_rate", _wrap_torrent_status_download_rate_get, _wrap_torrent_status_download_rate_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "upload_rate", _wrap_torrent_status_upload_rate_get, _wrap_torrent_status_upload_rate_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "download_payload_rate", _wrap_torrent_status_download_payload_rate_get, _wrap_torrent_status_download_payload_rate_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "upload_payload_rate", _wrap_torrent_status_upload_payload_rate_get, _wrap_torrent_status_upload_payload_rate_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "num_seeds", _wrap_torrent_status_num_seeds_get, _wrap_torrent_status_num_seeds_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "num_peers", _wrap_torrent_status_num_peers_get, _wrap_torrent_status_num_peers_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "num_complete", _wrap_torrent_status_num_complete_get, _wrap_torrent_status_num_complete_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "num_incomplete", _wrap_torrent_status_num_incomplete_get, _wrap_torrent_status_num_incomplete_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "list_seeds", _wrap_torrent_status_list_seeds_get, _wrap_torrent_status_list_seeds_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "list_peers", _wrap_torrent_status_list_peers_get, _wrap_torrent_status_list_peers_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "connect_candidates", _wrap_torrent_status_connect_candidates_get, _wrap_torrent_status_connect_candidates_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "num_pieces", _wrap_torrent_status_num_pieces_get, _wrap_torrent_status_num_pieces_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "distributed_full_copies", _wrap_torrent_status_distributed_full_copies_get, _wrap_torrent_status_distributed_full_copies_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "distributed_fraction", _wrap_torrent_status_distributed_fraction_get, _wrap_torrent_status_distributed_fraction_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "distributed_copies", _wrap_torrent_status_distributed_copies_get, _wrap_torrent_status_distributed_copies_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "block_size", _wrap_torrent_status_block_size_get, _wrap_torrent_status_block_size_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "num_uploads", _wrap_torrent_status_num_uploads_get, _wrap_torrent_status_num_uploads_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "num_connections", _wrap_torrent_status_num_connections_get, _wrap_torrent_status_num_connections_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "uploads_limit", _wrap_torrent_status_uploads_limit_get, _wrap_torrent_status_uploads_limit_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "connections_limit", _wrap_torrent_status_connections_limit_get, _wrap_torrent_status_connections_limit_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "up_bandwidth_queue", _wrap_torrent_status_up_bandwidth_queue_get, _wrap_torrent_status_up_bandwidth_queue_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "down_bandwidth_queue", _wrap_torrent_status_down_bandwidth_queue_get, _wrap_torrent_status_down_bandwidth_queue_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "time_since_upload", _wrap_torrent_status_time_since_upload_get, _wrap_torrent_status_time_since_upload_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "time_since_download", _wrap_torrent_status_time_since_download_get, _wrap_torrent_status_time_since_download_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "active_time", _wrap_torrent_status_active_time_get, _wrap_torrent_status_active_time_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "finished_time", _wrap_torrent_status_finished_time_get, _wrap_torrent_status_finished_time_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "seeding_time", _wrap_torrent_status_seeding_time_get, _wrap_torrent_status_seeding_time_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "seed_rank", _wrap_torrent_status_seed_rank_get, _wrap_torrent_status_seed_rank_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "last_scrape", _wrap_torrent_status_last_scrape_get, _wrap_torrent_status_last_scrape_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "state", _wrap_torrent_status_state_get, _wrap_torrent_status_state_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "need_save_resume", _wrap_torrent_status_need_save_resume_get, _wrap_torrent_status_need_save_resume_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "ip_filter_applies", _wrap_torrent_status_ip_filter_applies_get, _wrap_torrent_status_ip_filter_applies_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "upload_mode", _wrap_torrent_status_upload_mode_get, _wrap_torrent_status_upload_mode_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "share_mode", _wrap_torrent_status_share_mode_get, _wrap_torrent_status_share_mode_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "super_seeding", _wrap_torrent_status_super_seeding_get, _wrap_torrent_status_super_seeding_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "paused", _wrap_torrent_status_paused_get, _wrap_torrent_status_paused_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "auto_managed", _wrap_torrent_status_auto_managed_get, _wrap_torrent_status_auto_managed_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "sequential_download", _wrap_torrent_status_sequential_download_get, _wrap_torrent_status_sequential_download_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "is_seeding", _wrap_torrent_status_is_seeding_get, _wrap_torrent_status_is_seeding_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "is_finished", _wrap_torrent_status_is_finished_get, _wrap_torrent_status_is_finished_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "has_metadata", _wrap_torrent_status_has_metadata_get, _wrap_torrent_status_has_metadata_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "has_incoming", _wrap_torrent_status_has_incoming_get, _wrap_torrent_status_has_incoming_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "seed_mode", _wrap_torrent_status_seed_mode_get, _wrap_torrent_status_seed_mode_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "moving_storage", _wrap_torrent_status_moving_storage_get, _wrap_torrent_status_moving_storage_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "is_loaded", _wrap_torrent_status_is_loaded_get, _wrap_torrent_status_is_loaded_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "announcing_to_trackers", _wrap_torrent_status_announcing_to_trackers_get, _wrap_torrent_status_announcing_to_trackers_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "announcing_to_lsd", _wrap_torrent_status_announcing_to_lsd_get, _wrap_torrent_status_announcing_to_lsd_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "announcing_to_dht", _wrap_torrent_status_announcing_to_dht_get, _wrap_torrent_status_announcing_to_dht_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "stop_when_ready", _wrap_torrent_status_stop_when_ready_get, _wrap_torrent_status_stop_when_ready_set);
SWIGV8_AddMemberVariable(_exports_torrent_status_class, "info_hash", _wrap_torrent_status_info_hash_get, _wrap_torrent_status_info_hash_set);
SWIGV8_AddMemberFunction(_exports_torrent_status_class, "torrent_file_ptr", _wrap_torrent_status_torrent_file_ptr);
SWIGV8_AddMemberFunction(_exports_torrent_status_class, "get_next_announce", _wrap_torrent_status_get_next_announce);
SWIGV8_AddMemberFunction(_exports_alert_notify_callback_class, "on_alert", _wrap_alert_notify_callback_on_alert);
SWIGV8_AddMemberFunction(_exports_add_files_listener_class, "pred", _wrap_add_files_listener_pred);
SWIGV8_AddMemberFunction(_exports_set_piece_hashes_listener_class, "progress", _wrap_set_piece_hashes_listener_progress);
SWIGV8_AddMemberFunction(_exports_swig_plugin_class, "on_dht_request", _wrap_swig_plugin_on_dht_request);
SWIGV8_AddMemberVariable(_exports_posix_stat_t_class, "size", _wrap_posix_stat_t_size_get, _wrap_posix_stat_t_size_set);
SWIGV8_AddMemberVariable(_exports_posix_stat_t_class, "atime", _wrap_posix_stat_t_atime_get, _wrap_posix_stat_t_atime_set);
SWIGV8_AddMemberVariable(_exports_posix_stat_t_class, "mtime", _wrap_posix_stat_t_mtime_get, _wrap_posix_stat_t_mtime_set);
SWIGV8_AddMemberVariable(_exports_posix_stat_t_class, "ctime", _wrap_posix_stat_t_ctime_get, _wrap_posix_stat_t_ctime_set);
SWIGV8_AddMemberVariable(_exports_posix_stat_t_class, "mode", _wrap_posix_stat_t_mode_get, _wrap_posix_stat_t_mode_set);
SWIGV8_AddMemberFunction(_exports_posix_wrapper_class, "open", _wrap_posix_wrapper_open);
SWIGV8_AddMemberFunction(_exports_posix_wrapper_class, "stat", _wrap_posix_wrapper_stat);
SWIGV8_AddMemberFunction(_exports_posix_wrapper_class, "mkdir", _wrap_posix_wrapper_mkdir);
SWIGV8_AddMemberFunction(_exports_posix_wrapper_class, "rename", _wrap_posix_wrapper_rename);
SWIGV8_AddMemberFunction(_exports_posix_wrapper_class, "remove", _wrap_posix_wrapper_remove);


  /* setup inheritances */
  if (SWIGTYPE_p_libtorrent__alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_torrent_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ);
#else
  _exports_torrent_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_torrent_alert _libtorrent__alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_torrent_alert _libtorrent__alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__torrent_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_peer_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ);
#else
  _exports_peer_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_peer_alert _libtorrent__torrent_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_peer_alert _libtorrent__torrent_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__torrent_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_tracker_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ);
#else
  _exports_tracker_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_tracker_alert _libtorrent__torrent_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_tracker_alert _libtorrent__torrent_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__torrent_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_torrent_added_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ);
#else
  _exports_torrent_added_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_torrent_added_alert _libtorrent__torrent_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_torrent_added_alert _libtorrent__torrent_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__torrent_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_torrent_removed_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ);
#else
  _exports_torrent_removed_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_torrent_removed_alert _libtorrent__torrent_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_torrent_removed_alert _libtorrent__torrent_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__torrent_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_read_piece_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ);
#else
  _exports_read_piece_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_read_piece_alert _libtorrent__torrent_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_read_piece_alert _libtorrent__torrent_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__torrent_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_file_completed_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ);
#else
  _exports_file_completed_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_file_completed_alert _libtorrent__torrent_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_file_completed_alert _libtorrent__torrent_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__torrent_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_file_renamed_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ);
#else
  _exports_file_renamed_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_file_renamed_alert _libtorrent__torrent_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_file_renamed_alert _libtorrent__torrent_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__torrent_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_file_rename_failed_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ);
#else
  _exports_file_rename_failed_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_file_rename_failed_alert _libtorrent__torrent_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_file_rename_failed_alert _libtorrent__torrent_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__torrent_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_performance_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ);
#else
  _exports_performance_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_performance_alert _libtorrent__torrent_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_performance_alert _libtorrent__torrent_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__torrent_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_state_changed_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ);
#else
  _exports_state_changed_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_state_changed_alert _libtorrent__torrent_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_state_changed_alert _libtorrent__torrent_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__tracker_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__tracker_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_tracker_error_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__tracker_alert->clientdata)->class_templ);
#else
  _exports_tracker_error_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__tracker_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_tracker_error_alert _libtorrent__tracker_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_tracker_error_alert _libtorrent__tracker_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__tracker_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__tracker_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_tracker_warning_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__tracker_alert->clientdata)->class_templ);
#else
  _exports_tracker_warning_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__tracker_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_tracker_warning_alert _libtorrent__tracker_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_tracker_warning_alert _libtorrent__tracker_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__tracker_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__tracker_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_scrape_reply_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__tracker_alert->clientdata)->class_templ);
#else
  _exports_scrape_reply_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__tracker_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_scrape_reply_alert _libtorrent__tracker_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_scrape_reply_alert _libtorrent__tracker_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__tracker_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__tracker_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_scrape_failed_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__tracker_alert->clientdata)->class_templ);
#else
  _exports_scrape_failed_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__tracker_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_scrape_failed_alert _libtorrent__tracker_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_scrape_failed_alert _libtorrent__tracker_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__tracker_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__tracker_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_tracker_reply_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__tracker_alert->clientdata)->class_templ);
#else
  _exports_tracker_reply_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__tracker_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_tracker_reply_alert _libtorrent__tracker_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_tracker_reply_alert _libtorrent__tracker_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__tracker_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__tracker_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_dht_reply_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__tracker_alert->clientdata)->class_templ);
#else
  _exports_dht_reply_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__tracker_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_dht_reply_alert _libtorrent__tracker_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_dht_reply_alert _libtorrent__tracker_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__tracker_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__tracker_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_tracker_announce_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__tracker_alert->clientdata)->class_templ);
#else
  _exports_tracker_announce_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__tracker_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_tracker_announce_alert _libtorrent__tracker_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_tracker_announce_alert _libtorrent__tracker_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__torrent_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_hash_failed_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ);
#else
  _exports_hash_failed_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_hash_failed_alert _libtorrent__torrent_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_hash_failed_alert _libtorrent__torrent_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__peer_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_peer_ban_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ);
#else
  _exports_peer_ban_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_peer_ban_alert _libtorrent__peer_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_peer_ban_alert _libtorrent__peer_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__peer_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_peer_unsnubbed_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ);
#else
  _exports_peer_unsnubbed_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_peer_unsnubbed_alert _libtorrent__peer_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_peer_unsnubbed_alert _libtorrent__peer_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__peer_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_peer_snubbed_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ);
#else
  _exports_peer_snubbed_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_peer_snubbed_alert _libtorrent__peer_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_peer_snubbed_alert _libtorrent__peer_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__peer_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_peer_error_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ);
#else
  _exports_peer_error_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_peer_error_alert _libtorrent__peer_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_peer_error_alert _libtorrent__peer_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__peer_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_peer_connect_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ);
#else
  _exports_peer_connect_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_peer_connect_alert _libtorrent__peer_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_peer_connect_alert _libtorrent__peer_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__peer_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_peer_disconnected_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ);
#else
  _exports_peer_disconnected_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_peer_disconnected_alert _libtorrent__peer_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_peer_disconnected_alert _libtorrent__peer_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__peer_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_invalid_request_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ);
#else
  _exports_invalid_request_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_invalid_request_alert _libtorrent__peer_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_invalid_request_alert _libtorrent__peer_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__torrent_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_torrent_finished_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ);
#else
  _exports_torrent_finished_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_torrent_finished_alert _libtorrent__torrent_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_torrent_finished_alert _libtorrent__torrent_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__torrent_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_piece_finished_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ);
#else
  _exports_piece_finished_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_piece_finished_alert _libtorrent__torrent_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_piece_finished_alert _libtorrent__torrent_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__peer_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_request_dropped_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ);
#else
  _exports_request_dropped_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_request_dropped_alert _libtorrent__peer_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_request_dropped_alert _libtorrent__peer_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__peer_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_block_timeout_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ);
#else
  _exports_block_timeout_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_block_timeout_alert _libtorrent__peer_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_block_timeout_alert _libtorrent__peer_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__peer_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_block_finished_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ);
#else
  _exports_block_finished_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_block_finished_alert _libtorrent__peer_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_block_finished_alert _libtorrent__peer_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__peer_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_block_downloading_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ);
#else
  _exports_block_downloading_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_block_downloading_alert _libtorrent__peer_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_block_downloading_alert _libtorrent__peer_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__peer_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_unwanted_block_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ);
#else
  _exports_unwanted_block_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_unwanted_block_alert _libtorrent__peer_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_unwanted_block_alert _libtorrent__peer_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__torrent_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_storage_moved_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ);
#else
  _exports_storage_moved_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_storage_moved_alert _libtorrent__torrent_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_storage_moved_alert _libtorrent__torrent_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__torrent_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_storage_moved_failed_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ);
#else
  _exports_storage_moved_failed_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_storage_moved_failed_alert _libtorrent__torrent_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_storage_moved_failed_alert _libtorrent__torrent_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__torrent_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_torrent_deleted_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ);
#else
  _exports_torrent_deleted_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_torrent_deleted_alert _libtorrent__torrent_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_torrent_deleted_alert _libtorrent__torrent_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__torrent_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_torrent_delete_failed_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ);
#else
  _exports_torrent_delete_failed_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_torrent_delete_failed_alert _libtorrent__torrent_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_torrent_delete_failed_alert _libtorrent__torrent_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__torrent_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_save_resume_data_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ);
#else
  _exports_save_resume_data_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_save_resume_data_alert _libtorrent__torrent_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_save_resume_data_alert _libtorrent__torrent_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__torrent_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_save_resume_data_failed_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ);
#else
  _exports_save_resume_data_failed_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_save_resume_data_failed_alert _libtorrent__torrent_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_save_resume_data_failed_alert _libtorrent__torrent_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__torrent_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_torrent_paused_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ);
#else
  _exports_torrent_paused_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_torrent_paused_alert _libtorrent__torrent_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_torrent_paused_alert _libtorrent__torrent_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__torrent_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_torrent_resumed_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ);
#else
  _exports_torrent_resumed_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_torrent_resumed_alert _libtorrent__torrent_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_torrent_resumed_alert _libtorrent__torrent_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__torrent_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_torrent_checked_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ);
#else
  _exports_torrent_checked_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_torrent_checked_alert _libtorrent__torrent_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_torrent_checked_alert _libtorrent__torrent_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__torrent_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_url_seed_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ);
#else
  _exports_url_seed_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_url_seed_alert _libtorrent__torrent_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_url_seed_alert _libtorrent__torrent_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__torrent_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_file_error_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ);
#else
  _exports_file_error_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_file_error_alert _libtorrent__torrent_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_file_error_alert _libtorrent__torrent_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__torrent_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_metadata_failed_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ);
#else
  _exports_metadata_failed_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_metadata_failed_alert _libtorrent__torrent_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_metadata_failed_alert _libtorrent__torrent_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__torrent_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_metadata_received_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ);
#else
  _exports_metadata_received_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_metadata_received_alert _libtorrent__torrent_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_metadata_received_alert _libtorrent__torrent_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_udp_error_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ);
#else
  _exports_udp_error_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_udp_error_alert _libtorrent__alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_udp_error_alert _libtorrent__alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_external_ip_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ);
#else
  _exports_external_ip_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_external_ip_alert _libtorrent__alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_external_ip_alert _libtorrent__alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_listen_failed_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ);
#else
  _exports_listen_failed_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_listen_failed_alert _libtorrent__alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_listen_failed_alert _libtorrent__alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_listen_succeeded_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ);
#else
  _exports_listen_succeeded_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_listen_succeeded_alert _libtorrent__alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_listen_succeeded_alert _libtorrent__alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_portmap_error_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ);
#else
  _exports_portmap_error_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_portmap_error_alert _libtorrent__alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_portmap_error_alert _libtorrent__alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_portmap_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ);
#else
  _exports_portmap_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_portmap_alert _libtorrent__alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_portmap_alert _libtorrent__alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_portmap_log_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ);
#else
  _exports_portmap_log_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_portmap_log_alert _libtorrent__alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_portmap_log_alert _libtorrent__alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__torrent_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_fastresume_rejected_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ);
#else
  _exports_fastresume_rejected_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_fastresume_rejected_alert _libtorrent__torrent_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_fastresume_rejected_alert _libtorrent__torrent_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__peer_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_peer_blocked_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ);
#else
  _exports_peer_blocked_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_peer_blocked_alert _libtorrent__peer_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_peer_blocked_alert _libtorrent__peer_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_dht_announce_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ);
#else
  _exports_dht_announce_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_dht_announce_alert _libtorrent__alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_dht_announce_alert _libtorrent__alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_dht_get_peers_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ);
#else
  _exports_dht_get_peers_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_dht_get_peers_alert _libtorrent__alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_dht_get_peers_alert _libtorrent__alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__torrent_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_stats_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ);
#else
  _exports_stats_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_stats_alert _libtorrent__torrent_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_stats_alert _libtorrent__torrent_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__torrent_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_cache_flushed_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ);
#else
  _exports_cache_flushed_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_cache_flushed_alert _libtorrent__torrent_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_cache_flushed_alert _libtorrent__torrent_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__torrent_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_anonymous_mode_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ);
#else
  _exports_anonymous_mode_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_anonymous_mode_alert _libtorrent__torrent_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_anonymous_mode_alert _libtorrent__torrent_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__peer_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_lsd_peer_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ);
#else
  _exports_lsd_peer_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_lsd_peer_alert _libtorrent__peer_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_lsd_peer_alert _libtorrent__peer_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__tracker_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__tracker_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_trackerid_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__tracker_alert->clientdata)->class_templ);
#else
  _exports_trackerid_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__tracker_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_trackerid_alert _libtorrent__tracker_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_trackerid_alert _libtorrent__tracker_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_dht_bootstrap_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ);
#else
  _exports_dht_bootstrap_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_dht_bootstrap_alert _libtorrent__alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_dht_bootstrap_alert _libtorrent__alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__torrent_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_torrent_error_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ);
#else
  _exports_torrent_error_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_torrent_error_alert _libtorrent__torrent_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_torrent_error_alert _libtorrent__torrent_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__torrent_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_torrent_need_cert_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ);
#else
  _exports_torrent_need_cert_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_torrent_need_cert_alert _libtorrent__torrent_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_torrent_need_cert_alert _libtorrent__torrent_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_incoming_connection_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ);
#else
  _exports_incoming_connection_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_incoming_connection_alert _libtorrent__alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_incoming_connection_alert _libtorrent__alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__torrent_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_add_torrent_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ);
#else
  _exports_add_torrent_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_add_torrent_alert _libtorrent__torrent_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_add_torrent_alert _libtorrent__torrent_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_state_update_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ);
#else
  _exports_state_update_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_state_update_alert _libtorrent__alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_state_update_alert _libtorrent__alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_mmap_cache_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ);
#else
  _exports_mmap_cache_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_mmap_cache_alert _libtorrent__alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_mmap_cache_alert _libtorrent__alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_session_stats_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ);
#else
  _exports_session_stats_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_session_stats_alert _libtorrent__alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_session_stats_alert _libtorrent__alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_dht_error_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ);
#else
  _exports_dht_error_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_dht_error_alert _libtorrent__alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_dht_error_alert _libtorrent__alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_dht_immutable_item_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ);
#else
  _exports_dht_immutable_item_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_dht_immutable_item_alert _libtorrent__alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_dht_immutable_item_alert _libtorrent__alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_dht_mutable_item_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ);
#else
  _exports_dht_mutable_item_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_dht_mutable_item_alert _libtorrent__alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_dht_mutable_item_alert _libtorrent__alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_dht_put_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ);
#else
  _exports_dht_put_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_dht_put_alert _libtorrent__alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_dht_put_alert _libtorrent__alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_i2p_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ);
#else
  _exports_i2p_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_i2p_alert _libtorrent__alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_i2p_alert _libtorrent__alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_dht_outgoing_get_peers_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ);
#else
  _exports_dht_outgoing_get_peers_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_dht_outgoing_get_peers_alert _libtorrent__alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_dht_outgoing_get_peers_alert _libtorrent__alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_log_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ);
#else
  _exports_log_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_log_alert _libtorrent__alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_log_alert _libtorrent__alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__torrent_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_torrent_log_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ);
#else
  _exports_torrent_log_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__torrent_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_torrent_log_alert _libtorrent__torrent_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_torrent_log_alert _libtorrent__torrent_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__peer_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_peer_log_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ);
#else
  _exports_peer_log_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_peer_log_alert _libtorrent__peer_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_peer_log_alert _libtorrent__peer_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_lsd_error_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ);
#else
  _exports_lsd_error_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_lsd_error_alert _libtorrent__alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_lsd_error_alert _libtorrent__alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_dht_stats_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ);
#else
  _exports_dht_stats_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_dht_stats_alert _libtorrent__alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_dht_stats_alert _libtorrent__alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__peer_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_incoming_request_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ);
#else
  _exports_incoming_request_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_incoming_request_alert _libtorrent__peer_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_incoming_request_alert _libtorrent__peer_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_dht_log_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ);
#else
  _exports_dht_log_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_dht_log_alert _libtorrent__alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_dht_log_alert _libtorrent__alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_dht_pkt_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ);
#else
  _exports_dht_pkt_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_dht_pkt_alert _libtorrent__alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_dht_pkt_alert _libtorrent__alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_dht_get_peers_reply_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ);
#else
  _exports_dht_get_peers_reply_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_dht_get_peers_reply_alert _libtorrent__alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_dht_get_peers_reply_alert _libtorrent__alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_dht_direct_response_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ);
#else
  _exports_dht_direct_response_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_dht_direct_response_alert _libtorrent__alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_dht_direct_response_alert _libtorrent__alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__peer_alert->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_picker_log_alert_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ);
#else
  _exports_picker_log_alert_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_alert->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_picker_log_alert _libtorrent__peer_alert\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_picker_log_alert _libtorrent__peer_alert\n");
#endif
}
if (SWIGTYPE_p_libtorrent__session_handle->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__session_handle->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_session_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__session_handle->clientdata)->class_templ);
#else
  _exports_session_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__session_handle->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_session _libtorrent__session_handle\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_session _libtorrent__session_handle\n");
#endif
}
if (SWIGTYPE_p_libtorrent__peer_connection_handle->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_connection_handle->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_bt_peer_connection_handle_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_connection_handle->clientdata)->class_templ);
#else
  _exports_bt_peer_connection_handle_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_libtorrent__peer_connection_handle->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_bt_peer_connection_handle _libtorrent__peer_connection_handle\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_bt_peer_connection_handle _libtorrent__peer_connection_handle\n");
#endif
}


  /* class instances */
  /* Class: int_int_pair (_exports_int_int_pair) */
v8::Handle<v8::FunctionTemplate> _exports_int_int_pair_class_0 = SWIGV8_CreateClassTemplate("int_int_pair");
_exports_int_int_pair_class_0->SetCallHandler(_wrap_new_int_int_pair);
_exports_int_int_pair_class_0->Inherit(_exports_int_int_pair_class);
_exports_int_int_pair_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_int_int_pair_obj = _exports_int_int_pair_class_0->GetFunction();
/* Class: string_int_pair (_exports_string_int_pair) */
v8::Handle<v8::FunctionTemplate> _exports_string_int_pair_class_0 = SWIGV8_CreateClassTemplate("string_int_pair");
_exports_string_int_pair_class_0->SetCallHandler(_wrap_new_string_int_pair);
_exports_string_int_pair_class_0->Inherit(_exports_string_int_pair_class);
_exports_string_int_pair_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_string_int_pair_obj = _exports_string_int_pair_class_0->GetFunction();
/* Class: string_string_pair (_exports_string_string_pair) */
v8::Handle<v8::FunctionTemplate> _exports_string_string_pair_class_0 = SWIGV8_CreateClassTemplate("string_string_pair");
_exports_string_string_pair_class_0->SetCallHandler(_wrap_new_string_string_pair);
_exports_string_string_pair_class_0->Inherit(_exports_string_string_pair_class);
_exports_string_string_pair_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_string_string_pair_obj = _exports_string_string_pair_class_0->GetFunction();
/* Class: string_view_bdecode_node_pair (_exports_string_view_bdecode_node_pair) */
v8::Handle<v8::FunctionTemplate> _exports_string_view_bdecode_node_pair_class_0 = SWIGV8_CreateClassTemplate("string_view_bdecode_node_pair");
_exports_string_view_bdecode_node_pair_class_0->SetCallHandler(_wrap_new_string_view_bdecode_node_pair);
_exports_string_view_bdecode_node_pair_class_0->Inherit(_exports_string_view_bdecode_node_pair_class);
_exports_string_view_bdecode_node_pair_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_string_view_bdecode_node_pair_obj = _exports_string_view_bdecode_node_pair_class_0->GetFunction();
/* Class: byte_vectors_pair (_exports_byte_vectors_pair) */
v8::Handle<v8::FunctionTemplate> _exports_byte_vectors_pair_class_0 = SWIGV8_CreateClassTemplate("byte_vectors_pair");
_exports_byte_vectors_pair_class_0->SetCallHandler(_wrap_new_byte_vectors_pair);
_exports_byte_vectors_pair_class_0->Inherit(_exports_byte_vectors_pair_class);
_exports_byte_vectors_pair_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_byte_vectors_pair_obj = _exports_byte_vectors_pair_class_0->GetFunction();
/* Class: byte_vector (_exports_byte_vector) */
v8::Handle<v8::FunctionTemplate> _exports_byte_vector_class_0 = SWIGV8_CreateClassTemplate("byte_vector");
_exports_byte_vector_class_0->SetCallHandler(_wrap_new_byte_vector);
_exports_byte_vector_class_0->Inherit(_exports_byte_vector_class);
_exports_byte_vector_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_byte_vector_obj = _exports_byte_vector_class_0->GetFunction();
/* Class: string_vector (_exports_string_vector) */
v8::Handle<v8::FunctionTemplate> _exports_string_vector_class_0 = SWIGV8_CreateClassTemplate("string_vector");
_exports_string_vector_class_0->SetCallHandler(_wrap_new_string_vector);
_exports_string_vector_class_0->Inherit(_exports_string_vector_class);
_exports_string_vector_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_string_vector_obj = _exports_string_vector_class_0->GetFunction();
/* Class: string_int_pair_vector (_exports_string_int_pair_vector) */
v8::Handle<v8::FunctionTemplate> _exports_string_int_pair_vector_class_0 = SWIGV8_CreateClassTemplate("string_int_pair_vector");
_exports_string_int_pair_vector_class_0->SetCallHandler(_wrap_new_string_int_pair_vector);
_exports_string_int_pair_vector_class_0->Inherit(_exports_string_int_pair_vector_class);
_exports_string_int_pair_vector_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_string_int_pair_vector_obj = _exports_string_int_pair_vector_class_0->GetFunction();
/* Class: string_string_pair_vector (_exports_string_string_pair_vector) */
v8::Handle<v8::FunctionTemplate> _exports_string_string_pair_vector_class_0 = SWIGV8_CreateClassTemplate("string_string_pair_vector");
_exports_string_string_pair_vector_class_0->SetCallHandler(_wrap_new_string_string_pair_vector);
_exports_string_string_pair_vector_class_0->Inherit(_exports_string_string_pair_vector_class);
_exports_string_string_pair_vector_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_string_string_pair_vector_obj = _exports_string_string_pair_vector_class_0->GetFunction();
/* Class: int_int_pair_vector (_exports_int_int_pair_vector) */
v8::Handle<v8::FunctionTemplate> _exports_int_int_pair_vector_class_0 = SWIGV8_CreateClassTemplate("int_int_pair_vector");
_exports_int_int_pair_vector_class_0->SetCallHandler(_wrap_new_int_int_pair_vector);
_exports_int_int_pair_vector_class_0->Inherit(_exports_int_int_pair_vector_class);
_exports_int_int_pair_vector_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_int_int_pair_vector_obj = _exports_int_int_pair_vector_class_0->GetFunction();
/* Class: int_vector (_exports_int_vector) */
v8::Handle<v8::FunctionTemplate> _exports_int_vector_class_0 = SWIGV8_CreateClassTemplate("int_vector");
_exports_int_vector_class_0->SetCallHandler(_wrap_new_int_vector);
_exports_int_vector_class_0->Inherit(_exports_int_vector_class);
_exports_int_vector_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_int_vector_obj = _exports_int_vector_class_0->GetFunction();
/* Class: int64_vector (_exports_int64_vector) */
v8::Handle<v8::FunctionTemplate> _exports_int64_vector_class_0 = SWIGV8_CreateClassTemplate("int64_vector");
_exports_int64_vector_class_0->SetCallHandler(_wrap_new_int64_vector);
_exports_int64_vector_class_0->Inherit(_exports_int64_vector_class);
_exports_int64_vector_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_int64_vector_obj = _exports_int64_vector_class_0->GetFunction();
/* Class: sha1_hash_vector (_exports_sha1_hash_vector) */
v8::Handle<v8::FunctionTemplate> _exports_sha1_hash_vector_class_0 = SWIGV8_CreateClassTemplate("sha1_hash_vector");
_exports_sha1_hash_vector_class_0->SetCallHandler(_wrap_new_sha1_hash_vector);
_exports_sha1_hash_vector_class_0->Inherit(_exports_sha1_hash_vector_class);
_exports_sha1_hash_vector_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_sha1_hash_vector_obj = _exports_sha1_hash_vector_class_0->GetFunction();
/* Class: torrent_status_vector (_exports_torrent_status_vector) */
v8::Handle<v8::FunctionTemplate> _exports_torrent_status_vector_class_0 = SWIGV8_CreateClassTemplate("torrent_status_vector");
_exports_torrent_status_vector_class_0->SetCallHandler(_wrap_new_torrent_status_vector);
_exports_torrent_status_vector_class_0->Inherit(_exports_torrent_status_vector_class);
_exports_torrent_status_vector_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_torrent_status_vector_obj = _exports_torrent_status_vector_class_0->GetFunction();
/* Class: torrent_handle_vector (_exports_torrent_handle_vector) */
v8::Handle<v8::FunctionTemplate> _exports_torrent_handle_vector_class_0 = SWIGV8_CreateClassTemplate("torrent_handle_vector");
_exports_torrent_handle_vector_class_0->SetCallHandler(_wrap_new_torrent_handle_vector);
_exports_torrent_handle_vector_class_0->Inherit(_exports_torrent_handle_vector_class);
_exports_torrent_handle_vector_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_torrent_handle_vector_obj = _exports_torrent_handle_vector_class_0->GetFunction();
/* Class: file_slice_vector (_exports_file_slice_vector) */
v8::Handle<v8::FunctionTemplate> _exports_file_slice_vector_class_0 = SWIGV8_CreateClassTemplate("file_slice_vector");
_exports_file_slice_vector_class_0->SetCallHandler(_wrap_new_file_slice_vector);
_exports_file_slice_vector_class_0->Inherit(_exports_file_slice_vector_class);
_exports_file_slice_vector_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_file_slice_vector_obj = _exports_file_slice_vector_class_0->GetFunction();
/* Class: dht_routing_bucket_vector (_exports_dht_routing_bucket_vector) */
v8::Handle<v8::FunctionTemplate> _exports_dht_routing_bucket_vector_class_0 = SWIGV8_CreateClassTemplate("dht_routing_bucket_vector");
_exports_dht_routing_bucket_vector_class_0->SetCallHandler(_wrap_new_dht_routing_bucket_vector);
_exports_dht_routing_bucket_vector_class_0->Inherit(_exports_dht_routing_bucket_vector_class);
_exports_dht_routing_bucket_vector_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_dht_routing_bucket_vector_obj = _exports_dht_routing_bucket_vector_class_0->GetFunction();
/* Class: dht_lookup_vector (_exports_dht_lookup_vector) */
v8::Handle<v8::FunctionTemplate> _exports_dht_lookup_vector_class_0 = SWIGV8_CreateClassTemplate("dht_lookup_vector");
_exports_dht_lookup_vector_class_0->SetCallHandler(_wrap_new_dht_lookup_vector);
_exports_dht_lookup_vector_class_0->Inherit(_exports_dht_lookup_vector_class);
_exports_dht_lookup_vector_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_dht_lookup_vector_obj = _exports_dht_lookup_vector_class_0->GetFunction();
/* Class: block_info_vector (_exports_block_info_vector) */
v8::Handle<v8::FunctionTemplate> _exports_block_info_vector_class_0 = SWIGV8_CreateClassTemplate("block_info_vector");
_exports_block_info_vector_class_0->SetCallHandler(_wrap_new_block_info_vector);
_exports_block_info_vector_class_0->Inherit(_exports_block_info_vector_class);
_exports_block_info_vector_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_block_info_vector_obj = _exports_block_info_vector_class_0->GetFunction();
/* Class: partial_piece_info_vector (_exports_partial_piece_info_vector) */
v8::Handle<v8::FunctionTemplate> _exports_partial_piece_info_vector_class_0 = SWIGV8_CreateClassTemplate("partial_piece_info_vector");
_exports_partial_piece_info_vector_class_0->SetCallHandler(_wrap_new_partial_piece_info_vector);
_exports_partial_piece_info_vector_class_0->Inherit(_exports_partial_piece_info_vector_class);
_exports_partial_piece_info_vector_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_partial_piece_info_vector_obj = _exports_partial_piece_info_vector_class_0->GetFunction();
/* Class: peer_info_vector (_exports_peer_info_vector) */
v8::Handle<v8::FunctionTemplate> _exports_peer_info_vector_class_0 = SWIGV8_CreateClassTemplate("peer_info_vector");
_exports_peer_info_vector_class_0->SetCallHandler(_wrap_new_peer_info_vector);
_exports_peer_info_vector_class_0->Inherit(_exports_peer_info_vector_class);
_exports_peer_info_vector_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_peer_info_vector_obj = _exports_peer_info_vector_class_0->GetFunction();
/* Class: stats_metric_vector (_exports_stats_metric_vector) */
v8::Handle<v8::FunctionTemplate> _exports_stats_metric_vector_class_0 = SWIGV8_CreateClassTemplate("stats_metric_vector");
_exports_stats_metric_vector_class_0->SetCallHandler(_wrap_new_stats_metric_vector);
_exports_stats_metric_vector_class_0->Inherit(_exports_stats_metric_vector_class);
_exports_stats_metric_vector_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_stats_metric_vector_obj = _exports_stats_metric_vector_class_0->GetFunction();
/* Class: entry_vector (_exports_entry_vector) */
v8::Handle<v8::FunctionTemplate> _exports_entry_vector_class_0 = SWIGV8_CreateClassTemplate("entry_vector");
_exports_entry_vector_class_0->SetCallHandler(_wrap_new_entry_vector);
_exports_entry_vector_class_0->Inherit(_exports_entry_vector_class);
_exports_entry_vector_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_entry_vector_obj = _exports_entry_vector_class_0->GetFunction();
/* Class: web_seed_entry_vector (_exports_web_seed_entry_vector) */
v8::Handle<v8::FunctionTemplate> _exports_web_seed_entry_vector_class_0 = SWIGV8_CreateClassTemplate("web_seed_entry_vector");
_exports_web_seed_entry_vector_class_0->SetCallHandler(_wrap_new_web_seed_entry_vector);
_exports_web_seed_entry_vector_class_0->Inherit(_exports_web_seed_entry_vector_class);
_exports_web_seed_entry_vector_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_web_seed_entry_vector_obj = _exports_web_seed_entry_vector_class_0->GetFunction();
/* Class: announce_entry_vector (_exports_announce_entry_vector) */
v8::Handle<v8::FunctionTemplate> _exports_announce_entry_vector_class_0 = SWIGV8_CreateClassTemplate("announce_entry_vector");
_exports_announce_entry_vector_class_0->SetCallHandler(_wrap_new_announce_entry_vector);
_exports_announce_entry_vector_class_0->Inherit(_exports_announce_entry_vector_class);
_exports_announce_entry_vector_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_announce_entry_vector_obj = _exports_announce_entry_vector_class_0->GetFunction();
/* Class: tcp_endpoint_vector (_exports_tcp_endpoint_vector) */
v8::Handle<v8::FunctionTemplate> _exports_tcp_endpoint_vector_class_0 = SWIGV8_CreateClassTemplate("tcp_endpoint_vector");
_exports_tcp_endpoint_vector_class_0->SetCallHandler(_wrap_new_tcp_endpoint_vector);
_exports_tcp_endpoint_vector_class_0->Inherit(_exports_tcp_endpoint_vector_class);
_exports_tcp_endpoint_vector_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_tcp_endpoint_vector_obj = _exports_tcp_endpoint_vector_class_0->GetFunction();
/* Class: udp_endpoint_vector (_exports_udp_endpoint_vector) */
v8::Handle<v8::FunctionTemplate> _exports_udp_endpoint_vector_class_0 = SWIGV8_CreateClassTemplate("udp_endpoint_vector");
_exports_udp_endpoint_vector_class_0->SetCallHandler(_wrap_new_udp_endpoint_vector);
_exports_udp_endpoint_vector_class_0->Inherit(_exports_udp_endpoint_vector_class);
_exports_udp_endpoint_vector_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_udp_endpoint_vector_obj = _exports_udp_endpoint_vector_class_0->GetFunction();
/* Class: int_string_map (_exports_int_string_map) */
v8::Handle<v8::FunctionTemplate> _exports_int_string_map_class_0 = SWIGV8_CreateClassTemplate("int_string_map");
_exports_int_string_map_class_0->SetCallHandler(_wrap_new_int_string_map);
_exports_int_string_map_class_0->Inherit(_exports_int_string_map_class);
_exports_int_string_map_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_int_string_map_obj = _exports_int_string_map_class_0->GetFunction();
/* Class: string_long_map (_exports_string_long_map) */
v8::Handle<v8::FunctionTemplate> _exports_string_long_map_class_0 = SWIGV8_CreateClassTemplate("string_long_map");
_exports_string_long_map_class_0->SetCallHandler(_wrap_new_string_long_map);
_exports_string_long_map_class_0->Inherit(_exports_string_long_map_class);
_exports_string_long_map_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_string_long_map_obj = _exports_string_long_map_class_0->GetFunction();
/* Class: string_entry_map (_exports_string_entry_map) */
v8::Handle<v8::FunctionTemplate> _exports_string_entry_map_class_0 = SWIGV8_CreateClassTemplate("string_entry_map");
_exports_string_entry_map_class_0->SetCallHandler(_wrap_new_string_entry_map);
_exports_string_entry_map_class_0->Inherit(_exports_string_entry_map_class);
_exports_string_entry_map_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_string_entry_map_obj = _exports_string_entry_map_class_0->GetFunction();
/* Class: int_bitfield_map (_exports_int_bitfield_map) */
v8::Handle<v8::FunctionTemplate> _exports_int_bitfield_map_class_0 = SWIGV8_CreateClassTemplate("int_bitfield_map");
_exports_int_bitfield_map_class_0->SetCallHandler(_wrap_new_int_bitfield_map);
_exports_int_bitfield_map_class_0->Inherit(_exports_int_bitfield_map_class);
_exports_int_bitfield_map_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_int_bitfield_map_obj = _exports_int_bitfield_map_class_0->GetFunction();
/* Class: alert_ptr_vector (_exports_alert_ptr_vector) */
v8::Handle<v8::FunctionTemplate> _exports_alert_ptr_vector_class_0 = SWIGV8_CreateClassTemplate("alert_ptr_vector");
_exports_alert_ptr_vector_class_0->SetCallHandler(_wrap_new_alert_ptr_vector);
_exports_alert_ptr_vector_class_0->Inherit(_exports_alert_ptr_vector_class);
_exports_alert_ptr_vector_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_alert_ptr_vector_obj = _exports_alert_ptr_vector_class_0->GetFunction();
/* Class: iovec_t (_exports_iovec_t) */
v8::Handle<v8::FunctionTemplate> _exports_iovec_t_class_0 = SWIGV8_CreateClassTemplate("iovec_t");
_exports_iovec_t_class_0->SetCallHandler(_wrap_new_iovec_t);
_exports_iovec_t_class_0->Inherit(_exports_iovec_t_class);
_exports_iovec_t_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_iovec_t_obj = _exports_iovec_t_class_0->GetFunction();
/* Class: byte_span (_exports_byte_span) */
v8::Handle<v8::FunctionTemplate> _exports_byte_span_class_0 = SWIGV8_CreateClassTemplate("byte_span");
_exports_byte_span_class_0->SetCallHandler(_wrap_new_byte_span);
_exports_byte_span_class_0->Inherit(_exports_byte_span_class);
_exports_byte_span_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_byte_span_obj = _exports_byte_span_class_0->GetFunction();
/* Class: byte_const_span (_exports_byte_const_span) */
v8::Handle<v8::FunctionTemplate> _exports_byte_const_span_class_0 = SWIGV8_CreateClassTemplate("byte_const_span");
_exports_byte_const_span_class_0->SetCallHandler(_wrap_new_byte_const_span);
_exports_byte_const_span_class_0->Inherit(_exports_byte_const_span_class);
_exports_byte_const_span_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_byte_const_span_obj = _exports_byte_const_span_class_0->GetFunction();
/* Class: iovec_span (_exports_iovec_span) */
v8::Handle<v8::FunctionTemplate> _exports_iovec_span_class_0 = SWIGV8_CreateClassTemplate("iovec_span");
_exports_iovec_span_class_0->SetCallHandler(_wrap_new_iovec_span);
_exports_iovec_span_class_0->Inherit(_exports_iovec_span_class);
_exports_iovec_span_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_iovec_span_obj = _exports_iovec_span_class_0->GetFunction();
/* Class: sha1_hash (_exports_sha1_hash) */
v8::Handle<v8::FunctionTemplate> _exports_sha1_hash_class_0 = SWIGV8_CreateClassTemplate("sha1_hash");
_exports_sha1_hash_class_0->SetCallHandler(_wrap_new_sha1_hash);
_exports_sha1_hash_class_0->Inherit(_exports_sha1_hash_class);
_exports_sha1_hash_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_sha1_hash_obj = _exports_sha1_hash_class_0->GetFunction();
/* Class: bloom_filter_128 (_exports_bloom_filter_128) */
v8::Handle<v8::FunctionTemplate> _exports_bloom_filter_128_class_0 = SWIGV8_CreateClassTemplate("bloom_filter_128");
_exports_bloom_filter_128_class_0->SetCallHandler(_wrap_new_bloom_filter_128);
_exports_bloom_filter_128_class_0->Inherit(_exports_bloom_filter_128_class);
_exports_bloom_filter_128_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_bloom_filter_128_obj = _exports_bloom_filter_128_class_0->GetFunction();
/* Class: bloom_filter_256 (_exports_bloom_filter_256) */
v8::Handle<v8::FunctionTemplate> _exports_bloom_filter_256_class_0 = SWIGV8_CreateClassTemplate("bloom_filter_256");
_exports_bloom_filter_256_class_0->SetCallHandler(_wrap_new_bloom_filter_256);
_exports_bloom_filter_256_class_0->Inherit(_exports_bloom_filter_256_class);
_exports_bloom_filter_256_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_bloom_filter_256_obj = _exports_bloom_filter_256_class_0->GetFunction();
/* Class: string_view (_exports_string_view) */
v8::Handle<v8::FunctionTemplate> _exports_string_view_class_0 = SWIGV8_CreateClassTemplate("string_view");
_exports_string_view_class_0->SetCallHandler(_wrap_new_string_view);
_exports_string_view_class_0->Inherit(_exports_string_view_class);
_exports_string_view_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_string_view_obj = _exports_string_view_class_0->GetFunction();
/* Class: address (_exports_address) */
v8::Handle<v8::FunctionTemplate> _exports_address_class_0 = SWIGV8_CreateClassTemplate("address");
_exports_address_class_0->SetCallHandler(_wrap_new_address);
_exports_address_class_0->Inherit(_exports_address_class);
_exports_address_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_address_obj = _exports_address_class_0->GetFunction();
/* Class: tcp_endpoint (_exports_tcp_endpoint) */
v8::Handle<v8::FunctionTemplate> _exports_tcp_endpoint_class_0 = SWIGV8_CreateClassTemplate("tcp_endpoint");
_exports_tcp_endpoint_class_0->SetCallHandler(_wrap_new_tcp_endpoint);
_exports_tcp_endpoint_class_0->Inherit(_exports_tcp_endpoint_class);
_exports_tcp_endpoint_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_tcp_endpoint_obj = _exports_tcp_endpoint_class_0->GetFunction();
/* Class: udp_endpoint (_exports_udp_endpoint) */
v8::Handle<v8::FunctionTemplate> _exports_udp_endpoint_class_0 = SWIGV8_CreateClassTemplate("udp_endpoint");
_exports_udp_endpoint_class_0->SetCallHandler(_wrap_new_udp_endpoint);
_exports_udp_endpoint_class_0->Inherit(_exports_udp_endpoint_class);
_exports_udp_endpoint_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_udp_endpoint_obj = _exports_udp_endpoint_class_0->GetFunction();
/* Class: error_category (_exports_error_category) */
v8::Handle<v8::FunctionTemplate> _exports_error_category_class_0 = SWIGV8_CreateClassTemplate("error_category");
_exports_error_category_class_0->SetCallHandler(_wrap_new_veto_error_category);
_exports_error_category_class_0->Inherit(_exports_error_category_class);
_exports_error_category_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_error_category_obj = _exports_error_category_class_0->GetFunction();
/* Class: error_condition (_exports_error_condition) */
v8::Handle<v8::FunctionTemplate> _exports_error_condition_class_0 = SWIGV8_CreateClassTemplate("error_condition");
_exports_error_condition_class_0->SetCallHandler(_wrap_new_error_condition);
_exports_error_condition_class_0->Inherit(_exports_error_condition_class);
_exports_error_condition_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_error_condition_obj = _exports_error_condition_class_0->GetFunction();
/* Class: error_code (_exports_error_code) */
v8::Handle<v8::FunctionTemplate> _exports_error_code_class_0 = SWIGV8_CreateClassTemplate("error_code");
_exports_error_code_class_0->SetCallHandler(_wrap_new_error_code);
_exports_error_code_class_0->Inherit(_exports_error_code_class);
_exports_error_code_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_error_code_obj = _exports_error_code_class_0->GetFunction();
/* Class: bitfield (_exports_bitfield) */
v8::Handle<v8::FunctionTemplate> _exports_bitfield_class_0 = SWIGV8_CreateClassTemplate("bitfield");
_exports_bitfield_class_0->SetCallHandler(_wrap_new_bitfield);
_exports_bitfield_class_0->Inherit(_exports_bitfield_class);
_exports_bitfield_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_bitfield_obj = _exports_bitfield_class_0->GetFunction();
/* Class: peer_request (_exports_peer_request) */
v8::Handle<v8::FunctionTemplate> _exports_peer_request_class_0 = SWIGV8_CreateClassTemplate("peer_request");
_exports_peer_request_class_0->SetCallHandler(_wrap_new_peer_request);
_exports_peer_request_class_0->Inherit(_exports_peer_request_class);
_exports_peer_request_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_peer_request_obj = _exports_peer_request_class_0->GetFunction();
/* Class: entry (_exports_entry) */
v8::Handle<v8::FunctionTemplate> _exports_entry_class_0 = SWIGV8_CreateClassTemplate("entry");
_exports_entry_class_0->SetCallHandler(_wrap_new_entry);
_exports_entry_class_0->Inherit(_exports_entry_class);
_exports_entry_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_entry_obj = _exports_entry_class_0->GetFunction();
/* Class: file_slice (_exports_file_slice) */
v8::Handle<v8::FunctionTemplate> _exports_file_slice_class_0 = SWIGV8_CreateClassTemplate("file_slice");
_exports_file_slice_class_0->SetCallHandler(_wrap_new_file_slice);
_exports_file_slice_class_0->Inherit(_exports_file_slice_class);
_exports_file_slice_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_file_slice_obj = _exports_file_slice_class_0->GetFunction();
/* Class: file_storage (_exports_file_storage) */
v8::Handle<v8::FunctionTemplate> _exports_file_storage_class_0 = SWIGV8_CreateClassTemplate("file_storage");
_exports_file_storage_class_0->SetCallHandler(_wrap_new_file_storage);
_exports_file_storage_class_0->Inherit(_exports_file_storage_class);
_exports_file_storage_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_file_storage_obj = _exports_file_storage_class_0->GetFunction();
/* Class: web_seed_entry (_exports_web_seed_entry) */
v8::Handle<v8::FunctionTemplate> _exports_web_seed_entry_class_0 = SWIGV8_CreateClassTemplate("web_seed_entry");
_exports_web_seed_entry_class_0->SetCallHandler(_wrap_new_web_seed_entry);
_exports_web_seed_entry_class_0->Inherit(_exports_web_seed_entry_class);
_exports_web_seed_entry_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_web_seed_entry_obj = _exports_web_seed_entry_class_0->GetFunction();
/* Class: torrent_info (_exports_torrent_info) */
v8::Handle<v8::FunctionTemplate> _exports_torrent_info_class_0 = SWIGV8_CreateClassTemplate("torrent_info");
_exports_torrent_info_class_0->SetCallHandler(_wrap_new_torrent_info);
_exports_torrent_info_class_0->Inherit(_exports_torrent_info_class);
_exports_torrent_info_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_torrent_info_obj = _exports_torrent_info_class_0->GetFunction();
/* Class: block_info (_exports_block_info) */
v8::Handle<v8::FunctionTemplate> _exports_block_info_class_0 = SWIGV8_CreateClassTemplate("block_info");
_exports_block_info_class_0->SetCallHandler(_wrap_new_block_info);
_exports_block_info_class_0->Inherit(_exports_block_info_class);
_exports_block_info_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_block_info_obj = _exports_block_info_class_0->GetFunction();
/* Class: partial_piece_info (_exports_partial_piece_info) */
v8::Handle<v8::FunctionTemplate> _exports_partial_piece_info_class_0 = SWIGV8_CreateClassTemplate("partial_piece_info");
_exports_partial_piece_info_class_0->SetCallHandler(_wrap_new_partial_piece_info);
_exports_partial_piece_info_class_0->Inherit(_exports_partial_piece_info_class);
_exports_partial_piece_info_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_partial_piece_info_obj = _exports_partial_piece_info_class_0->GetFunction();
/* Class: torrent_handle (_exports_torrent_handle) */
v8::Handle<v8::FunctionTemplate> _exports_torrent_handle_class_0 = SWIGV8_CreateClassTemplate("torrent_handle");
_exports_torrent_handle_class_0->SetCallHandler(_wrap_new_veto_torrent_handle);
_exports_torrent_handle_class_0->Inherit(_exports_torrent_handle_class);
_exports_torrent_handle_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_torrent_handle_obj = _exports_torrent_handle_class_0->GetFunction();
/* Class: add_torrent_params (_exports_add_torrent_params) */
v8::Handle<v8::FunctionTemplate> _exports_add_torrent_params_class_0 = SWIGV8_CreateClassTemplate("add_torrent_params");
_exports_add_torrent_params_class_0->SetCallHandler(_wrap_new_veto_add_torrent_params);
_exports_add_torrent_params_class_0->Inherit(_exports_add_torrent_params_class);
_exports_add_torrent_params_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_add_torrent_params_obj = _exports_add_torrent_params_class_0->GetFunction();
/* Class: stats_metric (_exports_stats_metric) */
v8::Handle<v8::FunctionTemplate> _exports_stats_metric_class_0 = SWIGV8_CreateClassTemplate("stats_metric");
_exports_stats_metric_class_0->SetCallHandler(_wrap_new_stats_metric);
_exports_stats_metric_class_0->Inherit(_exports_stats_metric_class);
_exports_stats_metric_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_stats_metric_obj = _exports_stats_metric_class_0->GetFunction();
/* Class: alert (_exports_alert) */
v8::Handle<v8::FunctionTemplate> _exports_alert_class_0 = SWIGV8_CreateClassTemplate("alert");
_exports_alert_class_0->SetCallHandler(_wrap_new_veto_alert);
_exports_alert_class_0->Inherit(_exports_alert_class);
_exports_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_alert_obj = _exports_alert_class_0->GetFunction();
/* Class: torrent_alert (_exports_torrent_alert) */
v8::Handle<v8::FunctionTemplate> _exports_torrent_alert_class_0 = SWIGV8_CreateClassTemplate("torrent_alert");
_exports_torrent_alert_class_0->SetCallHandler(_wrap_new_veto_torrent_alert);
_exports_torrent_alert_class_0->Inherit(_exports_torrent_alert_class);
_exports_torrent_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_torrent_alert_obj = _exports_torrent_alert_class_0->GetFunction();
/* Class: peer_alert (_exports_peer_alert) */
v8::Handle<v8::FunctionTemplate> _exports_peer_alert_class_0 = SWIGV8_CreateClassTemplate("peer_alert");
_exports_peer_alert_class_0->SetCallHandler(_wrap_new_veto_peer_alert);
_exports_peer_alert_class_0->Inherit(_exports_peer_alert_class);
_exports_peer_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_peer_alert_obj = _exports_peer_alert_class_0->GetFunction();
/* Class: tracker_alert (_exports_tracker_alert) */
v8::Handle<v8::FunctionTemplate> _exports_tracker_alert_class_0 = SWIGV8_CreateClassTemplate("tracker_alert");
_exports_tracker_alert_class_0->SetCallHandler(_wrap_new_veto_tracker_alert);
_exports_tracker_alert_class_0->Inherit(_exports_tracker_alert_class);
_exports_tracker_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_tracker_alert_obj = _exports_tracker_alert_class_0->GetFunction();
/* Class: torrent_added_alert (_exports_torrent_added_alert) */
v8::Handle<v8::FunctionTemplate> _exports_torrent_added_alert_class_0 = SWIGV8_CreateClassTemplate("torrent_added_alert");
_exports_torrent_added_alert_class_0->SetCallHandler(_wrap_new_veto_torrent_added_alert);
_exports_torrent_added_alert_class_0->Inherit(_exports_torrent_added_alert_class);
_exports_torrent_added_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_torrent_added_alert_obj = _exports_torrent_added_alert_class_0->GetFunction();
/* Class: torrent_removed_alert (_exports_torrent_removed_alert) */
v8::Handle<v8::FunctionTemplate> _exports_torrent_removed_alert_class_0 = SWIGV8_CreateClassTemplate("torrent_removed_alert");
_exports_torrent_removed_alert_class_0->SetCallHandler(_wrap_new_veto_torrent_removed_alert);
_exports_torrent_removed_alert_class_0->Inherit(_exports_torrent_removed_alert_class);
_exports_torrent_removed_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_torrent_removed_alert_obj = _exports_torrent_removed_alert_class_0->GetFunction();
/* Class: read_piece_alert (_exports_read_piece_alert) */
v8::Handle<v8::FunctionTemplate> _exports_read_piece_alert_class_0 = SWIGV8_CreateClassTemplate("read_piece_alert");
_exports_read_piece_alert_class_0->SetCallHandler(_wrap_new_veto_read_piece_alert);
_exports_read_piece_alert_class_0->Inherit(_exports_read_piece_alert_class);
_exports_read_piece_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_read_piece_alert_obj = _exports_read_piece_alert_class_0->GetFunction();
/* Class: file_completed_alert (_exports_file_completed_alert) */
v8::Handle<v8::FunctionTemplate> _exports_file_completed_alert_class_0 = SWIGV8_CreateClassTemplate("file_completed_alert");
_exports_file_completed_alert_class_0->SetCallHandler(_wrap_new_veto_file_completed_alert);
_exports_file_completed_alert_class_0->Inherit(_exports_file_completed_alert_class);
_exports_file_completed_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_file_completed_alert_obj = _exports_file_completed_alert_class_0->GetFunction();
/* Class: file_renamed_alert (_exports_file_renamed_alert) */
v8::Handle<v8::FunctionTemplate> _exports_file_renamed_alert_class_0 = SWIGV8_CreateClassTemplate("file_renamed_alert");
_exports_file_renamed_alert_class_0->SetCallHandler(_wrap_new_veto_file_renamed_alert);
_exports_file_renamed_alert_class_0->Inherit(_exports_file_renamed_alert_class);
_exports_file_renamed_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_file_renamed_alert_obj = _exports_file_renamed_alert_class_0->GetFunction();
/* Class: file_rename_failed_alert (_exports_file_rename_failed_alert) */
v8::Handle<v8::FunctionTemplate> _exports_file_rename_failed_alert_class_0 = SWIGV8_CreateClassTemplate("file_rename_failed_alert");
_exports_file_rename_failed_alert_class_0->SetCallHandler(_wrap_new_veto_file_rename_failed_alert);
_exports_file_rename_failed_alert_class_0->Inherit(_exports_file_rename_failed_alert_class);
_exports_file_rename_failed_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_file_rename_failed_alert_obj = _exports_file_rename_failed_alert_class_0->GetFunction();
/* Class: performance_alert (_exports_performance_alert) */
v8::Handle<v8::FunctionTemplate> _exports_performance_alert_class_0 = SWIGV8_CreateClassTemplate("performance_alert");
_exports_performance_alert_class_0->SetCallHandler(_wrap_new_veto_performance_alert);
_exports_performance_alert_class_0->Inherit(_exports_performance_alert_class);
_exports_performance_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_performance_alert_obj = _exports_performance_alert_class_0->GetFunction();
/* Class: state_changed_alert (_exports_state_changed_alert) */
v8::Handle<v8::FunctionTemplate> _exports_state_changed_alert_class_0 = SWIGV8_CreateClassTemplate("state_changed_alert");
_exports_state_changed_alert_class_0->SetCallHandler(_wrap_new_veto_state_changed_alert);
_exports_state_changed_alert_class_0->Inherit(_exports_state_changed_alert_class);
_exports_state_changed_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_state_changed_alert_obj = _exports_state_changed_alert_class_0->GetFunction();
/* Class: tracker_error_alert (_exports_tracker_error_alert) */
v8::Handle<v8::FunctionTemplate> _exports_tracker_error_alert_class_0 = SWIGV8_CreateClassTemplate("tracker_error_alert");
_exports_tracker_error_alert_class_0->SetCallHandler(_wrap_new_veto_tracker_error_alert);
_exports_tracker_error_alert_class_0->Inherit(_exports_tracker_error_alert_class);
_exports_tracker_error_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_tracker_error_alert_obj = _exports_tracker_error_alert_class_0->GetFunction();
/* Class: tracker_warning_alert (_exports_tracker_warning_alert) */
v8::Handle<v8::FunctionTemplate> _exports_tracker_warning_alert_class_0 = SWIGV8_CreateClassTemplate("tracker_warning_alert");
_exports_tracker_warning_alert_class_0->SetCallHandler(_wrap_new_veto_tracker_warning_alert);
_exports_tracker_warning_alert_class_0->Inherit(_exports_tracker_warning_alert_class);
_exports_tracker_warning_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_tracker_warning_alert_obj = _exports_tracker_warning_alert_class_0->GetFunction();
/* Class: scrape_reply_alert (_exports_scrape_reply_alert) */
v8::Handle<v8::FunctionTemplate> _exports_scrape_reply_alert_class_0 = SWIGV8_CreateClassTemplate("scrape_reply_alert");
_exports_scrape_reply_alert_class_0->SetCallHandler(_wrap_new_veto_scrape_reply_alert);
_exports_scrape_reply_alert_class_0->Inherit(_exports_scrape_reply_alert_class);
_exports_scrape_reply_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_scrape_reply_alert_obj = _exports_scrape_reply_alert_class_0->GetFunction();
/* Class: scrape_failed_alert (_exports_scrape_failed_alert) */
v8::Handle<v8::FunctionTemplate> _exports_scrape_failed_alert_class_0 = SWIGV8_CreateClassTemplate("scrape_failed_alert");
_exports_scrape_failed_alert_class_0->SetCallHandler(_wrap_new_veto_scrape_failed_alert);
_exports_scrape_failed_alert_class_0->Inherit(_exports_scrape_failed_alert_class);
_exports_scrape_failed_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_scrape_failed_alert_obj = _exports_scrape_failed_alert_class_0->GetFunction();
/* Class: tracker_reply_alert (_exports_tracker_reply_alert) */
v8::Handle<v8::FunctionTemplate> _exports_tracker_reply_alert_class_0 = SWIGV8_CreateClassTemplate("tracker_reply_alert");
_exports_tracker_reply_alert_class_0->SetCallHandler(_wrap_new_veto_tracker_reply_alert);
_exports_tracker_reply_alert_class_0->Inherit(_exports_tracker_reply_alert_class);
_exports_tracker_reply_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_tracker_reply_alert_obj = _exports_tracker_reply_alert_class_0->GetFunction();
/* Class: dht_reply_alert (_exports_dht_reply_alert) */
v8::Handle<v8::FunctionTemplate> _exports_dht_reply_alert_class_0 = SWIGV8_CreateClassTemplate("dht_reply_alert");
_exports_dht_reply_alert_class_0->SetCallHandler(_wrap_new_veto_dht_reply_alert);
_exports_dht_reply_alert_class_0->Inherit(_exports_dht_reply_alert_class);
_exports_dht_reply_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_dht_reply_alert_obj = _exports_dht_reply_alert_class_0->GetFunction();
/* Class: tracker_announce_alert (_exports_tracker_announce_alert) */
v8::Handle<v8::FunctionTemplate> _exports_tracker_announce_alert_class_0 = SWIGV8_CreateClassTemplate("tracker_announce_alert");
_exports_tracker_announce_alert_class_0->SetCallHandler(_wrap_new_veto_tracker_announce_alert);
_exports_tracker_announce_alert_class_0->Inherit(_exports_tracker_announce_alert_class);
_exports_tracker_announce_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_tracker_announce_alert_obj = _exports_tracker_announce_alert_class_0->GetFunction();
/* Class: hash_failed_alert (_exports_hash_failed_alert) */
v8::Handle<v8::FunctionTemplate> _exports_hash_failed_alert_class_0 = SWIGV8_CreateClassTemplate("hash_failed_alert");
_exports_hash_failed_alert_class_0->SetCallHandler(_wrap_new_veto_hash_failed_alert);
_exports_hash_failed_alert_class_0->Inherit(_exports_hash_failed_alert_class);
_exports_hash_failed_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_hash_failed_alert_obj = _exports_hash_failed_alert_class_0->GetFunction();
/* Class: peer_ban_alert (_exports_peer_ban_alert) */
v8::Handle<v8::FunctionTemplate> _exports_peer_ban_alert_class_0 = SWIGV8_CreateClassTemplate("peer_ban_alert");
_exports_peer_ban_alert_class_0->SetCallHandler(_wrap_new_veto_peer_ban_alert);
_exports_peer_ban_alert_class_0->Inherit(_exports_peer_ban_alert_class);
_exports_peer_ban_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_peer_ban_alert_obj = _exports_peer_ban_alert_class_0->GetFunction();
/* Class: peer_unsnubbed_alert (_exports_peer_unsnubbed_alert) */
v8::Handle<v8::FunctionTemplate> _exports_peer_unsnubbed_alert_class_0 = SWIGV8_CreateClassTemplate("peer_unsnubbed_alert");
_exports_peer_unsnubbed_alert_class_0->SetCallHandler(_wrap_new_veto_peer_unsnubbed_alert);
_exports_peer_unsnubbed_alert_class_0->Inherit(_exports_peer_unsnubbed_alert_class);
_exports_peer_unsnubbed_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_peer_unsnubbed_alert_obj = _exports_peer_unsnubbed_alert_class_0->GetFunction();
/* Class: peer_snubbed_alert (_exports_peer_snubbed_alert) */
v8::Handle<v8::FunctionTemplate> _exports_peer_snubbed_alert_class_0 = SWIGV8_CreateClassTemplate("peer_snubbed_alert");
_exports_peer_snubbed_alert_class_0->SetCallHandler(_wrap_new_veto_peer_snubbed_alert);
_exports_peer_snubbed_alert_class_0->Inherit(_exports_peer_snubbed_alert_class);
_exports_peer_snubbed_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_peer_snubbed_alert_obj = _exports_peer_snubbed_alert_class_0->GetFunction();
/* Class: peer_error_alert (_exports_peer_error_alert) */
v8::Handle<v8::FunctionTemplate> _exports_peer_error_alert_class_0 = SWIGV8_CreateClassTemplate("peer_error_alert");
_exports_peer_error_alert_class_0->SetCallHandler(_wrap_new_veto_peer_error_alert);
_exports_peer_error_alert_class_0->Inherit(_exports_peer_error_alert_class);
_exports_peer_error_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_peer_error_alert_obj = _exports_peer_error_alert_class_0->GetFunction();
/* Class: peer_connect_alert (_exports_peer_connect_alert) */
v8::Handle<v8::FunctionTemplate> _exports_peer_connect_alert_class_0 = SWIGV8_CreateClassTemplate("peer_connect_alert");
_exports_peer_connect_alert_class_0->SetCallHandler(_wrap_new_veto_peer_connect_alert);
_exports_peer_connect_alert_class_0->Inherit(_exports_peer_connect_alert_class);
_exports_peer_connect_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_peer_connect_alert_obj = _exports_peer_connect_alert_class_0->GetFunction();
/* Class: peer_disconnected_alert (_exports_peer_disconnected_alert) */
v8::Handle<v8::FunctionTemplate> _exports_peer_disconnected_alert_class_0 = SWIGV8_CreateClassTemplate("peer_disconnected_alert");
_exports_peer_disconnected_alert_class_0->SetCallHandler(_wrap_new_veto_peer_disconnected_alert);
_exports_peer_disconnected_alert_class_0->Inherit(_exports_peer_disconnected_alert_class);
_exports_peer_disconnected_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_peer_disconnected_alert_obj = _exports_peer_disconnected_alert_class_0->GetFunction();
/* Class: invalid_request_alert (_exports_invalid_request_alert) */
v8::Handle<v8::FunctionTemplate> _exports_invalid_request_alert_class_0 = SWIGV8_CreateClassTemplate("invalid_request_alert");
_exports_invalid_request_alert_class_0->SetCallHandler(_wrap_new_veto_invalid_request_alert);
_exports_invalid_request_alert_class_0->Inherit(_exports_invalid_request_alert_class);
_exports_invalid_request_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_invalid_request_alert_obj = _exports_invalid_request_alert_class_0->GetFunction();
/* Class: torrent_finished_alert (_exports_torrent_finished_alert) */
v8::Handle<v8::FunctionTemplate> _exports_torrent_finished_alert_class_0 = SWIGV8_CreateClassTemplate("torrent_finished_alert");
_exports_torrent_finished_alert_class_0->SetCallHandler(_wrap_new_veto_torrent_finished_alert);
_exports_torrent_finished_alert_class_0->Inherit(_exports_torrent_finished_alert_class);
_exports_torrent_finished_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_torrent_finished_alert_obj = _exports_torrent_finished_alert_class_0->GetFunction();
/* Class: piece_finished_alert (_exports_piece_finished_alert) */
v8::Handle<v8::FunctionTemplate> _exports_piece_finished_alert_class_0 = SWIGV8_CreateClassTemplate("piece_finished_alert");
_exports_piece_finished_alert_class_0->SetCallHandler(_wrap_new_veto_piece_finished_alert);
_exports_piece_finished_alert_class_0->Inherit(_exports_piece_finished_alert_class);
_exports_piece_finished_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_piece_finished_alert_obj = _exports_piece_finished_alert_class_0->GetFunction();
/* Class: request_dropped_alert (_exports_request_dropped_alert) */
v8::Handle<v8::FunctionTemplate> _exports_request_dropped_alert_class_0 = SWIGV8_CreateClassTemplate("request_dropped_alert");
_exports_request_dropped_alert_class_0->SetCallHandler(_wrap_new_veto_request_dropped_alert);
_exports_request_dropped_alert_class_0->Inherit(_exports_request_dropped_alert_class);
_exports_request_dropped_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_request_dropped_alert_obj = _exports_request_dropped_alert_class_0->GetFunction();
/* Class: block_timeout_alert (_exports_block_timeout_alert) */
v8::Handle<v8::FunctionTemplate> _exports_block_timeout_alert_class_0 = SWIGV8_CreateClassTemplate("block_timeout_alert");
_exports_block_timeout_alert_class_0->SetCallHandler(_wrap_new_veto_block_timeout_alert);
_exports_block_timeout_alert_class_0->Inherit(_exports_block_timeout_alert_class);
_exports_block_timeout_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_block_timeout_alert_obj = _exports_block_timeout_alert_class_0->GetFunction();
/* Class: block_finished_alert (_exports_block_finished_alert) */
v8::Handle<v8::FunctionTemplate> _exports_block_finished_alert_class_0 = SWIGV8_CreateClassTemplate("block_finished_alert");
_exports_block_finished_alert_class_0->SetCallHandler(_wrap_new_veto_block_finished_alert);
_exports_block_finished_alert_class_0->Inherit(_exports_block_finished_alert_class);
_exports_block_finished_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_block_finished_alert_obj = _exports_block_finished_alert_class_0->GetFunction();
/* Class: block_downloading_alert (_exports_block_downloading_alert) */
v8::Handle<v8::FunctionTemplate> _exports_block_downloading_alert_class_0 = SWIGV8_CreateClassTemplate("block_downloading_alert");
_exports_block_downloading_alert_class_0->SetCallHandler(_wrap_new_veto_block_downloading_alert);
_exports_block_downloading_alert_class_0->Inherit(_exports_block_downloading_alert_class);
_exports_block_downloading_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_block_downloading_alert_obj = _exports_block_downloading_alert_class_0->GetFunction();
/* Class: unwanted_block_alert (_exports_unwanted_block_alert) */
v8::Handle<v8::FunctionTemplate> _exports_unwanted_block_alert_class_0 = SWIGV8_CreateClassTemplate("unwanted_block_alert");
_exports_unwanted_block_alert_class_0->SetCallHandler(_wrap_new_veto_unwanted_block_alert);
_exports_unwanted_block_alert_class_0->Inherit(_exports_unwanted_block_alert_class);
_exports_unwanted_block_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_unwanted_block_alert_obj = _exports_unwanted_block_alert_class_0->GetFunction();
/* Class: storage_moved_alert (_exports_storage_moved_alert) */
v8::Handle<v8::FunctionTemplate> _exports_storage_moved_alert_class_0 = SWIGV8_CreateClassTemplate("storage_moved_alert");
_exports_storage_moved_alert_class_0->SetCallHandler(_wrap_new_veto_storage_moved_alert);
_exports_storage_moved_alert_class_0->Inherit(_exports_storage_moved_alert_class);
_exports_storage_moved_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_storage_moved_alert_obj = _exports_storage_moved_alert_class_0->GetFunction();
/* Class: storage_moved_failed_alert (_exports_storage_moved_failed_alert) */
v8::Handle<v8::FunctionTemplate> _exports_storage_moved_failed_alert_class_0 = SWIGV8_CreateClassTemplate("storage_moved_failed_alert");
_exports_storage_moved_failed_alert_class_0->SetCallHandler(_wrap_new_veto_storage_moved_failed_alert);
_exports_storage_moved_failed_alert_class_0->Inherit(_exports_storage_moved_failed_alert_class);
_exports_storage_moved_failed_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_storage_moved_failed_alert_obj = _exports_storage_moved_failed_alert_class_0->GetFunction();
/* Class: torrent_deleted_alert (_exports_torrent_deleted_alert) */
v8::Handle<v8::FunctionTemplate> _exports_torrent_deleted_alert_class_0 = SWIGV8_CreateClassTemplate("torrent_deleted_alert");
_exports_torrent_deleted_alert_class_0->SetCallHandler(_wrap_new_veto_torrent_deleted_alert);
_exports_torrent_deleted_alert_class_0->Inherit(_exports_torrent_deleted_alert_class);
_exports_torrent_deleted_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_torrent_deleted_alert_obj = _exports_torrent_deleted_alert_class_0->GetFunction();
/* Class: torrent_delete_failed_alert (_exports_torrent_delete_failed_alert) */
v8::Handle<v8::FunctionTemplate> _exports_torrent_delete_failed_alert_class_0 = SWIGV8_CreateClassTemplate("torrent_delete_failed_alert");
_exports_torrent_delete_failed_alert_class_0->SetCallHandler(_wrap_new_veto_torrent_delete_failed_alert);
_exports_torrent_delete_failed_alert_class_0->Inherit(_exports_torrent_delete_failed_alert_class);
_exports_torrent_delete_failed_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_torrent_delete_failed_alert_obj = _exports_torrent_delete_failed_alert_class_0->GetFunction();
/* Class: save_resume_data_alert (_exports_save_resume_data_alert) */
v8::Handle<v8::FunctionTemplate> _exports_save_resume_data_alert_class_0 = SWIGV8_CreateClassTemplate("save_resume_data_alert");
_exports_save_resume_data_alert_class_0->SetCallHandler(_wrap_new_veto_save_resume_data_alert);
_exports_save_resume_data_alert_class_0->Inherit(_exports_save_resume_data_alert_class);
_exports_save_resume_data_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_save_resume_data_alert_obj = _exports_save_resume_data_alert_class_0->GetFunction();
/* Class: save_resume_data_failed_alert (_exports_save_resume_data_failed_alert) */
v8::Handle<v8::FunctionTemplate> _exports_save_resume_data_failed_alert_class_0 = SWIGV8_CreateClassTemplate("save_resume_data_failed_alert");
_exports_save_resume_data_failed_alert_class_0->SetCallHandler(_wrap_new_veto_save_resume_data_failed_alert);
_exports_save_resume_data_failed_alert_class_0->Inherit(_exports_save_resume_data_failed_alert_class);
_exports_save_resume_data_failed_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_save_resume_data_failed_alert_obj = _exports_save_resume_data_failed_alert_class_0->GetFunction();
/* Class: torrent_paused_alert (_exports_torrent_paused_alert) */
v8::Handle<v8::FunctionTemplate> _exports_torrent_paused_alert_class_0 = SWIGV8_CreateClassTemplate("torrent_paused_alert");
_exports_torrent_paused_alert_class_0->SetCallHandler(_wrap_new_veto_torrent_paused_alert);
_exports_torrent_paused_alert_class_0->Inherit(_exports_torrent_paused_alert_class);
_exports_torrent_paused_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_torrent_paused_alert_obj = _exports_torrent_paused_alert_class_0->GetFunction();
/* Class: torrent_resumed_alert (_exports_torrent_resumed_alert) */
v8::Handle<v8::FunctionTemplate> _exports_torrent_resumed_alert_class_0 = SWIGV8_CreateClassTemplate("torrent_resumed_alert");
_exports_torrent_resumed_alert_class_0->SetCallHandler(_wrap_new_veto_torrent_resumed_alert);
_exports_torrent_resumed_alert_class_0->Inherit(_exports_torrent_resumed_alert_class);
_exports_torrent_resumed_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_torrent_resumed_alert_obj = _exports_torrent_resumed_alert_class_0->GetFunction();
/* Class: torrent_checked_alert (_exports_torrent_checked_alert) */
v8::Handle<v8::FunctionTemplate> _exports_torrent_checked_alert_class_0 = SWIGV8_CreateClassTemplate("torrent_checked_alert");
_exports_torrent_checked_alert_class_0->SetCallHandler(_wrap_new_veto_torrent_checked_alert);
_exports_torrent_checked_alert_class_0->Inherit(_exports_torrent_checked_alert_class);
_exports_torrent_checked_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_torrent_checked_alert_obj = _exports_torrent_checked_alert_class_0->GetFunction();
/* Class: url_seed_alert (_exports_url_seed_alert) */
v8::Handle<v8::FunctionTemplate> _exports_url_seed_alert_class_0 = SWIGV8_CreateClassTemplate("url_seed_alert");
_exports_url_seed_alert_class_0->SetCallHandler(_wrap_new_veto_url_seed_alert);
_exports_url_seed_alert_class_0->Inherit(_exports_url_seed_alert_class);
_exports_url_seed_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_url_seed_alert_obj = _exports_url_seed_alert_class_0->GetFunction();
/* Class: file_error_alert (_exports_file_error_alert) */
v8::Handle<v8::FunctionTemplate> _exports_file_error_alert_class_0 = SWIGV8_CreateClassTemplate("file_error_alert");
_exports_file_error_alert_class_0->SetCallHandler(_wrap_new_veto_file_error_alert);
_exports_file_error_alert_class_0->Inherit(_exports_file_error_alert_class);
_exports_file_error_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_file_error_alert_obj = _exports_file_error_alert_class_0->GetFunction();
/* Class: metadata_failed_alert (_exports_metadata_failed_alert) */
v8::Handle<v8::FunctionTemplate> _exports_metadata_failed_alert_class_0 = SWIGV8_CreateClassTemplate("metadata_failed_alert");
_exports_metadata_failed_alert_class_0->SetCallHandler(_wrap_new_veto_metadata_failed_alert);
_exports_metadata_failed_alert_class_0->Inherit(_exports_metadata_failed_alert_class);
_exports_metadata_failed_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_metadata_failed_alert_obj = _exports_metadata_failed_alert_class_0->GetFunction();
/* Class: metadata_received_alert (_exports_metadata_received_alert) */
v8::Handle<v8::FunctionTemplate> _exports_metadata_received_alert_class_0 = SWIGV8_CreateClassTemplate("metadata_received_alert");
_exports_metadata_received_alert_class_0->SetCallHandler(_wrap_new_veto_metadata_received_alert);
_exports_metadata_received_alert_class_0->Inherit(_exports_metadata_received_alert_class);
_exports_metadata_received_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_metadata_received_alert_obj = _exports_metadata_received_alert_class_0->GetFunction();
/* Class: udp_error_alert (_exports_udp_error_alert) */
v8::Handle<v8::FunctionTemplate> _exports_udp_error_alert_class_0 = SWIGV8_CreateClassTemplate("udp_error_alert");
_exports_udp_error_alert_class_0->SetCallHandler(_wrap_new_veto_udp_error_alert);
_exports_udp_error_alert_class_0->Inherit(_exports_udp_error_alert_class);
_exports_udp_error_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_udp_error_alert_obj = _exports_udp_error_alert_class_0->GetFunction();
/* Class: external_ip_alert (_exports_external_ip_alert) */
v8::Handle<v8::FunctionTemplate> _exports_external_ip_alert_class_0 = SWIGV8_CreateClassTemplate("external_ip_alert");
_exports_external_ip_alert_class_0->SetCallHandler(_wrap_new_veto_external_ip_alert);
_exports_external_ip_alert_class_0->Inherit(_exports_external_ip_alert_class);
_exports_external_ip_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_external_ip_alert_obj = _exports_external_ip_alert_class_0->GetFunction();
/* Class: listen_failed_alert (_exports_listen_failed_alert) */
v8::Handle<v8::FunctionTemplate> _exports_listen_failed_alert_class_0 = SWIGV8_CreateClassTemplate("listen_failed_alert");
_exports_listen_failed_alert_class_0->SetCallHandler(_wrap_new_veto_listen_failed_alert);
_exports_listen_failed_alert_class_0->Inherit(_exports_listen_failed_alert_class);
_exports_listen_failed_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_listen_failed_alert_obj = _exports_listen_failed_alert_class_0->GetFunction();
/* Class: listen_succeeded_alert (_exports_listen_succeeded_alert) */
v8::Handle<v8::FunctionTemplate> _exports_listen_succeeded_alert_class_0 = SWIGV8_CreateClassTemplate("listen_succeeded_alert");
_exports_listen_succeeded_alert_class_0->SetCallHandler(_wrap_new_veto_listen_succeeded_alert);
_exports_listen_succeeded_alert_class_0->Inherit(_exports_listen_succeeded_alert_class);
_exports_listen_succeeded_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_listen_succeeded_alert_obj = _exports_listen_succeeded_alert_class_0->GetFunction();
/* Class: portmap_error_alert (_exports_portmap_error_alert) */
v8::Handle<v8::FunctionTemplate> _exports_portmap_error_alert_class_0 = SWIGV8_CreateClassTemplate("portmap_error_alert");
_exports_portmap_error_alert_class_0->SetCallHandler(_wrap_new_veto_portmap_error_alert);
_exports_portmap_error_alert_class_0->Inherit(_exports_portmap_error_alert_class);
_exports_portmap_error_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_portmap_error_alert_obj = _exports_portmap_error_alert_class_0->GetFunction();
/* Class: portmap_alert (_exports_portmap_alert) */
v8::Handle<v8::FunctionTemplate> _exports_portmap_alert_class_0 = SWIGV8_CreateClassTemplate("portmap_alert");
_exports_portmap_alert_class_0->SetCallHandler(_wrap_new_veto_portmap_alert);
_exports_portmap_alert_class_0->Inherit(_exports_portmap_alert_class);
_exports_portmap_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_portmap_alert_obj = _exports_portmap_alert_class_0->GetFunction();
/* Class: portmap_log_alert (_exports_portmap_log_alert) */
v8::Handle<v8::FunctionTemplate> _exports_portmap_log_alert_class_0 = SWIGV8_CreateClassTemplate("portmap_log_alert");
_exports_portmap_log_alert_class_0->SetCallHandler(_wrap_new_veto_portmap_log_alert);
_exports_portmap_log_alert_class_0->Inherit(_exports_portmap_log_alert_class);
_exports_portmap_log_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_portmap_log_alert_obj = _exports_portmap_log_alert_class_0->GetFunction();
/* Class: fastresume_rejected_alert (_exports_fastresume_rejected_alert) */
v8::Handle<v8::FunctionTemplate> _exports_fastresume_rejected_alert_class_0 = SWIGV8_CreateClassTemplate("fastresume_rejected_alert");
_exports_fastresume_rejected_alert_class_0->SetCallHandler(_wrap_new_veto_fastresume_rejected_alert);
_exports_fastresume_rejected_alert_class_0->Inherit(_exports_fastresume_rejected_alert_class);
_exports_fastresume_rejected_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_fastresume_rejected_alert_obj = _exports_fastresume_rejected_alert_class_0->GetFunction();
/* Class: peer_blocked_alert (_exports_peer_blocked_alert) */
v8::Handle<v8::FunctionTemplate> _exports_peer_blocked_alert_class_0 = SWIGV8_CreateClassTemplate("peer_blocked_alert");
_exports_peer_blocked_alert_class_0->SetCallHandler(_wrap_new_veto_peer_blocked_alert);
_exports_peer_blocked_alert_class_0->Inherit(_exports_peer_blocked_alert_class);
_exports_peer_blocked_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_peer_blocked_alert_obj = _exports_peer_blocked_alert_class_0->GetFunction();
/* Class: dht_announce_alert (_exports_dht_announce_alert) */
v8::Handle<v8::FunctionTemplate> _exports_dht_announce_alert_class_0 = SWIGV8_CreateClassTemplate("dht_announce_alert");
_exports_dht_announce_alert_class_0->SetCallHandler(_wrap_new_veto_dht_announce_alert);
_exports_dht_announce_alert_class_0->Inherit(_exports_dht_announce_alert_class);
_exports_dht_announce_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_dht_announce_alert_obj = _exports_dht_announce_alert_class_0->GetFunction();
/* Class: dht_get_peers_alert (_exports_dht_get_peers_alert) */
v8::Handle<v8::FunctionTemplate> _exports_dht_get_peers_alert_class_0 = SWIGV8_CreateClassTemplate("dht_get_peers_alert");
_exports_dht_get_peers_alert_class_0->SetCallHandler(_wrap_new_veto_dht_get_peers_alert);
_exports_dht_get_peers_alert_class_0->Inherit(_exports_dht_get_peers_alert_class);
_exports_dht_get_peers_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_dht_get_peers_alert_obj = _exports_dht_get_peers_alert_class_0->GetFunction();
/* Class: stats_alert (_exports_stats_alert) */
v8::Handle<v8::FunctionTemplate> _exports_stats_alert_class_0 = SWIGV8_CreateClassTemplate("stats_alert");
_exports_stats_alert_class_0->SetCallHandler(_wrap_new_veto_stats_alert);
_exports_stats_alert_class_0->Inherit(_exports_stats_alert_class);
_exports_stats_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_stats_alert_obj = _exports_stats_alert_class_0->GetFunction();
/* Class: cache_flushed_alert (_exports_cache_flushed_alert) */
v8::Handle<v8::FunctionTemplate> _exports_cache_flushed_alert_class_0 = SWIGV8_CreateClassTemplate("cache_flushed_alert");
_exports_cache_flushed_alert_class_0->SetCallHandler(_wrap_new_veto_cache_flushed_alert);
_exports_cache_flushed_alert_class_0->Inherit(_exports_cache_flushed_alert_class);
_exports_cache_flushed_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_cache_flushed_alert_obj = _exports_cache_flushed_alert_class_0->GetFunction();
/* Class: anonymous_mode_alert (_exports_anonymous_mode_alert) */
v8::Handle<v8::FunctionTemplate> _exports_anonymous_mode_alert_class_0 = SWIGV8_CreateClassTemplate("anonymous_mode_alert");
_exports_anonymous_mode_alert_class_0->SetCallHandler(_wrap_new_veto_anonymous_mode_alert);
_exports_anonymous_mode_alert_class_0->Inherit(_exports_anonymous_mode_alert_class);
_exports_anonymous_mode_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_anonymous_mode_alert_obj = _exports_anonymous_mode_alert_class_0->GetFunction();
/* Class: lsd_peer_alert (_exports_lsd_peer_alert) */
v8::Handle<v8::FunctionTemplate> _exports_lsd_peer_alert_class_0 = SWIGV8_CreateClassTemplate("lsd_peer_alert");
_exports_lsd_peer_alert_class_0->SetCallHandler(_wrap_new_veto_lsd_peer_alert);
_exports_lsd_peer_alert_class_0->Inherit(_exports_lsd_peer_alert_class);
_exports_lsd_peer_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lsd_peer_alert_obj = _exports_lsd_peer_alert_class_0->GetFunction();
/* Class: trackerid_alert (_exports_trackerid_alert) */
v8::Handle<v8::FunctionTemplate> _exports_trackerid_alert_class_0 = SWIGV8_CreateClassTemplate("trackerid_alert");
_exports_trackerid_alert_class_0->SetCallHandler(_wrap_new_veto_trackerid_alert);
_exports_trackerid_alert_class_0->Inherit(_exports_trackerid_alert_class);
_exports_trackerid_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_trackerid_alert_obj = _exports_trackerid_alert_class_0->GetFunction();
/* Class: dht_bootstrap_alert (_exports_dht_bootstrap_alert) */
v8::Handle<v8::FunctionTemplate> _exports_dht_bootstrap_alert_class_0 = SWIGV8_CreateClassTemplate("dht_bootstrap_alert");
_exports_dht_bootstrap_alert_class_0->SetCallHandler(_wrap_new_veto_dht_bootstrap_alert);
_exports_dht_bootstrap_alert_class_0->Inherit(_exports_dht_bootstrap_alert_class);
_exports_dht_bootstrap_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_dht_bootstrap_alert_obj = _exports_dht_bootstrap_alert_class_0->GetFunction();
/* Class: torrent_error_alert (_exports_torrent_error_alert) */
v8::Handle<v8::FunctionTemplate> _exports_torrent_error_alert_class_0 = SWIGV8_CreateClassTemplate("torrent_error_alert");
_exports_torrent_error_alert_class_0->SetCallHandler(_wrap_new_veto_torrent_error_alert);
_exports_torrent_error_alert_class_0->Inherit(_exports_torrent_error_alert_class);
_exports_torrent_error_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_torrent_error_alert_obj = _exports_torrent_error_alert_class_0->GetFunction();
/* Class: torrent_need_cert_alert (_exports_torrent_need_cert_alert) */
v8::Handle<v8::FunctionTemplate> _exports_torrent_need_cert_alert_class_0 = SWIGV8_CreateClassTemplate("torrent_need_cert_alert");
_exports_torrent_need_cert_alert_class_0->SetCallHandler(_wrap_new_veto_torrent_need_cert_alert);
_exports_torrent_need_cert_alert_class_0->Inherit(_exports_torrent_need_cert_alert_class);
_exports_torrent_need_cert_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_torrent_need_cert_alert_obj = _exports_torrent_need_cert_alert_class_0->GetFunction();
/* Class: incoming_connection_alert (_exports_incoming_connection_alert) */
v8::Handle<v8::FunctionTemplate> _exports_incoming_connection_alert_class_0 = SWIGV8_CreateClassTemplate("incoming_connection_alert");
_exports_incoming_connection_alert_class_0->SetCallHandler(_wrap_new_veto_incoming_connection_alert);
_exports_incoming_connection_alert_class_0->Inherit(_exports_incoming_connection_alert_class);
_exports_incoming_connection_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_incoming_connection_alert_obj = _exports_incoming_connection_alert_class_0->GetFunction();
/* Class: add_torrent_alert (_exports_add_torrent_alert) */
v8::Handle<v8::FunctionTemplate> _exports_add_torrent_alert_class_0 = SWIGV8_CreateClassTemplate("add_torrent_alert");
_exports_add_torrent_alert_class_0->SetCallHandler(_wrap_new_veto_add_torrent_alert);
_exports_add_torrent_alert_class_0->Inherit(_exports_add_torrent_alert_class);
_exports_add_torrent_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_add_torrent_alert_obj = _exports_add_torrent_alert_class_0->GetFunction();
/* Class: state_update_alert (_exports_state_update_alert) */
v8::Handle<v8::FunctionTemplate> _exports_state_update_alert_class_0 = SWIGV8_CreateClassTemplate("state_update_alert");
_exports_state_update_alert_class_0->SetCallHandler(_wrap_new_veto_state_update_alert);
_exports_state_update_alert_class_0->Inherit(_exports_state_update_alert_class);
_exports_state_update_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_state_update_alert_obj = _exports_state_update_alert_class_0->GetFunction();
/* Class: mmap_cache_alert (_exports_mmap_cache_alert) */
v8::Handle<v8::FunctionTemplate> _exports_mmap_cache_alert_class_0 = SWIGV8_CreateClassTemplate("mmap_cache_alert");
_exports_mmap_cache_alert_class_0->SetCallHandler(_wrap_new_veto_mmap_cache_alert);
_exports_mmap_cache_alert_class_0->Inherit(_exports_mmap_cache_alert_class);
_exports_mmap_cache_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_mmap_cache_alert_obj = _exports_mmap_cache_alert_class_0->GetFunction();
/* Class: session_stats_alert (_exports_session_stats_alert) */
v8::Handle<v8::FunctionTemplate> _exports_session_stats_alert_class_0 = SWIGV8_CreateClassTemplate("session_stats_alert");
_exports_session_stats_alert_class_0->SetCallHandler(_wrap_new_veto_session_stats_alert);
_exports_session_stats_alert_class_0->Inherit(_exports_session_stats_alert_class);
_exports_session_stats_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_session_stats_alert_obj = _exports_session_stats_alert_class_0->GetFunction();
/* Class: dht_error_alert (_exports_dht_error_alert) */
v8::Handle<v8::FunctionTemplate> _exports_dht_error_alert_class_0 = SWIGV8_CreateClassTemplate("dht_error_alert");
_exports_dht_error_alert_class_0->SetCallHandler(_wrap_new_veto_dht_error_alert);
_exports_dht_error_alert_class_0->Inherit(_exports_dht_error_alert_class);
_exports_dht_error_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_dht_error_alert_obj = _exports_dht_error_alert_class_0->GetFunction();
/* Class: dht_immutable_item_alert (_exports_dht_immutable_item_alert) */
v8::Handle<v8::FunctionTemplate> _exports_dht_immutable_item_alert_class_0 = SWIGV8_CreateClassTemplate("dht_immutable_item_alert");
_exports_dht_immutable_item_alert_class_0->SetCallHandler(_wrap_new_veto_dht_immutable_item_alert);
_exports_dht_immutable_item_alert_class_0->Inherit(_exports_dht_immutable_item_alert_class);
_exports_dht_immutable_item_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_dht_immutable_item_alert_obj = _exports_dht_immutable_item_alert_class_0->GetFunction();
/* Class: dht_mutable_item_alert (_exports_dht_mutable_item_alert) */
v8::Handle<v8::FunctionTemplate> _exports_dht_mutable_item_alert_class_0 = SWIGV8_CreateClassTemplate("dht_mutable_item_alert");
_exports_dht_mutable_item_alert_class_0->SetCallHandler(_wrap_new_veto_dht_mutable_item_alert);
_exports_dht_mutable_item_alert_class_0->Inherit(_exports_dht_mutable_item_alert_class);
_exports_dht_mutable_item_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_dht_mutable_item_alert_obj = _exports_dht_mutable_item_alert_class_0->GetFunction();
/* Class: dht_put_alert (_exports_dht_put_alert) */
v8::Handle<v8::FunctionTemplate> _exports_dht_put_alert_class_0 = SWIGV8_CreateClassTemplate("dht_put_alert");
_exports_dht_put_alert_class_0->SetCallHandler(_wrap_new_veto_dht_put_alert);
_exports_dht_put_alert_class_0->Inherit(_exports_dht_put_alert_class);
_exports_dht_put_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_dht_put_alert_obj = _exports_dht_put_alert_class_0->GetFunction();
/* Class: i2p_alert (_exports_i2p_alert) */
v8::Handle<v8::FunctionTemplate> _exports_i2p_alert_class_0 = SWIGV8_CreateClassTemplate("i2p_alert");
_exports_i2p_alert_class_0->SetCallHandler(_wrap_new_veto_i2p_alert);
_exports_i2p_alert_class_0->Inherit(_exports_i2p_alert_class);
_exports_i2p_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_i2p_alert_obj = _exports_i2p_alert_class_0->GetFunction();
/* Class: dht_outgoing_get_peers_alert (_exports_dht_outgoing_get_peers_alert) */
v8::Handle<v8::FunctionTemplate> _exports_dht_outgoing_get_peers_alert_class_0 = SWIGV8_CreateClassTemplate("dht_outgoing_get_peers_alert");
_exports_dht_outgoing_get_peers_alert_class_0->SetCallHandler(_wrap_new_veto_dht_outgoing_get_peers_alert);
_exports_dht_outgoing_get_peers_alert_class_0->Inherit(_exports_dht_outgoing_get_peers_alert_class);
_exports_dht_outgoing_get_peers_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_dht_outgoing_get_peers_alert_obj = _exports_dht_outgoing_get_peers_alert_class_0->GetFunction();
/* Class: log_alert (_exports_log_alert) */
v8::Handle<v8::FunctionTemplate> _exports_log_alert_class_0 = SWIGV8_CreateClassTemplate("log_alert");
_exports_log_alert_class_0->SetCallHandler(_wrap_new_veto_log_alert);
_exports_log_alert_class_0->Inherit(_exports_log_alert_class);
_exports_log_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_log_alert_obj = _exports_log_alert_class_0->GetFunction();
/* Class: torrent_log_alert (_exports_torrent_log_alert) */
v8::Handle<v8::FunctionTemplate> _exports_torrent_log_alert_class_0 = SWIGV8_CreateClassTemplate("torrent_log_alert");
_exports_torrent_log_alert_class_0->SetCallHandler(_wrap_new_veto_torrent_log_alert);
_exports_torrent_log_alert_class_0->Inherit(_exports_torrent_log_alert_class);
_exports_torrent_log_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_torrent_log_alert_obj = _exports_torrent_log_alert_class_0->GetFunction();
/* Class: peer_log_alert (_exports_peer_log_alert) */
v8::Handle<v8::FunctionTemplate> _exports_peer_log_alert_class_0 = SWIGV8_CreateClassTemplate("peer_log_alert");
_exports_peer_log_alert_class_0->SetCallHandler(_wrap_new_veto_peer_log_alert);
_exports_peer_log_alert_class_0->Inherit(_exports_peer_log_alert_class);
_exports_peer_log_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_peer_log_alert_obj = _exports_peer_log_alert_class_0->GetFunction();
/* Class: lsd_error_alert (_exports_lsd_error_alert) */
v8::Handle<v8::FunctionTemplate> _exports_lsd_error_alert_class_0 = SWIGV8_CreateClassTemplate("lsd_error_alert");
_exports_lsd_error_alert_class_0->SetCallHandler(_wrap_new_veto_lsd_error_alert);
_exports_lsd_error_alert_class_0->Inherit(_exports_lsd_error_alert_class);
_exports_lsd_error_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lsd_error_alert_obj = _exports_lsd_error_alert_class_0->GetFunction();
/* Class: dht_lookup (_exports_dht_lookup) */
v8::Handle<v8::FunctionTemplate> _exports_dht_lookup_class_0 = SWIGV8_CreateClassTemplate("dht_lookup");
_exports_dht_lookup_class_0->SetCallHandler(_wrap_new_dht_lookup);
_exports_dht_lookup_class_0->Inherit(_exports_dht_lookup_class);
_exports_dht_lookup_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_dht_lookup_obj = _exports_dht_lookup_class_0->GetFunction();
/* Class: dht_routing_bucket (_exports_dht_routing_bucket) */
v8::Handle<v8::FunctionTemplate> _exports_dht_routing_bucket_class_0 = SWIGV8_CreateClassTemplate("dht_routing_bucket");
_exports_dht_routing_bucket_class_0->SetCallHandler(_wrap_new_dht_routing_bucket);
_exports_dht_routing_bucket_class_0->Inherit(_exports_dht_routing_bucket_class);
_exports_dht_routing_bucket_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_dht_routing_bucket_obj = _exports_dht_routing_bucket_class_0->GetFunction();
/* Class: dht_stats_alert (_exports_dht_stats_alert) */
v8::Handle<v8::FunctionTemplate> _exports_dht_stats_alert_class_0 = SWIGV8_CreateClassTemplate("dht_stats_alert");
_exports_dht_stats_alert_class_0->SetCallHandler(_wrap_new_veto_dht_stats_alert);
_exports_dht_stats_alert_class_0->Inherit(_exports_dht_stats_alert_class);
_exports_dht_stats_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_dht_stats_alert_obj = _exports_dht_stats_alert_class_0->GetFunction();
/* Class: incoming_request_alert (_exports_incoming_request_alert) */
v8::Handle<v8::FunctionTemplate> _exports_incoming_request_alert_class_0 = SWIGV8_CreateClassTemplate("incoming_request_alert");
_exports_incoming_request_alert_class_0->SetCallHandler(_wrap_new_veto_incoming_request_alert);
_exports_incoming_request_alert_class_0->Inherit(_exports_incoming_request_alert_class);
_exports_incoming_request_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_incoming_request_alert_obj = _exports_incoming_request_alert_class_0->GetFunction();
/* Class: dht_log_alert (_exports_dht_log_alert) */
v8::Handle<v8::FunctionTemplate> _exports_dht_log_alert_class_0 = SWIGV8_CreateClassTemplate("dht_log_alert");
_exports_dht_log_alert_class_0->SetCallHandler(_wrap_new_veto_dht_log_alert);
_exports_dht_log_alert_class_0->Inherit(_exports_dht_log_alert_class);
_exports_dht_log_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_dht_log_alert_obj = _exports_dht_log_alert_class_0->GetFunction();
/* Class: dht_pkt_alert (_exports_dht_pkt_alert) */
v8::Handle<v8::FunctionTemplate> _exports_dht_pkt_alert_class_0 = SWIGV8_CreateClassTemplate("dht_pkt_alert");
_exports_dht_pkt_alert_class_0->SetCallHandler(_wrap_new_veto_dht_pkt_alert);
_exports_dht_pkt_alert_class_0->Inherit(_exports_dht_pkt_alert_class);
_exports_dht_pkt_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_dht_pkt_alert_obj = _exports_dht_pkt_alert_class_0->GetFunction();
/* Class: dht_get_peers_reply_alert (_exports_dht_get_peers_reply_alert) */
v8::Handle<v8::FunctionTemplate> _exports_dht_get_peers_reply_alert_class_0 = SWIGV8_CreateClassTemplate("dht_get_peers_reply_alert");
_exports_dht_get_peers_reply_alert_class_0->SetCallHandler(_wrap_new_veto_dht_get_peers_reply_alert);
_exports_dht_get_peers_reply_alert_class_0->Inherit(_exports_dht_get_peers_reply_alert_class);
_exports_dht_get_peers_reply_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_dht_get_peers_reply_alert_obj = _exports_dht_get_peers_reply_alert_class_0->GetFunction();
/* Class: dht_direct_response_alert (_exports_dht_direct_response_alert) */
v8::Handle<v8::FunctionTemplate> _exports_dht_direct_response_alert_class_0 = SWIGV8_CreateClassTemplate("dht_direct_response_alert");
_exports_dht_direct_response_alert_class_0->SetCallHandler(_wrap_new_veto_dht_direct_response_alert);
_exports_dht_direct_response_alert_class_0->Inherit(_exports_dht_direct_response_alert_class);
_exports_dht_direct_response_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_dht_direct_response_alert_obj = _exports_dht_direct_response_alert_class_0->GetFunction();
/* Class: picker_log_alert (_exports_picker_log_alert) */
v8::Handle<v8::FunctionTemplate> _exports_picker_log_alert_class_0 = SWIGV8_CreateClassTemplate("picker_log_alert");
_exports_picker_log_alert_class_0->SetCallHandler(_wrap_new_veto_picker_log_alert);
_exports_picker_log_alert_class_0->Inherit(_exports_picker_log_alert_class);
_exports_picker_log_alert_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_picker_log_alert_obj = _exports_picker_log_alert_class_0->GetFunction();
/* Class: peer_info (_exports_peer_info) */
v8::Handle<v8::FunctionTemplate> _exports_peer_info_class_0 = SWIGV8_CreateClassTemplate("peer_info");
_exports_peer_info_class_0->SetCallHandler(_wrap_new_peer_info);
_exports_peer_info_class_0->Inherit(_exports_peer_info_class);
_exports_peer_info_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_peer_info_obj = _exports_peer_info_class_0->GetFunction();
/* Class: dht_settings (_exports_dht_settings) */
v8::Handle<v8::FunctionTemplate> _exports_dht_settings_class_0 = SWIGV8_CreateClassTemplate("dht_settings");
_exports_dht_settings_class_0->SetCallHandler(_wrap_new_dht_settings);
_exports_dht_settings_class_0->Inherit(_exports_dht_settings_class);
_exports_dht_settings_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_dht_settings_obj = _exports_dht_settings_class_0->GetFunction();
/* Class: settings_pack (_exports_settings_pack) */
v8::Handle<v8::FunctionTemplate> _exports_settings_pack_class_0 = SWIGV8_CreateClassTemplate("settings_pack");
_exports_settings_pack_class_0->SetCallHandler(_wrap_new_settings_pack);
_exports_settings_pack_class_0->Inherit(_exports_settings_pack_class);
_exports_settings_pack_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_settings_pack_obj = _exports_settings_pack_class_0->GetFunction();
/* Class: peer_class_info (_exports_peer_class_info) */
v8::Handle<v8::FunctionTemplate> _exports_peer_class_info_class_0 = SWIGV8_CreateClassTemplate("peer_class_info");
_exports_peer_class_info_class_0->SetCallHandler(_wrap_new_peer_class_info);
_exports_peer_class_info_class_0->Inherit(_exports_peer_class_info_class);
_exports_peer_class_info_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_peer_class_info_obj = _exports_peer_class_info_class_0->GetFunction();
/* Class: peer_class_type_filter (_exports_peer_class_type_filter) */
v8::Handle<v8::FunctionTemplate> _exports_peer_class_type_filter_class_0 = SWIGV8_CreateClassTemplate("peer_class_type_filter");
_exports_peer_class_type_filter_class_0->SetCallHandler(_wrap_new_peer_class_type_filter);
_exports_peer_class_type_filter_class_0->Inherit(_exports_peer_class_type_filter_class);
_exports_peer_class_type_filter_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_peer_class_type_filter_obj = _exports_peer_class_type_filter_class_0->GetFunction();
/* Class: session_handle (_exports_session_handle) */
v8::Handle<v8::FunctionTemplate> _exports_session_handle_class_0 = SWIGV8_CreateClassTemplate("session_handle");
_exports_session_handle_class_0->SetCallHandler(_wrap_new_session_handle);
_exports_session_handle_class_0->Inherit(_exports_session_handle_class);
_exports_session_handle_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_session_handle_obj = _exports_session_handle_class_0->GetFunction();
/* Class: dht_state (_exports_dht_state) */
v8::Handle<v8::FunctionTemplate> _exports_dht_state_class_0 = SWIGV8_CreateClassTemplate("dht_state");
_exports_dht_state_class_0->SetCallHandler(_wrap_new_dht_state);
_exports_dht_state_class_0->Inherit(_exports_dht_state_class);
_exports_dht_state_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_dht_state_obj = _exports_dht_state_class_0->GetFunction();
/* Class: session_proxy (_exports_session_proxy) */
v8::Handle<v8::FunctionTemplate> _exports_session_proxy_class_0 = SWIGV8_CreateClassTemplate("session_proxy");
_exports_session_proxy_class_0->SetCallHandler(_wrap_new_session_proxy);
_exports_session_proxy_class_0->Inherit(_exports_session_proxy_class);
_exports_session_proxy_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_session_proxy_obj = _exports_session_proxy_class_0->GetFunction();
/* Class: session_params (_exports_session_params) */
v8::Handle<v8::FunctionTemplate> _exports_session_params_class_0 = SWIGV8_CreateClassTemplate("session_params");
_exports_session_params_class_0->SetCallHandler(_wrap_new_session_params);
_exports_session_params_class_0->Inherit(_exports_session_params_class);
_exports_session_params_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_session_params_obj = _exports_session_params_class_0->GetFunction();
/* Class: session (_exports_session) */
v8::Handle<v8::FunctionTemplate> _exports_session_class_0 = SWIGV8_CreateClassTemplate("session");
_exports_session_class_0->SetCallHandler(_wrap_new_session);
_exports_session_class_0->Inherit(_exports_session_class);
_exports_session_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_session_obj = _exports_session_class_0->GetFunction();
/* Class: peer_connection_handle (_exports_peer_connection_handle) */
v8::Handle<v8::FunctionTemplate> _exports_peer_connection_handle_class_0 = SWIGV8_CreateClassTemplate("peer_connection_handle");
_exports_peer_connection_handle_class_0->SetCallHandler(_wrap_new_veto_peer_connection_handle);
_exports_peer_connection_handle_class_0->Inherit(_exports_peer_connection_handle_class);
_exports_peer_connection_handle_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_peer_connection_handle_obj = _exports_peer_connection_handle_class_0->GetFunction();
/* Class: bt_peer_connection_handle (_exports_bt_peer_connection_handle) */
v8::Handle<v8::FunctionTemplate> _exports_bt_peer_connection_handle_class_0 = SWIGV8_CreateClassTemplate("bt_peer_connection_handle");
_exports_bt_peer_connection_handle_class_0->SetCallHandler(_wrap_new_bt_peer_connection_handle);
_exports_bt_peer_connection_handle_class_0->Inherit(_exports_bt_peer_connection_handle_class);
_exports_bt_peer_connection_handle_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_bt_peer_connection_handle_obj = _exports_bt_peer_connection_handle_class_0->GetFunction();
/* Class: ip_filter (_exports_ip_filter) */
v8::Handle<v8::FunctionTemplate> _exports_ip_filter_class_0 = SWIGV8_CreateClassTemplate("ip_filter");
_exports_ip_filter_class_0->SetCallHandler(_wrap_new_ip_filter);
_exports_ip_filter_class_0->Inherit(_exports_ip_filter_class);
_exports_ip_filter_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_ip_filter_obj = _exports_ip_filter_class_0->GetFunction();
/* Class: port_filter (_exports_port_filter) */
v8::Handle<v8::FunctionTemplate> _exports_port_filter_class_0 = SWIGV8_CreateClassTemplate("port_filter");
_exports_port_filter_class_0->SetCallHandler(_wrap_new_port_filter);
_exports_port_filter_class_0->Inherit(_exports_port_filter_class);
_exports_port_filter_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_port_filter_obj = _exports_port_filter_class_0->GetFunction();
/* Class: bdecode_node (_exports_bdecode_node) */
v8::Handle<v8::FunctionTemplate> _exports_bdecode_node_class_0 = SWIGV8_CreateClassTemplate("bdecode_node");
_exports_bdecode_node_class_0->SetCallHandler(_wrap_new_bdecode_node);
_exports_bdecode_node_class_0->Inherit(_exports_bdecode_node_class);
_exports_bdecode_node_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_bdecode_node_obj = _exports_bdecode_node_class_0->GetFunction();
/* Class: create_torrent (_exports_create_torrent) */
v8::Handle<v8::FunctionTemplate> _exports_create_torrent_class_0 = SWIGV8_CreateClassTemplate("create_torrent");
_exports_create_torrent_class_0->SetCallHandler(_wrap_new_create_torrent);
_exports_create_torrent_class_0->Inherit(_exports_create_torrent_class);
_exports_create_torrent_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_create_torrent_obj = _exports_create_torrent_class_0->GetFunction();
/* Class: announce_entry (_exports_announce_entry) */
v8::Handle<v8::FunctionTemplate> _exports_announce_entry_class_0 = SWIGV8_CreateClassTemplate("announce_entry");
_exports_announce_entry_class_0->SetCallHandler(_wrap_new_announce_entry);
_exports_announce_entry_class_0->Inherit(_exports_announce_entry_class);
_exports_announce_entry_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_announce_entry_obj = _exports_announce_entry_class_0->GetFunction();
/* Class: torrent_status (_exports_torrent_status) */
v8::Handle<v8::FunctionTemplate> _exports_torrent_status_class_0 = SWIGV8_CreateClassTemplate("torrent_status");
_exports_torrent_status_class_0->SetCallHandler(_wrap_new_torrent_status);
_exports_torrent_status_class_0->Inherit(_exports_torrent_status_class);
_exports_torrent_status_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_torrent_status_obj = _exports_torrent_status_class_0->GetFunction();
/* Class: alert_notify_callback (_exports_alert_notify_callback) */
v8::Handle<v8::FunctionTemplate> _exports_alert_notify_callback_class_0 = SWIGV8_CreateClassTemplate("alert_notify_callback");
_exports_alert_notify_callback_class_0->SetCallHandler(_wrap_new_alert_notify_callback);
_exports_alert_notify_callback_class_0->Inherit(_exports_alert_notify_callback_class);
_exports_alert_notify_callback_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_alert_notify_callback_obj = _exports_alert_notify_callback_class_0->GetFunction();
/* Class: add_files_listener (_exports_add_files_listener) */
v8::Handle<v8::FunctionTemplate> _exports_add_files_listener_class_0 = SWIGV8_CreateClassTemplate("add_files_listener");
_exports_add_files_listener_class_0->SetCallHandler(_wrap_new_add_files_listener);
_exports_add_files_listener_class_0->Inherit(_exports_add_files_listener_class);
_exports_add_files_listener_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_add_files_listener_obj = _exports_add_files_listener_class_0->GetFunction();
/* Class: set_piece_hashes_listener (_exports_set_piece_hashes_listener) */
v8::Handle<v8::FunctionTemplate> _exports_set_piece_hashes_listener_class_0 = SWIGV8_CreateClassTemplate("set_piece_hashes_listener");
_exports_set_piece_hashes_listener_class_0->SetCallHandler(_wrap_new_set_piece_hashes_listener);
_exports_set_piece_hashes_listener_class_0->Inherit(_exports_set_piece_hashes_listener_class);
_exports_set_piece_hashes_listener_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_set_piece_hashes_listener_obj = _exports_set_piece_hashes_listener_class_0->GetFunction();
/* Class: swig_plugin (_exports_swig_plugin) */
v8::Handle<v8::FunctionTemplate> _exports_swig_plugin_class_0 = SWIGV8_CreateClassTemplate("swig_plugin");
_exports_swig_plugin_class_0->SetCallHandler(_wrap_new_swig_plugin);
_exports_swig_plugin_class_0->Inherit(_exports_swig_plugin_class);
_exports_swig_plugin_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_swig_plugin_obj = _exports_swig_plugin_class_0->GetFunction();
/* Class: posix_stat_t (_exports_posix_stat_t) */
v8::Handle<v8::FunctionTemplate> _exports_posix_stat_t_class_0 = SWIGV8_CreateClassTemplate("posix_stat_t");
_exports_posix_stat_t_class_0->SetCallHandler(_wrap_new_posix_stat_t);
_exports_posix_stat_t_class_0->Inherit(_exports_posix_stat_t_class);
_exports_posix_stat_t_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_posix_stat_t_obj = _exports_posix_stat_t_class_0->GetFunction();
/* Class: posix_wrapper (_exports_posix_wrapper) */
v8::Handle<v8::FunctionTemplate> _exports_posix_wrapper_class_0 = SWIGV8_CreateClassTemplate("posix_wrapper");
_exports_posix_wrapper_class_0->SetCallHandler(_wrap_new_posix_wrapper);
_exports_posix_wrapper_class_0->Inherit(_exports_posix_wrapper_class);
_exports_posix_wrapper_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_posix_wrapper_obj = _exports_posix_wrapper_class_0->GetFunction();


  /* add static class functions and variables */
  SWIGV8_AddStaticFunction(_exports_sha1_hash_obj, "size", _wrap_sha1_hash_size);
SWIGV8_AddStaticFunction(_exports_sha1_hash_obj, "max", _wrap_sha1_hash_max);
SWIGV8_AddStaticFunction(_exports_sha1_hash_obj, "min", _wrap_sha1_hash_min);
SWIGV8_AddStaticFunction(_exports_sha1_hash_obj, "compare", _wrap_sha1_hash_compare);
SWIGV8_AddStaticFunction(_exports_address_obj, "from_string", _wrap_address_from_string);
SWIGV8_AddStaticFunction(_exports_address_obj, "compare", _wrap_address_compare);
SWIGV8_AddStaticFunction(_exports_error_condition_obj, "unspecified_bool_true", _wrap_error_condition_unspecified_bool_true);
SWIGV8_AddStaticFunction(exports_obj, "op_lt", _wrap_error_code__wrap_op_lt);
SWIGV8_AddStaticFunction(exports_obj, "op_eq", _wrap_system__wrap_op_eq);
SWIGV8_AddStaticFunction(exports_obj, "op_ne", _wrap_system__wrap_op_ne);
SWIGV8_AddStaticFunction(exports_obj, "make_error_code", _wrap_make_error_code);
SWIGV8_AddStaticFunction(exports_obj, "make_error_condition", _wrap_make_error_condition);
SWIGV8_AddStaticFunction(exports_obj, "version", _wrap_version);
SWIGV8_AddStaticFunction(exports_obj, "libtorrent_category", _wrap_libtorrent_category);
SWIGV8_AddStaticFunction(exports_obj, "http_category", _wrap_http_category);
SWIGV8_AddStaticVariable(_exports_entry_obj, "int_t", _wrap_libtorrent_entry_int_t, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_entry_obj, "string_t", _wrap_libtorrent_entry_string_t, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_entry_obj, "list_t", _wrap_libtorrent_entry_list_t, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_entry_obj, "dictionary_t", _wrap_libtorrent_entry_dictionary_t, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_entry_obj, "undefined_t", _wrap_libtorrent_entry_undefined_t, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_entry_obj, "preformatted_t", _wrap_libtorrent_entry_preformatted_t, JS_veto_set_variable);
SWIGV8_AddStaticFunction(_exports_entry_obj, "from_string_bytes", _wrap_entry_from_string_bytes);
SWIGV8_AddStaticFunction(_exports_entry_obj, "from_preformatted_bytes", _wrap_entry_from_preformatted_bytes);
SWIGV8_AddStaticFunction(_exports_entry_obj, "bdecode", _wrap_entry_bdecode);
SWIGV8_AddStaticVariable(_exports_file_storage_obj, "pad_file", _wrap_libtorrent_file_storage_pad_file, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_file_storage_obj, "attribute_hidden", _wrap_libtorrent_file_storage_attribute_hidden, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_file_storage_obj, "attribute_executable", _wrap_libtorrent_file_storage_attribute_executable, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_file_storage_obj, "attribute_symlink", _wrap_libtorrent_file_storage_attribute_symlink, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_file_storage_obj, "flag_pad_file", _wrap_libtorrent_file_storage_flag_pad_file, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_file_storage_obj, "flag_hidden", _wrap_libtorrent_file_storage_flag_hidden, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_file_storage_obj, "flag_executable", _wrap_libtorrent_file_storage_flag_executable, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_file_storage_obj, "flag_symlink", _wrap_libtorrent_file_storage_flag_symlink, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_web_seed_entry_obj, "url_seed", _wrap_libtorrent_web_seed_entry_url_seed, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_web_seed_entry_obj, "http_seed", _wrap_libtorrent_web_seed_entry_http_seed, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_block_info_obj, "none", _wrap_libtorrent_block_info_none, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_block_info_obj, "requested", _wrap_libtorrent_block_info_requested, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_block_info_obj, "writing", _wrap_libtorrent_block_info_writing, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_block_info_obj, "finished", _wrap_libtorrent_block_info_finished, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_partial_piece_info_obj, "none", _wrap_libtorrent_partial_piece_info_none, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_partial_piece_info_obj, "slow", _wrap_libtorrent_partial_piece_info_slow, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_partial_piece_info_obj, "medium", _wrap_libtorrent_partial_piece_info_medium, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_partial_piece_info_obj, "fast", _wrap_libtorrent_partial_piece_info_fast, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_handle_obj, "overwrite_existing", _wrap_libtorrent_torrent_handle_overwrite_existing, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_handle_obj, "query_distributed_copies", _wrap_libtorrent_torrent_handle_query_distributed_copies, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_handle_obj, "query_accurate_download_counters", _wrap_libtorrent_torrent_handle_query_accurate_download_counters, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_handle_obj, "query_last_seen_complete", _wrap_libtorrent_torrent_handle_query_last_seen_complete, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_handle_obj, "query_pieces", _wrap_libtorrent_torrent_handle_query_pieces, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_handle_obj, "query_verified_pieces", _wrap_libtorrent_torrent_handle_query_verified_pieces, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_handle_obj, "query_torrent_file", _wrap_libtorrent_torrent_handle_query_torrent_file, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_handle_obj, "query_name", _wrap_libtorrent_torrent_handle_query_name, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_handle_obj, "query_save_path", _wrap_libtorrent_torrent_handle_query_save_path, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_handle_obj, "alert_when_available", _wrap_libtorrent_torrent_handle_alert_when_available, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_handle_obj, "piece_granularity", _wrap_libtorrent_torrent_handle_piece_granularity, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_handle_obj, "graceful_pause", _wrap_libtorrent_torrent_handle_graceful_pause, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_handle_obj, "flush_disk_cache", _wrap_libtorrent_torrent_handle_flush_disk_cache, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_handle_obj, "save_info_dict", _wrap_libtorrent_torrent_handle_save_info_dict, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_handle_obj, "only_if_modified", _wrap_libtorrent_torrent_handle_only_if_modified, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_add_torrent_params_obj, "flag_seed_mode", _wrap_libtorrent_add_torrent_params_flag_seed_mode, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_add_torrent_params_obj, "flag_upload_mode", _wrap_libtorrent_add_torrent_params_flag_upload_mode, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_add_torrent_params_obj, "flag_share_mode", _wrap_libtorrent_add_torrent_params_flag_share_mode, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_add_torrent_params_obj, "flag_apply_ip_filter", _wrap_libtorrent_add_torrent_params_flag_apply_ip_filter, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_add_torrent_params_obj, "flag_paused", _wrap_libtorrent_add_torrent_params_flag_paused, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_add_torrent_params_obj, "flag_auto_managed", _wrap_libtorrent_add_torrent_params_flag_auto_managed, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_add_torrent_params_obj, "flag_duplicate_is_error", _wrap_libtorrent_add_torrent_params_flag_duplicate_is_error, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_add_torrent_params_obj, "flag_update_subscribe", _wrap_libtorrent_add_torrent_params_flag_update_subscribe, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_add_torrent_params_obj, "flag_super_seeding", _wrap_libtorrent_add_torrent_params_flag_super_seeding, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_add_torrent_params_obj, "flag_sequential_download", _wrap_libtorrent_add_torrent_params_flag_sequential_download, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_add_torrent_params_obj, "flag_pinned", _wrap_libtorrent_add_torrent_params_flag_pinned, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_add_torrent_params_obj, "flag_stop_when_ready", _wrap_libtorrent_add_torrent_params_flag_stop_when_ready, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_add_torrent_params_obj, "flag_override_trackers", _wrap_libtorrent_add_torrent_params_flag_override_trackers, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_add_torrent_params_obj, "flag_override_web_seeds", _wrap_libtorrent_add_torrent_params_flag_override_web_seeds, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_add_torrent_params_obj, "flag_need_save_resume", _wrap_libtorrent_add_torrent_params_flag_need_save_resume, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_add_torrent_params_obj, "default_flags", _wrap_libtorrent_add_torrent_params_default_flags, JS_veto_set_variable);
SWIGV8_AddStaticFunction(_exports_add_torrent_params_obj, "create_instance", _wrap_add_torrent_params_create_instance);
SWIGV8_AddStaticFunction(_exports_add_torrent_params_obj, "create_instance_disabled_storage", _wrap_add_torrent_params_create_instance_disabled_storage);
SWIGV8_AddStaticFunction(_exports_add_torrent_params_obj, "create_instance_zero_storage", _wrap_add_torrent_params_create_instance_zero_storage);
SWIGV8_AddStaticFunction(_exports_add_torrent_params_obj, "read_resume_data", _wrap_add_torrent_params__wrap_add_torrent_params_read_resume_data);
SWIGV8_AddStaticVariable(_exports_stats_metric_obj, "type_counter", _wrap_libtorrent_stats_metric_type_counter, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_stats_metric_obj, "type_gauge", _wrap_libtorrent_stats_metric_type_gauge, JS_veto_set_variable);
SWIGV8_AddStaticFunction(exports_obj, "session_stats_metrics", _wrap_session_stats_metrics);
SWIGV8_AddStaticFunction(exports_obj, "find_metric_idx", _wrap_find_metric_idx);
SWIGV8_AddStaticVariable(_exports_alert_obj, "error_notification", _wrap_libtorrent_alert_error_notification, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_alert_obj, "peer_notification", _wrap_libtorrent_alert_peer_notification, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_alert_obj, "port_mapping_notification", _wrap_libtorrent_alert_port_mapping_notification, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_alert_obj, "storage_notification", _wrap_libtorrent_alert_storage_notification, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_alert_obj, "tracker_notification", _wrap_libtorrent_alert_tracker_notification, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_alert_obj, "debug_notification", _wrap_libtorrent_alert_debug_notification, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_alert_obj, "status_notification", _wrap_libtorrent_alert_status_notification, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_alert_obj, "progress_notification", _wrap_libtorrent_alert_progress_notification, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_alert_obj, "ip_block_notification", _wrap_libtorrent_alert_ip_block_notification, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_alert_obj, "performance_warning", _wrap_libtorrent_alert_performance_warning, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_alert_obj, "dht_notification", _wrap_libtorrent_alert_dht_notification, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_alert_obj, "stats_notification", _wrap_libtorrent_alert_stats_notification, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_alert_obj, "session_log_notification", _wrap_libtorrent_alert_session_log_notification, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_alert_obj, "torrent_log_notification", _wrap_libtorrent_alert_torrent_log_notification, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_alert_obj, "peer_log_notification", _wrap_libtorrent_alert_peer_log_notification, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_alert_obj, "incoming_request_notification", _wrap_libtorrent_alert_incoming_request_notification, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_alert_obj, "dht_log_notification", _wrap_libtorrent_alert_dht_log_notification, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_alert_obj, "dht_operation_notification", _wrap_libtorrent_alert_dht_operation_notification, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_alert_obj, "port_mapping_log_notification", _wrap_libtorrent_alert_port_mapping_log_notification, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_alert_obj, "picker_log_notification", _wrap_libtorrent_alert_picker_log_notification, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_alert_obj, "all_categories", _wrap_libtorrent_alert_all_categories, JS_veto_set_variable);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_torrent_alert", _wrap_alert_cast_to_torrent_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_peer_alert", _wrap_alert_cast_to_peer_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_tracker_alert", _wrap_alert_cast_to_tracker_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_torrent_added_alert", _wrap_alert_cast_to_torrent_added_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_torrent_removed_alert", _wrap_alert_cast_to_torrent_removed_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_read_piece_alert", _wrap_alert_cast_to_read_piece_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_file_completed_alert", _wrap_alert_cast_to_file_completed_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_file_renamed_alert", _wrap_alert_cast_to_file_renamed_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_file_rename_failed_alert", _wrap_alert_cast_to_file_rename_failed_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_performance_alert", _wrap_alert_cast_to_performance_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_state_changed_alert", _wrap_alert_cast_to_state_changed_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_tracker_error_alert", _wrap_alert_cast_to_tracker_error_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_tracker_warning_alert", _wrap_alert_cast_to_tracker_warning_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_scrape_reply_alert", _wrap_alert_cast_to_scrape_reply_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_scrape_failed_alert", _wrap_alert_cast_to_scrape_failed_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_tracker_reply_alert", _wrap_alert_cast_to_tracker_reply_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_dht_reply_alert", _wrap_alert_cast_to_dht_reply_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_tracker_announce_alert", _wrap_alert_cast_to_tracker_announce_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_hash_failed_alert", _wrap_alert_cast_to_hash_failed_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_peer_ban_alert", _wrap_alert_cast_to_peer_ban_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_peer_unsnubbed_alert", _wrap_alert_cast_to_peer_unsnubbed_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_peer_snubbed_alert", _wrap_alert_cast_to_peer_snubbed_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_peer_error_alert", _wrap_alert_cast_to_peer_error_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_peer_connect_alert", _wrap_alert_cast_to_peer_connect_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_peer_disconnected_alert", _wrap_alert_cast_to_peer_disconnected_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_invalid_request_alert", _wrap_alert_cast_to_invalid_request_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_torrent_finished_alert", _wrap_alert_cast_to_torrent_finished_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_piece_finished_alert", _wrap_alert_cast_to_piece_finished_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_request_dropped_alert", _wrap_alert_cast_to_request_dropped_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_block_timeout_alert", _wrap_alert_cast_to_block_timeout_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_block_finished_alert", _wrap_alert_cast_to_block_finished_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_block_downloading_alert", _wrap_alert_cast_to_block_downloading_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_unwanted_block_alert", _wrap_alert_cast_to_unwanted_block_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_storage_moved_alert", _wrap_alert_cast_to_storage_moved_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_storage_moved_failed_alert", _wrap_alert_cast_to_storage_moved_failed_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_torrent_deleted_alert", _wrap_alert_cast_to_torrent_deleted_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_torrent_delete_failed_alert", _wrap_alert_cast_to_torrent_delete_failed_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_save_resume_data_alert", _wrap_alert_cast_to_save_resume_data_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_save_resume_data_failed_alert", _wrap_alert_cast_to_save_resume_data_failed_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_torrent_paused_alert", _wrap_alert_cast_to_torrent_paused_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_torrent_resumed_alert", _wrap_alert_cast_to_torrent_resumed_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_torrent_checked_alert", _wrap_alert_cast_to_torrent_checked_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_url_seed_alert", _wrap_alert_cast_to_url_seed_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_file_error_alert", _wrap_alert_cast_to_file_error_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_metadata_failed_alert", _wrap_alert_cast_to_metadata_failed_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_metadata_received_alert", _wrap_alert_cast_to_metadata_received_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_udp_error_alert", _wrap_alert_cast_to_udp_error_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_external_ip_alert", _wrap_alert_cast_to_external_ip_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_listen_failed_alert", _wrap_alert_cast_to_listen_failed_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_listen_succeeded_alert", _wrap_alert_cast_to_listen_succeeded_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_portmap_error_alert", _wrap_alert_cast_to_portmap_error_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_portmap_alert", _wrap_alert_cast_to_portmap_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_portmap_log_alert", _wrap_alert_cast_to_portmap_log_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_fastresume_rejected_alert", _wrap_alert_cast_to_fastresume_rejected_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_peer_blocked_alert", _wrap_alert_cast_to_peer_blocked_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_dht_announce_alert", _wrap_alert_cast_to_dht_announce_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_dht_get_peers_alert", _wrap_alert_cast_to_dht_get_peers_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_stats_alert", _wrap_alert_cast_to_stats_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_cache_flushed_alert", _wrap_alert_cast_to_cache_flushed_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_anonymous_mode_alert", _wrap_alert_cast_to_anonymous_mode_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_lsd_peer_alert", _wrap_alert_cast_to_lsd_peer_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_trackerid_alert", _wrap_alert_cast_to_trackerid_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_dht_bootstrap_alert", _wrap_alert_cast_to_dht_bootstrap_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_torrent_error_alert", _wrap_alert_cast_to_torrent_error_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_torrent_need_cert_alert", _wrap_alert_cast_to_torrent_need_cert_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_incoming_connection_alert", _wrap_alert_cast_to_incoming_connection_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_add_torrent_alert", _wrap_alert_cast_to_add_torrent_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_state_update_alert", _wrap_alert_cast_to_state_update_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_mmap_cache_alert", _wrap_alert_cast_to_mmap_cache_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_session_stats_alert", _wrap_alert_cast_to_session_stats_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_dht_error_alert", _wrap_alert_cast_to_dht_error_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_dht_immutable_item_alert", _wrap_alert_cast_to_dht_immutable_item_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_dht_mutable_item_alert", _wrap_alert_cast_to_dht_mutable_item_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_dht_put_alert", _wrap_alert_cast_to_dht_put_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_i2p_alert", _wrap_alert_cast_to_i2p_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_dht_outgoing_get_peers_alert", _wrap_alert_cast_to_dht_outgoing_get_peers_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_log_alert", _wrap_alert_cast_to_log_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_torrent_log_alert", _wrap_alert_cast_to_torrent_log_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_peer_log_alert", _wrap_alert_cast_to_peer_log_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_lsd_error_alert", _wrap_alert_cast_to_lsd_error_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_dht_stats_alert", _wrap_alert_cast_to_dht_stats_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_incoming_request_alert", _wrap_alert_cast_to_incoming_request_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_dht_log_alert", _wrap_alert_cast_to_dht_log_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_dht_pkt_alert", _wrap_alert_cast_to_dht_pkt_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_dht_get_peers_reply_alert", _wrap_alert_cast_to_dht_get_peers_reply_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_dht_direct_response_alert", _wrap_alert_cast_to_dht_direct_response_alert);
SWIGV8_AddStaticFunction(_exports_alert_obj, "cast_to_picker_log_alert", _wrap_alert_cast_to_picker_log_alert);
SWIGV8_AddStaticFunction(exports_obj, "operation_name", _wrap_operation_name);
SWIGV8_AddStaticVariable(_exports_torrent_alert_obj, "alert_type", _wrap_libtorrent_torrent_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_alert_obj, "alert_type", _wrap_libtorrent_torrent_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_alert_obj, "alert_type", _wrap_libtorrent_peer_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_alert_obj, "alert_type", _wrap_libtorrent_peer_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_alert_obj, "static_category", _wrap_libtorrent_peer_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_alert_obj, "static_category", _wrap_libtorrent_peer_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_tracker_alert_obj, "alert_type", _wrap_libtorrent_tracker_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_tracker_alert_obj, "alert_type", _wrap_libtorrent_tracker_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_tracker_alert_obj, "static_category", _wrap_libtorrent_tracker_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_tracker_alert_obj, "static_category", _wrap_libtorrent_tracker_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_added_alert_obj, "priority", _wrap_libtorrent_torrent_added_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_added_alert_obj, "priority", _wrap_libtorrent_torrent_added_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_added_alert_obj, "alert_type", _wrap_libtorrent_torrent_added_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_added_alert_obj, "alert_type", _wrap_libtorrent_torrent_added_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_added_alert_obj, "static_category", _wrap_libtorrent_torrent_added_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_added_alert_obj, "static_category", _wrap_libtorrent_torrent_added_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_removed_alert_obj, "priority", _wrap_libtorrent_torrent_removed_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_removed_alert_obj, "priority", _wrap_libtorrent_torrent_removed_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_removed_alert_obj, "alert_type", _wrap_libtorrent_torrent_removed_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_removed_alert_obj, "alert_type", _wrap_libtorrent_torrent_removed_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_removed_alert_obj, "static_category", _wrap_libtorrent_torrent_removed_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_removed_alert_obj, "static_category", _wrap_libtorrent_torrent_removed_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_read_piece_alert_obj, "priority", _wrap_libtorrent_read_piece_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_read_piece_alert_obj, "priority", _wrap_libtorrent_read_piece_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_read_piece_alert_obj, "alert_type", _wrap_libtorrent_read_piece_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_read_piece_alert_obj, "alert_type", _wrap_libtorrent_read_piece_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_read_piece_alert_obj, "static_category", _wrap_libtorrent_read_piece_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_read_piece_alert_obj, "static_category", _wrap_libtorrent_read_piece_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_file_completed_alert_obj, "priority", _wrap_libtorrent_file_completed_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_file_completed_alert_obj, "priority", _wrap_libtorrent_file_completed_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_file_completed_alert_obj, "alert_type", _wrap_libtorrent_file_completed_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_file_completed_alert_obj, "alert_type", _wrap_libtorrent_file_completed_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_file_completed_alert_obj, "static_category", _wrap_libtorrent_file_completed_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_file_completed_alert_obj, "static_category", _wrap_libtorrent_file_completed_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_file_renamed_alert_obj, "priority", _wrap_libtorrent_file_renamed_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_file_renamed_alert_obj, "priority", _wrap_libtorrent_file_renamed_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_file_renamed_alert_obj, "alert_type", _wrap_libtorrent_file_renamed_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_file_renamed_alert_obj, "alert_type", _wrap_libtorrent_file_renamed_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_file_renamed_alert_obj, "static_category", _wrap_libtorrent_file_renamed_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_file_renamed_alert_obj, "static_category", _wrap_libtorrent_file_renamed_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_file_rename_failed_alert_obj, "priority", _wrap_libtorrent_file_rename_failed_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_file_rename_failed_alert_obj, "priority", _wrap_libtorrent_file_rename_failed_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_file_rename_failed_alert_obj, "alert_type", _wrap_libtorrent_file_rename_failed_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_file_rename_failed_alert_obj, "alert_type", _wrap_libtorrent_file_rename_failed_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_file_rename_failed_alert_obj, "static_category", _wrap_libtorrent_file_rename_failed_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_file_rename_failed_alert_obj, "static_category", _wrap_libtorrent_file_rename_failed_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_performance_alert_obj, "outstanding_disk_buffer_limit_reached", _wrap_libtorrent_performance_alert_outstanding_disk_buffer_limit_reached, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_performance_alert_obj, "outstanding_request_limit_reached", _wrap_libtorrent_performance_alert_outstanding_request_limit_reached, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_performance_alert_obj, "upload_limit_too_low", _wrap_libtorrent_performance_alert_upload_limit_too_low, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_performance_alert_obj, "download_limit_too_low", _wrap_libtorrent_performance_alert_download_limit_too_low, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_performance_alert_obj, "send_buffer_watermark_too_low", _wrap_libtorrent_performance_alert_send_buffer_watermark_too_low, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_performance_alert_obj, "too_many_optimistic_unchoke_slots", _wrap_libtorrent_performance_alert_too_many_optimistic_unchoke_slots, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_performance_alert_obj, "too_high_disk_queue_limit", _wrap_libtorrent_performance_alert_too_high_disk_queue_limit, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_performance_alert_obj, "aio_limit_reached", _wrap_libtorrent_performance_alert_aio_limit_reached, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_performance_alert_obj, "bittyrant_with_no_uplimit", _wrap_libtorrent_performance_alert_bittyrant_with_no_uplimit, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_performance_alert_obj, "too_few_outgoing_ports", _wrap_libtorrent_performance_alert_too_few_outgoing_ports, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_performance_alert_obj, "too_few_file_descriptors", _wrap_libtorrent_performance_alert_too_few_file_descriptors, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_performance_alert_obj, "num_warnings", _wrap_libtorrent_performance_alert_num_warnings, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_performance_alert_obj, "priority", _wrap_libtorrent_performance_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_performance_alert_obj, "priority", _wrap_libtorrent_performance_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_performance_alert_obj, "alert_type", _wrap_libtorrent_performance_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_performance_alert_obj, "alert_type", _wrap_libtorrent_performance_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_performance_alert_obj, "static_category", _wrap_libtorrent_performance_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_performance_alert_obj, "static_category", _wrap_libtorrent_performance_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_state_changed_alert_obj, "priority", _wrap_libtorrent_state_changed_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_state_changed_alert_obj, "priority", _wrap_libtorrent_state_changed_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_state_changed_alert_obj, "alert_type", _wrap_libtorrent_state_changed_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_state_changed_alert_obj, "alert_type", _wrap_libtorrent_state_changed_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_state_changed_alert_obj, "static_category", _wrap_libtorrent_state_changed_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_state_changed_alert_obj, "static_category", _wrap_libtorrent_state_changed_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_tracker_error_alert_obj, "priority", _wrap_libtorrent_tracker_error_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_tracker_error_alert_obj, "priority", _wrap_libtorrent_tracker_error_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_tracker_error_alert_obj, "alert_type", _wrap_libtorrent_tracker_error_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_tracker_error_alert_obj, "alert_type", _wrap_libtorrent_tracker_error_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_tracker_error_alert_obj, "static_category", _wrap_libtorrent_tracker_error_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_tracker_error_alert_obj, "static_category", _wrap_libtorrent_tracker_error_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_tracker_warning_alert_obj, "priority", _wrap_libtorrent_tracker_warning_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_tracker_warning_alert_obj, "priority", _wrap_libtorrent_tracker_warning_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_tracker_warning_alert_obj, "alert_type", _wrap_libtorrent_tracker_warning_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_tracker_warning_alert_obj, "alert_type", _wrap_libtorrent_tracker_warning_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_tracker_warning_alert_obj, "static_category", _wrap_libtorrent_tracker_warning_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_tracker_warning_alert_obj, "static_category", _wrap_libtorrent_tracker_warning_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_scrape_reply_alert_obj, "priority", _wrap_libtorrent_scrape_reply_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_scrape_reply_alert_obj, "priority", _wrap_libtorrent_scrape_reply_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_scrape_reply_alert_obj, "alert_type", _wrap_libtorrent_scrape_reply_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_scrape_reply_alert_obj, "alert_type", _wrap_libtorrent_scrape_reply_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_scrape_failed_alert_obj, "priority", _wrap_libtorrent_scrape_failed_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_scrape_failed_alert_obj, "priority", _wrap_libtorrent_scrape_failed_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_scrape_failed_alert_obj, "alert_type", _wrap_libtorrent_scrape_failed_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_scrape_failed_alert_obj, "alert_type", _wrap_libtorrent_scrape_failed_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_scrape_failed_alert_obj, "static_category", _wrap_libtorrent_scrape_failed_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_scrape_failed_alert_obj, "static_category", _wrap_libtorrent_scrape_failed_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_tracker_reply_alert_obj, "priority", _wrap_libtorrent_tracker_reply_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_tracker_reply_alert_obj, "priority", _wrap_libtorrent_tracker_reply_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_tracker_reply_alert_obj, "alert_type", _wrap_libtorrent_tracker_reply_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_tracker_reply_alert_obj, "alert_type", _wrap_libtorrent_tracker_reply_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_reply_alert_obj, "priority", _wrap_libtorrent_dht_reply_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_reply_alert_obj, "priority", _wrap_libtorrent_dht_reply_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_reply_alert_obj, "alert_type", _wrap_libtorrent_dht_reply_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_reply_alert_obj, "alert_type", _wrap_libtorrent_dht_reply_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_tracker_announce_alert_obj, "priority", _wrap_libtorrent_tracker_announce_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_tracker_announce_alert_obj, "priority", _wrap_libtorrent_tracker_announce_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_tracker_announce_alert_obj, "alert_type", _wrap_libtorrent_tracker_announce_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_tracker_announce_alert_obj, "alert_type", _wrap_libtorrent_tracker_announce_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_hash_failed_alert_obj, "priority", _wrap_libtorrent_hash_failed_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_hash_failed_alert_obj, "priority", _wrap_libtorrent_hash_failed_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_hash_failed_alert_obj, "alert_type", _wrap_libtorrent_hash_failed_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_hash_failed_alert_obj, "alert_type", _wrap_libtorrent_hash_failed_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_hash_failed_alert_obj, "static_category", _wrap_libtorrent_hash_failed_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_hash_failed_alert_obj, "static_category", _wrap_libtorrent_hash_failed_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_ban_alert_obj, "priority", _wrap_libtorrent_peer_ban_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_ban_alert_obj, "priority", _wrap_libtorrent_peer_ban_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_ban_alert_obj, "alert_type", _wrap_libtorrent_peer_ban_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_ban_alert_obj, "alert_type", _wrap_libtorrent_peer_ban_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_unsnubbed_alert_obj, "priority", _wrap_libtorrent_peer_unsnubbed_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_unsnubbed_alert_obj, "priority", _wrap_libtorrent_peer_unsnubbed_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_unsnubbed_alert_obj, "alert_type", _wrap_libtorrent_peer_unsnubbed_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_unsnubbed_alert_obj, "alert_type", _wrap_libtorrent_peer_unsnubbed_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_snubbed_alert_obj, "priority", _wrap_libtorrent_peer_snubbed_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_snubbed_alert_obj, "priority", _wrap_libtorrent_peer_snubbed_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_snubbed_alert_obj, "alert_type", _wrap_libtorrent_peer_snubbed_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_snubbed_alert_obj, "alert_type", _wrap_libtorrent_peer_snubbed_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_error_alert_obj, "priority", _wrap_libtorrent_peer_error_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_error_alert_obj, "priority", _wrap_libtorrent_peer_error_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_error_alert_obj, "alert_type", _wrap_libtorrent_peer_error_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_error_alert_obj, "alert_type", _wrap_libtorrent_peer_error_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_error_alert_obj, "static_category", _wrap_libtorrent_peer_error_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_error_alert_obj, "static_category", _wrap_libtorrent_peer_error_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_connect_alert_obj, "priority", _wrap_libtorrent_peer_connect_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_connect_alert_obj, "priority", _wrap_libtorrent_peer_connect_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_connect_alert_obj, "alert_type", _wrap_libtorrent_peer_connect_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_connect_alert_obj, "alert_type", _wrap_libtorrent_peer_connect_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_connect_alert_obj, "static_category", _wrap_libtorrent_peer_connect_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_connect_alert_obj, "static_category", _wrap_libtorrent_peer_connect_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_disconnected_alert_obj, "priority", _wrap_libtorrent_peer_disconnected_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_disconnected_alert_obj, "priority", _wrap_libtorrent_peer_disconnected_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_disconnected_alert_obj, "alert_type", _wrap_libtorrent_peer_disconnected_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_disconnected_alert_obj, "alert_type", _wrap_libtorrent_peer_disconnected_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_disconnected_alert_obj, "static_category", _wrap_libtorrent_peer_disconnected_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_disconnected_alert_obj, "static_category", _wrap_libtorrent_peer_disconnected_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_invalid_request_alert_obj, "priority", _wrap_libtorrent_invalid_request_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_invalid_request_alert_obj, "priority", _wrap_libtorrent_invalid_request_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_invalid_request_alert_obj, "alert_type", _wrap_libtorrent_invalid_request_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_invalid_request_alert_obj, "alert_type", _wrap_libtorrent_invalid_request_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_finished_alert_obj, "priority", _wrap_libtorrent_torrent_finished_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_finished_alert_obj, "priority", _wrap_libtorrent_torrent_finished_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_finished_alert_obj, "alert_type", _wrap_libtorrent_torrent_finished_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_finished_alert_obj, "alert_type", _wrap_libtorrent_torrent_finished_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_finished_alert_obj, "static_category", _wrap_libtorrent_torrent_finished_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_finished_alert_obj, "static_category", _wrap_libtorrent_torrent_finished_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_piece_finished_alert_obj, "priority", _wrap_libtorrent_piece_finished_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_piece_finished_alert_obj, "priority", _wrap_libtorrent_piece_finished_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_piece_finished_alert_obj, "alert_type", _wrap_libtorrent_piece_finished_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_piece_finished_alert_obj, "alert_type", _wrap_libtorrent_piece_finished_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_piece_finished_alert_obj, "static_category", _wrap_libtorrent_piece_finished_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_piece_finished_alert_obj, "static_category", _wrap_libtorrent_piece_finished_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_request_dropped_alert_obj, "priority", _wrap_libtorrent_request_dropped_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_request_dropped_alert_obj, "priority", _wrap_libtorrent_request_dropped_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_request_dropped_alert_obj, "alert_type", _wrap_libtorrent_request_dropped_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_request_dropped_alert_obj, "alert_type", _wrap_libtorrent_request_dropped_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_request_dropped_alert_obj, "static_category", _wrap_libtorrent_request_dropped_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_request_dropped_alert_obj, "static_category", _wrap_libtorrent_request_dropped_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_block_timeout_alert_obj, "priority", _wrap_libtorrent_block_timeout_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_block_timeout_alert_obj, "priority", _wrap_libtorrent_block_timeout_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_block_timeout_alert_obj, "alert_type", _wrap_libtorrent_block_timeout_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_block_timeout_alert_obj, "alert_type", _wrap_libtorrent_block_timeout_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_block_timeout_alert_obj, "static_category", _wrap_libtorrent_block_timeout_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_block_timeout_alert_obj, "static_category", _wrap_libtorrent_block_timeout_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_block_finished_alert_obj, "priority", _wrap_libtorrent_block_finished_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_block_finished_alert_obj, "priority", _wrap_libtorrent_block_finished_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_block_finished_alert_obj, "alert_type", _wrap_libtorrent_block_finished_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_block_finished_alert_obj, "alert_type", _wrap_libtorrent_block_finished_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_block_finished_alert_obj, "static_category", _wrap_libtorrent_block_finished_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_block_finished_alert_obj, "static_category", _wrap_libtorrent_block_finished_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_block_downloading_alert_obj, "priority", _wrap_libtorrent_block_downloading_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_block_downloading_alert_obj, "priority", _wrap_libtorrent_block_downloading_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_block_downloading_alert_obj, "alert_type", _wrap_libtorrent_block_downloading_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_block_downloading_alert_obj, "alert_type", _wrap_libtorrent_block_downloading_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_block_downloading_alert_obj, "static_category", _wrap_libtorrent_block_downloading_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_block_downloading_alert_obj, "static_category", _wrap_libtorrent_block_downloading_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_unwanted_block_alert_obj, "priority", _wrap_libtorrent_unwanted_block_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_unwanted_block_alert_obj, "priority", _wrap_libtorrent_unwanted_block_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_unwanted_block_alert_obj, "alert_type", _wrap_libtorrent_unwanted_block_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_unwanted_block_alert_obj, "alert_type", _wrap_libtorrent_unwanted_block_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_storage_moved_alert_obj, "priority", _wrap_libtorrent_storage_moved_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_storage_moved_alert_obj, "priority", _wrap_libtorrent_storage_moved_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_storage_moved_alert_obj, "alert_type", _wrap_libtorrent_storage_moved_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_storage_moved_alert_obj, "alert_type", _wrap_libtorrent_storage_moved_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_storage_moved_alert_obj, "static_category", _wrap_libtorrent_storage_moved_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_storage_moved_alert_obj, "static_category", _wrap_libtorrent_storage_moved_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_storage_moved_failed_alert_obj, "priority", _wrap_libtorrent_storage_moved_failed_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_storage_moved_failed_alert_obj, "priority", _wrap_libtorrent_storage_moved_failed_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_storage_moved_failed_alert_obj, "alert_type", _wrap_libtorrent_storage_moved_failed_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_storage_moved_failed_alert_obj, "alert_type", _wrap_libtorrent_storage_moved_failed_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_storage_moved_failed_alert_obj, "static_category", _wrap_libtorrent_storage_moved_failed_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_storage_moved_failed_alert_obj, "static_category", _wrap_libtorrent_storage_moved_failed_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_deleted_alert_obj, "priority", _wrap_libtorrent_torrent_deleted_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_deleted_alert_obj, "priority", _wrap_libtorrent_torrent_deleted_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_deleted_alert_obj, "alert_type", _wrap_libtorrent_torrent_deleted_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_deleted_alert_obj, "alert_type", _wrap_libtorrent_torrent_deleted_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_deleted_alert_obj, "static_category", _wrap_libtorrent_torrent_deleted_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_deleted_alert_obj, "static_category", _wrap_libtorrent_torrent_deleted_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_delete_failed_alert_obj, "priority", _wrap_libtorrent_torrent_delete_failed_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_delete_failed_alert_obj, "priority", _wrap_libtorrent_torrent_delete_failed_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_delete_failed_alert_obj, "alert_type", _wrap_libtorrent_torrent_delete_failed_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_delete_failed_alert_obj, "alert_type", _wrap_libtorrent_torrent_delete_failed_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_delete_failed_alert_obj, "static_category", _wrap_libtorrent_torrent_delete_failed_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_delete_failed_alert_obj, "static_category", _wrap_libtorrent_torrent_delete_failed_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_save_resume_data_alert_obj, "priority", _wrap_libtorrent_save_resume_data_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_save_resume_data_alert_obj, "priority", _wrap_libtorrent_save_resume_data_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_save_resume_data_alert_obj, "alert_type", _wrap_libtorrent_save_resume_data_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_save_resume_data_alert_obj, "alert_type", _wrap_libtorrent_save_resume_data_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_save_resume_data_alert_obj, "static_category", _wrap_libtorrent_save_resume_data_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_save_resume_data_alert_obj, "static_category", _wrap_libtorrent_save_resume_data_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_save_resume_data_failed_alert_obj, "priority", _wrap_libtorrent_save_resume_data_failed_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_save_resume_data_failed_alert_obj, "priority", _wrap_libtorrent_save_resume_data_failed_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_save_resume_data_failed_alert_obj, "alert_type", _wrap_libtorrent_save_resume_data_failed_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_save_resume_data_failed_alert_obj, "alert_type", _wrap_libtorrent_save_resume_data_failed_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_save_resume_data_failed_alert_obj, "static_category", _wrap_libtorrent_save_resume_data_failed_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_save_resume_data_failed_alert_obj, "static_category", _wrap_libtorrent_save_resume_data_failed_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_paused_alert_obj, "priority", _wrap_libtorrent_torrent_paused_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_paused_alert_obj, "priority", _wrap_libtorrent_torrent_paused_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_paused_alert_obj, "alert_type", _wrap_libtorrent_torrent_paused_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_paused_alert_obj, "alert_type", _wrap_libtorrent_torrent_paused_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_paused_alert_obj, "static_category", _wrap_libtorrent_torrent_paused_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_paused_alert_obj, "static_category", _wrap_libtorrent_torrent_paused_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_resumed_alert_obj, "priority", _wrap_libtorrent_torrent_resumed_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_resumed_alert_obj, "priority", _wrap_libtorrent_torrent_resumed_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_resumed_alert_obj, "alert_type", _wrap_libtorrent_torrent_resumed_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_resumed_alert_obj, "alert_type", _wrap_libtorrent_torrent_resumed_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_resumed_alert_obj, "static_category", _wrap_libtorrent_torrent_resumed_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_resumed_alert_obj, "static_category", _wrap_libtorrent_torrent_resumed_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_checked_alert_obj, "priority", _wrap_libtorrent_torrent_checked_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_checked_alert_obj, "priority", _wrap_libtorrent_torrent_checked_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_checked_alert_obj, "alert_type", _wrap_libtorrent_torrent_checked_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_checked_alert_obj, "alert_type", _wrap_libtorrent_torrent_checked_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_checked_alert_obj, "static_category", _wrap_libtorrent_torrent_checked_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_checked_alert_obj, "static_category", _wrap_libtorrent_torrent_checked_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_url_seed_alert_obj, "priority", _wrap_libtorrent_url_seed_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_url_seed_alert_obj, "priority", _wrap_libtorrent_url_seed_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_url_seed_alert_obj, "alert_type", _wrap_libtorrent_url_seed_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_url_seed_alert_obj, "alert_type", _wrap_libtorrent_url_seed_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_url_seed_alert_obj, "static_category", _wrap_libtorrent_url_seed_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_url_seed_alert_obj, "static_category", _wrap_libtorrent_url_seed_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_file_error_alert_obj, "priority", _wrap_libtorrent_file_error_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_file_error_alert_obj, "priority", _wrap_libtorrent_file_error_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_file_error_alert_obj, "alert_type", _wrap_libtorrent_file_error_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_file_error_alert_obj, "alert_type", _wrap_libtorrent_file_error_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_file_error_alert_obj, "static_category", _wrap_libtorrent_file_error_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_file_error_alert_obj, "static_category", _wrap_libtorrent_file_error_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_metadata_failed_alert_obj, "priority", _wrap_libtorrent_metadata_failed_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_metadata_failed_alert_obj, "priority", _wrap_libtorrent_metadata_failed_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_metadata_failed_alert_obj, "alert_type", _wrap_libtorrent_metadata_failed_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_metadata_failed_alert_obj, "alert_type", _wrap_libtorrent_metadata_failed_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_metadata_failed_alert_obj, "static_category", _wrap_libtorrent_metadata_failed_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_metadata_failed_alert_obj, "static_category", _wrap_libtorrent_metadata_failed_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_metadata_received_alert_obj, "priority", _wrap_libtorrent_metadata_received_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_metadata_received_alert_obj, "priority", _wrap_libtorrent_metadata_received_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_metadata_received_alert_obj, "alert_type", _wrap_libtorrent_metadata_received_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_metadata_received_alert_obj, "alert_type", _wrap_libtorrent_metadata_received_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_metadata_received_alert_obj, "static_category", _wrap_libtorrent_metadata_received_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_metadata_received_alert_obj, "static_category", _wrap_libtorrent_metadata_received_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_udp_error_alert_obj, "priority", _wrap_libtorrent_udp_error_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_udp_error_alert_obj, "priority", _wrap_libtorrent_udp_error_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_udp_error_alert_obj, "alert_type", _wrap_libtorrent_udp_error_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_udp_error_alert_obj, "alert_type", _wrap_libtorrent_udp_error_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_udp_error_alert_obj, "static_category", _wrap_libtorrent_udp_error_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_udp_error_alert_obj, "static_category", _wrap_libtorrent_udp_error_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_external_ip_alert_obj, "priority", _wrap_libtorrent_external_ip_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_external_ip_alert_obj, "priority", _wrap_libtorrent_external_ip_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_external_ip_alert_obj, "alert_type", _wrap_libtorrent_external_ip_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_external_ip_alert_obj, "alert_type", _wrap_libtorrent_external_ip_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_external_ip_alert_obj, "static_category", _wrap_libtorrent_external_ip_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_external_ip_alert_obj, "static_category", _wrap_libtorrent_external_ip_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_listen_failed_alert_obj, "tcp", _wrap_libtorrent_listen_failed_alert_tcp, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_listen_failed_alert_obj, "tcp_ssl", _wrap_libtorrent_listen_failed_alert_tcp_ssl, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_listen_failed_alert_obj, "udp", _wrap_libtorrent_listen_failed_alert_udp, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_listen_failed_alert_obj, "i2p", _wrap_libtorrent_listen_failed_alert_i2p, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_listen_failed_alert_obj, "socks5", _wrap_libtorrent_listen_failed_alert_socks5, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_listen_failed_alert_obj, "utp_ssl", _wrap_libtorrent_listen_failed_alert_utp_ssl, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_listen_failed_alert_obj, "priority", _wrap_libtorrent_listen_failed_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_listen_failed_alert_obj, "priority", _wrap_libtorrent_listen_failed_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_listen_failed_alert_obj, "alert_type", _wrap_libtorrent_listen_failed_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_listen_failed_alert_obj, "alert_type", _wrap_libtorrent_listen_failed_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_listen_failed_alert_obj, "static_category", _wrap_libtorrent_listen_failed_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_listen_failed_alert_obj, "static_category", _wrap_libtorrent_listen_failed_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_listen_failed_alert_obj, "parse_addr", _wrap_libtorrent_listen_failed_alert_parse_addr, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_listen_failed_alert_obj, "open", _wrap_libtorrent_listen_failed_alert_open, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_listen_failed_alert_obj, "bind", _wrap_libtorrent_listen_failed_alert_bind, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_listen_failed_alert_obj, "listen", _wrap_libtorrent_listen_failed_alert_listen, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_listen_failed_alert_obj, "get_socket_name", _wrap_libtorrent_listen_failed_alert_get_socket_name, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_listen_failed_alert_obj, "accept", _wrap_libtorrent_listen_failed_alert_accept, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_listen_failed_alert_obj, "enum_if", _wrap_libtorrent_listen_failed_alert_enum_if, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_listen_failed_alert_obj, "bind_to_device", _wrap_libtorrent_listen_failed_alert_bind_to_device, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_listen_succeeded_alert_obj, "tcp", _wrap_libtorrent_listen_succeeded_alert_tcp, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_listen_succeeded_alert_obj, "tcp_ssl", _wrap_libtorrent_listen_succeeded_alert_tcp_ssl, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_listen_succeeded_alert_obj, "udp", _wrap_libtorrent_listen_succeeded_alert_udp, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_listen_succeeded_alert_obj, "i2p", _wrap_libtorrent_listen_succeeded_alert_i2p, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_listen_succeeded_alert_obj, "socks5", _wrap_libtorrent_listen_succeeded_alert_socks5, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_listen_succeeded_alert_obj, "utp_ssl", _wrap_libtorrent_listen_succeeded_alert_utp_ssl, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_listen_succeeded_alert_obj, "priority", _wrap_libtorrent_listen_succeeded_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_listen_succeeded_alert_obj, "priority", _wrap_libtorrent_listen_succeeded_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_listen_succeeded_alert_obj, "alert_type", _wrap_libtorrent_listen_succeeded_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_listen_succeeded_alert_obj, "alert_type", _wrap_libtorrent_listen_succeeded_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_listen_succeeded_alert_obj, "static_category", _wrap_libtorrent_listen_succeeded_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_listen_succeeded_alert_obj, "static_category", _wrap_libtorrent_listen_succeeded_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_portmap_error_alert_obj, "priority", _wrap_libtorrent_portmap_error_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_portmap_error_alert_obj, "priority", _wrap_libtorrent_portmap_error_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_portmap_error_alert_obj, "alert_type", _wrap_libtorrent_portmap_error_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_portmap_error_alert_obj, "alert_type", _wrap_libtorrent_portmap_error_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_portmap_error_alert_obj, "static_category", _wrap_libtorrent_portmap_error_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_portmap_error_alert_obj, "static_category", _wrap_libtorrent_portmap_error_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_portmap_alert_obj, "priority", _wrap_libtorrent_portmap_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_portmap_alert_obj, "priority", _wrap_libtorrent_portmap_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_portmap_alert_obj, "alert_type", _wrap_libtorrent_portmap_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_portmap_alert_obj, "alert_type", _wrap_libtorrent_portmap_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_portmap_alert_obj, "static_category", _wrap_libtorrent_portmap_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_portmap_alert_obj, "static_category", _wrap_libtorrent_portmap_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_portmap_alert_obj, "tcp", _wrap_libtorrent_portmap_alert_tcp, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_portmap_alert_obj, "udp", _wrap_libtorrent_portmap_alert_udp, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_portmap_log_alert_obj, "priority", _wrap_libtorrent_portmap_log_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_portmap_log_alert_obj, "priority", _wrap_libtorrent_portmap_log_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_portmap_log_alert_obj, "alert_type", _wrap_libtorrent_portmap_log_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_portmap_log_alert_obj, "alert_type", _wrap_libtorrent_portmap_log_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_portmap_log_alert_obj, "static_category", _wrap_libtorrent_portmap_log_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_portmap_log_alert_obj, "static_category", _wrap_libtorrent_portmap_log_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_fastresume_rejected_alert_obj, "priority", _wrap_libtorrent_fastresume_rejected_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_fastresume_rejected_alert_obj, "priority", _wrap_libtorrent_fastresume_rejected_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_fastresume_rejected_alert_obj, "alert_type", _wrap_libtorrent_fastresume_rejected_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_fastresume_rejected_alert_obj, "alert_type", _wrap_libtorrent_fastresume_rejected_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_fastresume_rejected_alert_obj, "static_category", _wrap_libtorrent_fastresume_rejected_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_fastresume_rejected_alert_obj, "static_category", _wrap_libtorrent_fastresume_rejected_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_blocked_alert_obj, "priority", _wrap_libtorrent_peer_blocked_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_blocked_alert_obj, "priority", _wrap_libtorrent_peer_blocked_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_blocked_alert_obj, "alert_type", _wrap_libtorrent_peer_blocked_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_blocked_alert_obj, "alert_type", _wrap_libtorrent_peer_blocked_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_blocked_alert_obj, "static_category", _wrap_libtorrent_peer_blocked_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_blocked_alert_obj, "static_category", _wrap_libtorrent_peer_blocked_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_blocked_alert_obj, "ip_filter", _wrap_libtorrent_peer_blocked_alert_ip_filter, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_blocked_alert_obj, "port_filter", _wrap_libtorrent_peer_blocked_alert_port_filter, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_blocked_alert_obj, "i2p_mixed", _wrap_libtorrent_peer_blocked_alert_i2p_mixed, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_blocked_alert_obj, "privileged_ports", _wrap_libtorrent_peer_blocked_alert_privileged_ports, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_blocked_alert_obj, "utp_disabled", _wrap_libtorrent_peer_blocked_alert_utp_disabled, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_blocked_alert_obj, "tcp_disabled", _wrap_libtorrent_peer_blocked_alert_tcp_disabled, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_blocked_alert_obj, "invalid_local_interface", _wrap_libtorrent_peer_blocked_alert_invalid_local_interface, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_announce_alert_obj, "priority", _wrap_libtorrent_dht_announce_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_announce_alert_obj, "priority", _wrap_libtorrent_dht_announce_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_announce_alert_obj, "alert_type", _wrap_libtorrent_dht_announce_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_announce_alert_obj, "alert_type", _wrap_libtorrent_dht_announce_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_announce_alert_obj, "static_category", _wrap_libtorrent_dht_announce_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_announce_alert_obj, "static_category", _wrap_libtorrent_dht_announce_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_get_peers_alert_obj, "priority", _wrap_libtorrent_dht_get_peers_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_get_peers_alert_obj, "priority", _wrap_libtorrent_dht_get_peers_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_get_peers_alert_obj, "alert_type", _wrap_libtorrent_dht_get_peers_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_get_peers_alert_obj, "alert_type", _wrap_libtorrent_dht_get_peers_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_get_peers_alert_obj, "static_category", _wrap_libtorrent_dht_get_peers_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_get_peers_alert_obj, "static_category", _wrap_libtorrent_dht_get_peers_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_stats_alert_obj, "priority", _wrap_libtorrent_stats_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_stats_alert_obj, "priority", _wrap_libtorrent_stats_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_stats_alert_obj, "alert_type", _wrap_libtorrent_stats_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_stats_alert_obj, "alert_type", _wrap_libtorrent_stats_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_stats_alert_obj, "static_category", _wrap_libtorrent_stats_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_stats_alert_obj, "static_category", _wrap_libtorrent_stats_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_stats_alert_obj, "upload_payload", _wrap_libtorrent_stats_alert_upload_payload, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_stats_alert_obj, "upload_protocol", _wrap_libtorrent_stats_alert_upload_protocol, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_stats_alert_obj, "download_payload", _wrap_libtorrent_stats_alert_download_payload, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_stats_alert_obj, "download_protocol", _wrap_libtorrent_stats_alert_download_protocol, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_stats_alert_obj, "upload_ip_protocol", _wrap_libtorrent_stats_alert_upload_ip_protocol, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_stats_alert_obj, "download_ip_protocol", _wrap_libtorrent_stats_alert_download_ip_protocol, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_stats_alert_obj, "num_channels", _wrap_libtorrent_stats_alert_num_channels, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_cache_flushed_alert_obj, "priority", _wrap_libtorrent_cache_flushed_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_cache_flushed_alert_obj, "priority", _wrap_libtorrent_cache_flushed_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_cache_flushed_alert_obj, "alert_type", _wrap_libtorrent_cache_flushed_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_cache_flushed_alert_obj, "alert_type", _wrap_libtorrent_cache_flushed_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_cache_flushed_alert_obj, "static_category", _wrap_libtorrent_cache_flushed_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_cache_flushed_alert_obj, "static_category", _wrap_libtorrent_cache_flushed_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_anonymous_mode_alert_obj, "priority", _wrap_libtorrent_anonymous_mode_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_anonymous_mode_alert_obj, "priority", _wrap_libtorrent_anonymous_mode_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_anonymous_mode_alert_obj, "alert_type", _wrap_libtorrent_anonymous_mode_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_anonymous_mode_alert_obj, "alert_type", _wrap_libtorrent_anonymous_mode_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_anonymous_mode_alert_obj, "static_category", _wrap_libtorrent_anonymous_mode_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_anonymous_mode_alert_obj, "static_category", _wrap_libtorrent_anonymous_mode_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_anonymous_mode_alert_obj, "tracker_not_anonymous", _wrap_libtorrent_anonymous_mode_alert_tracker_not_anonymous, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_lsd_peer_alert_obj, "priority", _wrap_libtorrent_lsd_peer_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_lsd_peer_alert_obj, "priority", _wrap_libtorrent_lsd_peer_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_lsd_peer_alert_obj, "alert_type", _wrap_libtorrent_lsd_peer_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_lsd_peer_alert_obj, "alert_type", _wrap_libtorrent_lsd_peer_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_lsd_peer_alert_obj, "static_category", _wrap_libtorrent_lsd_peer_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_lsd_peer_alert_obj, "static_category", _wrap_libtorrent_lsd_peer_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_trackerid_alert_obj, "priority", _wrap_libtorrent_trackerid_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_trackerid_alert_obj, "priority", _wrap_libtorrent_trackerid_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_trackerid_alert_obj, "alert_type", _wrap_libtorrent_trackerid_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_trackerid_alert_obj, "alert_type", _wrap_libtorrent_trackerid_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_trackerid_alert_obj, "static_category", _wrap_libtorrent_trackerid_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_trackerid_alert_obj, "static_category", _wrap_libtorrent_trackerid_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_bootstrap_alert_obj, "priority", _wrap_libtorrent_dht_bootstrap_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_bootstrap_alert_obj, "priority", _wrap_libtorrent_dht_bootstrap_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_bootstrap_alert_obj, "alert_type", _wrap_libtorrent_dht_bootstrap_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_bootstrap_alert_obj, "alert_type", _wrap_libtorrent_dht_bootstrap_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_bootstrap_alert_obj, "static_category", _wrap_libtorrent_dht_bootstrap_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_bootstrap_alert_obj, "static_category", _wrap_libtorrent_dht_bootstrap_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_error_alert_obj, "priority", _wrap_libtorrent_torrent_error_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_error_alert_obj, "priority", _wrap_libtorrent_torrent_error_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_error_alert_obj, "alert_type", _wrap_libtorrent_torrent_error_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_error_alert_obj, "alert_type", _wrap_libtorrent_torrent_error_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_error_alert_obj, "static_category", _wrap_libtorrent_torrent_error_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_error_alert_obj, "static_category", _wrap_libtorrent_torrent_error_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_need_cert_alert_obj, "priority", _wrap_libtorrent_torrent_need_cert_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_need_cert_alert_obj, "priority", _wrap_libtorrent_torrent_need_cert_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_need_cert_alert_obj, "alert_type", _wrap_libtorrent_torrent_need_cert_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_need_cert_alert_obj, "alert_type", _wrap_libtorrent_torrent_need_cert_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_need_cert_alert_obj, "static_category", _wrap_libtorrent_torrent_need_cert_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_need_cert_alert_obj, "static_category", _wrap_libtorrent_torrent_need_cert_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_incoming_connection_alert_obj, "priority", _wrap_libtorrent_incoming_connection_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_incoming_connection_alert_obj, "priority", _wrap_libtorrent_incoming_connection_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_incoming_connection_alert_obj, "alert_type", _wrap_libtorrent_incoming_connection_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_incoming_connection_alert_obj, "alert_type", _wrap_libtorrent_incoming_connection_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_incoming_connection_alert_obj, "static_category", _wrap_libtorrent_incoming_connection_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_incoming_connection_alert_obj, "static_category", _wrap_libtorrent_incoming_connection_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_add_torrent_alert_obj, "priority", _wrap_libtorrent_add_torrent_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_add_torrent_alert_obj, "priority", _wrap_libtorrent_add_torrent_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_add_torrent_alert_obj, "alert_type", _wrap_libtorrent_add_torrent_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_add_torrent_alert_obj, "alert_type", _wrap_libtorrent_add_torrent_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_add_torrent_alert_obj, "static_category", _wrap_libtorrent_add_torrent_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_add_torrent_alert_obj, "static_category", _wrap_libtorrent_add_torrent_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_state_update_alert_obj, "priority", _wrap_libtorrent_state_update_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_state_update_alert_obj, "priority", _wrap_libtorrent_state_update_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_state_update_alert_obj, "alert_type", _wrap_libtorrent_state_update_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_state_update_alert_obj, "alert_type", _wrap_libtorrent_state_update_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_state_update_alert_obj, "static_category", _wrap_libtorrent_state_update_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_state_update_alert_obj, "static_category", _wrap_libtorrent_state_update_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_mmap_cache_alert_obj, "priority", _wrap_libtorrent_mmap_cache_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_mmap_cache_alert_obj, "priority", _wrap_libtorrent_mmap_cache_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_mmap_cache_alert_obj, "alert_type", _wrap_libtorrent_mmap_cache_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_mmap_cache_alert_obj, "alert_type", _wrap_libtorrent_mmap_cache_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_mmap_cache_alert_obj, "static_category", _wrap_libtorrent_mmap_cache_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_mmap_cache_alert_obj, "static_category", _wrap_libtorrent_mmap_cache_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_session_stats_alert_obj, "priority", _wrap_libtorrent_session_stats_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_session_stats_alert_obj, "priority", _wrap_libtorrent_session_stats_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_session_stats_alert_obj, "alert_type", _wrap_libtorrent_session_stats_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_session_stats_alert_obj, "alert_type", _wrap_libtorrent_session_stats_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_session_stats_alert_obj, "static_category", _wrap_libtorrent_session_stats_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_session_stats_alert_obj, "static_category", _wrap_libtorrent_session_stats_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_error_alert_obj, "priority", _wrap_libtorrent_dht_error_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_error_alert_obj, "priority", _wrap_libtorrent_dht_error_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_error_alert_obj, "alert_type", _wrap_libtorrent_dht_error_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_error_alert_obj, "alert_type", _wrap_libtorrent_dht_error_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_error_alert_obj, "static_category", _wrap_libtorrent_dht_error_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_error_alert_obj, "static_category", _wrap_libtorrent_dht_error_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_error_alert_obj, "unknown", _wrap_libtorrent_dht_error_alert_unknown, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_error_alert_obj, "hostname_lookup", _wrap_libtorrent_dht_error_alert_hostname_lookup, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_immutable_item_alert_obj, "priority", _wrap_libtorrent_dht_immutable_item_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_immutable_item_alert_obj, "priority", _wrap_libtorrent_dht_immutable_item_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_immutable_item_alert_obj, "alert_type", _wrap_libtorrent_dht_immutable_item_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_immutable_item_alert_obj, "alert_type", _wrap_libtorrent_dht_immutable_item_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_immutable_item_alert_obj, "static_category", _wrap_libtorrent_dht_immutable_item_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_immutable_item_alert_obj, "static_category", _wrap_libtorrent_dht_immutable_item_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_mutable_item_alert_obj, "priority", _wrap_libtorrent_dht_mutable_item_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_mutable_item_alert_obj, "priority", _wrap_libtorrent_dht_mutable_item_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_mutable_item_alert_obj, "alert_type", _wrap_libtorrent_dht_mutable_item_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_mutable_item_alert_obj, "alert_type", _wrap_libtorrent_dht_mutable_item_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_mutable_item_alert_obj, "static_category", _wrap_libtorrent_dht_mutable_item_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_mutable_item_alert_obj, "static_category", _wrap_libtorrent_dht_mutable_item_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_put_alert_obj, "priority", _wrap_libtorrent_dht_put_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_put_alert_obj, "priority", _wrap_libtorrent_dht_put_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_put_alert_obj, "alert_type", _wrap_libtorrent_dht_put_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_put_alert_obj, "alert_type", _wrap_libtorrent_dht_put_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_put_alert_obj, "static_category", _wrap_libtorrent_dht_put_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_put_alert_obj, "static_category", _wrap_libtorrent_dht_put_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_i2p_alert_obj, "priority", _wrap_libtorrent_i2p_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_i2p_alert_obj, "priority", _wrap_libtorrent_i2p_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_i2p_alert_obj, "alert_type", _wrap_libtorrent_i2p_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_i2p_alert_obj, "alert_type", _wrap_libtorrent_i2p_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_i2p_alert_obj, "static_category", _wrap_libtorrent_i2p_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_i2p_alert_obj, "static_category", _wrap_libtorrent_i2p_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_outgoing_get_peers_alert_obj, "priority", _wrap_libtorrent_dht_outgoing_get_peers_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_outgoing_get_peers_alert_obj, "priority", _wrap_libtorrent_dht_outgoing_get_peers_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_outgoing_get_peers_alert_obj, "alert_type", _wrap_libtorrent_dht_outgoing_get_peers_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_outgoing_get_peers_alert_obj, "alert_type", _wrap_libtorrent_dht_outgoing_get_peers_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_outgoing_get_peers_alert_obj, "static_category", _wrap_libtorrent_dht_outgoing_get_peers_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_outgoing_get_peers_alert_obj, "static_category", _wrap_libtorrent_dht_outgoing_get_peers_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_log_alert_obj, "priority", _wrap_libtorrent_log_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_log_alert_obj, "priority", _wrap_libtorrent_log_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_log_alert_obj, "alert_type", _wrap_libtorrent_log_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_log_alert_obj, "alert_type", _wrap_libtorrent_log_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_log_alert_obj, "static_category", _wrap_libtorrent_log_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_log_alert_obj, "static_category", _wrap_libtorrent_log_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_log_alert_obj, "priority", _wrap_libtorrent_torrent_log_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_log_alert_obj, "priority", _wrap_libtorrent_torrent_log_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_log_alert_obj, "alert_type", _wrap_libtorrent_torrent_log_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_log_alert_obj, "alert_type", _wrap_libtorrent_torrent_log_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_log_alert_obj, "static_category", _wrap_libtorrent_torrent_log_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_log_alert_obj, "static_category", _wrap_libtorrent_torrent_log_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_log_alert_obj, "incoming_message", _wrap_libtorrent_peer_log_alert_incoming_message, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_log_alert_obj, "outgoing_message", _wrap_libtorrent_peer_log_alert_outgoing_message, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_log_alert_obj, "incoming", _wrap_libtorrent_peer_log_alert_incoming, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_log_alert_obj, "outgoing", _wrap_libtorrent_peer_log_alert_outgoing, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_log_alert_obj, "info", _wrap_libtorrent_peer_log_alert_info, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_log_alert_obj, "priority", _wrap_libtorrent_peer_log_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_log_alert_obj, "priority", _wrap_libtorrent_peer_log_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_log_alert_obj, "alert_type", _wrap_libtorrent_peer_log_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_log_alert_obj, "alert_type", _wrap_libtorrent_peer_log_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_log_alert_obj, "static_category", _wrap_libtorrent_peer_log_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_log_alert_obj, "static_category", _wrap_libtorrent_peer_log_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_lsd_error_alert_obj, "priority", _wrap_libtorrent_lsd_error_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_lsd_error_alert_obj, "priority", _wrap_libtorrent_lsd_error_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_lsd_error_alert_obj, "alert_type", _wrap_libtorrent_lsd_error_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_lsd_error_alert_obj, "alert_type", _wrap_libtorrent_lsd_error_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_lsd_error_alert_obj, "static_category", _wrap_libtorrent_lsd_error_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_lsd_error_alert_obj, "static_category", _wrap_libtorrent_lsd_error_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_stats_alert_obj, "priority", _wrap_libtorrent_dht_stats_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_stats_alert_obj, "priority", _wrap_libtorrent_dht_stats_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_stats_alert_obj, "alert_type", _wrap_libtorrent_dht_stats_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_stats_alert_obj, "alert_type", _wrap_libtorrent_dht_stats_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_stats_alert_obj, "static_category", _wrap_libtorrent_dht_stats_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_stats_alert_obj, "static_category", _wrap_libtorrent_dht_stats_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_incoming_request_alert_obj, "static_category", _wrap_libtorrent_incoming_request_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_incoming_request_alert_obj, "static_category", _wrap_libtorrent_incoming_request_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_incoming_request_alert_obj, "priority", _wrap_libtorrent_incoming_request_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_incoming_request_alert_obj, "priority", _wrap_libtorrent_incoming_request_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_incoming_request_alert_obj, "alert_type", _wrap_libtorrent_incoming_request_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_incoming_request_alert_obj, "alert_type", _wrap_libtorrent_incoming_request_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_log_alert_obj, "tracker", _wrap_libtorrent_dht_log_alert_tracker, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_log_alert_obj, "node", _wrap_libtorrent_dht_log_alert_node, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_log_alert_obj, "routing_table", _wrap_libtorrent_dht_log_alert_routing_table, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_log_alert_obj, "rpc_manager", _wrap_libtorrent_dht_log_alert_rpc_manager, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_log_alert_obj, "traversal", _wrap_libtorrent_dht_log_alert_traversal, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_log_alert_obj, "static_category", _wrap_libtorrent_dht_log_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_log_alert_obj, "static_category", _wrap_libtorrent_dht_log_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_log_alert_obj, "priority", _wrap_libtorrent_dht_log_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_log_alert_obj, "priority", _wrap_libtorrent_dht_log_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_log_alert_obj, "alert_type", _wrap_libtorrent_dht_log_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_log_alert_obj, "alert_type", _wrap_libtorrent_dht_log_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_pkt_alert_obj, "incoming", _wrap_libtorrent_dht_pkt_alert_incoming, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_pkt_alert_obj, "outgoing", _wrap_libtorrent_dht_pkt_alert_outgoing, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_pkt_alert_obj, "static_category", _wrap_libtorrent_dht_pkt_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_pkt_alert_obj, "static_category", _wrap_libtorrent_dht_pkt_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_pkt_alert_obj, "priority", _wrap_libtorrent_dht_pkt_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_pkt_alert_obj, "priority", _wrap_libtorrent_dht_pkt_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_pkt_alert_obj, "alert_type", _wrap_libtorrent_dht_pkt_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_pkt_alert_obj, "alert_type", _wrap_libtorrent_dht_pkt_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_get_peers_reply_alert_obj, "static_category", _wrap_libtorrent_dht_get_peers_reply_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_get_peers_reply_alert_obj, "static_category", _wrap_libtorrent_dht_get_peers_reply_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_get_peers_reply_alert_obj, "priority", _wrap_libtorrent_dht_get_peers_reply_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_get_peers_reply_alert_obj, "priority", _wrap_libtorrent_dht_get_peers_reply_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_get_peers_reply_alert_obj, "alert_type", _wrap_libtorrent_dht_get_peers_reply_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_get_peers_reply_alert_obj, "alert_type", _wrap_libtorrent_dht_get_peers_reply_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_direct_response_alert_obj, "priority", _wrap_libtorrent_dht_direct_response_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_direct_response_alert_obj, "priority", _wrap_libtorrent_dht_direct_response_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_direct_response_alert_obj, "alert_type", _wrap_libtorrent_dht_direct_response_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_direct_response_alert_obj, "alert_type", _wrap_libtorrent_dht_direct_response_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_direct_response_alert_obj, "static_category", _wrap_libtorrent_dht_direct_response_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_dht_direct_response_alert_obj, "static_category", _wrap_libtorrent_dht_direct_response_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_picker_log_alert_obj, "priority", _wrap_libtorrent_picker_log_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_picker_log_alert_obj, "priority", _wrap_libtorrent_picker_log_alert_priority, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_picker_log_alert_obj, "alert_type", _wrap_libtorrent_picker_log_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_picker_log_alert_obj, "alert_type", _wrap_libtorrent_picker_log_alert_alert_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_picker_log_alert_obj, "static_category", _wrap_libtorrent_picker_log_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_picker_log_alert_obj, "static_category", _wrap_libtorrent_picker_log_alert_static_category, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_picker_log_alert_obj, "partial_ratio", _wrap_libtorrent_picker_log_alert_partial_ratio, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_picker_log_alert_obj, "prioritize_partials", _wrap_libtorrent_picker_log_alert_prioritize_partials, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_picker_log_alert_obj, "rarest_first_partials", _wrap_libtorrent_picker_log_alert_rarest_first_partials, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_picker_log_alert_obj, "rarest_first", _wrap_libtorrent_picker_log_alert_rarest_first, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_picker_log_alert_obj, "reverse_rarest_first", _wrap_libtorrent_picker_log_alert_reverse_rarest_first, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_picker_log_alert_obj, "suggested_pieces", _wrap_libtorrent_picker_log_alert_suggested_pieces, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_picker_log_alert_obj, "prio_sequential_pieces", _wrap_libtorrent_picker_log_alert_prio_sequential_pieces, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_picker_log_alert_obj, "sequential_pieces", _wrap_libtorrent_picker_log_alert_sequential_pieces, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_picker_log_alert_obj, "reverse_pieces", _wrap_libtorrent_picker_log_alert_reverse_pieces, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_picker_log_alert_obj, "time_critical", _wrap_libtorrent_picker_log_alert_time_critical, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_picker_log_alert_obj, "random_pieces", _wrap_libtorrent_picker_log_alert_random_pieces, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_picker_log_alert_obj, "prefer_contiguous", _wrap_libtorrent_picker_log_alert_prefer_contiguous, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_picker_log_alert_obj, "reverse_sequential", _wrap_libtorrent_picker_log_alert_reverse_sequential, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_picker_log_alert_obj, "backup1", _wrap_libtorrent_picker_log_alert_backup1, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_picker_log_alert_obj, "backup2", _wrap_libtorrent_picker_log_alert_backup2, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_picker_log_alert_obj, "end_game", _wrap_libtorrent_picker_log_alert_end_game, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_info_obj, "interesting", _wrap_libtorrent_peer_info_interesting, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_info_obj, "choked", _wrap_libtorrent_peer_info_choked, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_info_obj, "remote_interested", _wrap_libtorrent_peer_info_remote_interested, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_info_obj, "remote_choked", _wrap_libtorrent_peer_info_remote_choked, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_info_obj, "supports_extensions", _wrap_libtorrent_peer_info_supports_extensions, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_info_obj, "local_connection", _wrap_libtorrent_peer_info_local_connection, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_info_obj, "handshake", _wrap_libtorrent_peer_info_handshake, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_info_obj, "connecting", _wrap_libtorrent_peer_info_connecting, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_info_obj, "on_parole", _wrap_libtorrent_peer_info_on_parole, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_info_obj, "seed", _wrap_libtorrent_peer_info_seed, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_info_obj, "optimistic_unchoke", _wrap_libtorrent_peer_info_optimistic_unchoke, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_info_obj, "snubbed", _wrap_libtorrent_peer_info_snubbed, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_info_obj, "upload_only", _wrap_libtorrent_peer_info_upload_only, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_info_obj, "endgame_mode", _wrap_libtorrent_peer_info_endgame_mode, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_info_obj, "holepunched", _wrap_libtorrent_peer_info_holepunched, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_info_obj, "i2p_socket", _wrap_libtorrent_peer_info_i2p_socket, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_info_obj, "utp_socket", _wrap_libtorrent_peer_info_utp_socket, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_info_obj, "ssl_socket", _wrap_libtorrent_peer_info_ssl_socket, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_info_obj, "rc4_encrypted", _wrap_libtorrent_peer_info_rc4_encrypted, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_info_obj, "plaintext_encrypted", _wrap_libtorrent_peer_info_plaintext_encrypted, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_info_obj, "tracker", _wrap_libtorrent_peer_info_tracker, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_info_obj, "dht", _wrap_libtorrent_peer_info_dht, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_info_obj, "pex", _wrap_libtorrent_peer_info_pex, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_info_obj, "lsd", _wrap_libtorrent_peer_info_lsd, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_info_obj, "resume_data", _wrap_libtorrent_peer_info_resume_data, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_info_obj, "incoming", _wrap_libtorrent_peer_info_incoming, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_info_obj, "standard_bittorrent", _wrap_libtorrent_peer_info_standard_bittorrent, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_info_obj, "web_seed", _wrap_libtorrent_peer_info_web_seed, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_info_obj, "http_seed", _wrap_libtorrent_peer_info_http_seed, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_info_obj, "bw_idle", _wrap_libtorrent_peer_info_bw_idle, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_info_obj, "bw_limit", _wrap_libtorrent_peer_info_bw_limit, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_info_obj, "bw_network", _wrap_libtorrent_peer_info_bw_network, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_info_obj, "bw_disk", _wrap_libtorrent_peer_info_bw_disk, JS_veto_set_variable);
SWIGV8_AddStaticFunction(exports_obj, "setting_by_name", _wrap_setting_by_name);
SWIGV8_AddStaticFunction(exports_obj, "name_for_setting", _wrap_name_for_setting);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "string_type_base", _wrap_libtorrent_settings_pack_string_type_base, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "int_type_base", _wrap_libtorrent_settings_pack_int_type_base, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "bool_type_base", _wrap_libtorrent_settings_pack_bool_type_base, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "type_mask", _wrap_libtorrent_settings_pack_type_mask, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "index_mask", _wrap_libtorrent_settings_pack_index_mask, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "user_agent", _wrap_libtorrent_settings_pack_user_agent, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "announce_ip", _wrap_libtorrent_settings_pack_announce_ip, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "mmap_cache", _wrap_libtorrent_settings_pack_mmap_cache, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "handshake_client_version", _wrap_libtorrent_settings_pack_handshake_client_version, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "outgoing_interfaces", _wrap_libtorrent_settings_pack_outgoing_interfaces, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "listen_interfaces", _wrap_libtorrent_settings_pack_listen_interfaces, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "proxy_hostname", _wrap_libtorrent_settings_pack_proxy_hostname, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "proxy_username", _wrap_libtorrent_settings_pack_proxy_username, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "proxy_password", _wrap_libtorrent_settings_pack_proxy_password, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "i2p_hostname", _wrap_libtorrent_settings_pack_i2p_hostname, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "peer_fingerprint", _wrap_libtorrent_settings_pack_peer_fingerprint, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "dht_bootstrap_nodes", _wrap_libtorrent_settings_pack_dht_bootstrap_nodes, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "max_string_setting_internal", _wrap_libtorrent_settings_pack_max_string_setting_internal, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "allow_multiple_connections_per_ip", _wrap_libtorrent_settings_pack_allow_multiple_connections_per_ip, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "send_redundant_have", _wrap_libtorrent_settings_pack_send_redundant_have, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "use_dht_as_fallback", _wrap_libtorrent_settings_pack_use_dht_as_fallback, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "upnp_ignore_nonrouters", _wrap_libtorrent_settings_pack_upnp_ignore_nonrouters, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "use_parole_mode", _wrap_libtorrent_settings_pack_use_parole_mode, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "use_read_cache", _wrap_libtorrent_settings_pack_use_read_cache, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "dont_flush_write_cache", _wrap_libtorrent_settings_pack_dont_flush_write_cache, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "coalesce_reads", _wrap_libtorrent_settings_pack_coalesce_reads, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "coalesce_writes", _wrap_libtorrent_settings_pack_coalesce_writes, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "auto_manage_prefer_seeds", _wrap_libtorrent_settings_pack_auto_manage_prefer_seeds, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "dont_count_slow_torrents", _wrap_libtorrent_settings_pack_dont_count_slow_torrents, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "close_redundant_connections", _wrap_libtorrent_settings_pack_close_redundant_connections, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "prioritize_partial_pieces", _wrap_libtorrent_settings_pack_prioritize_partial_pieces, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "rate_limit_ip_overhead", _wrap_libtorrent_settings_pack_rate_limit_ip_overhead, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "announce_to_all_tiers", _wrap_libtorrent_settings_pack_announce_to_all_tiers, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "announce_to_all_trackers", _wrap_libtorrent_settings_pack_announce_to_all_trackers, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "prefer_udp_trackers", _wrap_libtorrent_settings_pack_prefer_udp_trackers, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "strict_super_seeding", _wrap_libtorrent_settings_pack_strict_super_seeding, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "disable_hash_checks", _wrap_libtorrent_settings_pack_disable_hash_checks, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "allow_i2p_mixed", _wrap_libtorrent_settings_pack_allow_i2p_mixed, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "volatile_read_cache", _wrap_libtorrent_settings_pack_volatile_read_cache, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "no_atime_storage", _wrap_libtorrent_settings_pack_no_atime_storage, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "incoming_starts_queued_torrents", _wrap_libtorrent_settings_pack_incoming_starts_queued_torrents, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "report_true_downloaded", _wrap_libtorrent_settings_pack_report_true_downloaded, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "strict_end_game_mode", _wrap_libtorrent_settings_pack_strict_end_game_mode, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "broadcast_lsd", _wrap_libtorrent_settings_pack_broadcast_lsd, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "enable_outgoing_utp", _wrap_libtorrent_settings_pack_enable_outgoing_utp, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "enable_incoming_utp", _wrap_libtorrent_settings_pack_enable_incoming_utp, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "enable_outgoing_tcp", _wrap_libtorrent_settings_pack_enable_outgoing_tcp, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "enable_incoming_tcp", _wrap_libtorrent_settings_pack_enable_incoming_tcp, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "no_recheck_incomplete_resume", _wrap_libtorrent_settings_pack_no_recheck_incomplete_resume, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "anonymous_mode", _wrap_libtorrent_settings_pack_anonymous_mode, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "report_web_seed_downloads", _wrap_libtorrent_settings_pack_report_web_seed_downloads, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "seeding_outgoing_connections", _wrap_libtorrent_settings_pack_seeding_outgoing_connections, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "no_connect_privileged_ports", _wrap_libtorrent_settings_pack_no_connect_privileged_ports, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "smooth_connects", _wrap_libtorrent_settings_pack_smooth_connects, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "always_send_user_agent", _wrap_libtorrent_settings_pack_always_send_user_agent, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "apply_ip_filter_to_trackers", _wrap_libtorrent_settings_pack_apply_ip_filter_to_trackers, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "deprecated19", _wrap_libtorrent_settings_pack_deprecated19, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "lock_files", _wrap_libtorrent_settings_pack_lock_files, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "ban_web_seeds", _wrap_libtorrent_settings_pack_ban_web_seeds, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "allow_partial_disk_writes", _wrap_libtorrent_settings_pack_allow_partial_disk_writes, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "force_proxy", _wrap_libtorrent_settings_pack_force_proxy, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "support_share_mode", _wrap_libtorrent_settings_pack_support_share_mode, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "support_merkle_torrents", _wrap_libtorrent_settings_pack_support_merkle_torrents, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "report_redundant_bytes", _wrap_libtorrent_settings_pack_report_redundant_bytes, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "listen_system_port_fallback", _wrap_libtorrent_settings_pack_listen_system_port_fallback, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "use_disk_cache_pool", _wrap_libtorrent_settings_pack_use_disk_cache_pool, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "announce_crypto_support", _wrap_libtorrent_settings_pack_announce_crypto_support, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "enable_upnp", _wrap_libtorrent_settings_pack_enable_upnp, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "enable_natpmp", _wrap_libtorrent_settings_pack_enable_natpmp, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "enable_lsd", _wrap_libtorrent_settings_pack_enable_lsd, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "enable_dht", _wrap_libtorrent_settings_pack_enable_dht, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "prefer_rc4", _wrap_libtorrent_settings_pack_prefer_rc4, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "proxy_hostnames", _wrap_libtorrent_settings_pack_proxy_hostnames, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "proxy_peer_connections", _wrap_libtorrent_settings_pack_proxy_peer_connections, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "auto_sequential", _wrap_libtorrent_settings_pack_auto_sequential, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "proxy_tracker_connections", _wrap_libtorrent_settings_pack_proxy_tracker_connections, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "max_bool_setting_internal", _wrap_libtorrent_settings_pack_max_bool_setting_internal, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "tracker_completion_timeout", _wrap_libtorrent_settings_pack_tracker_completion_timeout, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "tracker_receive_timeout", _wrap_libtorrent_settings_pack_tracker_receive_timeout, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "stop_tracker_timeout", _wrap_libtorrent_settings_pack_stop_tracker_timeout, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "tracker_maximum_response_length", _wrap_libtorrent_settings_pack_tracker_maximum_response_length, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "piece_timeout", _wrap_libtorrent_settings_pack_piece_timeout, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "request_timeout", _wrap_libtorrent_settings_pack_request_timeout, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "request_queue_time", _wrap_libtorrent_settings_pack_request_queue_time, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "max_allowed_in_request_queue", _wrap_libtorrent_settings_pack_max_allowed_in_request_queue, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "max_out_request_queue", _wrap_libtorrent_settings_pack_max_out_request_queue, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "whole_pieces_threshold", _wrap_libtorrent_settings_pack_whole_pieces_threshold, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "peer_timeout", _wrap_libtorrent_settings_pack_peer_timeout, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "urlseed_timeout", _wrap_libtorrent_settings_pack_urlseed_timeout, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "urlseed_pipeline_size", _wrap_libtorrent_settings_pack_urlseed_pipeline_size, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "urlseed_wait_retry", _wrap_libtorrent_settings_pack_urlseed_wait_retry, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "file_pool_size", _wrap_libtorrent_settings_pack_file_pool_size, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "max_failcount", _wrap_libtorrent_settings_pack_max_failcount, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "min_reconnect_time", _wrap_libtorrent_settings_pack_min_reconnect_time, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "peer_connect_timeout", _wrap_libtorrent_settings_pack_peer_connect_timeout, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "connection_speed", _wrap_libtorrent_settings_pack_connection_speed, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "inactivity_timeout", _wrap_libtorrent_settings_pack_inactivity_timeout, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "unchoke_interval", _wrap_libtorrent_settings_pack_unchoke_interval, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "optimistic_unchoke_interval", _wrap_libtorrent_settings_pack_optimistic_unchoke_interval, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "num_want", _wrap_libtorrent_settings_pack_num_want, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "initial_picker_threshold", _wrap_libtorrent_settings_pack_initial_picker_threshold, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "allowed_fast_set_size", _wrap_libtorrent_settings_pack_allowed_fast_set_size, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "suggest_mode", _wrap_libtorrent_settings_pack_suggest_mode, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "max_queued_disk_bytes", _wrap_libtorrent_settings_pack_max_queued_disk_bytes, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "handshake_timeout", _wrap_libtorrent_settings_pack_handshake_timeout, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "send_buffer_low_watermark", _wrap_libtorrent_settings_pack_send_buffer_low_watermark, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "send_buffer_watermark", _wrap_libtorrent_settings_pack_send_buffer_watermark, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "send_buffer_watermark_factor", _wrap_libtorrent_settings_pack_send_buffer_watermark_factor, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "choking_algorithm", _wrap_libtorrent_settings_pack_choking_algorithm, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "seed_choking_algorithm", _wrap_libtorrent_settings_pack_seed_choking_algorithm, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "cache_size", _wrap_libtorrent_settings_pack_cache_size, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "cache_buffer_chunk_size", _wrap_libtorrent_settings_pack_cache_buffer_chunk_size, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "cache_expiry", _wrap_libtorrent_settings_pack_cache_expiry, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "disk_io_write_mode", _wrap_libtorrent_settings_pack_disk_io_write_mode, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "disk_io_read_mode", _wrap_libtorrent_settings_pack_disk_io_read_mode, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "outgoing_port", _wrap_libtorrent_settings_pack_outgoing_port, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "num_outgoing_ports", _wrap_libtorrent_settings_pack_num_outgoing_ports, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "peer_tos", _wrap_libtorrent_settings_pack_peer_tos, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "active_downloads", _wrap_libtorrent_settings_pack_active_downloads, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "active_seeds", _wrap_libtorrent_settings_pack_active_seeds, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "active_checking", _wrap_libtorrent_settings_pack_active_checking, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "active_dht_limit", _wrap_libtorrent_settings_pack_active_dht_limit, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "active_tracker_limit", _wrap_libtorrent_settings_pack_active_tracker_limit, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "active_lsd_limit", _wrap_libtorrent_settings_pack_active_lsd_limit, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "active_limit", _wrap_libtorrent_settings_pack_active_limit, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "active_loaded_limit", _wrap_libtorrent_settings_pack_active_loaded_limit, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "auto_manage_interval", _wrap_libtorrent_settings_pack_auto_manage_interval, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "seed_time_limit", _wrap_libtorrent_settings_pack_seed_time_limit, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "auto_scrape_interval", _wrap_libtorrent_settings_pack_auto_scrape_interval, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "auto_scrape_min_interval", _wrap_libtorrent_settings_pack_auto_scrape_min_interval, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "max_peerlist_size", _wrap_libtorrent_settings_pack_max_peerlist_size, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "max_paused_peerlist_size", _wrap_libtorrent_settings_pack_max_paused_peerlist_size, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "min_announce_interval", _wrap_libtorrent_settings_pack_min_announce_interval, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "auto_manage_startup", _wrap_libtorrent_settings_pack_auto_manage_startup, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "seeding_piece_quota", _wrap_libtorrent_settings_pack_seeding_piece_quota, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "max_rejects", _wrap_libtorrent_settings_pack_max_rejects, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "recv_socket_buffer_size", _wrap_libtorrent_settings_pack_recv_socket_buffer_size, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "send_socket_buffer_size", _wrap_libtorrent_settings_pack_send_socket_buffer_size, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "max_peer_recv_buffer_size", _wrap_libtorrent_settings_pack_max_peer_recv_buffer_size, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "file_checks_delay_per_block", _wrap_libtorrent_settings_pack_file_checks_delay_per_block, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "read_cache_line_size", _wrap_libtorrent_settings_pack_read_cache_line_size, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "write_cache_line_size", _wrap_libtorrent_settings_pack_write_cache_line_size, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "optimistic_disk_retry", _wrap_libtorrent_settings_pack_optimistic_disk_retry, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "max_suggest_pieces", _wrap_libtorrent_settings_pack_max_suggest_pieces, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "local_service_announce_interval", _wrap_libtorrent_settings_pack_local_service_announce_interval, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "dht_announce_interval", _wrap_libtorrent_settings_pack_dht_announce_interval, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "udp_tracker_token_expiry", _wrap_libtorrent_settings_pack_udp_tracker_token_expiry, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "num_optimistic_unchoke_slots", _wrap_libtorrent_settings_pack_num_optimistic_unchoke_slots, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "default_est_reciprocation_rate", _wrap_libtorrent_settings_pack_default_est_reciprocation_rate, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "increase_est_reciprocation_rate", _wrap_libtorrent_settings_pack_increase_est_reciprocation_rate, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "decrease_est_reciprocation_rate", _wrap_libtorrent_settings_pack_decrease_est_reciprocation_rate, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "max_pex_peers", _wrap_libtorrent_settings_pack_max_pex_peers, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "tick_interval", _wrap_libtorrent_settings_pack_tick_interval, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "share_mode_target", _wrap_libtorrent_settings_pack_share_mode_target, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "upload_rate_limit", _wrap_libtorrent_settings_pack_upload_rate_limit, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "download_rate_limit", _wrap_libtorrent_settings_pack_download_rate_limit, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "unchoke_slots_limit", _wrap_libtorrent_settings_pack_unchoke_slots_limit, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "connections_limit", _wrap_libtorrent_settings_pack_connections_limit, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "connections_slack", _wrap_libtorrent_settings_pack_connections_slack, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "utp_target_delay", _wrap_libtorrent_settings_pack_utp_target_delay, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "utp_gain_factor", _wrap_libtorrent_settings_pack_utp_gain_factor, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "utp_min_timeout", _wrap_libtorrent_settings_pack_utp_min_timeout, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "utp_syn_resends", _wrap_libtorrent_settings_pack_utp_syn_resends, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "utp_fin_resends", _wrap_libtorrent_settings_pack_utp_fin_resends, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "utp_num_resends", _wrap_libtorrent_settings_pack_utp_num_resends, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "utp_connect_timeout", _wrap_libtorrent_settings_pack_utp_connect_timeout, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "utp_loss_multiplier", _wrap_libtorrent_settings_pack_utp_loss_multiplier, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "mixed_mode_algorithm", _wrap_libtorrent_settings_pack_mixed_mode_algorithm, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "listen_queue_size", _wrap_libtorrent_settings_pack_listen_queue_size, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "torrent_connect_boost", _wrap_libtorrent_settings_pack_torrent_connect_boost, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "alert_queue_size", _wrap_libtorrent_settings_pack_alert_queue_size, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "max_metadata_size", _wrap_libtorrent_settings_pack_max_metadata_size, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "checking_mem_usage", _wrap_libtorrent_settings_pack_checking_mem_usage, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "predictive_piece_announce", _wrap_libtorrent_settings_pack_predictive_piece_announce, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "aio_threads", _wrap_libtorrent_settings_pack_aio_threads, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "aio_max", _wrap_libtorrent_settings_pack_aio_max, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "network_threads", _wrap_libtorrent_settings_pack_network_threads, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "tracker_backoff", _wrap_libtorrent_settings_pack_tracker_backoff, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "share_ratio_limit", _wrap_libtorrent_settings_pack_share_ratio_limit, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "seed_time_ratio_limit", _wrap_libtorrent_settings_pack_seed_time_ratio_limit, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "peer_turnover", _wrap_libtorrent_settings_pack_peer_turnover, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "peer_turnover_cutoff", _wrap_libtorrent_settings_pack_peer_turnover_cutoff, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "peer_turnover_interval", _wrap_libtorrent_settings_pack_peer_turnover_interval, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "connect_seed_every_n_download", _wrap_libtorrent_settings_pack_connect_seed_every_n_download, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "max_http_recv_buffer_size", _wrap_libtorrent_settings_pack_max_http_recv_buffer_size, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "max_retry_port_bind", _wrap_libtorrent_settings_pack_max_retry_port_bind, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "alert_mask", _wrap_libtorrent_settings_pack_alert_mask, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "out_enc_policy", _wrap_libtorrent_settings_pack_out_enc_policy, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "in_enc_policy", _wrap_libtorrent_settings_pack_in_enc_policy, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "allowed_enc_level", _wrap_libtorrent_settings_pack_allowed_enc_level, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "inactive_down_rate", _wrap_libtorrent_settings_pack_inactive_down_rate, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "inactive_up_rate", _wrap_libtorrent_settings_pack_inactive_up_rate, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "proxy_type", _wrap_libtorrent_settings_pack_proxy_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "proxy_port", _wrap_libtorrent_settings_pack_proxy_port, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "i2p_port", _wrap_libtorrent_settings_pack_i2p_port, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "cache_size_volatile", _wrap_libtorrent_settings_pack_cache_size_volatile, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "max_int_setting_internal", _wrap_libtorrent_settings_pack_max_int_setting_internal, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "num_string_settings", _wrap_libtorrent_settings_pack_num_string_settings, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "num_bool_settings", _wrap_libtorrent_settings_pack_num_bool_settings, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "num_int_settings", _wrap_libtorrent_settings_pack_num_int_settings, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "no_piece_suggestions", _wrap_libtorrent_settings_pack_no_piece_suggestions, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "suggest_read_cache", _wrap_libtorrent_settings_pack_suggest_read_cache, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "fixed_slots_choker", _wrap_libtorrent_settings_pack_fixed_slots_choker, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "rate_based_choker", _wrap_libtorrent_settings_pack_rate_based_choker, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "bittyrant_choker", _wrap_libtorrent_settings_pack_bittyrant_choker, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "round_robin", _wrap_libtorrent_settings_pack_round_robin, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "fastest_upload", _wrap_libtorrent_settings_pack_fastest_upload, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "anti_leech", _wrap_libtorrent_settings_pack_anti_leech, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "enable_os_cache", _wrap_libtorrent_settings_pack_enable_os_cache, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "disable_os_cache", _wrap_libtorrent_settings_pack_disable_os_cache, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "prefer_tcp", _wrap_libtorrent_settings_pack_prefer_tcp, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "peer_proportional", _wrap_libtorrent_settings_pack_peer_proportional, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "pe_forced", _wrap_libtorrent_settings_pack_pe_forced, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "pe_enabled", _wrap_libtorrent_settings_pack_pe_enabled, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "pe_disabled", _wrap_libtorrent_settings_pack_pe_disabled, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "pe_plaintext", _wrap_libtorrent_settings_pack_pe_plaintext, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "pe_rc4", _wrap_libtorrent_settings_pack_pe_rc4, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "pe_both", _wrap_libtorrent_settings_pack_pe_both, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "none", _wrap_libtorrent_settings_pack_none, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "socks4", _wrap_libtorrent_settings_pack_socks4, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "socks5", _wrap_libtorrent_settings_pack_socks5, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "socks5_pw", _wrap_libtorrent_settings_pack_socks5_pw, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "http", _wrap_libtorrent_settings_pack_http, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "http_pw", _wrap_libtorrent_settings_pack_http_pw, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_settings_pack_obj, "i2p_proxy", _wrap_libtorrent_settings_pack_i2p_proxy, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_class_type_filter_obj, "tcp_socket", _wrap_libtorrent_peer_class_type_filter_tcp_socket, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_class_type_filter_obj, "utp_socket", _wrap_libtorrent_peer_class_type_filter_utp_socket, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_class_type_filter_obj, "ssl_tcp_socket", _wrap_libtorrent_peer_class_type_filter_ssl_tcp_socket, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_class_type_filter_obj, "ssl_utp_socket", _wrap_libtorrent_peer_class_type_filter_ssl_utp_socket, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_class_type_filter_obj, "i2p_socket", _wrap_libtorrent_peer_class_type_filter_i2p_socket, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_peer_class_type_filter_obj, "num_socket_types", _wrap_libtorrent_peer_class_type_filter_num_socket_types, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_session_handle_obj, "save_settings", _wrap_libtorrent_session_handle_save_settings, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_session_handle_obj, "save_dht_settings", _wrap_libtorrent_session_handle_save_dht_settings, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_session_handle_obj, "save_dht_state", _wrap_libtorrent_session_handle_save_dht_state, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_session_handle_obj, "save_encryption_settings", _wrap_libtorrent_session_handle_save_encryption_settings, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_session_handle_obj, "disk_cache_no_pieces", _wrap_libtorrent_session_handle_disk_cache_no_pieces, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_session_handle_obj, "global_peer_class_id", _wrap_libtorrent_session_handle_global_peer_class_id, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_session_handle_obj, "tcp_peer_class_id", _wrap_libtorrent_session_handle_tcp_peer_class_id, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_session_handle_obj, "local_peer_class_id", _wrap_libtorrent_session_handle_local_peer_class_id, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_session_handle_obj, "delete_files", _wrap_libtorrent_session_handle_delete_files, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_session_handle_obj, "delete_partfile", _wrap_libtorrent_session_handle_delete_partfile, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_session_handle_obj, "add_default_plugins", _wrap_libtorrent_session_handle_add_default_plugins, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_session_handle_obj, "start_default_features", _wrap_libtorrent_session_handle_start_default_features, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_session_handle_obj, "udp", _wrap_libtorrent_session_handle_udp, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_session_handle_obj, "tcp", _wrap_libtorrent_session_handle_tcp, JS_veto_set_variable);
SWIGV8_AddStaticFunction(exports_obj, "read_dht_state", _wrap_read_dht_state);
SWIGV8_AddStaticFunction(exports_obj, "save_dht_state", _wrap_save_dht_state);
SWIGV8_AddStaticFunction(exports_obj, "min_memory_usage", _wrap_min_memory_usage);
SWIGV8_AddStaticFunction(exports_obj, "high_performance_seed", _wrap_high_performance_seed);
SWIGV8_AddStaticFunction(exports_obj, "read_session_params", _wrap_libtorrent__wrap_read_session_params);
SWIGV8_AddStaticFunction(exports_obj, "op_lte", _wrap_op_lte);
SWIGV8_AddStaticVariable(_exports_ip_filter_obj, "blocked", _wrap_libtorrent_ip_filter_blocked, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_port_filter_obj, "blocked", _wrap_libtorrent_port_filter_blocked, JS_veto_set_variable);
SWIGV8_AddStaticFunction(exports_obj, "bdecode_category", _wrap_bdecode_category);
SWIGV8_AddStaticVariable(_exports_bdecode_node_obj, "none_t", _wrap_libtorrent_bdecode_node_none_t, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_bdecode_node_obj, "dict_t", _wrap_libtorrent_bdecode_node_dict_t, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_bdecode_node_obj, "list_t", _wrap_libtorrent_bdecode_node_list_t, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_bdecode_node_obj, "string_t", _wrap_libtorrent_bdecode_node_string_t, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_bdecode_node_obj, "int_t", _wrap_libtorrent_bdecode_node_int_t, JS_veto_set_variable);
SWIGV8_AddStaticFunction(_exports_bdecode_node_obj, "to_string", _wrap_bdecode_node_to_string);
SWIGV8_AddStaticFunction(_exports_bdecode_node_obj, "bdecode", _wrap_bdecode_node_bdecode);
SWIGV8_AddStaticFunction(exports_obj, "make_magnet_uri", _wrap_libtorrent__wrap_make_magnet_uri);
SWIGV8_AddStaticFunction(exports_obj, "parse_magnet_uri", _wrap_parse_magnet_uri);
SWIGV8_AddStaticVariable(_exports_create_torrent_obj, "optimize_alignment", _wrap_libtorrent_create_torrent_optimize_alignment, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_create_torrent_obj, "merkle", _wrap_libtorrent_create_torrent_merkle, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_create_torrent_obj, "modification_time", _wrap_libtorrent_create_torrent_modification_time, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_create_torrent_obj, "symlinks", _wrap_libtorrent_create_torrent_symlinks, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_create_torrent_obj, "mutable_torrent_support", _wrap_libtorrent_create_torrent_mutable_torrent_support, JS_veto_set_variable);
SWIGV8_AddStaticFunction(exports_obj, "add_files", _wrap_libtorrent__wrap_add_files);
SWIGV8_AddStaticFunction(exports_obj, "set_piece_hashes", _wrap_set_piece_hashes);
SWIGV8_AddStaticVariable(_exports_announce_entry_obj, "source_torrent", _wrap_libtorrent_announce_entry_source_torrent, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_announce_entry_obj, "source_client", _wrap_libtorrent_announce_entry_source_client, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_announce_entry_obj, "source_magnet_link", _wrap_libtorrent_announce_entry_source_magnet_link, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_announce_entry_obj, "source_tex", _wrap_libtorrent_announce_entry_source_tex, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_status_obj, "checking_files", _wrap_libtorrent_torrent_status_checking_files, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_status_obj, "downloading_metadata", _wrap_libtorrent_torrent_status_downloading_metadata, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_status_obj, "downloading", _wrap_libtorrent_torrent_status_downloading, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_status_obj, "finished", _wrap_libtorrent_torrent_status_finished, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_status_obj, "seeding", _wrap_libtorrent_torrent_status_seeding, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_status_obj, "allocating", _wrap_libtorrent_torrent_status_allocating, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_status_obj, "checking_resume_data", _wrap_libtorrent_torrent_status_checking_resume_data, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_status_obj, "error_file_none", _wrap_libtorrent_torrent_status_error_file_none, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_status_obj, "error_file_url", _wrap_libtorrent_torrent_status_error_file_url, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_status_obj, "error_file_ssl_ctx", _wrap_libtorrent_torrent_status_error_file_ssl_ctx, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_torrent_status_obj, "error_file_metadata", _wrap_libtorrent_torrent_status_error_file_metadata, JS_veto_set_variable);
SWIGV8_AddStaticFunction(exports_obj, "ed25519_create_seed", _wrap_ed25519_create_seed);
SWIGV8_AddStaticFunction(exports_obj, "ed25519_create_keypair", _wrap_ed25519_create_keypair);
SWIGV8_AddStaticFunction(exports_obj, "ed25519_sign", _wrap_ed25519_sign);
SWIGV8_AddStaticFunction(exports_obj, "ed25519_verify", _wrap_ed25519_verify);
SWIGV8_AddStaticFunction(exports_obj, "ed25519_add_scalar_public", _wrap_ed25519_add_scalar_public);
SWIGV8_AddStaticFunction(exports_obj, "ed25519_add_scalar_secret", _wrap_ed25519_add_scalar_secret);
SWIGV8_AddStaticFunction(exports_obj, "ed25519_key_exchange", _wrap_ed25519_key_exchange);
SWIGV8_AddStaticFunction(exports_obj, "default_storage_disk_write_access_log", _wrap___wrap_default_storage_disk_write_access_log);
SWIGV8_AddStaticFunction(exports_obj, "add_files", _wrap_add_files);
SWIGV8_AddStaticFunction(exports_obj, "set_piece_hashes_ex", _wrap_set_piece_hashes_ex);
SWIGV8_AddStaticFunction(exports_obj, "boost_version", _wrap_boost_version);
SWIGV8_AddStaticFunction(exports_obj, "boost_lib_version", _wrap_boost_lib_version);
SWIGV8_AddStaticFunction(exports_obj, "openssl_version_number", _wrap_openssl_version_number);
SWIGV8_AddStaticFunction(exports_obj, "openssl_version_text", _wrap_openssl_version_text);
SWIGV8_AddStaticFunction(exports_obj, "set_posix_wrapper", _wrap_set_posix_wrapper);
SWIGV8_AddStaticFunction(exports_obj, "is_utp_stream_logging", _wrap_is_utp_stream_logging);
SWIGV8_AddStaticFunction(exports_obj, "set_utp_stream_logging", _wrap_set_utp_stream_logging);


  /* register classes */
  exports_obj->Set(SWIGV8_SYMBOL_NEW("int_int_pair"), _exports_int_int_pair_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("string_int_pair"), _exports_string_int_pair_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("string_string_pair"), _exports_string_string_pair_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("string_view_bdecode_node_pair"), _exports_string_view_bdecode_node_pair_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("byte_vectors_pair"), _exports_byte_vectors_pair_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("byte_vector"), _exports_byte_vector_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("string_vector"), _exports_string_vector_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("string_int_pair_vector"), _exports_string_int_pair_vector_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("string_string_pair_vector"), _exports_string_string_pair_vector_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("int_int_pair_vector"), _exports_int_int_pair_vector_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("int_vector"), _exports_int_vector_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("int64_vector"), _exports_int64_vector_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("sha1_hash_vector"), _exports_sha1_hash_vector_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("torrent_status_vector"), _exports_torrent_status_vector_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("torrent_handle_vector"), _exports_torrent_handle_vector_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("file_slice_vector"), _exports_file_slice_vector_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("dht_routing_bucket_vector"), _exports_dht_routing_bucket_vector_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("dht_lookup_vector"), _exports_dht_lookup_vector_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("block_info_vector"), _exports_block_info_vector_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("partial_piece_info_vector"), _exports_partial_piece_info_vector_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("peer_info_vector"), _exports_peer_info_vector_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("stats_metric_vector"), _exports_stats_metric_vector_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("entry_vector"), _exports_entry_vector_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("web_seed_entry_vector"), _exports_web_seed_entry_vector_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("announce_entry_vector"), _exports_announce_entry_vector_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("tcp_endpoint_vector"), _exports_tcp_endpoint_vector_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("udp_endpoint_vector"), _exports_udp_endpoint_vector_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("int_string_map"), _exports_int_string_map_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("string_long_map"), _exports_string_long_map_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("string_entry_map"), _exports_string_entry_map_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("int_bitfield_map"), _exports_int_bitfield_map_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("alert_ptr_vector"), _exports_alert_ptr_vector_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("iovec_t"), _exports_iovec_t_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("byte_span"), _exports_byte_span_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("byte_const_span"), _exports_byte_const_span_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("iovec_span"), _exports_iovec_span_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("sha1_hash"), _exports_sha1_hash_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("bloom_filter_128"), _exports_bloom_filter_128_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("bloom_filter_256"), _exports_bloom_filter_256_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("string_view"), _exports_string_view_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("address"), _exports_address_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("tcp_endpoint"), _exports_tcp_endpoint_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("udp_endpoint"), _exports_udp_endpoint_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("error_category"), _exports_error_category_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("error_condition"), _exports_error_condition_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("error_code"), _exports_error_code_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("bitfield"), _exports_bitfield_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("peer_request"), _exports_peer_request_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("entry"), _exports_entry_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("file_slice"), _exports_file_slice_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("file_storage"), _exports_file_storage_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("web_seed_entry"), _exports_web_seed_entry_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("torrent_info"), _exports_torrent_info_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("block_info"), _exports_block_info_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("partial_piece_info"), _exports_partial_piece_info_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("torrent_handle"), _exports_torrent_handle_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("add_torrent_params"), _exports_add_torrent_params_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("stats_metric"), _exports_stats_metric_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("alert"), _exports_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("torrent_alert"), _exports_torrent_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("peer_alert"), _exports_peer_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("tracker_alert"), _exports_tracker_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("torrent_added_alert"), _exports_torrent_added_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("torrent_removed_alert"), _exports_torrent_removed_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("read_piece_alert"), _exports_read_piece_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("file_completed_alert"), _exports_file_completed_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("file_renamed_alert"), _exports_file_renamed_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("file_rename_failed_alert"), _exports_file_rename_failed_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("performance_alert"), _exports_performance_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("state_changed_alert"), _exports_state_changed_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("tracker_error_alert"), _exports_tracker_error_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("tracker_warning_alert"), _exports_tracker_warning_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("scrape_reply_alert"), _exports_scrape_reply_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("scrape_failed_alert"), _exports_scrape_failed_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("tracker_reply_alert"), _exports_tracker_reply_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("dht_reply_alert"), _exports_dht_reply_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("tracker_announce_alert"), _exports_tracker_announce_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("hash_failed_alert"), _exports_hash_failed_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("peer_ban_alert"), _exports_peer_ban_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("peer_unsnubbed_alert"), _exports_peer_unsnubbed_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("peer_snubbed_alert"), _exports_peer_snubbed_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("peer_error_alert"), _exports_peer_error_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("peer_connect_alert"), _exports_peer_connect_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("peer_disconnected_alert"), _exports_peer_disconnected_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("invalid_request_alert"), _exports_invalid_request_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("torrent_finished_alert"), _exports_torrent_finished_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("piece_finished_alert"), _exports_piece_finished_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("request_dropped_alert"), _exports_request_dropped_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("block_timeout_alert"), _exports_block_timeout_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("block_finished_alert"), _exports_block_finished_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("block_downloading_alert"), _exports_block_downloading_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("unwanted_block_alert"), _exports_unwanted_block_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("storage_moved_alert"), _exports_storage_moved_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("storage_moved_failed_alert"), _exports_storage_moved_failed_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("torrent_deleted_alert"), _exports_torrent_deleted_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("torrent_delete_failed_alert"), _exports_torrent_delete_failed_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("save_resume_data_alert"), _exports_save_resume_data_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("save_resume_data_failed_alert"), _exports_save_resume_data_failed_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("torrent_paused_alert"), _exports_torrent_paused_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("torrent_resumed_alert"), _exports_torrent_resumed_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("torrent_checked_alert"), _exports_torrent_checked_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("url_seed_alert"), _exports_url_seed_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("file_error_alert"), _exports_file_error_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("metadata_failed_alert"), _exports_metadata_failed_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("metadata_received_alert"), _exports_metadata_received_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("udp_error_alert"), _exports_udp_error_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("external_ip_alert"), _exports_external_ip_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("listen_failed_alert"), _exports_listen_failed_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("listen_succeeded_alert"), _exports_listen_succeeded_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("portmap_error_alert"), _exports_portmap_error_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("portmap_alert"), _exports_portmap_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("portmap_log_alert"), _exports_portmap_log_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("fastresume_rejected_alert"), _exports_fastresume_rejected_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("peer_blocked_alert"), _exports_peer_blocked_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("dht_announce_alert"), _exports_dht_announce_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("dht_get_peers_alert"), _exports_dht_get_peers_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("stats_alert"), _exports_stats_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("cache_flushed_alert"), _exports_cache_flushed_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("anonymous_mode_alert"), _exports_anonymous_mode_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lsd_peer_alert"), _exports_lsd_peer_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("trackerid_alert"), _exports_trackerid_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("dht_bootstrap_alert"), _exports_dht_bootstrap_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("torrent_error_alert"), _exports_torrent_error_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("torrent_need_cert_alert"), _exports_torrent_need_cert_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("incoming_connection_alert"), _exports_incoming_connection_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("add_torrent_alert"), _exports_add_torrent_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("state_update_alert"), _exports_state_update_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("mmap_cache_alert"), _exports_mmap_cache_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("session_stats_alert"), _exports_session_stats_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("dht_error_alert"), _exports_dht_error_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("dht_immutable_item_alert"), _exports_dht_immutable_item_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("dht_mutable_item_alert"), _exports_dht_mutable_item_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("dht_put_alert"), _exports_dht_put_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("i2p_alert"), _exports_i2p_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("dht_outgoing_get_peers_alert"), _exports_dht_outgoing_get_peers_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("log_alert"), _exports_log_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("torrent_log_alert"), _exports_torrent_log_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("peer_log_alert"), _exports_peer_log_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lsd_error_alert"), _exports_lsd_error_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("dht_lookup"), _exports_dht_lookup_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("dht_routing_bucket"), _exports_dht_routing_bucket_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("dht_stats_alert"), _exports_dht_stats_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("incoming_request_alert"), _exports_incoming_request_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("dht_log_alert"), _exports_dht_log_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("dht_pkt_alert"), _exports_dht_pkt_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("dht_get_peers_reply_alert"), _exports_dht_get_peers_reply_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("dht_direct_response_alert"), _exports_dht_direct_response_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("picker_log_alert"), _exports_picker_log_alert_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("peer_info"), _exports_peer_info_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("dht_settings"), _exports_dht_settings_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("settings_pack"), _exports_settings_pack_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("peer_class_info"), _exports_peer_class_info_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("peer_class_type_filter"), _exports_peer_class_type_filter_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("session_handle"), _exports_session_handle_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("dht_state"), _exports_dht_state_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("session_proxy"), _exports_session_proxy_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("session_params"), _exports_session_params_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("session"), _exports_session_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("peer_connection_handle"), _exports_peer_connection_handle_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("bt_peer_connection_handle"), _exports_bt_peer_connection_handle_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("ip_filter"), _exports_ip_filter_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("port_filter"), _exports_port_filter_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("bdecode_node"), _exports_bdecode_node_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("create_torrent"), _exports_create_torrent_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("announce_entry"), _exports_announce_entry_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("torrent_status"), _exports_torrent_status_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("alert_notify_callback"), _exports_alert_notify_callback_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("add_files_listener"), _exports_add_files_listener_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("set_piece_hashes_listener"), _exports_set_piece_hashes_listener_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("swig_plugin"), _exports_swig_plugin_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("posix_stat_t"), _exports_posix_stat_t_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("posix_wrapper"), _exports_posix_wrapper_obj);


  /* create and register namespace objects */
  
}

#if defined(BUILDING_NODE_EXTENSION)
NODE_MODULE(libtorrent, libtorrent_initialize)
#endif
